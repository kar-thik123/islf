{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\app.html", "angular:jit:style:src\\app\\app.scss", "src/app/services/title.service.ts", "src/app/app.ts", "src/app/app.spec.ts"],
  "sourcesContent": ["<p-toast></p-toast>\r\n\r\n<div *ngIf=\"loading\" class=\"loader-overlay\">\r\n  <div class=\"loader-spinner\">\r\n    <img src=\"assets/layout/images/logo.jpg\" alt=\"Logo\" class=\"loader-logo\" />\r\n    <div class=\"loader-circle\"></div>\r\n  </div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n", "/* src/app/app.scss */\n.loader-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(255, 255, 255, 0.85);\n  z-index: 9999;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.loader-spinner {\n  position: relative;\n  width: 120px;\n  height: 120px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.loader-logo {\n  width: 64px;\n  height: 64px;\n  border-radius: 50%;\n  z-index: 2;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.12);\n}\n.loader-circle {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 100px;\n  height: 100px;\n  border: 6px solid #1976d2;\n  border-top: 6px solid transparent;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  animation: spin 1s linear infinite;\n  z-index: 1;\n}\n@keyframes spin {\n  0% {\n    transform: translate(-50%, -50%) rotate(0deg);\n  }\n  100% {\n    transform: translate(-50%, -50%) rotate(360deg);\n  }\n}\n/*# sourceMappingURL=app.css.map */\n", "import { Injectable } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\r\nimport { filter, map, mergeMap } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TitleService {\r\n  constructor(private title: Title, private router: Router, private activatedRoute: ActivatedRoute) {}\r\n\r\n  init(defaultTitle: string = 'ISLF') {\r\n    this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      map(() => {\r\n        let route = this.activatedRoute.firstChild;\r\n        let child = route;\r\n        while (child) {\r\n          if (child.firstChild) {\r\n            child = child.firstChild;\r\n            route = child;\r\n          } else {\r\n            child = null;\r\n          }\r\n        }\r\n        return route;\r\n      }),\r\n      mergeMap(route => route?.data ?? [])\r\n    ).subscribe(data => {\r\n      this.title.setTitle(data['title'] || defaultTitle);\r\n    });\r\n  }\r\n} ", "import { Component } from '@angular/core';\r\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RouterOutlet } from '@angular/router';\r\nimport { TitleService } from './services/title.service';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AppConfigurator } from './layout/components/app.configurator';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet, ToastModule, CommonModule,],\r\n  templateUrl: './app.html',\r\n  styleUrl: './app.scss'\r\n})\r\nexport class App {\r\n  protected title = 'ISLF';\r\n  public loading = false;\r\n  private lockTimeout: any = null;\r\n  private readonly LOCK_DELAY_MS = 3600000; // 1 hour\r\n\r\n  constructor(private titleService: TitleService, private router: Router) {\r\n    this.titleService.init('ISLF');\r\n    this.router.events.subscribe(event => {\r\n      if (event instanceof NavigationStart) {\r\n        this.loading = true;\r\n      } else if (\r\n        event instanceof NavigationEnd ||\r\n        event instanceof NavigationCancel ||\r\n        event instanceof NavigationError\r\n      ) {\r\n        this.loading = false;\r\n      }\r\n    });\r\n\r\n    // Listen for tab/window visibility changes\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\r\n    window.addEventListener('blur', this.handleBlur.bind(this));\r\n    window.addEventListener('focus', this.handleFocus.bind(this));\r\n  }\r\n\r\n  private handleVisibilityChange() {\r\n    if (document.hidden) {\r\n      this.startLockTimer();\r\n    } else {\r\n      this.clearLockTimer();\r\n    }\r\n  }\r\n\r\n  private handleBlur() {\r\n    this.startLockTimer();\r\n  }\r\n\r\n  private handleFocus() {\r\n    this.clearLockTimer();\r\n  }\r\n\r\n  private startLockTimer() {\r\n    if (this.lockTimeout) return;\r\n    this.lockTimeout = setTimeout(() => {\r\n      this.router.navigate(['/auth/lockscreen']);\r\n      this.lockTimeout = null;\r\n    }, this.LOCK_DELAY_MS);\r\n  }\r\n\r\n  private clearLockTimer() {\r\n    if (this.lockTimeout) {\r\n      clearTimeout(this.lockTimeout);\r\n      this.lockTimeout = null;\r\n    }\r\n  }\r\n}\r\n", "import { provideZoneChangeDetection } from '@angular/core';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { App } from './app';\r\n\r\ndescribe('App', () => {\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [App],\r\n      providers: [provideZoneChangeDetection()]\r\n    }).compileComponents();\r\n  });\r\n\r\n  it('should create the app', () => {\r\n    const fixture = TestBed.createComponent(App);\r\n    const app = fixture.componentInstance;\r\n    expect(app).toBeTruthy();\r\n  });\r\n\r\n  it('should render title', () => {\r\n    const fixture = TestBed.createComponent(App);\r\n    fixture.detectChanges();\r\n    const compiled = fixture.nativeElement as HTMLElement;\r\n    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, islf_logistics');\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": ["app_default", "init_app", "TitleService", "App", "init_app"]
}
