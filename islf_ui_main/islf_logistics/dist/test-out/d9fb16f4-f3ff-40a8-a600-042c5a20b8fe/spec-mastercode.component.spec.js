import {
  AngleDoubleLeftIcon,
  AngleDoubleRightIcon,
  AngleDownIcon,
  AngleLeftIcon,
  AngleRightIcon,
  AngleUpIcon,
  ArrowDownIcon,
  ArrowUpIcon,
  BaseComponent,
  BaseStyle,
  BlankIcon,
  CalendarIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  ChevronUpIcon,
  FilterIcon,
  FilterMatchMode,
  FilterOperator,
  FilterService,
  FilterSlashIcon,
  Footer,
  Header,
  MessageService,
  MinusIcon,
  ObjectUtils,
  OverlayService,
  PlusIcon,
  PrimeTemplate,
  Router,
  SearchIcon,
  SharedModule,
  SortAltIcon,
  SortAmountDownIcon,
  SortAmountUpAltIcon,
  SpinnerIcon,
  TimesCircleIcon,
  TimesIcon,
  ToastModule,
  TranslationKeys,
  TrashIcon,
  UniqueComponentId,
  absolutePosition,
  addClass,
  addStyle,
  animate,
  animation,
  appendChild,
  blockBodyScroll,
  contains,
  deepEquals,
  equals,
  fadeIn,
  find,
  findLastIndex,
  findSingle,
  focus,
  getFirstFocusableElement,
  getFocusableElements,
  getHeight,
  getIndex,
  getLastFocusableElement,
  getOffset,
  getOuterHeight,
  getOuterWidth,
  getSelection,
  getTargetElement,
  getViewport,
  getWidth,
  getWindowScrollLeft,
  getWindowScrollTop,
  hasClass,
  init_animations,
  init_primeng_api,
  init_primeng_base,
  init_primeng_basecomponent,
  init_primeng_icons,
  init_primeng_icons_arrowdown,
  init_primeng_icons_arrowup,
  init_primeng_icons_check,
  init_primeng_icons_filter,
  init_primeng_icons_filterslash,
  init_primeng_icons_plus,
  init_primeng_icons_sortalt,
  init_primeng_icons_sortamountdown,
  init_primeng_icons_sortamountupalt,
  init_primeng_icons_spinner,
  init_primeng_icons_trash,
  init_primeng_toast,
  init_primeng_utils,
  init_router,
  init_utils,
  isArray,
  isDate,
  isEmpty,
  isHidden,
  isNotEmpty,
  isPrintableCharacter,
  isTouchDevice,
  isVisible,
  relativePosition,
  remove,
  removeChild,
  removeClass,
  resolveFieldData,
  scrollInView,
  setAttribute,
  state,
  style,
  transition,
  trigger,
  unblockBodyScroll,
  useAnimation,
  uuid,
  zindexutils
} from "./chunk-AHT3KQPM.js";
import {
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  CommonModule,
  Component,
  ContentChild,
  ContentChildren,
  DOCUMENT,
  Directive,
  ElementRef,
  EventEmitter,
  FactoryTarget,
  Host,
  HostBinding,
  HostListener,
  HttpClient,
  Inject,
  Injectable,
  InjectionToken,
  Injector,
  Input,
  NgClass,
  NgForOf,
  NgIf,
  NgModule,
  NgStyle,
  NgSwitch,
  NgSwitchCase,
  NgTemplateOutlet,
  NgZone,
  Optional,
  Output,
  PLATFORM_ID,
  Renderer2,
  RuntimeError,
  Self,
  SkipSelf,
  Subject,
  TemplateRef,
  TestBed,
  Version,
  ViewChild,
  ViewContainerRef,
  ViewEncapsulation,
  __async,
  __commonJS,
  __decorate,
  __esm,
  __spreadProps,
  __spreadValues,
  booleanAttribute,
  computed,
  contentChild,
  core_exports,
  effect,
  fakeAsync,
  forkJoin,
  forwardRef,
  from,
  getDOM,
  init_common,
  init_core,
  init_esm,
  init_http,
  init_operators,
  init_testing,
  init_tslib_es6,
  inject,
  input,
  isPlatformBrowser,
  isPromise,
  isSubscribable,
  map,
  numberAttribute,
  of,
  signal,
  tick,
  untracked,
  ɵɵngDeclareClassMetadata,
  ɵɵngDeclareComponent,
  ɵɵngDeclareDirective,
  ɵɵngDeclareFactory,
  ɵɵngDeclareInjectable,
  ɵɵngDeclareInjector,
  ɵɵngDeclareNgModule
} from "./chunk-T6AREU7G.js";

// node_modules/@angular/forms/fesm2022/forms.mjs
function _isAndroid() {
  const userAgent = getDOM() ? getDOM().getUserAgent() : "";
  return /android (\d+)/.test(userAgent.toLowerCase());
}
function isEmptyInputValue(value) {
  return value == null || lengthOrSize(value) === 0;
}
function lengthOrSize(value) {
  if (value == null) {
    return null;
  } else if (Array.isArray(value) || typeof value === "string") {
    return value.length;
  } else if (value instanceof Set) {
    return value.size;
  }
  return null;
}
function minValidator(min) {
  return (control) => {
    if (control.value == null || min == null) {
      return null;
    }
    const value = parseFloat(control.value);
    return !isNaN(value) && value < min ? {
      "min": {
        "min": min,
        "actual": control.value
      }
    } : null;
  };
}
function maxValidator(max) {
  return (control) => {
    if (control.value == null || max == null) {
      return null;
    }
    const value = parseFloat(control.value);
    return !isNaN(value) && value > max ? {
      "max": {
        "max": max,
        "actual": control.value
      }
    } : null;
  };
}
function requiredValidator(control) {
  return isEmptyInputValue(control.value) ? {
    "required": true
  } : null;
}
function requiredTrueValidator(control) {
  return control.value === true ? null : {
    "required": true
  };
}
function emailValidator(control) {
  if (isEmptyInputValue(control.value)) {
    return null;
  }
  return EMAIL_REGEXP.test(control.value) ? null : {
    "email": true
  };
}
function minLengthValidator(minLength) {
  return (control) => {
    const length = control.value?.length ?? lengthOrSize(control.value);
    if (length === null || length === 0) {
      return null;
    }
    return length < minLength ? {
      "minlength": {
        "requiredLength": minLength,
        "actualLength": length
      }
    } : null;
  };
}
function maxLengthValidator(maxLength) {
  return (control) => {
    const length = control.value?.length ?? lengthOrSize(control.value);
    if (length !== null && length > maxLength) {
      return {
        "maxlength": {
          "requiredLength": maxLength,
          "actualLength": length
        }
      };
    }
    return null;
  };
}
function patternValidator(pattern) {
  if (!pattern) return nullValidator;
  let regex;
  let regexStr;
  if (typeof pattern === "string") {
    regexStr = "";
    if (pattern.charAt(0) !== "^") regexStr += "^";
    regexStr += pattern;
    if (pattern.charAt(pattern.length - 1) !== "$") regexStr += "$";
    regex = new RegExp(regexStr);
  } else {
    regexStr = pattern.toString();
    regex = pattern;
  }
  return (control) => {
    if (isEmptyInputValue(control.value)) {
      return null;
    }
    const value = control.value;
    return regex.test(value) ? null : {
      "pattern": {
        "requiredPattern": regexStr,
        "actualValue": value
      }
    };
  };
}
function nullValidator(control) {
  return null;
}
function isPresent(o) {
  return o != null;
}
function toObservable(value) {
  const obs = isPromise(value) ? from(value) : value;
  if ((typeof ngDevMode === "undefined" || ngDevMode) && !isSubscribable(obs)) {
    let errorMessage = `Expected async validator to return Promise or Observable.`;
    if (typeof value === "object") {
      errorMessage += " Are you using a synchronous validator where an async validator is expected?";
    }
    throw new RuntimeError(-1101, errorMessage);
  }
  return obs;
}
function mergeErrors(arrayOfErrors) {
  let res = {};
  arrayOfErrors.forEach((errors) => {
    res = errors != null ? __spreadValues(__spreadValues({}, res), errors) : res;
  });
  return Object.keys(res).length === 0 ? null : res;
}
function executeValidators(control, validators) {
  return validators.map((validator) => validator(control));
}
function isValidatorFn(validator) {
  return !validator.validate;
}
function normalizeValidators(validators) {
  return validators.map((validator) => {
    return isValidatorFn(validator) ? validator : (c) => validator.validate(c);
  });
}
function compose(validators) {
  if (!validators) return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function(control) {
    return mergeErrors(executeValidators(control, presentValidators));
  };
}
function composeValidators(validators) {
  return validators != null ? compose(normalizeValidators(validators)) : null;
}
function composeAsync(validators) {
  if (!validators) return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function(control) {
    const observables = executeValidators(control, presentValidators).map(toObservable);
    return forkJoin(observables).pipe(map(mergeErrors));
  };
}
function composeAsyncValidators(validators) {
  return validators != null ? composeAsync(normalizeValidators(validators)) : null;
}
function mergeValidators(controlValidators, dirValidator) {
  if (controlValidators === null) return [dirValidator];
  return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] : [controlValidators, dirValidator];
}
function getControlValidators(control) {
  return control._rawValidators;
}
function getControlAsyncValidators(control) {
  return control._rawAsyncValidators;
}
function makeValidatorsArray(validators) {
  if (!validators) return [];
  return Array.isArray(validators) ? validators : [validators];
}
function hasValidator(validators, validator) {
  return Array.isArray(validators) ? validators.includes(validator) : validators === validator;
}
function addValidators(validators, currentValidators) {
  const current = makeValidatorsArray(currentValidators);
  const validatorsToAdd = makeValidatorsArray(validators);
  validatorsToAdd.forEach((v) => {
    if (!hasValidator(current, v)) {
      current.push(v);
    }
  });
  return current;
}
function removeValidators(validators, currentValidators) {
  return makeValidatorsArray(currentValidators).filter((v) => !hasValidator(validators, v));
}
function controlParentException(nameOrIndex) {
  return new RuntimeError(1050, `formControlName must be used with a parent formGroup directive. You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

      ${describeFormControl(nameOrIndex)}

    Example:

    ${formControlNameExample}`);
}
function describeFormControl(nameOrIndex) {
  if (nameOrIndex == null || nameOrIndex === "") {
    return "";
  }
  const valueType = typeof nameOrIndex === "string" ? "name" : "index";
  return `Affected Form Control ${valueType}: "${nameOrIndex}"`;
}
function ngModelGroupException() {
  return new RuntimeError(1051, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents
      that also have a "form" prefix: formGroupName, formArrayName, or formGroup.

      Option 1:  Update the parent to be formGroupName (reactive form strategy)

      ${formGroupNameExample}

      Option 2: Use ngModel instead of formControlName (template-driven strategy)

      ${ngModelGroupExample}`);
}
function missingFormException() {
  return new RuntimeError(1052, `formGroup expects a FormGroup instance. Please pass one in.

      Example:

      ${formControlNameExample}`);
}
function groupParentException() {
  return new RuntimeError(1053, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup
    directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formGroupNameExample}`);
}
function arrayParentException() {
  return new RuntimeError(1054, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

      Example:

      ${formArrayNameExample}`);
}
function ngModelWarning(directiveName) {
  return `
  It looks like you're using ngModel on the same form field as ${directiveName}.
  Support for using the ngModel input property and ngModelChange event with
  reactive form directives has been deprecated in Angular v6 and will be removed
  in a future version of Angular.

  For more information on this, see our API docs here:
  https://angular.io/api/forms/${directiveName === "formControl" ? "FormControlDirective" : "FormControlName"}#use-with-ngmodel
  `;
}
function describeKey(isFormGroup, key) {
  return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;
}
function noControlsError(isFormGroup) {
  return `
    There are no form controls registered with this ${isFormGroup ? "group" : "array"} yet. If you're using ngModel,
    you may want to check next tick (e.g. use setTimeout).
  `;
}
function missingControlError(isFormGroup, key) {
  return `Cannot find form control ${describeKey(isFormGroup, key)}`;
}
function missingControlValueError(isFormGroup, key) {
  return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;
}
function pickValidators(validatorOrOpts) {
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;
}
function coerceToValidator(validator) {
  return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
function pickAsyncValidators(asyncValidator, validatorOrOpts) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (isOptionsObj(validatorOrOpts) && asyncValidator) {
      console.warn(asyncValidatorsDroppedWithOptsWarning);
    }
  }
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;
}
function coerceToAsyncValidator(asyncValidator) {
  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
}
function isOptionsObj(validatorOrOpts) {
  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === "object";
}
function assertControlPresent(parent, isGroup, key) {
  const controls = parent.controls;
  const collection = isGroup ? Object.keys(controls) : controls;
  if (!collection.length) {
    throw new RuntimeError(1e3, typeof ngDevMode === "undefined" || ngDevMode ? noControlsError(isGroup) : "");
  }
  if (!controls[key]) {
    throw new RuntimeError(1001, typeof ngDevMode === "undefined" || ngDevMode ? missingControlError(isGroup, key) : "");
  }
}
function assertAllValuesPresent(control, isGroup, value) {
  control._forEachChild((_, key) => {
    if (value[key] === void 0) {
      throw new RuntimeError(1002, typeof ngDevMode === "undefined" || ngDevMode ? missingControlValueError(isGroup, key) : "");
    }
  });
}
function validateFormGroupControls(controls) {
  const invalidKeys = Object.keys(controls).filter((key) => key.includes("."));
  if (invalidKeys.length > 0) {
    console.warn(`FormGroup keys cannot include \`.\`, please replace the keys for: ${invalidKeys.join(",")}.`);
  }
}
function controlPath(name, parent) {
  return [...parent.path, name];
}
function setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (!control) _throwError(dir, "Cannot find control with");
    if (!dir.valueAccessor) _throwMissingValueAccessorError(dir);
  }
  setUpValidators(control, dir);
  dir.valueAccessor.writeValue(control.value);
  if (control.disabled || callSetDisabledState === "always") {
    dir.valueAccessor.setDisabledState?.(control.disabled);
  }
  setUpViewChangePipeline(control, dir);
  setUpModelChangePipeline(control, dir);
  setUpBlurPipeline(control, dir);
  setUpDisabledChangeHandler(control, dir);
}
function cleanUpControl(control, dir, validateControlPresenceOnChange = true) {
  const noop = () => {
    if (validateControlPresenceOnChange && (typeof ngDevMode === "undefined" || ngDevMode)) {
      _noControlError(dir);
    }
  };
  if (dir.valueAccessor) {
    dir.valueAccessor.registerOnChange(noop);
    dir.valueAccessor.registerOnTouched(noop);
  }
  cleanUpValidators(control, dir);
  if (control) {
    dir._invokeOnDestroyCallbacks();
    control._registerOnCollectionChange(() => {
    });
  }
}
function registerOnValidatorChange(validators, onChange) {
  validators.forEach((validator) => {
    if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(onChange);
  });
}
function setUpDisabledChangeHandler(control, dir) {
  if (dir.valueAccessor.setDisabledState) {
    const onDisabledChange = (isDisabled) => {
      dir.valueAccessor.setDisabledState(isDisabled);
    };
    control.registerOnDisabledChange(onDisabledChange);
    dir._registerOnDestroy(() => {
      control._unregisterOnDisabledChange(onDisabledChange);
    });
  }
}
function setUpValidators(control, dir) {
  const validators = getControlValidators(control);
  if (dir.validator !== null) {
    control.setValidators(mergeValidators(validators, dir.validator));
  } else if (typeof validators === "function") {
    control.setValidators([validators]);
  }
  const asyncValidators = getControlAsyncValidators(control);
  if (dir.asyncValidator !== null) {
    control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));
  } else if (typeof asyncValidators === "function") {
    control.setAsyncValidators([asyncValidators]);
  }
  const onValidatorChange = () => control.updateValueAndValidity();
  registerOnValidatorChange(dir._rawValidators, onValidatorChange);
  registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);
}
function cleanUpValidators(control, dir) {
  let isControlUpdated = false;
  if (control !== null) {
    if (dir.validator !== null) {
      const validators = getControlValidators(control);
      if (Array.isArray(validators) && validators.length > 0) {
        const updatedValidators = validators.filter((validator) => validator !== dir.validator);
        if (updatedValidators.length !== validators.length) {
          isControlUpdated = true;
          control.setValidators(updatedValidators);
        }
      }
    }
    if (dir.asyncValidator !== null) {
      const asyncValidators = getControlAsyncValidators(control);
      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {
        const updatedAsyncValidators = asyncValidators.filter((asyncValidator) => asyncValidator !== dir.asyncValidator);
        if (updatedAsyncValidators.length !== asyncValidators.length) {
          isControlUpdated = true;
          control.setAsyncValidators(updatedAsyncValidators);
        }
      }
    }
  }
  const noop = () => {
  };
  registerOnValidatorChange(dir._rawValidators, noop);
  registerOnValidatorChange(dir._rawAsyncValidators, noop);
  return isControlUpdated;
}
function setUpViewChangePipeline(control, dir) {
  dir.valueAccessor.registerOnChange((newValue) => {
    control._pendingValue = newValue;
    control._pendingChange = true;
    control._pendingDirty = true;
    if (control.updateOn === "change") updateControl(control, dir);
  });
}
function setUpBlurPipeline(control, dir) {
  dir.valueAccessor.registerOnTouched(() => {
    control._pendingTouched = true;
    if (control.updateOn === "blur" && control._pendingChange) updateControl(control, dir);
    if (control.updateOn !== "submit") control.markAsTouched();
  });
}
function updateControl(control, dir) {
  if (control._pendingDirty) control.markAsDirty();
  control.setValue(control._pendingValue, {
    emitModelToViewChange: false
  });
  dir.viewToModelUpdate(control._pendingValue);
  control._pendingChange = false;
}
function setUpModelChangePipeline(control, dir) {
  const onChange = (newValue, emitModelEvent) => {
    dir.valueAccessor.writeValue(newValue);
    if (emitModelEvent) dir.viewToModelUpdate(newValue);
  };
  control.registerOnChange(onChange);
  dir._registerOnDestroy(() => {
    control._unregisterOnChange(onChange);
  });
}
function setUpFormContainer(control, dir) {
  if (control == null && (typeof ngDevMode === "undefined" || ngDevMode)) _throwError(dir, "Cannot find control with");
  setUpValidators(control, dir);
}
function cleanUpFormContainer(control, dir) {
  return cleanUpValidators(control, dir);
}
function _noControlError(dir) {
  return _throwError(dir, "There is no FormControl instance attached to form control element with");
}
function _throwError(dir, message) {
  const messageEnd = _describeControlLocation(dir);
  throw new Error(`${message} ${messageEnd}`);
}
function _describeControlLocation(dir) {
  const path = dir.path;
  if (path && path.length > 1) return `path: '${path.join(" -> ")}'`;
  if (path?.[0]) return `name: '${path}'`;
  return "unspecified name attribute";
}
function _throwMissingValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new RuntimeError(-1203, `No value accessor for form control ${loc}.`);
}
function _throwInvalidValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new RuntimeError(1200, `Value accessor was not provided as an array for form control with ${loc}. Check that the \`NG_VALUE_ACCESSOR\` token is configured as a \`multi: true\` provider.`);
}
function isPropertyUpdated(changes, viewModel) {
  if (!changes.hasOwnProperty("model")) return false;
  const change = changes["model"];
  if (change.isFirstChange()) return true;
  return !Object.is(viewModel, change.currentValue);
}
function isBuiltInAccessor(valueAccessor) {
  return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;
}
function syncPendingControls(form, directives) {
  form._syncPendingControls();
  directives.forEach((dir) => {
    const control = dir.control;
    if (control.updateOn === "submit" && control._pendingChange) {
      dir.viewToModelUpdate(control._pendingValue);
      control._pendingChange = false;
    }
  });
}
function selectValueAccessor(dir, valueAccessors) {
  if (!valueAccessors) return null;
  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === "undefined" || ngDevMode)) _throwInvalidValueAccessorError(dir);
  let defaultAccessor = void 0;
  let builtinAccessor = void 0;
  let customAccessor = void 0;
  valueAccessors.forEach((v) => {
    if (v.constructor === DefaultValueAccessor) {
      defaultAccessor = v;
    } else if (isBuiltInAccessor(v)) {
      if (builtinAccessor && (typeof ngDevMode === "undefined" || ngDevMode)) _throwError(dir, "More than one built-in value accessor matches form control with");
      builtinAccessor = v;
    } else {
      if (customAccessor && (typeof ngDevMode === "undefined" || ngDevMode)) _throwError(dir, "More than one custom value accessor matches form control with");
      customAccessor = v;
    }
  });
  if (customAccessor) return customAccessor;
  if (builtinAccessor) return builtinAccessor;
  if (defaultAccessor) return defaultAccessor;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    _throwError(dir, "No valid value accessor for form control with");
  }
  return null;
}
function removeListItem$1(list, el) {
  const index = list.indexOf(el);
  if (index > -1) list.splice(index, 1);
}
function _ngModelWarning(name, type, instance, warningConfig) {
  if (warningConfig === "never") return;
  if ((warningConfig === null || warningConfig === "once") && !type._ngModelWarningSentOnce || warningConfig === "always" && !instance._ngModelWarningSent) {
    console.warn(ngModelWarning(name));
    type._ngModelWarningSentOnce = true;
    instance._ngModelWarningSent = true;
  }
}
function removeListItem(list, el) {
  const index = list.indexOf(el);
  if (index > -1) list.splice(index, 1);
}
function isFormControlState(formState) {
  return typeof formState === "object" && formState !== null && Object.keys(formState).length === 2 && "value" in formState && "disabled" in formState;
}
function modelParentException() {
  return new RuntimeError(1350, `
    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using
    formGroup's partner directive "formControlName" instead.  Example:

    ${formControlNameExample}

    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:

    Example:

    ${ngModelWithFormGroupExample}`);
}
function formGroupNameException() {
  return new RuntimeError(1351, `
    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.

    Option 1: Use formControlName instead of ngModel (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):

    ${ngModelGroupExample}`);
}
function missingNameException() {
  return new RuntimeError(1352, `If ngModel is used within a form tag, either the name attribute must be set or the form
    control must be defined as 'standalone' in ngModelOptions.

    Example 1: <input [(ngModel)]="person.firstName" name="first">
    Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">`);
}
function modelGroupParentException() {
  return new RuntimeError(1353, `
    ngModelGroup cannot be used with a parent formGroup directive.

    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):

    ${ngModelGroupExample}`);
}
function checkParentType$1(parent) {
  if (!(parent instanceof NgModelGroup) && parent instanceof AbstractFormGroupDirective) {
    throw formGroupNameException();
  } else if (!(parent instanceof NgModelGroup) && !(parent instanceof NgForm)) {
    throw modelParentException();
  }
}
function throwNameError() {
  throw new RuntimeError(1202, `
      If you define both a name and a formControlName attribute on your radio button, their values
      must match. Ex: <input type="radio" formControlName="food" name="food">
    `);
}
function hasInvalidParent(parent) {
  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
}
function checkParentType(parent, name) {
  if (!(parent instanceof FormGroupName) && parent instanceof AbstractFormGroupDirective) {
    throw ngModelGroupException();
  } else if (!(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName)) {
    throw controlParentException(name);
  }
}
function _buildValueString$1(id, value) {
  if (id == null) return `${value}`;
  if (value && typeof value === "object") value = "Object";
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId$1(valueString) {
  return valueString.split(":")[0];
}
function _buildValueString(id, value) {
  if (id == null) return `${value}`;
  if (typeof value === "string") value = `'${value}'`;
  if (value && typeof value === "object") value = "Object";
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId(valueString) {
  return valueString.split(":")[0];
}
function toInteger(value) {
  return typeof value === "number" ? value : parseInt(value, 10);
}
function toFloat(value) {
  return typeof value === "number" ? value : parseFloat(value);
}
function isAbstractControlOptions(options) {
  return !!options && (options.asyncValidators !== void 0 || options.validators !== void 0 || options.updateOn !== void 0);
}
var BaseControlValueAccessor, BuiltInControlValueAccessor, NG_VALUE_ACCESSOR, CHECKBOX_VALUE_ACCESSOR, CheckboxControlValueAccessor, DEFAULT_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NG_VALIDATORS, NG_ASYNC_VALIDATORS, EMAIL_REGEXP, AbstractControlDirective, ControlContainer, NgControl, AbstractControlStatus, ngControlStatusHost, ngGroupStatusHost, NgControlStatus, NgControlStatusGroup, formControlNameExample, formGroupNameExample, formArrayNameExample, ngModelGroupExample, ngModelWithFormGroupExample, disabledAttrWarning, asyncValidatorsDroppedWithOptsWarning, VALID, INVALID, PENDING, DISABLED, ControlEvent, ValueChangeEvent, PristineChangeEvent, TouchedChangeEvent, StatusChangeEvent, FormSubmittedEvent, FormResetEvent, AbstractControl, FormGroup, FormRecord, CALL_SET_DISABLED_STATE, setDisabledStateDefault, formDirectiveProvider$1, resolvedPromise$1, NgForm, FormControl, isFormControl, AbstractFormGroupDirective, modelGroupProvider, NgModelGroup, formControlBinding$1, resolvedPromise, NgModel, \u0275NgNoValidate, NUMBER_VALUE_ACCESSOR, NumberValueAccessor, RADIO_VALUE_ACCESSOR, RadioControlRegistry, RadioControlValueAccessor, RANGE_VALUE_ACCESSOR, RangeValueAccessor, NG_MODEL_WITH_FORM_CONTROL_WARNING, formControlBinding, FormControlDirective, formDirectiveProvider, FormGroupDirective, formGroupNameProvider, FormGroupName, formArrayNameProvider, FormArrayName, controlNameBinding, FormControlName, SELECT_VALUE_ACCESSOR, SelectControlValueAccessor, NgSelectOption, SELECT_MULTIPLE_VALUE_ACCESSOR, SelectMultipleControlValueAccessor, \u0275NgSelectMultipleOption, AbstractValidatorDirective, MAX_VALIDATOR, MaxValidator, MIN_VALIDATOR, MinValidator, REQUIRED_VALIDATOR, CHECKBOX_REQUIRED_VALIDATOR, RequiredValidator, CheckboxRequiredValidator, EMAIL_VALIDATOR, EmailValidator, MIN_LENGTH_VALIDATOR, MinLengthValidator, MAX_LENGTH_VALIDATOR, MaxLengthValidator, PATTERN_VALIDATOR, PatternValidator, SHARED_FORM_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES, REACTIVE_DRIVEN_DIRECTIVES, \u0275InternalFormsSharedModule, FormArray, FormBuilder, NonNullableFormBuilder, UntypedFormBuilder, VERSION, FormsModule, ReactiveFormsModule;
var init_forms = __esm({
  "node_modules/@angular/forms/fesm2022/forms.mjs"() {
    "use strict";
    init_core();
    init_core();
    init_common();
    init_esm();
    init_operators();
    BaseControlValueAccessor = class _BaseControlValueAccessor {
      _renderer;
      _elementRef;
      /**
       * The registered callback function called when a change or input event occurs on the input
       * element.
       * @docs-private
       */
      onChange = (_) => {
      };
      /**
       * The registered callback function called when a blur event occurs on the input element.
       * @docs-private
       */
      onTouched = () => {
      };
      constructor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
      }
      /**
       * Helper method that sets a property on a target element using the current Renderer
       * implementation.
       * @docs-private
       */
      setProperty(key, value) {
        this._renderer.setProperty(this._elementRef.nativeElement, key, value);
      }
      /**
       * Registers a function called when the control is touched.
       * @docs-private
       */
      registerOnTouched(fn) {
        this.onTouched = fn;
      }
      /**
       * Registers a function called when the control value changes.
       * @docs-private
       */
      registerOnChange(fn) {
        this.onChange = fn;
      }
      /**
       * Sets the "disabled" property on the range input element.
       * @docs-private
       */
      setDisabledState(isDisabled) {
        this.setProperty("disabled", isDisabled);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _BaseControlValueAccessor,
        deps: [{
          token: Renderer2
        }, {
          token: ElementRef
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _BaseControlValueAccessor,
        isStandalone: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: BaseControlValueAccessor,
      decorators: [{
        type: Directive
      }],
      ctorParameters: () => [{
        type: Renderer2
      }, {
        type: ElementRef
      }]
    });
    BuiltInControlValueAccessor = class _BuiltInControlValueAccessor extends BaseControlValueAccessor {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _BuiltInControlValueAccessor,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _BuiltInControlValueAccessor,
        isStandalone: true,
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: BuiltInControlValueAccessor,
      decorators: [{
        type: Directive
      }]
    });
    NG_VALUE_ACCESSOR = new InjectionToken(ngDevMode ? "NgValueAccessor" : "");
    CHECKBOX_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => CheckboxControlValueAccessor),
      multi: true
    };
    CheckboxControlValueAccessor = class _CheckboxControlValueAccessor extends BuiltInControlValueAccessor {
      /**
       * Sets the "checked" property on the input element.
       * @docs-private
       */
      writeValue(value) {
        this.setProperty("checked", value);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _CheckboxControlValueAccessor,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _CheckboxControlValueAccessor,
        isStandalone: false,
        selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]",
        host: {
          listeners: {
            "change": "onChange($event.target.checked)",
            "blur": "onTouched()"
          }
        },
        providers: [CHECKBOX_VALUE_ACCESSOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: CheckboxControlValueAccessor,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]",
          host: {
            "(change)": "onChange($event.target.checked)",
            "(blur)": "onTouched()"
          },
          providers: [CHECKBOX_VALUE_ACCESSOR],
          standalone: false
        }]
      }]
    });
    DEFAULT_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => DefaultValueAccessor),
      multi: true
    };
    COMPOSITION_BUFFER_MODE = new InjectionToken(ngDevMode ? "CompositionEventMode" : "");
    DefaultValueAccessor = class _DefaultValueAccessor extends BaseControlValueAccessor {
      _compositionMode;
      /** Whether the user is creating a composition string (IME events). */
      _composing = false;
      constructor(renderer, elementRef, _compositionMode) {
        super(renderer, elementRef);
        this._compositionMode = _compositionMode;
        if (this._compositionMode == null) {
          this._compositionMode = !_isAndroid();
        }
      }
      /**
       * Sets the "value" property on the input element.
       * @docs-private
       */
      writeValue(value) {
        const normalizedValue = value == null ? "" : value;
        this.setProperty("value", normalizedValue);
      }
      /** @internal */
      _handleInput(value) {
        if (!this._compositionMode || this._compositionMode && !this._composing) {
          this.onChange(value);
        }
      }
      /** @internal */
      _compositionStart() {
        this._composing = true;
      }
      /** @internal */
      _compositionEnd(value) {
        this._composing = false;
        this._compositionMode && this.onChange(value);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _DefaultValueAccessor,
        deps: [{
          token: Renderer2
        }, {
          token: ElementRef
        }, {
          token: COMPOSITION_BUFFER_MODE,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _DefaultValueAccessor,
        isStandalone: false,
        selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
        host: {
          listeners: {
            "input": "$any(this)._handleInput($event.target.value)",
            "blur": "onTouched()",
            "compositionstart": "$any(this)._compositionStart()",
            "compositionend": "$any(this)._compositionEnd($event.target.value)"
          }
        },
        providers: [DEFAULT_VALUE_ACCESSOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: DefaultValueAccessor,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
          // TODO: vsavkin replace the above selector with the one below it once
          // https://github.com/angular/angular/issues/3011 is implemented
          // selector: '[ngModel],[formControl],[formControlName]',
          host: {
            "(input)": "$any(this)._handleInput($event.target.value)",
            "(blur)": "onTouched()",
            "(compositionstart)": "$any(this)._compositionStart()",
            "(compositionend)": "$any(this)._compositionEnd($event.target.value)"
          },
          providers: [DEFAULT_VALUE_ACCESSOR],
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: Renderer2
      }, {
        type: ElementRef
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [COMPOSITION_BUFFER_MODE]
        }]
      }]
    });
    NG_VALIDATORS = new InjectionToken(ngDevMode ? "NgValidators" : "");
    NG_ASYNC_VALIDATORS = new InjectionToken(ngDevMode ? "NgAsyncValidators" : "");
    EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    AbstractControlDirective = class {
      /**
       * @description
       * Reports the value of the control if it is present, otherwise null.
       */
      get value() {
        return this.control ? this.control.value : null;
      }
      /**
       * @description
       * Reports whether the control is valid. A control is considered valid if no
       * validation errors exist with the current value.
       * If the control is not present, null is returned.
       */
      get valid() {
        return this.control ? this.control.valid : null;
      }
      /**
       * @description
       * Reports whether the control is invalid, meaning that an error exists in the input value.
       * If the control is not present, null is returned.
       */
      get invalid() {
        return this.control ? this.control.invalid : null;
      }
      /**
       * @description
       * Reports whether a control is pending, meaning that async validation is occurring and
       * errors are not yet available for the input value. If the control is not present, null is
       * returned.
       */
      get pending() {
        return this.control ? this.control.pending : null;
      }
      /**
       * @description
       * Reports whether the control is disabled, meaning that the control is disabled
       * in the UI and is exempt from validation checks and excluded from aggregate
       * values of ancestor controls. If the control is not present, null is returned.
       */
      get disabled() {
        return this.control ? this.control.disabled : null;
      }
      /**
       * @description
       * Reports whether the control is enabled, meaning that the control is included in ancestor
       * calculations of validity or value. If the control is not present, null is returned.
       */
      get enabled() {
        return this.control ? this.control.enabled : null;
      }
      /**
       * @description
       * Reports the control's validation errors. If the control is not present, null is returned.
       */
      get errors() {
        return this.control ? this.control.errors : null;
      }
      /**
       * @description
       * Reports whether the control is pristine, meaning that the user has not yet changed
       * the value in the UI. If the control is not present, null is returned.
       */
      get pristine() {
        return this.control ? this.control.pristine : null;
      }
      /**
       * @description
       * Reports whether the control is dirty, meaning that the user has changed
       * the value in the UI. If the control is not present, null is returned.
       */
      get dirty() {
        return this.control ? this.control.dirty : null;
      }
      /**
       * @description
       * Reports whether the control is touched, meaning that the user has triggered
       * a `blur` event on it. If the control is not present, null is returned.
       */
      get touched() {
        return this.control ? this.control.touched : null;
      }
      /**
       * @description
       * Reports the validation status of the control. Possible values include:
       * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
       * If the control is not present, null is returned.
       */
      get status() {
        return this.control ? this.control.status : null;
      }
      /**
       * @description
       * Reports whether the control is untouched, meaning that the user has not yet triggered
       * a `blur` event on it. If the control is not present, null is returned.
       */
      get untouched() {
        return this.control ? this.control.untouched : null;
      }
      /**
       * @description
       * Returns a multicasting observable that emits a validation status whenever it is
       * calculated for the control. If the control is not present, null is returned.
       */
      get statusChanges() {
        return this.control ? this.control.statusChanges : null;
      }
      /**
       * @description
       * Returns a multicasting observable of value changes for the control that emits every time the
       * value of the control changes in the UI or programmatically.
       * If the control is not present, null is returned.
       */
      get valueChanges() {
        return this.control ? this.control.valueChanges : null;
      }
      /**
       * @description
       * Returns an array that represents the path from the top-level form to this control.
       * Each index is the string name of the control on that level.
       */
      get path() {
        return null;
      }
      /**
       * Contains the result of merging synchronous validators into a single validator function
       * (combined using `Validators.compose`).
       */
      _composedValidatorFn;
      /**
       * Contains the result of merging asynchronous validators into a single validator function
       * (combined using `Validators.composeAsync`).
       */
      _composedAsyncValidatorFn;
      /**
       * Set of synchronous validators as they were provided while calling `setValidators` function.
       * @internal
       */
      _rawValidators = [];
      /**
       * Set of asynchronous validators as they were provided while calling `setAsyncValidators`
       * function.
       * @internal
       */
      _rawAsyncValidators = [];
      /**
       * Sets synchronous validators for this directive.
       * @internal
       */
      _setValidators(validators) {
        this._rawValidators = validators || [];
        this._composedValidatorFn = composeValidators(this._rawValidators);
      }
      /**
       * Sets asynchronous validators for this directive.
       * @internal
       */
      _setAsyncValidators(validators) {
        this._rawAsyncValidators = validators || [];
        this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);
      }
      /**
       * @description
       * Synchronous validator function composed of all the synchronous validators registered with this
       * directive.
       */
      get validator() {
        return this._composedValidatorFn || null;
      }
      /**
       * @description
       * Asynchronous validator function composed of all the asynchronous validators registered with
       * this directive.
       */
      get asyncValidator() {
        return this._composedAsyncValidatorFn || null;
      }
      /*
       * The set of callbacks to be invoked when directive instance is being destroyed.
       */
      _onDestroyCallbacks = [];
      /**
       * Internal function to register callbacks that should be invoked
       * when directive instance is being destroyed.
       * @internal
       */
      _registerOnDestroy(fn) {
        this._onDestroyCallbacks.push(fn);
      }
      /**
       * Internal function to invoke all registered "on destroy" callbacks.
       * Note: calling this function also clears the list of callbacks.
       * @internal
       */
      _invokeOnDestroyCallbacks() {
        this._onDestroyCallbacks.forEach((fn) => fn());
        this._onDestroyCallbacks = [];
      }
      /**
       * @description
       * Resets the control with the provided value if the control is present.
       */
      reset(value = void 0) {
        if (this.control) this.control.reset(value);
      }
      /**
       * @description
       * Reports whether the control with the given path has the error specified.
       *
       * @param errorCode The code of the error to check
       * @param path A list of control names that designates how to move from the current control
       * to the control that should be queried for errors.
       *
       * @usageNotes
       * For example, for the following `FormGroup`:
       *
       * ```ts
       * form = new FormGroup({
       *   address: new FormGroup({ street: new FormControl() })
       * });
       * ```
       *
       * The path to the 'street' control from the root form would be 'address' -> 'street'.
       *
       * It can be provided to this method in one of two formats:
       *
       * 1. An array of string control names, e.g. `['address', 'street']`
       * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
       *
       * If no path is given, this method checks for the error on the current control.
       *
       * @returns whether the given error is present in the control at the given path.
       *
       * If the control is not present, false is returned.
       */
      hasError(errorCode, path) {
        return this.control ? this.control.hasError(errorCode, path) : false;
      }
      /**
       * @description
       * Reports error data for the control with the given path.
       *
       * @param errorCode The code of the error to check
       * @param path A list of control names that designates how to move from the current control
       * to the control that should be queried for errors.
       *
       * @usageNotes
       * For example, for the following `FormGroup`:
       *
       * ```ts
       * form = new FormGroup({
       *   address: new FormGroup({ street: new FormControl() })
       * });
       * ```
       *
       * The path to the 'street' control from the root form would be 'address' -> 'street'.
       *
       * It can be provided to this method in one of two formats:
       *
       * 1. An array of string control names, e.g. `['address', 'street']`
       * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
       *
       * @returns error data for that particular error. If the control or error is not present,
       * null is returned.
       */
      getError(errorCode, path) {
        return this.control ? this.control.getError(errorCode, path) : null;
      }
    };
    ControlContainer = class extends AbstractControlDirective {
      /**
       * @description
       * The name for the control
       */
      name;
      /**
       * @description
       * The top-level form directive for the control.
       */
      get formDirective() {
        return null;
      }
      /**
       * @description
       * The path to this group.
       */
      get path() {
        return null;
      }
    };
    NgControl = class extends AbstractControlDirective {
      /**
       * @description
       * The parent form for the control.
       *
       * @internal
       */
      _parent = null;
      /**
       * @description
       * The name for the control
       */
      name = null;
      /**
       * @description
       * The value accessor for the control
       */
      valueAccessor = null;
    };
    AbstractControlStatus = class {
      _cd;
      constructor(cd) {
        this._cd = cd;
      }
      get isTouched() {
        this._cd?.control?._touched?.();
        return !!this._cd?.control?.touched;
      }
      get isUntouched() {
        return !!this._cd?.control?.untouched;
      }
      get isPristine() {
        this._cd?.control?._pristine?.();
        return !!this._cd?.control?.pristine;
      }
      get isDirty() {
        return !!this._cd?.control?.dirty;
      }
      get isValid() {
        this._cd?.control?._status?.();
        return !!this._cd?.control?.valid;
      }
      get isInvalid() {
        return !!this._cd?.control?.invalid;
      }
      get isPending() {
        return !!this._cd?.control?.pending;
      }
      get isSubmitted() {
        this._cd?._submitted?.();
        return !!this._cd?.submitted;
      }
    };
    ngControlStatusHost = {
      "[class.ng-untouched]": "isUntouched",
      "[class.ng-touched]": "isTouched",
      "[class.ng-pristine]": "isPristine",
      "[class.ng-dirty]": "isDirty",
      "[class.ng-valid]": "isValid",
      "[class.ng-invalid]": "isInvalid",
      "[class.ng-pending]": "isPending"
    };
    ngGroupStatusHost = __spreadProps(__spreadValues({}, ngControlStatusHost), {
      "[class.ng-submitted]": "isSubmitted"
    });
    NgControlStatus = class _NgControlStatus extends AbstractControlStatus {
      constructor(cd) {
        super(cd);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NgControlStatus,
        deps: [{
          token: NgControl,
          self: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _NgControlStatus,
        isStandalone: false,
        selector: "[formControlName],[ngModel],[formControl]",
        host: {
          properties: {
            "class.ng-untouched": "isUntouched",
            "class.ng-touched": "isTouched",
            "class.ng-pristine": "isPristine",
            "class.ng-dirty": "isDirty",
            "class.ng-valid": "isValid",
            "class.ng-invalid": "isInvalid",
            "class.ng-pending": "isPending"
          }
        },
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NgControlStatus,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[formControlName],[ngModel],[formControl]",
          host: ngControlStatusHost,
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: NgControl,
        decorators: [{
          type: Self
        }]
      }]
    });
    NgControlStatusGroup = class _NgControlStatusGroup extends AbstractControlStatus {
      constructor(cd) {
        super(cd);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NgControlStatusGroup,
        deps: [{
          token: ControlContainer,
          optional: true,
          self: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _NgControlStatusGroup,
        isStandalone: false,
        selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]",
        host: {
          properties: {
            "class.ng-untouched": "isUntouched",
            "class.ng-touched": "isTouched",
            "class.ng-pristine": "isPristine",
            "class.ng-dirty": "isDirty",
            "class.ng-valid": "isValid",
            "class.ng-invalid": "isInvalid",
            "class.ng-pending": "isPending",
            "class.ng-submitted": "isSubmitted"
          }
        },
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NgControlStatusGroup,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]",
          host: ngGroupStatusHost,
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ControlContainer,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }]
      }]
    });
    formControlNameExample = `
  <div [formGroup]="myGroup">
    <input formControlName="firstName">
  </div>

  In your class:

  this.myGroup = new FormGroup({
      firstName: new FormControl()
  });`;
    formGroupNameExample = `
  <div [formGroup]="myGroup">
      <div formGroupName="person">
        <input formControlName="firstName">
      </div>
  </div>

  In your class:

  this.myGroup = new FormGroup({
      person: new FormGroup({ firstName: new FormControl() })
  });`;
    formArrayNameExample = `
  <div [formGroup]="myGroup">
    <div formArrayName="cities">
      <div *ngFor="let city of cityArray.controls; index as i">
        <input [formControlName]="i">
      </div>
    </div>
  </div>

  In your class:

  this.cityArray = new FormArray([new FormControl('SF')]);
  this.myGroup = new FormGroup({
    cities: this.cityArray
  });`;
    ngModelGroupExample = `
  <form>
      <div ngModelGroup="person">
        <input [(ngModel)]="person.name" name="firstName">
      </div>
  </form>`;
    ngModelWithFormGroupExample = `
  <div [formGroup]="myGroup">
      <input formControlName="firstName">
      <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">
  </div>
`;
    disabledAttrWarning = `
  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
  you. We recommend using this approach to avoid 'changed after checked' errors.

  Example:
  // Specify the \`disabled\` property at control creation time:
  form = new FormGroup({
    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
    last: new FormControl('Drew', Validators.required)
  });

  // Controls can also be enabled/disabled after creation:
  form.get('first')?.enable();
  form.get('last')?.disable();
`;
    asyncValidatorsDroppedWithOptsWarning = `
  It looks like you're constructing using a FormControl with both an options argument and an
  async validators argument. Mixing these arguments will cause your async validators to be dropped.
  You should either put all your validators in the options object, or in separate validators
  arguments. For example:

  // Using validators arguments
  fc = new FormControl(42, Validators.required, myAsyncValidator);

  // Using AbstractControlOptions
  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});

  // Do NOT mix them: async validators will be dropped!
  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);
`;
    VALID = "VALID";
    INVALID = "INVALID";
    PENDING = "PENDING";
    DISABLED = "DISABLED";
    ControlEvent = class {
    };
    ValueChangeEvent = class extends ControlEvent {
      value;
      source;
      constructor(value, source) {
        super();
        this.value = value;
        this.source = source;
      }
    };
    PristineChangeEvent = class extends ControlEvent {
      pristine;
      source;
      constructor(pristine, source) {
        super();
        this.pristine = pristine;
        this.source = source;
      }
    };
    TouchedChangeEvent = class extends ControlEvent {
      touched;
      source;
      constructor(touched, source) {
        super();
        this.touched = touched;
        this.source = source;
      }
    };
    StatusChangeEvent = class extends ControlEvent {
      status;
      source;
      constructor(status, source) {
        super();
        this.status = status;
        this.source = source;
      }
    };
    FormSubmittedEvent = class extends ControlEvent {
      source;
      constructor(source) {
        super();
        this.source = source;
      }
    };
    FormResetEvent = class extends ControlEvent {
      source;
      constructor(source) {
        super();
        this.source = source;
      }
    };
    AbstractControl = class {
      /** @internal */
      _pendingDirty = false;
      /**
       * Indicates that a control has its own pending asynchronous validation in progress.
       * It also stores if the control should emit events when the validation status changes.
       *
       * @internal
       */
      _hasOwnPendingAsyncValidator = null;
      /** @internal */
      _pendingTouched = false;
      /** @internal */
      _onCollectionChange = () => {
      };
      /** @internal */
      _updateOn;
      _parent = null;
      _asyncValidationSubscription;
      /**
       * Contains the result of merging synchronous validators into a single validator function
       * (combined using `Validators.compose`).
       *
       * @internal
       */
      _composedValidatorFn;
      /**
       * Contains the result of merging asynchronous validators into a single validator function
       * (combined using `Validators.composeAsync`).
       *
       * @internal
       */
      _composedAsyncValidatorFn;
      /**
       * Synchronous validators as they were provided:
       *  - in `AbstractControl` constructor
       *  - as an argument while calling `setValidators` function
       *  - while calling the setter on the `validator` field (e.g. `control.validator = validatorFn`)
       *
       * @internal
       */
      _rawValidators;
      /**
       * Asynchronous validators as they were provided:
       *  - in `AbstractControl` constructor
       *  - as an argument while calling `setAsyncValidators` function
       *  - while calling the setter on the `asyncValidator` field (e.g. `control.asyncValidator =
       * asyncValidatorFn`)
       *
       * @internal
       */
      _rawAsyncValidators;
      /**
       * The current value of the control.
       *
       * * For a `FormControl`, the current value.
       * * For an enabled `FormGroup`, the values of enabled controls as an object
       * with a key-value pair for each member of the group.
       * * For a disabled `FormGroup`, the values of all controls as an object
       * with a key-value pair for each member of the group.
       * * For a `FormArray`, the values of enabled controls as an array.
       *
       */
      value;
      /**
       * Initialize the AbstractControl instance.
       *
       * @param validators The function or array of functions that is used to determine the validity of
       *     this control synchronously.
       * @param asyncValidators The function or array of functions that is used to determine validity of
       *     this control asynchronously.
       */
      constructor(validators, asyncValidators) {
        this._assignValidators(validators);
        this._assignAsyncValidators(asyncValidators);
      }
      /**
       * Returns the function that is used to determine the validity of this control synchronously.
       * If multiple validators have been added, this will be a single composed function.
       * See `Validators.compose()` for additional information.
       */
      get validator() {
        return this._composedValidatorFn;
      }
      set validator(validatorFn) {
        this._rawValidators = this._composedValidatorFn = validatorFn;
      }
      /**
       * Returns the function that is used to determine the validity of this control asynchronously.
       * If multiple validators have been added, this will be a single composed function.
       * See `Validators.compose()` for additional information.
       */
      get asyncValidator() {
        return this._composedAsyncValidatorFn;
      }
      set asyncValidator(asyncValidatorFn) {
        this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;
      }
      /**
       * The parent control.
       */
      get parent() {
        return this._parent;
      }
      /**
       * The validation status of the control.
       *
       * @see {@link FormControlStatus}
       *
       * These status values are mutually exclusive, so a control cannot be
       * both valid AND invalid or invalid AND disabled.
       */
      get status() {
        return untracked(this.statusReactive);
      }
      set status(v) {
        untracked(() => this.statusReactive.set(v));
      }
      /** @internal */
      _status = computed(() => this.statusReactive());
      statusReactive = signal(void 0);
      /**
       * A control is `valid` when its `status` is `VALID`.
       *
       * @see {@link AbstractControl.status}
       *
       * @returns True if the control has passed all of its validation tests,
       * false otherwise.
       */
      get valid() {
        return this.status === VALID;
      }
      /**
       * A control is `invalid` when its `status` is `INVALID`.
       *
       * @see {@link AbstractControl.status}
       *
       * @returns True if this control has failed one or more of its validation checks,
       * false otherwise.
       */
      get invalid() {
        return this.status === INVALID;
      }
      /**
       * A control is `pending` when its `status` is `PENDING`.
       *
       * @see {@link AbstractControl.status}
       *
       * @returns True if this control is in the process of conducting a validation check,
       * false otherwise.
       */
      get pending() {
        return this.status == PENDING;
      }
      /**
       * A control is `disabled` when its `status` is `DISABLED`.
       *
       * Disabled controls are exempt from validation checks and
       * are not included in the aggregate value of their ancestor
       * controls.
       *
       * @see {@link AbstractControl.status}
       *
       * @returns True if the control is disabled, false otherwise.
       */
      get disabled() {
        return this.status === DISABLED;
      }
      /**
       * A control is `enabled` as long as its `status` is not `DISABLED`.
       *
       * @returns True if the control has any status other than 'DISABLED',
       * false if the status is 'DISABLED'.
       *
       * @see {@link AbstractControl.status}
       *
       */
      get enabled() {
        return this.status !== DISABLED;
      }
      /**
       * An object containing any errors generated by failing validation,
       * or null if there are no errors.
       */
      errors;
      /**
       * A control is `pristine` if the user has not yet changed
       * the value in the UI.
       *
       * @returns True if the user has not yet changed the value in the UI; compare `dirty`.
       * Programmatic changes to a control's value do not mark it dirty.
       */
      get pristine() {
        return untracked(this.pristineReactive);
      }
      set pristine(v) {
        untracked(() => this.pristineReactive.set(v));
      }
      /** @internal */
      _pristine = computed(() => this.pristineReactive());
      pristineReactive = signal(true);
      /**
       * A control is `dirty` if the user has changed the value
       * in the UI.
       *
       * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
       * Programmatic changes to a control's value do not mark it dirty.
       */
      get dirty() {
        return !this.pristine;
      }
      /**
       * True if the control is marked as `touched`.
       *
       * A control is marked `touched` once the user has triggered
       * a `blur` event on it.
       */
      get touched() {
        return untracked(this.touchedReactive);
      }
      set touched(v) {
        untracked(() => this.touchedReactive.set(v));
      }
      /** @internal */
      _touched = computed(() => this.touchedReactive());
      touchedReactive = signal(false);
      /**
       * True if the control has not been marked as touched
       *
       * A control is `untouched` if the user has not yet triggered
       * a `blur` event on it.
       */
      get untouched() {
        return !this.touched;
      }
      /**
       * Exposed as observable, see below.
       *
       * @internal
       */
      _events = new Subject();
      /**
       * A multicasting observable that emits an event every time the state of the control changes.
       * It emits for value, status, pristine or touched changes.
       *
       * **Note**: On value change, the emit happens right after a value of this control is updated. The
       * value of a parent control (for example if this FormControl is a part of a FormGroup) is updated
       * later, so accessing a value of a parent control (using the `value` property) from the callback
       * of this event might result in getting a value that has not been updated yet. Subscribe to the
       * `events` of the parent control instead.
       * For other event types, the events are emitted after the parent control has been updated.
       *
       */
      events = this._events.asObservable();
      /**
       * A multicasting observable that emits an event every time the value of the control changes, in
       * the UI or programmatically. It also emits an event each time you call enable() or disable()
       * without passing along {emitEvent: false} as a function argument.
       *
       * **Note**: the emit happens right after a value of this control is updated. The value of a
       * parent control (for example if this FormControl is a part of a FormGroup) is updated later, so
       * accessing a value of a parent control (using the `value` property) from the callback of this
       * event might result in getting a value that has not been updated yet. Subscribe to the
       * `valueChanges` event of the parent control instead.
       */
      valueChanges;
      /**
       * A multicasting observable that emits an event every time the validation `status` of the control
       * recalculates.
       *
       * @see {@link FormControlStatus}
       * @see {@link AbstractControl.status}
       */
      statusChanges;
      /**
       * Reports the update strategy of the `AbstractControl` (meaning
       * the event on which the control updates itself).
       * Possible values: `'change'` | `'blur'` | `'submit'`
       * Default value: `'change'`
       */
      get updateOn() {
        return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : "change";
      }
      /**
       * Sets the synchronous validators that are active on this control.  Calling
       * this overwrites any existing synchronous validators.
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       * If you want to add a new validator without affecting existing ones, consider
       * using `addValidators()` method instead.
       */
      setValidators(validators) {
        this._assignValidators(validators);
      }
      /**
       * Sets the asynchronous validators that are active on this control. Calling this
       * overwrites any existing asynchronous validators.
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       * If you want to add a new validator without affecting existing ones, consider
       * using `addAsyncValidators()` method instead.
       */
      setAsyncValidators(validators) {
        this._assignAsyncValidators(validators);
      }
      /**
       * Add a synchronous validator or validators to this control, without affecting other validators.
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       * Adding a validator that already exists will have no effect. If duplicate validator functions
       * are present in the `validators` array, only the first instance would be added to a form
       * control.
       *
       * @param validators The new validator function or functions to add to this control.
       */
      addValidators(validators) {
        this.setValidators(addValidators(validators, this._rawValidators));
      }
      /**
       * Add an asynchronous validator or validators to this control, without affecting other
       * validators.
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       * Adding a validator that already exists will have no effect.
       *
       * @param validators The new asynchronous validator function or functions to add to this control.
       */
      addAsyncValidators(validators) {
        this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));
      }
      /**
       * Remove a synchronous validator from this control, without affecting other validators.
       * Validators are compared by function reference; you must pass a reference to the exact same
       * validator function as the one that was originally set. If a provided validator is not found,
       * it is ignored.
       *
       * @usageNotes
       *
       * ### Reference to a ValidatorFn
       *
       * ```
       * // Reference to the RequiredValidator
       * const ctrl = new FormControl<string | null>('', Validators.required);
       * ctrl.removeValidators(Validators.required);
       *
       * // Reference to anonymous function inside MinValidator
       * const minValidator = Validators.min(3);
       * const ctrl = new FormControl<string | null>('', minValidator);
       * expect(ctrl.hasValidator(minValidator)).toEqual(true)
       * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
       *
       * ctrl.removeValidators(minValidator);
       * ```
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       * @param validators The validator or validators to remove.
       */
      removeValidators(validators) {
        this.setValidators(removeValidators(validators, this._rawValidators));
      }
      /**
       * Remove an asynchronous validator from this control, without affecting other validators.
       * Validators are compared by function reference; you must pass a reference to the exact same
       * validator function as the one that was originally set. If a provided validator is not found, it
       * is ignored.
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       * @param validators The asynchronous validator or validators to remove.
       */
      removeAsyncValidators(validators) {
        this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));
      }
      /**
       * Check whether a synchronous validator function is present on this control. The provided
       * validator must be a reference to the exact same function that was provided.
       *
       * @usageNotes
       *
       * ### Reference to a ValidatorFn
       *
       * ```
       * // Reference to the RequiredValidator
       * const ctrl = new FormControl<number | null>(0, Validators.required);
       * expect(ctrl.hasValidator(Validators.required)).toEqual(true)
       *
       * // Reference to anonymous function inside MinValidator
       * const minValidator = Validators.min(3);
       * const ctrl = new FormControl<number | null>(0, minValidator);
       * expect(ctrl.hasValidator(minValidator)).toEqual(true)
       * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
       * ```
       *
       * @param validator The validator to check for presence. Compared by function reference.
       * @returns Whether the provided validator was found on this control.
       */
      hasValidator(validator) {
        return hasValidator(this._rawValidators, validator);
      }
      /**
       * Check whether an asynchronous validator function is present on this control. The provided
       * validator must be a reference to the exact same function that was provided.
       *
       * @param validator The asynchronous validator to check for presence. Compared by function
       *     reference.
       * @returns Whether the provided asynchronous validator was found on this control.
       */
      hasAsyncValidator(validator) {
        return hasValidator(this._rawAsyncValidators, validator);
      }
      /**
       * Empties out the synchronous validator list.
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       */
      clearValidators() {
        this.validator = null;
      }
      /**
       * Empties out the async validator list.
       *
       * When you add or remove a validator at run time, you must call
       * `updateValueAndValidity()` for the new validation to take effect.
       *
       */
      clearAsyncValidators() {
        this.asyncValidator = null;
      }
      markAsTouched(opts = {}) {
        const changed = this.touched === false;
        this.touched = true;
        const sourceControl = opts.sourceControl ?? this;
        if (this._parent && !opts.onlySelf) {
          this._parent.markAsTouched(__spreadProps(__spreadValues({}, opts), {
            sourceControl
          }));
        }
        if (changed && opts.emitEvent !== false) {
          this._events.next(new TouchedChangeEvent(true, sourceControl));
        }
      }
      /**
       * Marks the control and all its descendant controls as `touched`.
       * @see {@link markAsTouched()}
       *
       * @param opts Configuration options that determine how the control propagates changes
       * and emits events after marking is applied.
       * * `emitEvent`: When true or not supplied (the default), the `events`
       * observable emits a `TouchedChangeEvent` with the `touched` property being `true`.
       * When false, no events are emitted.
       */
      markAllAsTouched(opts = {}) {
        this.markAsTouched({
          onlySelf: true,
          emitEvent: opts.emitEvent,
          sourceControl: this
        });
        this._forEachChild((control) => control.markAllAsTouched(opts));
      }
      markAsUntouched(opts = {}) {
        const changed = this.touched === true;
        this.touched = false;
        this._pendingTouched = false;
        const sourceControl = opts.sourceControl ?? this;
        this._forEachChild((control) => {
          control.markAsUntouched({
            onlySelf: true,
            emitEvent: opts.emitEvent,
            sourceControl
          });
        });
        if (this._parent && !opts.onlySelf) {
          this._parent._updateTouched(opts, sourceControl);
        }
        if (changed && opts.emitEvent !== false) {
          this._events.next(new TouchedChangeEvent(false, sourceControl));
        }
      }
      markAsDirty(opts = {}) {
        const changed = this.pristine === true;
        this.pristine = false;
        const sourceControl = opts.sourceControl ?? this;
        if (this._parent && !opts.onlySelf) {
          this._parent.markAsDirty(__spreadProps(__spreadValues({}, opts), {
            sourceControl
          }));
        }
        if (changed && opts.emitEvent !== false) {
          this._events.next(new PristineChangeEvent(false, sourceControl));
        }
      }
      markAsPristine(opts = {}) {
        const changed = this.pristine === false;
        this.pristine = true;
        this._pendingDirty = false;
        const sourceControl = opts.sourceControl ?? this;
        this._forEachChild((control) => {
          control.markAsPristine({
            onlySelf: true,
            emitEvent: opts.emitEvent
          });
        });
        if (this._parent && !opts.onlySelf) {
          this._parent._updatePristine(opts, sourceControl);
        }
        if (changed && opts.emitEvent !== false) {
          this._events.next(new PristineChangeEvent(true, sourceControl));
        }
      }
      markAsPending(opts = {}) {
        this.status = PENDING;
        const sourceControl = opts.sourceControl ?? this;
        if (opts.emitEvent !== false) {
          this._events.next(new StatusChangeEvent(this.status, sourceControl));
          this.statusChanges.emit(this.status);
        }
        if (this._parent && !opts.onlySelf) {
          this._parent.markAsPending(__spreadProps(__spreadValues({}, opts), {
            sourceControl
          }));
        }
      }
      disable(opts = {}) {
        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
        this.status = DISABLED;
        this.errors = null;
        this._forEachChild((control) => {
          control.disable(__spreadProps(__spreadValues({}, opts), {
            onlySelf: true
          }));
        });
        this._updateValue();
        const sourceControl = opts.sourceControl ?? this;
        if (opts.emitEvent !== false) {
          this._events.next(new ValueChangeEvent(this.value, sourceControl));
          this._events.next(new StatusChangeEvent(this.status, sourceControl));
          this.valueChanges.emit(this.value);
          this.statusChanges.emit(this.status);
        }
        this._updateAncestors(__spreadProps(__spreadValues({}, opts), {
          skipPristineCheck
        }), this);
        this._onDisabledChange.forEach((changeFn) => changeFn(true));
      }
      /**
       * Enables the control. This means the control is included in validation checks and
       * the aggregate value of its parent. Its status recalculates based on its value and
       * its validators.
       *
       * By default, if the control has children, all children are enabled.
       *
       * @see {@link AbstractControl.status}
       *
       * @param opts Configure options that control how the control propagates changes and
       * emits events when marked as untouched
       * * `onlySelf`: When true, mark only this control. When false or not supplied,
       * marks all direct ancestors. Default is false.
       * * `emitEvent`: When true or not supplied (the default), the `statusChanges`,
       * `valueChanges` and `events`
       * observables emit events with the latest status and value when the control is enabled.
       * When false, no events are emitted.
       */
      enable(opts = {}) {
        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
        this.status = VALID;
        this._forEachChild((control) => {
          control.enable(__spreadProps(__spreadValues({}, opts), {
            onlySelf: true
          }));
        });
        this.updateValueAndValidity({
          onlySelf: true,
          emitEvent: opts.emitEvent
        });
        this._updateAncestors(__spreadProps(__spreadValues({}, opts), {
          skipPristineCheck
        }), this);
        this._onDisabledChange.forEach((changeFn) => changeFn(false));
      }
      _updateAncestors(opts, sourceControl) {
        if (this._parent && !opts.onlySelf) {
          this._parent.updateValueAndValidity(opts);
          if (!opts.skipPristineCheck) {
            this._parent._updatePristine({}, sourceControl);
          }
          this._parent._updateTouched({}, sourceControl);
        }
      }
      /**
       * Sets the parent of the control
       *
       * @param parent The new parent.
       */
      setParent(parent) {
        this._parent = parent;
      }
      /**
       * The raw value of this control. For most control implementations, the raw value will include
       * disabled children.
       */
      getRawValue() {
        return this.value;
      }
      updateValueAndValidity(opts = {}) {
        this._setInitialStatus();
        this._updateValue();
        if (this.enabled) {
          const shouldHaveEmitted = this._cancelExistingSubscription();
          this.errors = this._runValidator();
          this.status = this._calculateStatus();
          if (this.status === VALID || this.status === PENDING) {
            this._runAsyncValidator(shouldHaveEmitted, opts.emitEvent);
          }
        }
        const sourceControl = opts.sourceControl ?? this;
        if (opts.emitEvent !== false) {
          this._events.next(new ValueChangeEvent(this.value, sourceControl));
          this._events.next(new StatusChangeEvent(this.status, sourceControl));
          this.valueChanges.emit(this.value);
          this.statusChanges.emit(this.status);
        }
        if (this._parent && !opts.onlySelf) {
          this._parent.updateValueAndValidity(__spreadProps(__spreadValues({}, opts), {
            sourceControl
          }));
        }
      }
      /** @internal */
      _updateTreeValidity(opts = {
        emitEvent: true
      }) {
        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));
        this.updateValueAndValidity({
          onlySelf: true,
          emitEvent: opts.emitEvent
        });
      }
      _setInitialStatus() {
        this.status = this._allControlsDisabled() ? DISABLED : VALID;
      }
      _runValidator() {
        return this.validator ? this.validator(this) : null;
      }
      _runAsyncValidator(shouldHaveEmitted, emitEvent) {
        if (this.asyncValidator) {
          this.status = PENDING;
          this._hasOwnPendingAsyncValidator = {
            emitEvent: emitEvent !== false
          };
          const obs = toObservable(this.asyncValidator(this));
          this._asyncValidationSubscription = obs.subscribe((errors) => {
            this._hasOwnPendingAsyncValidator = null;
            this.setErrors(errors, {
              emitEvent,
              shouldHaveEmitted
            });
          });
        }
      }
      _cancelExistingSubscription() {
        if (this._asyncValidationSubscription) {
          this._asyncValidationSubscription.unsubscribe();
          const shouldHaveEmitted = this._hasOwnPendingAsyncValidator?.emitEvent ?? false;
          this._hasOwnPendingAsyncValidator = null;
          return shouldHaveEmitted;
        }
        return false;
      }
      setErrors(errors, opts = {}) {
        this.errors = errors;
        this._updateControlsErrors(opts.emitEvent !== false, this, opts.shouldHaveEmitted);
      }
      /**
       * Retrieves a child control given the control's name or path.
       *
       * @param path A dot-delimited string or array of string/number values that define the path to the
       * control. If a string is provided, passing it as a string literal will result in improved type
       * information. Likewise, if an array is provided, passing it `as const` will cause improved type
       * information to be available.
       *
       * @usageNotes
       * ### Retrieve a nested control
       *
       * For example, to get a `name` control nested within a `person` sub-group:
       *
       * * `this.form.get('person.name');`
       *
       * -OR-
       *
       * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings
       *
       * ### Retrieve a control in a FormArray
       *
       * When accessing an element inside a FormArray, you can use an element index.
       * For example, to get a `price` control from the first element in an `items` array you can use:
       *
       * * `this.form.get('items.0.price');`
       *
       * -OR-
       *
       * * `this.form.get(['items', 0, 'price']);`
       */
      get(path) {
        let currPath = path;
        if (currPath == null) return null;
        if (!Array.isArray(currPath)) currPath = currPath.split(".");
        if (currPath.length === 0) return null;
        return currPath.reduce((control, name) => control && control._find(name), this);
      }
      /**
       * @description
       * Reports error data for the control with the given path.
       *
       * @param errorCode The code of the error to check
       * @param path A list of control names that designates how to move from the current control
       * to the control that should be queried for errors.
       *
       * @usageNotes
       * For example, for the following `FormGroup`:
       *
       * ```ts
       * form = new FormGroup({
       *   address: new FormGroup({ street: new FormControl() })
       * });
       * ```
       *
       * The path to the 'street' control from the root form would be 'address' -> 'street'.
       *
       * It can be provided to this method in one of two formats:
       *
       * 1. An array of string control names, e.g. `['address', 'street']`
       * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
       *
       * @returns error data for that particular error. If the control or error is not present,
       * null is returned.
       */
      getError(errorCode, path) {
        const control = path ? this.get(path) : this;
        return control && control.errors ? control.errors[errorCode] : null;
      }
      /**
       * @description
       * Reports whether the control with the given path has the error specified.
       *
       * @param errorCode The code of the error to check
       * @param path A list of control names that designates how to move from the current control
       * to the control that should be queried for errors.
       *
       * @usageNotes
       * For example, for the following `FormGroup`:
       *
       * ```ts
       * form = new FormGroup({
       *   address: new FormGroup({ street: new FormControl() })
       * });
       * ```
       *
       * The path to the 'street' control from the root form would be 'address' -> 'street'.
       *
       * It can be provided to this method in one of two formats:
       *
       * 1. An array of string control names, e.g. `['address', 'street']`
       * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
       *
       * If no path is given, this method checks for the error on the current control.
       *
       * @returns whether the given error is present in the control at the given path.
       *
       * If the control is not present, false is returned.
       */
      hasError(errorCode, path) {
        return !!this.getError(errorCode, path);
      }
      /**
       * Retrieves the top-level ancestor of this control.
       */
      get root() {
        let x = this;
        while (x._parent) {
          x = x._parent;
        }
        return x;
      }
      /** @internal */
      _updateControlsErrors(emitEvent, changedControl, shouldHaveEmitted) {
        this.status = this._calculateStatus();
        if (emitEvent) {
          this.statusChanges.emit(this.status);
        }
        if (emitEvent || shouldHaveEmitted) {
          this._events.next(new StatusChangeEvent(this.status, changedControl));
        }
        if (this._parent) {
          this._parent._updateControlsErrors(emitEvent, changedControl, shouldHaveEmitted);
        }
      }
      /** @internal */
      _initObservables() {
        this.valueChanges = new EventEmitter();
        this.statusChanges = new EventEmitter();
      }
      _calculateStatus() {
        if (this._allControlsDisabled()) return DISABLED;
        if (this.errors) return INVALID;
        if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;
        if (this._anyControlsHaveStatus(INVALID)) return INVALID;
        return VALID;
      }
      /** @internal */
      _anyControlsHaveStatus(status) {
        return this._anyControls((control) => control.status === status);
      }
      /** @internal */
      _anyControlsDirty() {
        return this._anyControls((control) => control.dirty);
      }
      /** @internal */
      _anyControlsTouched() {
        return this._anyControls((control) => control.touched);
      }
      /** @internal */
      _updatePristine(opts, changedControl) {
        const newPristine = !this._anyControlsDirty();
        const changed = this.pristine !== newPristine;
        this.pristine = newPristine;
        if (this._parent && !opts.onlySelf) {
          this._parent._updatePristine(opts, changedControl);
        }
        if (changed) {
          this._events.next(new PristineChangeEvent(this.pristine, changedControl));
        }
      }
      /** @internal */
      _updateTouched(opts = {}, changedControl) {
        this.touched = this._anyControlsTouched();
        this._events.next(new TouchedChangeEvent(this.touched, changedControl));
        if (this._parent && !opts.onlySelf) {
          this._parent._updateTouched(opts, changedControl);
        }
      }
      /** @internal */
      _onDisabledChange = [];
      /** @internal */
      _registerOnCollectionChange(fn) {
        this._onCollectionChange = fn;
      }
      /** @internal */
      _setUpdateStrategy(opts) {
        if (isOptionsObj(opts) && opts.updateOn != null) {
          this._updateOn = opts.updateOn;
        }
      }
      /**
       * Check to see if parent has been marked artificially dirty.
       *
       * @internal
       */
      _parentMarkedDirty(onlySelf) {
        const parentDirty = this._parent && this._parent.dirty;
        return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();
      }
      /** @internal */
      _find(name) {
        return null;
      }
      /**
       * Internal implementation of the `setValidators` method. Needs to be separated out into a
       * different method, because it is called in the constructor and it can break cases where
       * a control is extended.
       */
      _assignValidators(validators) {
        this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;
        this._composedValidatorFn = coerceToValidator(this._rawValidators);
      }
      /**
       * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a
       * different method, because it is called in the constructor and it can break cases where
       * a control is extended.
       */
      _assignAsyncValidators(validators) {
        this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;
        this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);
      }
    };
    FormGroup = class extends AbstractControl {
      /**
       * Creates a new `FormGroup` instance.
       *
       * @param controls A collection of child controls. The key for each child is the name
       * under which it is registered.
       *
       * @param validatorOrOpts A synchronous validator function, or an array of
       * such functions, or an `AbstractControlOptions` object that contains validation functions
       * and a validation trigger.
       *
       * @param asyncValidator A single async validator or array of async validator functions
       *
       */
      constructor(controls, validatorOrOpts, asyncValidator) {
        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
        (typeof ngDevMode === "undefined" || ngDevMode) && validateFormGroupControls(controls);
        this.controls = controls;
        this._initObservables();
        this._setUpdateStrategy(validatorOrOpts);
        this._setUpControls();
        this.updateValueAndValidity({
          onlySelf: true,
          // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
          // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,
          // so we set `emitEvent` to `true` to allow that during the control creation process.
          emitEvent: !!this.asyncValidator
        });
      }
      controls;
      registerControl(name, control) {
        if (this.controls[name]) return this.controls[name];
        this.controls[name] = control;
        control.setParent(this);
        control._registerOnCollectionChange(this._onCollectionChange);
        return control;
      }
      addControl(name, control, options = {}) {
        this.registerControl(name, control);
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
        this._onCollectionChange();
      }
      /**
       * Remove a control from this group. In a strongly-typed group, required controls cannot be
       * removed.
       *
       * This method also updates the value and validity of the control.
       *
       * @param name The control name to remove from the collection
       * @param options Specifies whether this FormGroup instance should emit events after a
       *     control is removed.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when the control is
       * removed. When false, no events are emitted.
       */
      removeControl(name, options = {}) {
        if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {
        });
        delete this.controls[name];
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
        this._onCollectionChange();
      }
      setControl(name, control, options = {}) {
        if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {
        });
        delete this.controls[name];
        if (control) this.registerControl(name, control);
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
        this._onCollectionChange();
      }
      contains(controlName) {
        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
      }
      /**
       * Sets the value of the `FormGroup`. It accepts an object that matches
       * the structure of the group, with control names as keys.
       *
       * @usageNotes
       * ### Set the complete value for the form group
       *
       * ```ts
       * const form = new FormGroup({
       *   first: new FormControl(),
       *   last: new FormControl()
       * });
       *
       * console.log(form.value);   // {first: null, last: null}
       *
       * form.setValue({first: 'Nancy', last: 'Drew'});
       * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
       * ```
       *
       * @throws When strict checks fail, such as setting the value of a control
       * that doesn't exist or if you exclude a value of a control that does exist.
       *
       * @param value The new value for the control that matches the structure of the group.
       * @param options Configuration options that determine how the control propagates changes
       * and emits events after the value changes.
       * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
       * updateValueAndValidity} method.
       *
       * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
       * false.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges`
       * observables emit events with the latest status and value when the control value is updated.
       * When false, no events are emitted.
       */
      setValue(value, options = {}) {
        assertAllValuesPresent(this, true, value);
        Object.keys(value).forEach((name) => {
          assertControlPresent(this, true, name);
          this.controls[name].setValue(value[name], {
            onlySelf: true,
            emitEvent: options.emitEvent
          });
        });
        this.updateValueAndValidity(options);
      }
      /**
       * Patches the value of the `FormGroup`. It accepts an object with control
       * names as keys, and does its best to match the values to the correct controls
       * in the group.
       *
       * It accepts both super-sets and sub-sets of the group without throwing an error.
       *
       * @usageNotes
       * ### Patch the value for a form group
       *
       * ```ts
       * const form = new FormGroup({
       *    first: new FormControl(),
       *    last: new FormControl()
       * });
       * console.log(form.value);   // {first: null, last: null}
       *
       * form.patchValue({first: 'Nancy'});
       * console.log(form.value);   // {first: 'Nancy', last: null}
       * ```
       *
       * @param value The object that matches the structure of the group.
       * @param options Configuration options that determine how the control propagates changes and
       * emits events after the value is patched.
       * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
       * true.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when the control value
       * is updated. When false, no events are emitted. The configuration options are passed to
       * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
       */
      patchValue(value, options = {}) {
        if (value == null) return;
        Object.keys(value).forEach((name) => {
          const control = this.controls[name];
          if (control) {
            control.patchValue(
              /* Guaranteed to be present, due to the outer forEach. */
              value[name],
              {
                onlySelf: true,
                emitEvent: options.emitEvent
              }
            );
          }
        });
        this.updateValueAndValidity(options);
      }
      /**
       * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets
       * the value of all descendants to their default values, or null if no defaults were provided.
       *
       * You reset to a specific form state by passing in a map of states
       * that matches the structure of your form, with control names as keys. The state
       * is a standalone value or a form state object with both a value and a disabled
       * status.
       *
       * @param value Resets the control with an initial value,
       * or an object that defines the initial value and disabled state.
       *
       * @param options Configuration options that determine how the control propagates changes
       * and emits events when the group is reset.
       * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
       * false.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges`
       * observables emit events with the latest status and value when the control is reset.
       * When false, no events are emitted.
       * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
       * updateValueAndValidity} method.
       *
       * @usageNotes
       *
       * ### Reset the form group values
       *
       * ```ts
       * const form = new FormGroup({
       *   first: new FormControl('first name'),
       *   last: new FormControl('last name')
       * });
       *
       * console.log(form.value);  // {first: 'first name', last: 'last name'}
       *
       * form.reset({ first: 'name', last: 'last name' });
       *
       * console.log(form.value);  // {first: 'name', last: 'last name'}
       * ```
       *
       * ### Reset the form group values and disabled status
       *
       * ```ts
       * const form = new FormGroup({
       *   first: new FormControl('first name'),
       *   last: new FormControl('last name')
       * });
       *
       * form.reset({
       *   first: {value: 'name', disabled: true},
       *   last: 'last'
       * });
       *
       * console.log(form.value);  // {last: 'last'}
       * console.log(form.get('first').status);  // 'DISABLED'
       * ```
       */
      reset(value = {}, options = {}) {
        this._forEachChild((control, name) => {
          control.reset(value ? value[name] : null, {
            onlySelf: true,
            emitEvent: options.emitEvent
          });
        });
        this._updatePristine(options, this);
        this._updateTouched(options, this);
        this.updateValueAndValidity(options);
      }
      /**
       * The aggregate value of the `FormGroup`, including any disabled controls.
       *
       * Retrieves all values regardless of disabled status.
       */
      getRawValue() {
        return this._reduceChildren({}, (acc, control, name) => {
          acc[name] = control.getRawValue();
          return acc;
        });
      }
      /** @internal */
      _syncPendingControls() {
        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {
          return child._syncPendingControls() ? true : updated;
        });
        if (subtreeUpdated) this.updateValueAndValidity({
          onlySelf: true
        });
        return subtreeUpdated;
      }
      /** @internal */
      _forEachChild(cb) {
        Object.keys(this.controls).forEach((key) => {
          const control = this.controls[key];
          control && cb(control, key);
        });
      }
      /** @internal */
      _setUpControls() {
        this._forEachChild((control) => {
          control.setParent(this);
          control._registerOnCollectionChange(this._onCollectionChange);
        });
      }
      /** @internal */
      _updateValue() {
        this.value = this._reduceValue();
      }
      /** @internal */
      _anyControls(condition) {
        for (const [controlName, control] of Object.entries(this.controls)) {
          if (this.contains(controlName) && condition(control)) {
            return true;
          }
        }
        return false;
      }
      /** @internal */
      _reduceValue() {
        let acc = {};
        return this._reduceChildren(acc, (acc2, control, name) => {
          if (control.enabled || this.disabled) {
            acc2[name] = control.value;
          }
          return acc2;
        });
      }
      /** @internal */
      _reduceChildren(initValue, fn) {
        let res = initValue;
        this._forEachChild((control, name) => {
          res = fn(res, control, name);
        });
        return res;
      }
      /** @internal */
      _allControlsDisabled() {
        for (const controlName of Object.keys(this.controls)) {
          if (this.controls[controlName].enabled) {
            return false;
          }
        }
        return Object.keys(this.controls).length > 0 || this.disabled;
      }
      /** @internal */
      _find(name) {
        return this.controls.hasOwnProperty(name) ? this.controls[name] : null;
      }
    };
    FormRecord = class extends FormGroup {
    };
    CALL_SET_DISABLED_STATE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "CallSetDisabledState" : "", {
      providedIn: "root",
      factory: () => setDisabledStateDefault
    });
    setDisabledStateDefault = "always";
    formDirectiveProvider$1 = {
      provide: ControlContainer,
      useExisting: forwardRef(() => NgForm)
    };
    resolvedPromise$1 = (() => Promise.resolve())();
    NgForm = class _NgForm extends ControlContainer {
      callSetDisabledState;
      /**
       * @description
       * Returns whether the form submission has been triggered.
       */
      get submitted() {
        return untracked(this.submittedReactive);
      }
      /** @internal */
      _submitted = computed(() => this.submittedReactive());
      submittedReactive = signal(false);
      _directives = /* @__PURE__ */ new Set();
      /**
       * @description
       * The `FormGroup` instance created for this form.
       */
      form;
      /**
       * @description
       * Event emitter for the "ngSubmit" event
       */
      ngSubmit = new EventEmitter();
      /**
       * @description
       * Tracks options for the `NgForm` instance.
       *
       * **updateOn**: Sets the default `updateOn` value for all child `NgModels` below it
       * unless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.
       * Possible values: `'change'` | `'blur'` | `'submit'`.
       *
       */
      options;
      constructor(validators, asyncValidators, callSetDisabledState) {
        super();
        this.callSetDisabledState = callSetDisabledState;
        this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
      }
      /** @docs-private */
      ngAfterViewInit() {
        this._setUpdateStrategy();
      }
      /**
       * @description
       * The directive instance.
       */
      get formDirective() {
        return this;
      }
      /**
       * @description
       * The internal `FormGroup` instance.
       */
      get control() {
        return this.form;
      }
      /**
       * @description
       * Returns an array representing the path to this group. Because this directive
       * always lives at the top level of a form, it is always an empty array.
       */
      get path() {
        return [];
      }
      /**
       * @description
       * Returns a map of the controls in this group.
       */
      get controls() {
        return this.form.controls;
      }
      /**
       * @description
       * Method that sets up the control directive in this group, re-calculates its value
       * and validity, and adds the instance to the internal list of directives.
       *
       * @param dir The `NgModel` directive instance.
       */
      addControl(dir) {
        resolvedPromise$1.then(() => {
          const container = this._findContainer(dir.path);
          dir.control = container.registerControl(dir.name, dir.control);
          setUpControl(dir.control, dir, this.callSetDisabledState);
          dir.control.updateValueAndValidity({
            emitEvent: false
          });
          this._directives.add(dir);
        });
      }
      /**
       * @description
       * Retrieves the `FormControl` instance from the provided `NgModel` directive.
       *
       * @param dir The `NgModel` directive instance.
       */
      getControl(dir) {
        return this.form.get(dir.path);
      }
      /**
       * @description
       * Removes the `NgModel` instance from the internal list of directives
       *
       * @param dir The `NgModel` directive instance.
       */
      removeControl(dir) {
        resolvedPromise$1.then(() => {
          const container = this._findContainer(dir.path);
          if (container) {
            container.removeControl(dir.name);
          }
          this._directives.delete(dir);
        });
      }
      /**
       * @description
       * Adds a new `NgModelGroup` directive instance to the form.
       *
       * @param dir The `NgModelGroup` directive instance.
       */
      addFormGroup(dir) {
        resolvedPromise$1.then(() => {
          const container = this._findContainer(dir.path);
          const group = new FormGroup({});
          setUpFormContainer(group, dir);
          container.registerControl(dir.name, group);
          group.updateValueAndValidity({
            emitEvent: false
          });
        });
      }
      /**
       * @description
       * Removes the `NgModelGroup` directive instance from the form.
       *
       * @param dir The `NgModelGroup` directive instance.
       */
      removeFormGroup(dir) {
        resolvedPromise$1.then(() => {
          const container = this._findContainer(dir.path);
          if (container) {
            container.removeControl(dir.name);
          }
        });
      }
      /**
       * @description
       * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
       *
       * @param dir The `NgModelGroup` directive instance.
       */
      getFormGroup(dir) {
        return this.form.get(dir.path);
      }
      /**
       * Sets the new value for the provided `NgControl` directive.
       *
       * @param dir The `NgControl` directive instance.
       * @param value The new value for the directive's control.
       */
      updateModel(dir, value) {
        resolvedPromise$1.then(() => {
          const ctrl = this.form.get(dir.path);
          ctrl.setValue(value);
        });
      }
      /**
       * @description
       * Sets the value for this `FormGroup`.
       *
       * @param value The new value
       */
      setValue(value) {
        this.control.setValue(value);
      }
      /**
       * @description
       * Method called when the "submit" event is triggered on the form.
       * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
       *
       * @param $event The "submit" event object
       */
      onSubmit($event) {
        this.submittedReactive.set(true);
        syncPendingControls(this.form, this._directives);
        this.ngSubmit.emit($event);
        this.form._events.next(new FormSubmittedEvent(this.control));
        return $event?.target?.method === "dialog";
      }
      /**
       * @description
       * Method called when the "reset" event is triggered on the form.
       */
      onReset() {
        this.resetForm();
      }
      /**
       * @description
       * Resets the form to an initial value and resets its submitted status.
       *
       * @param value The new value for the form.
       */
      resetForm(value = void 0) {
        this.form.reset(value);
        this.submittedReactive.set(false);
        this.form._events.next(new FormResetEvent(this.form));
      }
      _setUpdateStrategy() {
        if (this.options && this.options.updateOn != null) {
          this.form._updateOn = this.options.updateOn;
        }
      }
      _findContainer(path) {
        path.pop();
        return path.length ? this.form.get(path) : this.form;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NgForm,
        deps: [{
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: CALL_SET_DISABLED_STATE,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _NgForm,
        isStandalone: false,
        selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]",
        inputs: {
          options: ["ngFormOptions", "options"]
        },
        outputs: {
          ngSubmit: "ngSubmit"
        },
        host: {
          listeners: {
            "submit": "onSubmit($event)",
            "reset": "onReset()"
          }
        },
        providers: [formDirectiveProvider$1],
        exportAs: ["ngForm"],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NgForm,
      decorators: [{
        type: Directive,
        args: [{
          selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]",
          providers: [formDirectiveProvider$1],
          host: {
            "(submit)": "onSubmit($event)",
            "(reset)": "onReset()"
          },
          outputs: ["ngSubmit"],
          exportAs: "ngForm",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [CALL_SET_DISABLED_STATE]
        }]
      }],
      propDecorators: {
        options: [{
          type: Input,
          args: ["ngFormOptions"]
        }]
      }
    });
    FormControl = class FormControl2 extends AbstractControl {
      /** @publicApi */
      defaultValue = null;
      /** @internal */
      _onChange = [];
      /** @internal */
      _pendingValue;
      /** @internal */
      _pendingChange = false;
      constructor(formState = null, validatorOrOpts, asyncValidator) {
        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
        this._applyFormState(formState);
        this._setUpdateStrategy(validatorOrOpts);
        this._initObservables();
        this.updateValueAndValidity({
          onlySelf: true,
          // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
          // `VALID` or `INVALID`.
          // The status should be broadcasted via the `statusChanges` observable, so we set
          // `emitEvent` to `true` to allow that during the control creation process.
          emitEvent: !!this.asyncValidator
        });
        if (isOptionsObj(validatorOrOpts) && (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {
          if (isFormControlState(formState)) {
            this.defaultValue = formState.value;
          } else {
            this.defaultValue = formState;
          }
        }
      }
      setValue(value, options = {}) {
        this.value = this._pendingValue = value;
        if (this._onChange.length && options.emitModelToViewChange !== false) {
          this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));
        }
        this.updateValueAndValidity(options);
      }
      patchValue(value, options = {}) {
        this.setValue(value, options);
      }
      reset(formState = this.defaultValue, options = {}) {
        this._applyFormState(formState);
        this.markAsPristine(options);
        this.markAsUntouched(options);
        this.setValue(this.value, options);
        this._pendingChange = false;
      }
      /**  @internal */
      _updateValue() {
      }
      /**  @internal */
      _anyControls(condition) {
        return false;
      }
      /**  @internal */
      _allControlsDisabled() {
        return this.disabled;
      }
      registerOnChange(fn) {
        this._onChange.push(fn);
      }
      /** @internal */
      _unregisterOnChange(fn) {
        removeListItem(this._onChange, fn);
      }
      registerOnDisabledChange(fn) {
        this._onDisabledChange.push(fn);
      }
      /** @internal */
      _unregisterOnDisabledChange(fn) {
        removeListItem(this._onDisabledChange, fn);
      }
      /** @internal */
      _forEachChild(cb) {
      }
      /** @internal */
      _syncPendingControls() {
        if (this.updateOn === "submit") {
          if (this._pendingDirty) this.markAsDirty();
          if (this._pendingTouched) this.markAsTouched();
          if (this._pendingChange) {
            this.setValue(this._pendingValue, {
              onlySelf: true,
              emitModelToViewChange: false
            });
            return true;
          }
        }
        return false;
      }
      _applyFormState(formState) {
        if (isFormControlState(formState)) {
          this.value = this._pendingValue = formState.value;
          formState.disabled ? this.disable({
            onlySelf: true,
            emitEvent: false
          }) : this.enable({
            onlySelf: true,
            emitEvent: false
          });
        } else {
          this.value = this._pendingValue = formState;
        }
      }
    };
    isFormControl = (control) => control instanceof FormControl;
    AbstractFormGroupDirective = class _AbstractFormGroupDirective extends ControlContainer {
      /**
       * @description
       * The parent control for the group
       *
       * @internal
       */
      _parent;
      /** @docs-private */
      ngOnInit() {
        this._checkParentType();
        this.formDirective.addFormGroup(this);
      }
      /** @docs-private */
      ngOnDestroy() {
        if (this.formDirective) {
          this.formDirective.removeFormGroup(this);
        }
      }
      /**
       * @description
       * The `FormGroup` bound to this directive.
       */
      get control() {
        return this.formDirective.getFormGroup(this);
      }
      /**
       * @description
       * The path to this group from the top-level directive.
       */
      get path() {
        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
      }
      /**
       * @description
       * The top-level directive for this group if present, otherwise null.
       */
      get formDirective() {
        return this._parent ? this._parent.formDirective : null;
      }
      /** @internal */
      _checkParentType() {
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _AbstractFormGroupDirective,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _AbstractFormGroupDirective,
        isStandalone: false,
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: AbstractFormGroupDirective,
      decorators: [{
        type: Directive,
        args: [{
          standalone: false
        }]
      }]
    });
    modelGroupProvider = {
      provide: ControlContainer,
      useExisting: forwardRef(() => NgModelGroup)
    };
    NgModelGroup = class _NgModelGroup extends AbstractFormGroupDirective {
      /**
       * @description
       * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds
       * to a key in the parent `NgForm`.
       */
      name = "";
      constructor(parent, validators, asyncValidators) {
        super();
        this._parent = parent;
        this._setValidators(validators);
        this._setAsyncValidators(asyncValidators);
      }
      /** @internal */
      _checkParentType() {
        if (!(this._parent instanceof _NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === "undefined" || ngDevMode)) {
          throw modelGroupParentException();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NgModelGroup,
        deps: [{
          token: ControlContainer,
          host: true,
          skipSelf: true
        }, {
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _NgModelGroup,
        isStandalone: false,
        selector: "[ngModelGroup]",
        inputs: {
          name: ["ngModelGroup", "name"]
        },
        providers: [modelGroupProvider],
        exportAs: ["ngModelGroup"],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NgModelGroup,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[ngModelGroup]",
          providers: [modelGroupProvider],
          exportAs: "ngModelGroup",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ControlContainer,
        decorators: [{
          type: Host
        }, {
          type: SkipSelf
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }],
      propDecorators: {
        name: [{
          type: Input,
          args: ["ngModelGroup"]
        }]
      }
    });
    formControlBinding$1 = {
      provide: NgControl,
      useExisting: forwardRef(() => NgModel)
    };
    resolvedPromise = (() => Promise.resolve())();
    NgModel = class _NgModel extends NgControl {
      _changeDetectorRef;
      callSetDisabledState;
      control = new FormControl();
      // At runtime we coerce arbitrary values assigned to the "disabled" input to a "boolean".
      // This is not reflected in the type of the property because outside of templates, consumers
      // should only deal with booleans. In templates, a string is allowed for convenience and to
      // match the native "disabled attribute" semantics which can be observed on input elements.
      // This static member tells the compiler that values of type "string" can also be assigned
      // to the input in a template.
      /** @docs-private */
      static ngAcceptInputType_isDisabled;
      /** @internal */
      _registered = false;
      /**
       * Internal reference to the view model value.
       * @docs-private
       */
      viewModel;
      /**
       * @description
       * Tracks the name bound to the directive. If a parent form exists, it
       * uses this name as a key to retrieve this control's value.
       */
      name = "";
      /**
       * @description
       * Tracks whether the control is disabled.
       */
      isDisabled;
      /**
       * @description
       * Tracks the value bound to this directive.
       */
      model;
      /**
       * @description
       * Tracks the configuration options for this `ngModel` instance.
       *
       * **name**: An alternative to setting the name attribute on the form control element. See
       * the [example](api/forms/NgModel#using-ngmodel-on-a-standalone-control) for using `NgModel`
       * as a standalone control.
       *
       * **standalone**: When set to true, the `ngModel` will not register itself with its parent form,
       * and acts as if it's not in the form. Defaults to false. If no parent form exists, this option
       * has no effect.
       *
       * **updateOn**: Defines the event upon which the form control value and validity update.
       * Defaults to 'change'. Possible values: `'change'` | `'blur'` | `'submit'`.
       *
       */
      options;
      /**
       * @description
       * Event emitter for producing the `ngModelChange` event after
       * the view model updates.
       */
      update = new EventEmitter();
      constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {
        super();
        this._changeDetectorRef = _changeDetectorRef;
        this.callSetDisabledState = callSetDisabledState;
        this._parent = parent;
        this._setValidators(validators);
        this._setAsyncValidators(asyncValidators);
        this.valueAccessor = selectValueAccessor(this, valueAccessors);
      }
      /** @docs-private */
      ngOnChanges(changes) {
        this._checkForErrors();
        if (!this._registered || "name" in changes) {
          if (this._registered) {
            this._checkName();
            if (this.formDirective) {
              const oldName = changes["name"].previousValue;
              this.formDirective.removeControl({
                name: oldName,
                path: this._getPath(oldName)
              });
            }
          }
          this._setUpControl();
        }
        if ("isDisabled" in changes) {
          this._updateDisabled(changes);
        }
        if (isPropertyUpdated(changes, this.viewModel)) {
          this._updateValue(this.model);
          this.viewModel = this.model;
        }
      }
      /** @docs-private */
      ngOnDestroy() {
        this.formDirective && this.formDirective.removeControl(this);
      }
      /**
       * @description
       * Returns an array that represents the path from the top-level form to this control.
       * Each index is the string name of the control on that level.
       */
      get path() {
        return this._getPath(this.name);
      }
      /**
       * @description
       * The top-level directive for this control if present, otherwise null.
       */
      get formDirective() {
        return this._parent ? this._parent.formDirective : null;
      }
      /**
       * @description
       * Sets the new value for the view model and emits an `ngModelChange` event.
       *
       * @param newValue The new value emitted by `ngModelChange`.
       */
      viewToModelUpdate(newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
      }
      _setUpControl() {
        this._setUpdateStrategy();
        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
        this._registered = true;
      }
      _setUpdateStrategy() {
        if (this.options && this.options.updateOn != null) {
          this.control._updateOn = this.options.updateOn;
        }
      }
      _isStandalone() {
        return !this._parent || !!(this.options && this.options.standalone);
      }
      _setUpStandalone() {
        setUpControl(this.control, this, this.callSetDisabledState);
        this.control.updateValueAndValidity({
          emitEvent: false
        });
      }
      _checkForErrors() {
        if ((typeof ngDevMode === "undefined" || ngDevMode) && !this._isStandalone()) {
          checkParentType$1(this._parent);
        }
        this._checkName();
      }
      _checkName() {
        if (this.options && this.options.name) this.name = this.options.name;
        if (!this._isStandalone() && !this.name && (typeof ngDevMode === "undefined" || ngDevMode)) {
          throw missingNameException();
        }
      }
      _updateValue(value) {
        resolvedPromise.then(() => {
          this.control.setValue(value, {
            emitViewToModelChange: false
          });
          this._changeDetectorRef?.markForCheck();
        });
      }
      _updateDisabled(changes) {
        const disabledValue = changes["isDisabled"].currentValue;
        const isDisabled = disabledValue !== 0 && booleanAttribute(disabledValue);
        resolvedPromise.then(() => {
          if (isDisabled && !this.control.disabled) {
            this.control.disable();
          } else if (!isDisabled && this.control.disabled) {
            this.control.enable();
          }
          this._changeDetectorRef?.markForCheck();
        });
      }
      _getPath(controlName) {
        return this._parent ? controlPath(controlName, this._parent) : [controlName];
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NgModel,
        deps: [{
          token: ControlContainer,
          host: true,
          optional: true
        }, {
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_VALUE_ACCESSOR,
          optional: true,
          self: true
        }, {
          token: ChangeDetectorRef,
          optional: true
        }, {
          token: CALL_SET_DISABLED_STATE,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _NgModel,
        isStandalone: false,
        selector: "[ngModel]:not([formControlName]):not([formControl])",
        inputs: {
          name: "name",
          isDisabled: ["disabled", "isDisabled"],
          model: ["ngModel", "model"],
          options: ["ngModelOptions", "options"]
        },
        outputs: {
          update: "ngModelChange"
        },
        providers: [formControlBinding$1],
        exportAs: ["ngModel"],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NgModel,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          providers: [formControlBinding$1],
          exportAs: "ngModel",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ControlContainer,
        decorators: [{
          type: Optional
        }, {
          type: Host
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALUE_ACCESSOR]
        }]
      }, {
        type: ChangeDetectorRef,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [ChangeDetectorRef]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [CALL_SET_DISABLED_STATE]
        }]
      }],
      propDecorators: {
        name: [{
          type: Input
        }],
        isDisabled: [{
          type: Input,
          args: ["disabled"]
        }],
        model: [{
          type: Input,
          args: ["ngModel"]
        }],
        options: [{
          type: Input,
          args: ["ngModelOptions"]
        }],
        update: [{
          type: Output,
          args: ["ngModelChange"]
        }]
      }
    });
    \u0275NgNoValidate = class _\u0275NgNoValidate {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _\u0275NgNoValidate,
        deps: [],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _\u0275NgNoValidate,
        isStandalone: false,
        selector: "form:not([ngNoForm]):not([ngNativeValidate])",
        host: {
          attributes: {
            "novalidate": ""
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: \u0275NgNoValidate,
      decorators: [{
        type: Directive,
        args: [{
          selector: "form:not([ngNoForm]):not([ngNativeValidate])",
          host: {
            "novalidate": ""
          },
          standalone: false
        }]
      }]
    });
    NUMBER_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => NumberValueAccessor),
      multi: true
    };
    NumberValueAccessor = class _NumberValueAccessor extends BuiltInControlValueAccessor {
      /**
       * Sets the "value" property on the input element.
       * @docs-private
       */
      writeValue(value) {
        const normalizedValue = value == null ? "" : value;
        this.setProperty("value", normalizedValue);
      }
      /**
       * Registers a function called when the control value changes.
       * @docs-private
       */
      registerOnChange(fn) {
        this.onChange = (value) => {
          fn(value == "" ? null : parseFloat(value));
        };
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NumberValueAccessor,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _NumberValueAccessor,
        isStandalone: false,
        selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]",
        host: {
          listeners: {
            "input": "onChange($event.target.value)",
            "blur": "onTouched()"
          }
        },
        providers: [NUMBER_VALUE_ACCESSOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NumberValueAccessor,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]",
          host: {
            "(input)": "onChange($event.target.value)",
            "(blur)": "onTouched()"
          },
          providers: [NUMBER_VALUE_ACCESSOR],
          standalone: false
        }]
      }]
    });
    RADIO_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => RadioControlValueAccessor),
      multi: true
    };
    RadioControlRegistry = class _RadioControlRegistry {
      _accessors = [];
      /**
       * @description
       * Adds a control to the internal registry. For internal use only.
       */
      add(control, accessor) {
        this._accessors.push([control, accessor]);
      }
      /**
       * @description
       * Removes a control from the internal registry. For internal use only.
       */
      remove(accessor) {
        for (let i = this._accessors.length - 1; i >= 0; --i) {
          if (this._accessors[i][1] === accessor) {
            this._accessors.splice(i, 1);
            return;
          }
        }
      }
      /**
       * @description
       * Selects a radio button. For internal use only.
       */
      select(accessor) {
        this._accessors.forEach((c) => {
          if (this._isSameGroup(c, accessor) && c[1] !== accessor) {
            c[1].fireUncheck(accessor.value);
          }
        });
      }
      _isSameGroup(controlPair, accessor) {
        if (!controlPair[0].control) return false;
        return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _RadioControlRegistry,
        deps: [],
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _RadioControlRegistry,
        providedIn: "root"
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: RadioControlRegistry,
      decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }]
    });
    RadioControlValueAccessor = class _RadioControlValueAccessor extends BuiltInControlValueAccessor {
      _registry;
      _injector;
      /** @internal */
      _state;
      /** @internal */
      _control;
      /** @internal */
      _fn;
      setDisabledStateFired = false;
      /**
       * The registered callback function called when a change event occurs on the input element.
       * Note: we declare `onChange` here (also used as host listener) as a function with no arguments
       * to override the `onChange` function (which expects 1 argument) in the parent
       * `BaseControlValueAccessor` class.
       * @docs-private
       */
      onChange = () => {
      };
      /**
       * @description
       * Tracks the name of the radio input element.
       */
      name;
      /**
       * @description
       * Tracks the name of the `FormControl` bound to the directive. The name corresponds
       * to a key in the parent `FormGroup` or `FormArray`.
       */
      formControlName;
      /**
       * @description
       * Tracks the value of the radio input element
       */
      value;
      callSetDisabledState = inject(CALL_SET_DISABLED_STATE, {
        optional: true
      }) ?? setDisabledStateDefault;
      constructor(renderer, elementRef, _registry, _injector) {
        super(renderer, elementRef);
        this._registry = _registry;
        this._injector = _injector;
      }
      /** @docs-private */
      ngOnInit() {
        this._control = this._injector.get(NgControl);
        this._checkName();
        this._registry.add(this._control, this);
      }
      /** @docs-private */
      ngOnDestroy() {
        this._registry.remove(this);
      }
      /**
       * Sets the "checked" property value on the radio input element.
       * @docs-private
       */
      writeValue(value) {
        this._state = value === this.value;
        this.setProperty("checked", this._state);
      }
      /**
       * Registers a function called when the control value changes.
       * @docs-private
       */
      registerOnChange(fn) {
        this._fn = fn;
        this.onChange = () => {
          fn(this.value);
          this._registry.select(this);
        };
      }
      /** @docs-private */
      setDisabledState(isDisabled) {
        if (this.setDisabledStateFired || isDisabled || this.callSetDisabledState === "whenDisabledForLegacyCode") {
          this.setProperty("disabled", isDisabled);
        }
        this.setDisabledStateFired = true;
      }
      /**
       * Sets the "value" on the radio input element and unchecks it.
       *
       * @param value
       */
      fireUncheck(value) {
        this.writeValue(value);
      }
      _checkName() {
        if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === "undefined" || ngDevMode)) {
          throwNameError();
        }
        if (!this.name && this.formControlName) this.name = this.formControlName;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _RadioControlValueAccessor,
        deps: [{
          token: Renderer2
        }, {
          token: ElementRef
        }, {
          token: RadioControlRegistry
        }, {
          token: Injector
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _RadioControlValueAccessor,
        isStandalone: false,
        selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]",
        inputs: {
          name: "name",
          formControlName: "formControlName",
          value: "value"
        },
        host: {
          listeners: {
            "change": "onChange()",
            "blur": "onTouched()"
          }
        },
        providers: [RADIO_VALUE_ACCESSOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: RadioControlValueAccessor,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]",
          host: {
            "(change)": "onChange()",
            "(blur)": "onTouched()"
          },
          providers: [RADIO_VALUE_ACCESSOR],
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: Renderer2
      }, {
        type: ElementRef
      }, {
        type: RadioControlRegistry
      }, {
        type: Injector
      }],
      propDecorators: {
        name: [{
          type: Input
        }],
        formControlName: [{
          type: Input
        }],
        value: [{
          type: Input
        }]
      }
    });
    RANGE_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => RangeValueAccessor),
      multi: true
    };
    RangeValueAccessor = class _RangeValueAccessor extends BuiltInControlValueAccessor {
      /**
       * Sets the "value" property on the input element.
       * @docs-private
       */
      writeValue(value) {
        this.setProperty("value", parseFloat(value));
      }
      /**
       * Registers a function called when the control value changes.
       * @docs-private
       */
      registerOnChange(fn) {
        this.onChange = (value) => {
          fn(value == "" ? null : parseFloat(value));
        };
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _RangeValueAccessor,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _RangeValueAccessor,
        isStandalone: false,
        selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]",
        host: {
          listeners: {
            "change": "onChange($event.target.value)",
            "input": "onChange($event.target.value)",
            "blur": "onTouched()"
          }
        },
        providers: [RANGE_VALUE_ACCESSOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: RangeValueAccessor,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]",
          host: {
            "(change)": "onChange($event.target.value)",
            "(input)": "onChange($event.target.value)",
            "(blur)": "onTouched()"
          },
          providers: [RANGE_VALUE_ACCESSOR],
          standalone: false
        }]
      }]
    });
    NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken(ngDevMode ? "NgModelWithFormControlWarning" : "");
    formControlBinding = {
      provide: NgControl,
      useExisting: forwardRef(() => FormControlDirective)
    };
    FormControlDirective = class _FormControlDirective extends NgControl {
      _ngModelWarningConfig;
      callSetDisabledState;
      /**
       * Internal reference to the view model value.
       * @docs-private
       */
      viewModel;
      /**
       * @description
       * Tracks the `FormControl` instance bound to the directive.
       */
      form;
      /**
       * @description
       * Triggers a warning in dev mode that this input should not be used with reactive forms.
       */
      set isDisabled(isDisabled) {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          console.warn(disabledAttrWarning);
        }
      }
      // TODO(kara): remove next 4 properties once deprecation period is over
      /** @deprecated as of v6 */
      model;
      /** @deprecated as of v6 */
      update = new EventEmitter();
      /**
       * @description
       * Static property used to track whether any ngModel warnings have been sent across
       * all instances of FormControlDirective. Used to support warning config of "once".
       *
       * @internal
       */
      static _ngModelWarningSentOnce = false;
      /**
       * @description
       * Instance property used to track whether an ngModel warning has been sent out for this
       * particular `FormControlDirective` instance. Used to support warning config of "always".
       *
       * @internal
       */
      _ngModelWarningSent = false;
      constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {
        super();
        this._ngModelWarningConfig = _ngModelWarningConfig;
        this.callSetDisabledState = callSetDisabledState;
        this._setValidators(validators);
        this._setAsyncValidators(asyncValidators);
        this.valueAccessor = selectValueAccessor(this, valueAccessors);
      }
      /** @docs-private */
      ngOnChanges(changes) {
        if (this._isControlChanged(changes)) {
          const previousForm = changes["form"].previousValue;
          if (previousForm) {
            cleanUpControl(
              previousForm,
              this,
              /* validateControlPresenceOnChange */
              false
            );
          }
          setUpControl(this.form, this, this.callSetDisabledState);
          this.form.updateValueAndValidity({
            emitEvent: false
          });
        }
        if (isPropertyUpdated(changes, this.viewModel)) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            _ngModelWarning("formControl", _FormControlDirective, this, this._ngModelWarningConfig);
          }
          this.form.setValue(this.model);
          this.viewModel = this.model;
        }
      }
      /** @docs-private */
      ngOnDestroy() {
        if (this.form) {
          cleanUpControl(
            this.form,
            this,
            /* validateControlPresenceOnChange */
            false
          );
        }
      }
      /**
       * @description
       * Returns an array that represents the path from the top-level form to this control.
       * Each index is the string name of the control on that level.
       */
      get path() {
        return [];
      }
      /**
       * @description
       * The `FormControl` bound to this directive.
       */
      get control() {
        return this.form;
      }
      /**
       * @description
       * Sets the new value for the view model and emits an `ngModelChange` event.
       *
       * @param newValue The new value for the view model.
       */
      viewToModelUpdate(newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
      }
      _isControlChanged(changes) {
        return changes.hasOwnProperty("form");
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormControlDirective,
        deps: [{
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_VALUE_ACCESSOR,
          optional: true,
          self: true
        }, {
          token: NG_MODEL_WITH_FORM_CONTROL_WARNING,
          optional: true
        }, {
          token: CALL_SET_DISABLED_STATE,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _FormControlDirective,
        isStandalone: false,
        selector: "[formControl]",
        inputs: {
          form: ["formControl", "form"],
          isDisabled: ["disabled", "isDisabled"],
          model: ["ngModel", "model"]
        },
        outputs: {
          update: "ngModelChange"
        },
        providers: [formControlBinding],
        exportAs: ["ngForm"],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: FormControlDirective,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[formControl]",
          providers: [formControlBinding],
          exportAs: "ngForm",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALUE_ACCESSOR]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [CALL_SET_DISABLED_STATE]
        }]
      }],
      propDecorators: {
        form: [{
          type: Input,
          args: ["formControl"]
        }],
        isDisabled: [{
          type: Input,
          args: ["disabled"]
        }],
        model: [{
          type: Input,
          args: ["ngModel"]
        }],
        update: [{
          type: Output,
          args: ["ngModelChange"]
        }]
      }
    });
    formDirectiveProvider = {
      provide: ControlContainer,
      useExisting: forwardRef(() => FormGroupDirective)
    };
    FormGroupDirective = class _FormGroupDirective extends ControlContainer {
      callSetDisabledState;
      /**
       * @description
       * Reports whether the form submission has been triggered.
       */
      get submitted() {
        return untracked(this._submittedReactive);
      }
      // TODO(atscott): Remove once invalid API usage is cleaned up internally
      set submitted(value) {
        this._submittedReactive.set(value);
      }
      /** @internal */
      _submitted = computed(() => this._submittedReactive());
      _submittedReactive = signal(false);
      /**
       * Reference to an old form group input value, which is needed to cleanup
       * old instance in case it was replaced with a new one.
       */
      _oldForm;
      /**
       * Callback that should be invoked when controls in FormGroup or FormArray collection change
       * (added or removed). This callback triggers corresponding DOM updates.
       */
      _onCollectionChange = () => this._updateDomValue();
      /**
       * @description
       * Tracks the list of added `FormControlName` instances
       */
      directives = [];
      /**
       * @description
       * Tracks the `FormGroup` bound to this directive.
       */
      form = null;
      /**
       * @description
       * Emits an event when the form submission has been triggered.
       */
      ngSubmit = new EventEmitter();
      constructor(validators, asyncValidators, callSetDisabledState) {
        super();
        this.callSetDisabledState = callSetDisabledState;
        this._setValidators(validators);
        this._setAsyncValidators(asyncValidators);
      }
      /** @docs-private */
      ngOnChanges(changes) {
        if ((typeof ngDevMode === "undefined" || ngDevMode) && !this.form) {
          throw missingFormException();
        }
        if (changes.hasOwnProperty("form")) {
          this._updateValidators();
          this._updateDomValue();
          this._updateRegistrations();
          this._oldForm = this.form;
        }
      }
      /** @docs-private */
      ngOnDestroy() {
        if (this.form) {
          cleanUpValidators(this.form, this);
          if (this.form._onCollectionChange === this._onCollectionChange) {
            this.form._registerOnCollectionChange(() => {
            });
          }
        }
      }
      /**
       * @description
       * Returns this directive's instance.
       */
      get formDirective() {
        return this;
      }
      /**
       * @description
       * Returns the `FormGroup` bound to this directive.
       */
      get control() {
        return this.form;
      }
      /**
       * @description
       * Returns an array representing the path to this group. Because this directive
       * always lives at the top level of a form, it always an empty array.
       */
      get path() {
        return [];
      }
      /**
       * @description
       * Method that sets up the control directive in this group, re-calculates its value
       * and validity, and adds the instance to the internal list of directives.
       *
       * @param dir The `FormControlName` directive instance.
       */
      addControl(dir) {
        const ctrl = this.form.get(dir.path);
        setUpControl(ctrl, dir, this.callSetDisabledState);
        ctrl.updateValueAndValidity({
          emitEvent: false
        });
        this.directives.push(dir);
        return ctrl;
      }
      /**
       * @description
       * Retrieves the `FormControl` instance from the provided `FormControlName` directive
       *
       * @param dir The `FormControlName` directive instance.
       */
      getControl(dir) {
        return this.form.get(dir.path);
      }
      /**
       * @description
       * Removes the `FormControlName` instance from the internal list of directives
       *
       * @param dir The `FormControlName` directive instance.
       */
      removeControl(dir) {
        cleanUpControl(
          dir.control || null,
          dir,
          /* validateControlPresenceOnChange */
          false
        );
        removeListItem$1(this.directives, dir);
      }
      /**
       * Adds a new `FormGroupName` directive instance to the form.
       *
       * @param dir The `FormGroupName` directive instance.
       */
      addFormGroup(dir) {
        this._setUpFormContainer(dir);
      }
      /**
       * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the
       * view.
       *
       * @param dir The `FormGroupName` directive instance.
       */
      removeFormGroup(dir) {
        this._cleanUpFormContainer(dir);
      }
      /**
       * @description
       * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
       *
       * @param dir The `FormGroupName` directive instance.
       */
      getFormGroup(dir) {
        return this.form.get(dir.path);
      }
      /**
       * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.
       *
       * @param dir The `FormArrayName` directive instance.
       */
      addFormArray(dir) {
        this._setUpFormContainer(dir);
      }
      /**
       * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the
       * view.
       *
       * @param dir The `FormArrayName` directive instance.
       */
      removeFormArray(dir) {
        this._cleanUpFormContainer(dir);
      }
      /**
       * @description
       * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
       *
       * @param dir The `FormArrayName` directive instance.
       */
      getFormArray(dir) {
        return this.form.get(dir.path);
      }
      /**
       * Sets the new value for the provided `FormControlName` directive.
       *
       * @param dir The `FormControlName` directive instance.
       * @param value The new value for the directive's control.
       */
      updateModel(dir, value) {
        const ctrl = this.form.get(dir.path);
        ctrl.setValue(value);
      }
      /**
       * @description
       * Method called with the "submit" event is triggered on the form.
       * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
       *
       * @param $event The "submit" event object
       */
      onSubmit($event) {
        this._submittedReactive.set(true);
        syncPendingControls(this.form, this.directives);
        this.ngSubmit.emit($event);
        this.form._events.next(new FormSubmittedEvent(this.control));
        return $event?.target?.method === "dialog";
      }
      /**
       * @description
       * Method called when the "reset" event is triggered on the form.
       */
      onReset() {
        this.resetForm();
      }
      /**
       * @description
       * Resets the form to an initial value and resets its submitted status.
       *
       * @param value The new value for the form.
       */
      resetForm(value = void 0) {
        this.form.reset(value);
        this._submittedReactive.set(false);
        this.form._events.next(new FormResetEvent(this.form));
      }
      /** @internal */
      _updateDomValue() {
        this.directives.forEach((dir) => {
          const oldCtrl = dir.control;
          const newCtrl = this.form.get(dir.path);
          if (oldCtrl !== newCtrl) {
            cleanUpControl(oldCtrl || null, dir);
            if (isFormControl(newCtrl)) {
              setUpControl(newCtrl, dir, this.callSetDisabledState);
              dir.control = newCtrl;
            }
          }
        });
        this.form._updateTreeValidity({
          emitEvent: false
        });
      }
      _setUpFormContainer(dir) {
        const ctrl = this.form.get(dir.path);
        setUpFormContainer(ctrl, dir);
        ctrl.updateValueAndValidity({
          emitEvent: false
        });
      }
      _cleanUpFormContainer(dir) {
        if (this.form) {
          const ctrl = this.form.get(dir.path);
          if (ctrl) {
            const isControlUpdated = cleanUpFormContainer(ctrl, dir);
            if (isControlUpdated) {
              ctrl.updateValueAndValidity({
                emitEvent: false
              });
            }
          }
        }
      }
      _updateRegistrations() {
        this.form._registerOnCollectionChange(this._onCollectionChange);
        if (this._oldForm) {
          this._oldForm._registerOnCollectionChange(() => {
          });
        }
      }
      _updateValidators() {
        setUpValidators(this.form, this);
        if (this._oldForm) {
          cleanUpValidators(this._oldForm, this);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormGroupDirective,
        deps: [{
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: CALL_SET_DISABLED_STATE,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _FormGroupDirective,
        isStandalone: false,
        selector: "[formGroup]",
        inputs: {
          form: ["formGroup", "form"]
        },
        outputs: {
          ngSubmit: "ngSubmit"
        },
        host: {
          listeners: {
            "submit": "onSubmit($event)",
            "reset": "onReset()"
          }
        },
        providers: [formDirectiveProvider],
        exportAs: ["ngForm"],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: FormGroupDirective,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[formGroup]",
          providers: [formDirectiveProvider],
          host: {
            "(submit)": "onSubmit($event)",
            "(reset)": "onReset()"
          },
          exportAs: "ngForm",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [CALL_SET_DISABLED_STATE]
        }]
      }],
      propDecorators: {
        form: [{
          type: Input,
          args: ["formGroup"]
        }],
        ngSubmit: [{
          type: Output
        }]
      }
    });
    formGroupNameProvider = {
      provide: ControlContainer,
      useExisting: forwardRef(() => FormGroupName)
    };
    FormGroupName = class _FormGroupName extends AbstractFormGroupDirective {
      /**
       * @description
       * Tracks the name of the `FormGroup` bound to the directive. The name corresponds
       * to a key in the parent `FormGroup` or `FormArray`.
       * Accepts a name as a string or a number.
       * The name in the form of a string is useful for individual forms,
       * while the numerical form allows for form groups to be bound
       * to indices when iterating over groups in a `FormArray`.
       */
      name = null;
      constructor(parent, validators, asyncValidators) {
        super();
        this._parent = parent;
        this._setValidators(validators);
        this._setAsyncValidators(asyncValidators);
      }
      /** @internal */
      _checkParentType() {
        if (hasInvalidParent(this._parent) && (typeof ngDevMode === "undefined" || ngDevMode)) {
          throw groupParentException();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormGroupName,
        deps: [{
          token: ControlContainer,
          host: true,
          optional: true,
          skipSelf: true
        }, {
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _FormGroupName,
        isStandalone: false,
        selector: "[formGroupName]",
        inputs: {
          name: ["formGroupName", "name"]
        },
        providers: [formGroupNameProvider],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: FormGroupName,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[formGroupName]",
          providers: [formGroupNameProvider],
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ControlContainer,
        decorators: [{
          type: Optional
        }, {
          type: Host
        }, {
          type: SkipSelf
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }],
      propDecorators: {
        name: [{
          type: Input,
          args: ["formGroupName"]
        }]
      }
    });
    formArrayNameProvider = {
      provide: ControlContainer,
      useExisting: forwardRef(() => FormArrayName)
    };
    FormArrayName = class _FormArrayName extends ControlContainer {
      /** @internal */
      _parent;
      /**
       * @description
       * Tracks the name of the `FormArray` bound to the directive. The name corresponds
       * to a key in the parent `FormGroup` or `FormArray`.
       * Accepts a name as a string or a number.
       * The name in the form of a string is useful for individual forms,
       * while the numerical form allows for form arrays to be bound
       * to indices when iterating over arrays in a `FormArray`.
       */
      name = null;
      constructor(parent, validators, asyncValidators) {
        super();
        this._parent = parent;
        this._setValidators(validators);
        this._setAsyncValidators(asyncValidators);
      }
      /**
       * A lifecycle method called when the directive's inputs are initialized. For internal use only.
       * @throws If the directive does not have a valid parent.
       * @docs-private
       */
      ngOnInit() {
        if (hasInvalidParent(this._parent) && (typeof ngDevMode === "undefined" || ngDevMode)) {
          throw arrayParentException();
        }
        this.formDirective.addFormArray(this);
      }
      /**
       * A lifecycle method called before the directive's instance is destroyed. For internal use only.
       * @docs-private
       */
      ngOnDestroy() {
        this.formDirective?.removeFormArray(this);
      }
      /**
       * @description
       * The `FormArray` bound to this directive.
       */
      get control() {
        return this.formDirective.getFormArray(this);
      }
      /**
       * @description
       * The top-level directive for this group if present, otherwise null.
       */
      get formDirective() {
        return this._parent ? this._parent.formDirective : null;
      }
      /**
       * @description
       * Returns an array that represents the path from the top-level form to this control.
       * Each index is the string name of the control on that level.
       */
      get path() {
        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormArrayName,
        deps: [{
          token: ControlContainer,
          host: true,
          optional: true,
          skipSelf: true
        }, {
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _FormArrayName,
        isStandalone: false,
        selector: "[formArrayName]",
        inputs: {
          name: ["formArrayName", "name"]
        },
        providers: [formArrayNameProvider],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: FormArrayName,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[formArrayName]",
          providers: [formArrayNameProvider],
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ControlContainer,
        decorators: [{
          type: Optional
        }, {
          type: Host
        }, {
          type: SkipSelf
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }],
      propDecorators: {
        name: [{
          type: Input,
          args: ["formArrayName"]
        }]
      }
    });
    controlNameBinding = {
      provide: NgControl,
      useExisting: forwardRef(() => FormControlName)
    };
    FormControlName = class _FormControlName extends NgControl {
      _ngModelWarningConfig;
      _added = false;
      /**
       * Internal reference to the view model value.
       * @internal
       */
      viewModel;
      /**
       * @description
       * Tracks the `FormControl` instance bound to the directive.
       */
      control;
      /**
       * @description
       * Tracks the name of the `FormControl` bound to the directive. The name corresponds
       * to a key in the parent `FormGroup` or `FormArray`.
       * Accepts a name as a string or a number.
       * The name in the form of a string is useful for individual forms,
       * while the numerical form allows for form controls to be bound
       * to indices when iterating over controls in a `FormArray`.
       */
      name = null;
      /**
       * @description
       * Triggers a warning in dev mode that this input should not be used with reactive forms.
       */
      set isDisabled(isDisabled) {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          console.warn(disabledAttrWarning);
        }
      }
      // TODO(kara): remove next 4 properties once deprecation period is over
      /** @deprecated as of v6 */
      model;
      /** @deprecated as of v6 */
      update = new EventEmitter();
      /**
       * @description
       * Static property used to track whether any ngModel warnings have been sent across
       * all instances of FormControlName. Used to support warning config of "once".
       *
       * @internal
       */
      static _ngModelWarningSentOnce = false;
      /**
       * @description
       * Instance property used to track whether an ngModel warning has been sent out for this
       * particular FormControlName instance. Used to support warning config of "always".
       *
       * @internal
       */
      _ngModelWarningSent = false;
      constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
        super();
        this._ngModelWarningConfig = _ngModelWarningConfig;
        this._parent = parent;
        this._setValidators(validators);
        this._setAsyncValidators(asyncValidators);
        this.valueAccessor = selectValueAccessor(this, valueAccessors);
      }
      /** @docs-private */
      ngOnChanges(changes) {
        if (!this._added) this._setUpControl();
        if (isPropertyUpdated(changes, this.viewModel)) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            _ngModelWarning("formControlName", _FormControlName, this, this._ngModelWarningConfig);
          }
          this.viewModel = this.model;
          this.formDirective.updateModel(this, this.model);
        }
      }
      /** @docs-private */
      ngOnDestroy() {
        if (this.formDirective) {
          this.formDirective.removeControl(this);
        }
      }
      /**
       * @description
       * Sets the new value for the view model and emits an `ngModelChange` event.
       *
       * @param newValue The new value for the view model.
       */
      viewToModelUpdate(newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
      }
      /**
       * @description
       * Returns an array that represents the path from the top-level form to this control.
       * Each index is the string name of the control on that level.
       */
      get path() {
        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
      }
      /**
       * @description
       * The top-level directive for this group if present, otherwise null.
       */
      get formDirective() {
        return this._parent ? this._parent.formDirective : null;
      }
      _setUpControl() {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          checkParentType(this._parent, this.name);
        }
        this.control = this.formDirective.addControl(this);
        this._added = true;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormControlName,
        deps: [{
          token: ControlContainer,
          host: true,
          optional: true,
          skipSelf: true
        }, {
          token: NG_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_ASYNC_VALIDATORS,
          optional: true,
          self: true
        }, {
          token: NG_VALUE_ACCESSOR,
          optional: true,
          self: true
        }, {
          token: NG_MODEL_WITH_FORM_CONTROL_WARNING,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _FormControlName,
        isStandalone: false,
        selector: "[formControlName]",
        inputs: {
          name: ["formControlName", "name"],
          isDisabled: ["disabled", "isDisabled"],
          model: ["ngModel", "model"]
        },
        outputs: {
          update: "ngModelChange"
        },
        providers: [controlNameBinding],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: FormControlName,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[formControlName]",
          providers: [controlNameBinding],
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ControlContainer,
        decorators: [{
          type: Optional
        }, {
          type: Host
        }, {
          type: SkipSelf
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Self
        }, {
          type: Inject,
          args: [NG_VALUE_ACCESSOR]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Optional
        }, {
          type: Inject,
          args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
        }]
      }],
      propDecorators: {
        name: [{
          type: Input,
          args: ["formControlName"]
        }],
        isDisabled: [{
          type: Input,
          args: ["disabled"]
        }],
        model: [{
          type: Input,
          args: ["ngModel"]
        }],
        update: [{
          type: Output,
          args: ["ngModelChange"]
        }]
      }
    });
    SELECT_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => SelectControlValueAccessor),
      multi: true
    };
    SelectControlValueAccessor = class _SelectControlValueAccessor extends BuiltInControlValueAccessor {
      /** @docs-private */
      value;
      /** @internal */
      _optionMap = /* @__PURE__ */ new Map();
      /** @internal */
      _idCounter = 0;
      /**
       * @description
       * Tracks the option comparison algorithm for tracking identities when
       * checking for changes.
       */
      set compareWith(fn) {
        if (typeof fn !== "function" && (typeof ngDevMode === "undefined" || ngDevMode)) {
          throw new RuntimeError(1201, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
        }
        this._compareWith = fn;
      }
      _compareWith = Object.is;
      /**
       * Sets the "value" property on the select element.
       * @docs-private
       */
      writeValue(value) {
        this.value = value;
        const id = this._getOptionId(value);
        const valueString = _buildValueString$1(id, value);
        this.setProperty("value", valueString);
      }
      /**
       * Registers a function called when the control value changes.
       * @docs-private
       */
      registerOnChange(fn) {
        this.onChange = (valueString) => {
          this.value = this._getOptionValue(valueString);
          fn(this.value);
        };
      }
      /** @internal */
      _registerOption() {
        return (this._idCounter++).toString();
      }
      /** @internal */
      _getOptionId(value) {
        for (const id of this._optionMap.keys()) {
          if (this._compareWith(this._optionMap.get(id), value)) return id;
        }
        return null;
      }
      /** @internal */
      _getOptionValue(valueString) {
        const id = _extractId$1(valueString);
        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _SelectControlValueAccessor,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _SelectControlValueAccessor,
        isStandalone: false,
        selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]",
        inputs: {
          compareWith: "compareWith"
        },
        host: {
          listeners: {
            "change": "onChange($event.target.value)",
            "blur": "onTouched()"
          }
        },
        providers: [SELECT_VALUE_ACCESSOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: SelectControlValueAccessor,
      decorators: [{
        type: Directive,
        args: [{
          selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]",
          host: {
            "(change)": "onChange($event.target.value)",
            "(blur)": "onTouched()"
          },
          providers: [SELECT_VALUE_ACCESSOR],
          standalone: false
        }]
      }],
      propDecorators: {
        compareWith: [{
          type: Input
        }]
      }
    });
    NgSelectOption = class _NgSelectOption {
      _element;
      _renderer;
      _select;
      /**
       * @description
       * ID of the option element
       */
      id;
      constructor(_element, _renderer, _select) {
        this._element = _element;
        this._renderer = _renderer;
        this._select = _select;
        if (this._select) this.id = this._select._registerOption();
      }
      /**
       * @description
       * Tracks the value bound to the option element. Unlike the value binding,
       * ngValue supports binding to objects.
       */
      set ngValue(value) {
        if (this._select == null) return;
        this._select._optionMap.set(this.id, value);
        this._setElementValue(_buildValueString$1(this.id, value));
        this._select.writeValue(this._select.value);
      }
      /**
       * @description
       * Tracks simple string values bound to the option element.
       * For objects, use the `ngValue` input binding.
       */
      set value(value) {
        this._setElementValue(value);
        if (this._select) this._select.writeValue(this._select.value);
      }
      /** @internal */
      _setElementValue(value) {
        this._renderer.setProperty(this._element.nativeElement, "value", value);
      }
      /** @docs-private */
      ngOnDestroy() {
        if (this._select) {
          this._select._optionMap.delete(this.id);
          this._select.writeValue(this._select.value);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NgSelectOption,
        deps: [{
          token: ElementRef
        }, {
          token: Renderer2
        }, {
          token: SelectControlValueAccessor,
          host: true,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _NgSelectOption,
        isStandalone: false,
        selector: "option",
        inputs: {
          ngValue: "ngValue",
          value: "value"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NgSelectOption,
      decorators: [{
        type: Directive,
        args: [{
          selector: "option",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ElementRef
      }, {
        type: Renderer2
      }, {
        type: SelectControlValueAccessor,
        decorators: [{
          type: Optional
        }, {
          type: Host
        }]
      }],
      propDecorators: {
        ngValue: [{
          type: Input,
          args: ["ngValue"]
        }],
        value: [{
          type: Input,
          args: ["value"]
        }]
      }
    });
    SELECT_MULTIPLE_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => SelectMultipleControlValueAccessor),
      multi: true
    };
    SelectMultipleControlValueAccessor = class _SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {
      /**
       * The current value.
       * @docs-private
       */
      value;
      /** @internal */
      _optionMap = /* @__PURE__ */ new Map();
      /** @internal */
      _idCounter = 0;
      /**
       * @description
       * Tracks the option comparison algorithm for tracking identities when
       * checking for changes.
       */
      set compareWith(fn) {
        if (typeof fn !== "function" && (typeof ngDevMode === "undefined" || ngDevMode)) {
          throw new RuntimeError(1201, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
        }
        this._compareWith = fn;
      }
      _compareWith = Object.is;
      /**
       * Sets the "value" property on one or of more of the select's options.
       * @docs-private
       */
      writeValue(value) {
        this.value = value;
        let optionSelectedStateSetter;
        if (Array.isArray(value)) {
          const ids = value.map((v) => this._getOptionId(v));
          optionSelectedStateSetter = (opt, o) => {
            opt._setSelected(ids.indexOf(o.toString()) > -1);
          };
        } else {
          optionSelectedStateSetter = (opt, o) => {
            opt._setSelected(false);
          };
        }
        this._optionMap.forEach(optionSelectedStateSetter);
      }
      /**
       * Registers a function called when the control value changes
       * and writes an array of the selected options.
       * @docs-private
       */
      registerOnChange(fn) {
        this.onChange = (element) => {
          const selected = [];
          const selectedOptions = element.selectedOptions;
          if (selectedOptions !== void 0) {
            const options = selectedOptions;
            for (let i = 0; i < options.length; i++) {
              const opt = options[i];
              const val = this._getOptionValue(opt.value);
              selected.push(val);
            }
          } else {
            const options = element.options;
            for (let i = 0; i < options.length; i++) {
              const opt = options[i];
              if (opt.selected) {
                const val = this._getOptionValue(opt.value);
                selected.push(val);
              }
            }
          }
          this.value = selected;
          fn(selected);
        };
      }
      /** @internal */
      _registerOption(value) {
        const id = (this._idCounter++).toString();
        this._optionMap.set(id, value);
        return id;
      }
      /** @internal */
      _getOptionId(value) {
        for (const id of this._optionMap.keys()) {
          if (this._compareWith(this._optionMap.get(id)._value, value)) return id;
        }
        return null;
      }
      /** @internal */
      _getOptionValue(valueString) {
        const id = _extractId(valueString);
        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _SelectMultipleControlValueAccessor,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _SelectMultipleControlValueAccessor,
        isStandalone: false,
        selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]",
        inputs: {
          compareWith: "compareWith"
        },
        host: {
          listeners: {
            "change": "onChange($event.target)",
            "blur": "onTouched()"
          }
        },
        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: SelectMultipleControlValueAccessor,
      decorators: [{
        type: Directive,
        args: [{
          selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]",
          host: {
            "(change)": "onChange($event.target)",
            "(blur)": "onTouched()"
          },
          providers: [SELECT_MULTIPLE_VALUE_ACCESSOR],
          standalone: false
        }]
      }],
      propDecorators: {
        compareWith: [{
          type: Input
        }]
      }
    });
    \u0275NgSelectMultipleOption = class _\u0275NgSelectMultipleOption {
      _element;
      _renderer;
      _select;
      id;
      /** @internal */
      _value;
      constructor(_element, _renderer, _select) {
        this._element = _element;
        this._renderer = _renderer;
        this._select = _select;
        if (this._select) {
          this.id = this._select._registerOption(this);
        }
      }
      /**
       * @description
       * Tracks the value bound to the option element. Unlike the value binding,
       * ngValue supports binding to objects.
       */
      set ngValue(value) {
        if (this._select == null) return;
        this._value = value;
        this._setElementValue(_buildValueString(this.id, value));
        this._select.writeValue(this._select.value);
      }
      /**
       * @description
       * Tracks simple string values bound to the option element.
       * For objects, use the `ngValue` input binding.
       */
      set value(value) {
        if (this._select) {
          this._value = value;
          this._setElementValue(_buildValueString(this.id, value));
          this._select.writeValue(this._select.value);
        } else {
          this._setElementValue(value);
        }
      }
      /** @internal */
      _setElementValue(value) {
        this._renderer.setProperty(this._element.nativeElement, "value", value);
      }
      /** @internal */
      _setSelected(selected) {
        this._renderer.setProperty(this._element.nativeElement, "selected", selected);
      }
      /** @docs-private */
      ngOnDestroy() {
        if (this._select) {
          this._select._optionMap.delete(this.id);
          this._select.writeValue(this._select.value);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _\u0275NgSelectMultipleOption,
        deps: [{
          token: ElementRef
        }, {
          token: Renderer2
        }, {
          token: SelectMultipleControlValueAccessor,
          host: true,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _\u0275NgSelectMultipleOption,
        isStandalone: false,
        selector: "option",
        inputs: {
          ngValue: "ngValue",
          value: "value"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: \u0275NgSelectMultipleOption,
      decorators: [{
        type: Directive,
        args: [{
          selector: "option",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ElementRef
      }, {
        type: Renderer2
      }, {
        type: SelectMultipleControlValueAccessor,
        decorators: [{
          type: Optional
        }, {
          type: Host
        }]
      }],
      propDecorators: {
        ngValue: [{
          type: Input,
          args: ["ngValue"]
        }],
        value: [{
          type: Input,
          args: ["value"]
        }]
      }
    });
    AbstractValidatorDirective = class _AbstractValidatorDirective {
      _validator = nullValidator;
      _onChange;
      /**
       * A flag that tracks whether this validator is enabled.
       *
       * Marking it `internal` (vs `protected`), so that this flag can be used in host bindings of
       * directive classes that extend this base class.
       * @internal
       */
      _enabled;
      /** @docs-private */
      ngOnChanges(changes) {
        if (this.inputName in changes) {
          const input2 = this.normalizeInput(changes[this.inputName].currentValue);
          this._enabled = this.enabled(input2);
          this._validator = this._enabled ? this.createValidator(input2) : nullValidator;
          if (this._onChange) {
            this._onChange();
          }
        }
      }
      /** @docs-private */
      validate(control) {
        return this._validator(control);
      }
      /** @docs-private */
      registerOnValidatorChange(fn) {
        this._onChange = fn;
      }
      /**
       * @description
       * Determines whether this validator should be active or not based on an input.
       * Base class implementation checks whether an input is defined (if the value is different from
       * `null` and `undefined`). Validator classes that extend this base class can override this
       * function with the logic specific to a particular validator directive.
       */
      enabled(input2) {
        return input2 != null;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _AbstractValidatorDirective,
        deps: [],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _AbstractValidatorDirective,
        isStandalone: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: AbstractValidatorDirective,
      decorators: [{
        type: Directive
      }]
    });
    MAX_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => MaxValidator),
      multi: true
    };
    MaxValidator = class _MaxValidator extends AbstractValidatorDirective {
      /**
       * @description
       * Tracks changes to the max bound to this directive.
       */
      max;
      /** @internal */
      inputName = "max";
      /** @internal */
      normalizeInput = (input2) => toFloat(input2);
      /** @internal */
      createValidator = (max) => maxValidator(max);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _MaxValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _MaxValidator,
        isStandalone: false,
        selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",
        inputs: {
          max: "max"
        },
        host: {
          properties: {
            "attr.max": "_enabled ? max : null"
          }
        },
        providers: [MAX_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: MaxValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",
          providers: [MAX_VALIDATOR],
          host: {
            "[attr.max]": "_enabled ? max : null"
          },
          standalone: false
        }]
      }],
      propDecorators: {
        max: [{
          type: Input
        }]
      }
    });
    MIN_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => MinValidator),
      multi: true
    };
    MinValidator = class _MinValidator extends AbstractValidatorDirective {
      /**
       * @description
       * Tracks changes to the min bound to this directive.
       */
      min;
      /** @internal */
      inputName = "min";
      /** @internal */
      normalizeInput = (input2) => toFloat(input2);
      /** @internal */
      createValidator = (min) => minValidator(min);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _MinValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _MinValidator,
        isStandalone: false,
        selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",
        inputs: {
          min: "min"
        },
        host: {
          properties: {
            "attr.min": "_enabled ? min : null"
          }
        },
        providers: [MIN_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: MinValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",
          providers: [MIN_VALIDATOR],
          host: {
            "[attr.min]": "_enabled ? min : null"
          },
          standalone: false
        }]
      }],
      propDecorators: {
        min: [{
          type: Input
        }]
      }
    });
    REQUIRED_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => RequiredValidator),
      multi: true
    };
    CHECKBOX_REQUIRED_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => CheckboxRequiredValidator),
      multi: true
    };
    RequiredValidator = class _RequiredValidator extends AbstractValidatorDirective {
      /**
       * @description
       * Tracks changes to the required attribute bound to this directive.
       */
      required;
      /** @internal */
      inputName = "required";
      /** @internal */
      normalizeInput = booleanAttribute;
      /** @internal */
      createValidator = (input2) => requiredValidator;
      /** @docs-private */
      enabled(input2) {
        return input2;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _RequiredValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _RequiredValidator,
        isStandalone: false,
        selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",
        inputs: {
          required: "required"
        },
        host: {
          properties: {
            "attr.required": '_enabled ? "" : null'
          }
        },
        providers: [REQUIRED_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: RequiredValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",
          providers: [REQUIRED_VALIDATOR],
          host: {
            "[attr.required]": '_enabled ? "" : null'
          },
          standalone: false
        }]
      }],
      propDecorators: {
        required: [{
          type: Input
        }]
      }
    });
    CheckboxRequiredValidator = class _CheckboxRequiredValidator extends RequiredValidator {
      /** @internal */
      createValidator = (input2) => requiredTrueValidator;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _CheckboxRequiredValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _CheckboxRequiredValidator,
        isStandalone: false,
        selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]",
        host: {
          properties: {
            "attr.required": '_enabled ? "" : null'
          }
        },
        providers: [CHECKBOX_REQUIRED_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: CheckboxRequiredValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]",
          providers: [CHECKBOX_REQUIRED_VALIDATOR],
          host: {
            "[attr.required]": '_enabled ? "" : null'
          },
          standalone: false
        }]
      }]
    });
    EMAIL_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => EmailValidator),
      multi: true
    };
    EmailValidator = class _EmailValidator extends AbstractValidatorDirective {
      /**
       * @description
       * Tracks changes to the email attribute bound to this directive.
       */
      email;
      /** @internal */
      inputName = "email";
      /** @internal */
      normalizeInput = booleanAttribute;
      /** @internal */
      createValidator = (input2) => emailValidator;
      /** @docs-private */
      enabled(input2) {
        return input2;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _EmailValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _EmailValidator,
        isStandalone: false,
        selector: "[email][formControlName],[email][formControl],[email][ngModel]",
        inputs: {
          email: "email"
        },
        providers: [EMAIL_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: EmailValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[email][formControlName],[email][formControl],[email][ngModel]",
          providers: [EMAIL_VALIDATOR],
          standalone: false
        }]
      }],
      propDecorators: {
        email: [{
          type: Input
        }]
      }
    });
    MIN_LENGTH_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => MinLengthValidator),
      multi: true
    };
    MinLengthValidator = class _MinLengthValidator extends AbstractValidatorDirective {
      /**
       * @description
       * Tracks changes to the minimum length bound to this directive.
       */
      minlength;
      /** @internal */
      inputName = "minlength";
      /** @internal */
      normalizeInput = (input2) => toInteger(input2);
      /** @internal */
      createValidator = (minlength) => minLengthValidator(minlength);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _MinLengthValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _MinLengthValidator,
        isStandalone: false,
        selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]",
        inputs: {
          minlength: "minlength"
        },
        host: {
          properties: {
            "attr.minlength": "_enabled ? minlength : null"
          }
        },
        providers: [MIN_LENGTH_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: MinLengthValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]",
          providers: [MIN_LENGTH_VALIDATOR],
          host: {
            "[attr.minlength]": "_enabled ? minlength : null"
          },
          standalone: false
        }]
      }],
      propDecorators: {
        minlength: [{
          type: Input
        }]
      }
    });
    MAX_LENGTH_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => MaxLengthValidator),
      multi: true
    };
    MaxLengthValidator = class _MaxLengthValidator extends AbstractValidatorDirective {
      /**
       * @description
       * Tracks changes to the maximum length bound to this directive.
       */
      maxlength;
      /** @internal */
      inputName = "maxlength";
      /** @internal */
      normalizeInput = (input2) => toInteger(input2);
      /** @internal */
      createValidator = (maxlength) => maxLengthValidator(maxlength);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _MaxLengthValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _MaxLengthValidator,
        isStandalone: false,
        selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]",
        inputs: {
          maxlength: "maxlength"
        },
        host: {
          properties: {
            "attr.maxlength": "_enabled ? maxlength : null"
          }
        },
        providers: [MAX_LENGTH_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: MaxLengthValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]",
          providers: [MAX_LENGTH_VALIDATOR],
          host: {
            "[attr.maxlength]": "_enabled ? maxlength : null"
          },
          standalone: false
        }]
      }],
      propDecorators: {
        maxlength: [{
          type: Input
        }]
      }
    });
    PATTERN_VALIDATOR = {
      provide: NG_VALIDATORS,
      useExisting: forwardRef(() => PatternValidator),
      multi: true
    };
    PatternValidator = class _PatternValidator extends AbstractValidatorDirective {
      /**
       * @description
       * Tracks changes to the pattern bound to this directive.
       */
      pattern;
      // This input is always defined, since the name matches selector.
      /** @internal */
      inputName = "pattern";
      /** @internal */
      normalizeInput = (input2) => input2;
      /** @internal */
      createValidator = (input2) => patternValidator(input2);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _PatternValidator,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.14",
        type: _PatternValidator,
        isStandalone: false,
        selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]",
        inputs: {
          pattern: "pattern"
        },
        host: {
          properties: {
            "attr.pattern": "_enabled ? pattern : null"
          }
        },
        providers: [PATTERN_VALIDATOR],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: PatternValidator,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]",
          providers: [PATTERN_VALIDATOR],
          host: {
            "[attr.pattern]": "_enabled ? pattern : null"
          },
          standalone: false
        }]
      }],
      propDecorators: {
        pattern: [{
          type: Input
        }]
      }
    });
    SHARED_FORM_DIRECTIVES = [\u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator];
    TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
    REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
    \u0275InternalFormsSharedModule = class _\u0275InternalFormsSharedModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _\u0275InternalFormsSharedModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _\u0275InternalFormsSharedModule,
        declarations: [\u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator],
        exports: [\u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _\u0275InternalFormsSharedModule
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: \u0275InternalFormsSharedModule,
      decorators: [{
        type: NgModule,
        args: [{
          declarations: SHARED_FORM_DIRECTIVES,
          exports: SHARED_FORM_DIRECTIVES
        }]
      }]
    });
    FormArray = class extends AbstractControl {
      /**
       * Creates a new `FormArray` instance.
       *
       * @param controls An array of child controls. Each child control is given an index
       * where it is registered.
       *
       * @param validatorOrOpts A synchronous validator function, or an array of
       * such functions, or an `AbstractControlOptions` object that contains validation functions
       * and a validation trigger.
       *
       * @param asyncValidator A single async validator or array of async validator functions
       *
       */
      constructor(controls, validatorOrOpts, asyncValidator) {
        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
        this.controls = controls;
        this._initObservables();
        this._setUpdateStrategy(validatorOrOpts);
        this._setUpControls();
        this.updateValueAndValidity({
          onlySelf: true,
          // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
          // `VALID` or `INVALID`.
          // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
          // to `true` to allow that during the control creation process.
          emitEvent: !!this.asyncValidator
        });
      }
      controls;
      /**
       * Get the `AbstractControl` at the given `index` in the array.
       *
       * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap
       *     around from the back, and if index is greatly negative (less than `-length`), the result is
       * undefined. This behavior is the same as `Array.at(index)`.
       */
      at(index) {
        return this.controls[this._adjustIndex(index)];
      }
      /**
       * Insert a new `AbstractControl` at the end of the array.
       *
       * @param control Form control to be inserted
       * @param options Specifies whether this FormArray instance should emit events after a new
       *     control is added.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when the control is
       * inserted. When false, no events are emitted.
       */
      push(control, options = {}) {
        this.controls.push(control);
        this._registerControl(control);
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
        this._onCollectionChange();
      }
      /**
       * Insert a new `AbstractControl` at the given `index` in the array.
       *
       * @param index Index in the array to insert the control. If `index` is negative, wraps around
       *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.
       * This behavior is the same as `Array.splice(index, 0, control)`.
       * @param control Form control to be inserted
       * @param options Specifies whether this FormArray instance should emit events after a new
       *     control is inserted.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when the control is
       * inserted. When false, no events are emitted.
       */
      insert(index, control, options = {}) {
        this.controls.splice(index, 0, control);
        this._registerControl(control);
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
      }
      /**
       * Remove the control at the given `index` in the array.
       *
       * @param index Index in the array to remove the control.  If `index` is negative, wraps around
       *     from the back. If `index` is greatly negative (less than `-length`), removes the first
       *     element. This behavior is the same as `Array.splice(index, 1)`.
       * @param options Specifies whether this FormArray instance should emit events after a
       *     control is removed.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when the control is
       * removed. When false, no events are emitted.
       */
      removeAt(index, options = {}) {
        let adjustedIndex = this._adjustIndex(index);
        if (adjustedIndex < 0) adjustedIndex = 0;
        if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {
        });
        this.controls.splice(adjustedIndex, 1);
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
      }
      /**
       * Replace an existing control.
       *
       * @param index Index in the array to replace the control. If `index` is negative, wraps around
       *     from the back. If `index` is greatly negative (less than `-length`), replaces the first
       *     element. This behavior is the same as `Array.splice(index, 1, control)`.
       * @param control The `AbstractControl` control to replace the existing control
       * @param options Specifies whether this FormArray instance should emit events after an
       *     existing control is replaced with a new one.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when the control is
       * replaced with a new one. When false, no events are emitted.
       */
      setControl(index, control, options = {}) {
        let adjustedIndex = this._adjustIndex(index);
        if (adjustedIndex < 0) adjustedIndex = 0;
        if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {
        });
        this.controls.splice(adjustedIndex, 1);
        if (control) {
          this.controls.splice(adjustedIndex, 0, control);
          this._registerControl(control);
        }
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
        this._onCollectionChange();
      }
      /**
       * Length of the control array.
       */
      get length() {
        return this.controls.length;
      }
      /**
       * Sets the value of the `FormArray`. It accepts an array that matches
       * the structure of the control.
       *
       * This method performs strict checks, and throws an error if you try
       * to set the value of a control that doesn't exist or if you exclude the
       * value of a control.
       *
       * @usageNotes
       * ### Set the values for the controls in the form array
       *
       * ```ts
       * const arr = new FormArray([
       *   new FormControl(),
       *   new FormControl()
       * ]);
       * console.log(arr.value);   // [null, null]
       *
       * arr.setValue(['Nancy', 'Drew']);
       * console.log(arr.value);   // ['Nancy', 'Drew']
       * ```
       *
       * @param value Array of values for the controls
       * @param options Configure options that determine how the control propagates changes and
       * emits events after the value changes
       *
       * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
       * is false.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges`
       * observables emit events with the latest status and value when the control value is updated.
       * When false, no events are emitted.
       * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
       * updateValueAndValidity} method.
       */
      setValue(value, options = {}) {
        assertAllValuesPresent(this, false, value);
        value.forEach((newValue, index) => {
          assertControlPresent(this, false, index);
          this.at(index).setValue(newValue, {
            onlySelf: true,
            emitEvent: options.emitEvent
          });
        });
        this.updateValueAndValidity(options);
      }
      /**
       * Patches the value of the `FormArray`. It accepts an array that matches the
       * structure of the control, and does its best to match the values to the correct
       * controls in the group.
       *
       * It accepts both super-sets and sub-sets of the array without throwing an error.
       *
       * @usageNotes
       * ### Patch the values for controls in a form array
       *
       * ```ts
       * const arr = new FormArray([
       *    new FormControl(),
       *    new FormControl()
       * ]);
       * console.log(arr.value);   // [null, null]
       *
       * arr.patchValue(['Nancy']);
       * console.log(arr.value);   // ['Nancy', null]
       * ```
       *
       * @param value Array of latest values for the controls
       * @param options Configure options that determine how the control propagates changes and
       * emits events after the value changes
       *
       * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
       * is false.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when the control
       * value is updated. When false, no events are emitted. The configuration options are passed to
       * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
       */
      patchValue(value, options = {}) {
        if (value == null) return;
        value.forEach((newValue, index) => {
          if (this.at(index)) {
            this.at(index).patchValue(newValue, {
              onlySelf: true,
              emitEvent: options.emitEvent
            });
          }
        });
        this.updateValueAndValidity(options);
      }
      /**
       * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
       * value of all descendants to null or null maps.
       *
       * You reset to a specific form state by passing in an array of states
       * that matches the structure of the control. The state is a standalone value
       * or a form state object with both a value and a disabled status.
       *
       * @usageNotes
       * ### Reset the values in a form array
       *
       * ```ts
       * const arr = new FormArray([
       *    new FormControl(),
       *    new FormControl()
       * ]);
       * arr.reset(['name', 'last name']);
       *
       * console.log(arr.value);  // ['name', 'last name']
       * ```
       *
       * ### Reset the values in a form array and the disabled status for the first control
       *
       * ```ts
       * arr.reset([
       *   {value: 'name', disabled: true},
       *   'last'
       * ]);
       *
       * console.log(arr.value);  // ['last']
       * console.log(arr.at(0).status);  // 'DISABLED'
       * ```
       *
       * @param value Array of values for the controls
       * @param options Configure options that determine how the control propagates changes and
       * emits events after the value changes
       *
       * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
       * is false.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges`
       * observables emit events with the latest status and value when the control is reset.
       * When false, no events are emitted.
       * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
       * updateValueAndValidity} method.
       */
      reset(value = [], options = {}) {
        this._forEachChild((control, index) => {
          control.reset(value[index], {
            onlySelf: true,
            emitEvent: options.emitEvent
          });
        });
        this._updatePristine(options, this);
        this._updateTouched(options, this);
        this.updateValueAndValidity(options);
      }
      /**
       * The aggregate value of the array, including any disabled controls.
       *
       * Reports all values regardless of disabled status.
       */
      getRawValue() {
        return this.controls.map((control) => control.getRawValue());
      }
      /**
       * Remove all controls in the `FormArray`.
       *
       * @param options Specifies whether this FormArray instance should emit events after all
       *     controls are removed.
       * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
       * `valueChanges` observables emit events with the latest status and value when all controls
       * in this FormArray instance are removed. When false, no events are emitted.
       *
       * @usageNotes
       * ### Remove all elements from a FormArray
       *
       * ```ts
       * const arr = new FormArray([
       *    new FormControl(),
       *    new FormControl()
       * ]);
       * console.log(arr.length);  // 2
       *
       * arr.clear();
       * console.log(arr.length);  // 0
       * ```
       *
       * It's a simpler and more efficient alternative to removing all elements one by one:
       *
       * ```ts
       * const arr = new FormArray([
       *    new FormControl(),
       *    new FormControl()
       * ]);
       *
       * while (arr.length) {
       *    arr.removeAt(0);
       * }
       * ```
       */
      clear(options = {}) {
        if (this.controls.length < 1) return;
        this._forEachChild((control) => control._registerOnCollectionChange(() => {
        }));
        this.controls.splice(0);
        this.updateValueAndValidity({
          emitEvent: options.emitEvent
        });
      }
      /**
       * Adjusts a negative index by summing it with the length of the array. For very negative
       * indices, the result may remain negative.
       * @internal
       */
      _adjustIndex(index) {
        return index < 0 ? index + this.length : index;
      }
      /** @internal */
      _syncPendingControls() {
        let subtreeUpdated = this.controls.reduce((updated, child) => {
          return child._syncPendingControls() ? true : updated;
        }, false);
        if (subtreeUpdated) this.updateValueAndValidity({
          onlySelf: true
        });
        return subtreeUpdated;
      }
      /** @internal */
      _forEachChild(cb) {
        this.controls.forEach((control, index) => {
          cb(control, index);
        });
      }
      /** @internal */
      _updateValue() {
        this.value = this.controls.filter((control) => control.enabled || this.disabled).map((control) => control.value);
      }
      /** @internal */
      _anyControls(condition) {
        return this.controls.some((control) => control.enabled && condition(control));
      }
      /** @internal */
      _setUpControls() {
        this._forEachChild((control) => this._registerControl(control));
      }
      /** @internal */
      _allControlsDisabled() {
        for (const control of this.controls) {
          if (control.enabled) return false;
        }
        return this.controls.length > 0 || this.disabled;
      }
      _registerControl(control) {
        control.setParent(this);
        control._registerOnCollectionChange(this._onCollectionChange);
      }
      /** @internal */
      _find(name) {
        return this.at(name) ?? null;
      }
    };
    FormBuilder = class _FormBuilder {
      useNonNullable = false;
      /**
       * @description
       * Returns a FormBuilder in which automatically constructed `FormControl` elements
       * have `{nonNullable: true}` and are non-nullable.
       *
       * **Constructing non-nullable controls**
       *
       * When constructing a control, it will be non-nullable, and will reset to its initial value.
       *
       * ```ts
       * let nnfb = new FormBuilder().nonNullable;
       * let name = nnfb.control('Alex'); // FormControl<string>
       * name.reset();
       * console.log(name); // 'Alex'
       * ```
       *
       * **Constructing non-nullable groups or arrays**
       *
       * When constructing a group or array, all automatically created inner controls will be
       * non-nullable, and will reset to their initial values.
       *
       * ```ts
       * let nnfb = new FormBuilder().nonNullable;
       * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>
       * name.reset();
       * console.log(name); // {who: 'Alex'}
       * ```
       * **Constructing *nullable* fields on groups or arrays**
       *
       * It is still possible to have a nullable field. In particular, any `FormControl` which is
       * *already* constructed will not be altered. For example:
       *
       * ```ts
       * let nnfb = new FormBuilder().nonNullable;
       * // FormGroup<{who: FormControl<string|null>}>
       * let name = nnfb.group({who: new FormControl('Alex')});
       * name.reset(); console.log(name); // {who: null}
       * ```
       *
       * Because the inner control is constructed explicitly by the caller, the builder has
       * no control over how it is created, and cannot exclude the `null`.
       */
      get nonNullable() {
        const nnfb = new _FormBuilder();
        nnfb.useNonNullable = true;
        return nnfb;
      }
      group(controls, options = null) {
        const reducedControls = this._reduceControls(controls);
        let newOptions = {};
        if (isAbstractControlOptions(options)) {
          newOptions = options;
        } else if (options !== null) {
          newOptions.validators = options.validator;
          newOptions.asyncValidators = options.asyncValidator;
        }
        return new FormGroup(reducedControls, newOptions);
      }
      /**
       * @description
       * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object
       * containing all the keys and corresponding inner control types.
       *
       * @param controls A collection of child controls. The key for each child is the name
       * under which it is registered.
       *
       * @param options Configuration options object for the `FormRecord`. The object should have the
       * `AbstractControlOptions` type and might contain the following fields:
       * * `validators`: A synchronous validator function, or an array of validator functions.
       * * `asyncValidators`: A single async validator or array of async validator functions.
       * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'
       * | submit').
       */
      record(controls, options = null) {
        const reducedControls = this._reduceControls(controls);
        return new FormRecord(reducedControls, options);
      }
      /**
       * @description
       * Constructs a new `FormControl` with the given state, validators and options. Sets
       * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the
       * control will be nullable. Accepts a single generic argument, which is the type  of the
       * control's value.
       *
       * @param formState Initializes the control with an initial state value, or
       * with an object that contains both a value and a disabled status.
       *
       * @param validatorOrOpts A synchronous validator function, or an array of
       * such functions, or a `FormControlOptions` object that contains
       * validation functions and a validation trigger.
       *
       * @param asyncValidator A single async validator or array of async validator
       * functions.
       *
       * @usageNotes
       *
       * ### Initialize a control as disabled
       *
       * The following example returns a control with an initial value in a disabled state.
       *
       * {@example forms/ts/formBuilder/form_builder_example.ts region='disabled-control'}
       */
      control(formState, validatorOrOpts, asyncValidator) {
        let newOptions = {};
        if (!this.useNonNullable) {
          return new FormControl(formState, validatorOrOpts, asyncValidator);
        }
        if (isAbstractControlOptions(validatorOrOpts)) {
          newOptions = validatorOrOpts;
        } else {
          newOptions.validators = validatorOrOpts;
          newOptions.asyncValidators = asyncValidator;
        }
        return new FormControl(formState, __spreadProps(__spreadValues({}, newOptions), {
          nonNullable: true
        }));
      }
      /**
       * Constructs a new `FormArray` from the given array of configurations,
       * validators and options. Accepts a single generic argument, which is the type of each control
       * inside the array.
       *
       * @param controls An array of child controls or control configs. Each child control is given an
       *     index when it is registered.
       *
       * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an
       *     `AbstractControlOptions` object that contains
       * validation functions and a validation trigger.
       *
       * @param asyncValidator A single async validator or array of async validator functions.
       */
      array(controls, validatorOrOpts, asyncValidator) {
        const createdControls = controls.map((c) => this._createControl(c));
        return new FormArray(createdControls, validatorOrOpts, asyncValidator);
      }
      /** @internal */
      _reduceControls(controls) {
        const createdControls = {};
        Object.keys(controls).forEach((controlName) => {
          createdControls[controlName] = this._createControl(controls[controlName]);
        });
        return createdControls;
      }
      /** @internal */
      _createControl(controls) {
        if (controls instanceof FormControl) {
          return controls;
        } else if (controls instanceof AbstractControl) {
          return controls;
        } else if (Array.isArray(controls)) {
          const value = controls[0];
          const validator = controls.length > 1 ? controls[1] : null;
          const asyncValidator = controls.length > 2 ? controls[2] : null;
          return this.control(value, validator, asyncValidator);
        } else {
          return this.control(controls);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormBuilder,
        deps: [],
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormBuilder,
        providedIn: "root"
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: FormBuilder,
      decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }]
    });
    NonNullableFormBuilder = class _NonNullableFormBuilder {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NonNullableFormBuilder,
        deps: [],
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _NonNullableFormBuilder,
        providedIn: "root",
        useFactory: () => inject(FormBuilder).nonNullable
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: NonNullableFormBuilder,
      decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root",
          useFactory: () => inject(FormBuilder).nonNullable
        }]
      }]
    });
    UntypedFormBuilder = class _UntypedFormBuilder extends FormBuilder {
      group(controlsConfig, options = null) {
        return super.group(controlsConfig, options);
      }
      /**
       * Like `FormBuilder#control`, except the resulting control is untyped.
       */
      control(formState, validatorOrOpts, asyncValidator) {
        return super.control(formState, validatorOrOpts, asyncValidator);
      }
      /**
       * Like `FormBuilder#array`, except the resulting array is untyped.
       */
      array(controlsConfig, validatorOrOpts, asyncValidator) {
        return super.array(controlsConfig, validatorOrOpts, asyncValidator);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _UntypedFormBuilder,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _UntypedFormBuilder,
        providedIn: "root"
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: UntypedFormBuilder,
      decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }]
    });
    VERSION = new Version("19.2.14");
    FormsModule = class _FormsModule {
      /**
       * @description
       * Provides options for configuring the forms module.
       *
       * @param opts An object of configuration options
       * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
       * correct, or to only call it `whenDisabled`, which is the legacy behavior.
       */
      static withConfig(opts) {
        return {
          ngModule: _FormsModule,
          providers: [{
            provide: CALL_SET_DISABLED_STATE,
            useValue: opts.callSetDisabledState ?? setDisabledStateDefault
          }]
        };
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormsModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormsModule,
        declarations: [NgModel, NgModelGroup, NgForm],
        exports: [\u0275InternalFormsSharedModule, NgModel, NgModelGroup, NgForm]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _FormsModule,
        imports: [\u0275InternalFormsSharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: FormsModule,
      decorators: [{
        type: NgModule,
        args: [{
          declarations: TEMPLATE_DRIVEN_DIRECTIVES,
          exports: [\u0275InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
        }]
      }]
    });
    ReactiveFormsModule = class _ReactiveFormsModule {
      /**
       * @description
       * Provides options for configuring the reactive forms module.
       *
       * @param opts An object of configuration options
       * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
       * binding is used with reactive form directives.
       * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
       * correct, or to only call it `whenDisabled`, which is the legacy behavior.
       */
      static withConfig(opts) {
        return {
          ngModule: _ReactiveFormsModule,
          providers: [{
            provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
            useValue: opts.warnOnNgModelWithFormControl ?? "always"
          }, {
            provide: CALL_SET_DISABLED_STATE,
            useValue: opts.callSetDisabledState ?? setDisabledStateDefault
          }]
        };
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _ReactiveFormsModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _ReactiveFormsModule,
        declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName],
        exports: [\u0275InternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.14",
        ngImport: core_exports,
        type: _ReactiveFormsModule,
        imports: [\u0275InternalFormsSharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.14",
      ngImport: core_exports,
      type: ReactiveFormsModule,
      decorators: [{
        type: NgModule,
        args: [{
          declarations: [REACTIVE_DRIVEN_DIRECTIVES],
          exports: [\u0275InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-dom.mjs
var DomHandler, ConnectedOverlayScrollHandler;
var init_primeng_dom = __esm({
  "node_modules/primeng/fesm2022/primeng-dom.mjs"() {
    "use strict";
    DomHandler = class _DomHandler {
      static zindex = 1e3;
      static calculatedScrollbarWidth = null;
      static calculatedScrollbarHeight = null;
      static browser;
      static addClass(element, className) {
        if (element && className) {
          if (element.classList) element.classList.add(className);
          else element.className += " " + className;
        }
      }
      static addMultipleClasses(element, className) {
        if (element && className) {
          if (element.classList) {
            let styles = className.trim().split(" ");
            for (let i = 0; i < styles.length; i++) {
              element.classList.add(styles[i]);
            }
          } else {
            let styles = className.split(" ");
            for (let i = 0; i < styles.length; i++) {
              element.className += " " + styles[i];
            }
          }
        }
      }
      static removeClass(element, className) {
        if (element && className) {
          if (element.classList) element.classList.remove(className);
          else element.className = element.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
        }
      }
      static removeMultipleClasses(element, classNames) {
        if (element && classNames) {
          [classNames].flat().filter(Boolean).forEach((cNames) => cNames.split(" ").forEach((className) => this.removeClass(element, className)));
        }
      }
      static hasClass(element, className) {
        if (element && className) {
          if (element.classList) return element.classList.contains(className);
          else return new RegExp("(^| )" + className + "( |$)", "gi").test(element.className);
        }
        return false;
      }
      static siblings(element) {
        return Array.prototype.filter.call(element.parentNode.children, function(child) {
          return child !== element;
        });
      }
      static find(element, selector) {
        return Array.from(element.querySelectorAll(selector));
      }
      static findSingle(element, selector) {
        return this.isElement(element) ? element.querySelector(selector) : null;
      }
      static index(element) {
        let children = element.parentNode.childNodes;
        let num = 0;
        for (var i = 0; i < children.length; i++) {
          if (children[i] == element) return num;
          if (children[i].nodeType == 1) num++;
        }
        return -1;
      }
      static indexWithinGroup(element, attributeName) {
        let children = element.parentNode ? element.parentNode.childNodes : [];
        let num = 0;
        for (var i = 0; i < children.length; i++) {
          if (children[i] == element) return num;
          if (children[i].attributes && children[i].attributes[attributeName] && children[i].nodeType == 1) num++;
        }
        return -1;
      }
      static appendOverlay(overlay, target, appendTo = "self") {
        if (appendTo !== "self" && overlay && target) {
          this.appendChild(overlay, target);
        }
      }
      static alignOverlay(overlay, target, appendTo = "self", calculateMinWidth = true) {
        if (overlay && target) {
          if (calculateMinWidth) {
            overlay.style.minWidth = `${_DomHandler.getOuterWidth(target)}px`;
          }
          if (appendTo === "self") {
            this.relativePosition(overlay, target);
          } else {
            this.absolutePosition(overlay, target);
          }
        }
      }
      static relativePosition(element, target, gutter = true) {
        const getClosestRelativeElement = (el) => {
          if (!el) return;
          return getComputedStyle(el).getPropertyValue("position") === "relative" ? el : getClosestRelativeElement(el.parentElement);
        };
        const elementDimensions = element.offsetParent ? {
          width: element.offsetWidth,
          height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        const targetHeight = target.offsetHeight;
        const targetOffset = target.getBoundingClientRect();
        const windowScrollTop = this.getWindowScrollTop();
        const windowScrollLeft = this.getWindowScrollLeft();
        const viewport = this.getViewport();
        const relativeElement = getClosestRelativeElement(element);
        const relativeElementOffset = relativeElement?.getBoundingClientRect() || {
          top: -1 * windowScrollTop,
          left: -1 * windowScrollLeft
        };
        let top, left;
        if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {
          top = targetOffset.top - relativeElementOffset.top - elementDimensions.height;
          element.style.transformOrigin = "bottom";
          if (targetOffset.top + top < 0) {
            top = -1 * targetOffset.top;
          }
        } else {
          top = targetHeight + targetOffset.top - relativeElementOffset.top;
          element.style.transformOrigin = "top";
        }
        const horizontalOverflow = targetOffset.left + elementDimensions.width - viewport.width;
        const targetLeftOffsetInSpaceOfRelativeElement = targetOffset.left - relativeElementOffset.left;
        if (elementDimensions.width > viewport.width) {
          left = (targetOffset.left - relativeElementOffset.left) * -1;
        } else if (horizontalOverflow > 0) {
          left = targetLeftOffsetInSpaceOfRelativeElement - horizontalOverflow;
        } else {
          left = targetOffset.left - relativeElementOffset.left;
        }
        element.style.top = top + "px";
        element.style.left = left + "px";
        gutter && (element.style.marginTop = origin === "bottom" ? "calc(var(--p-anchor-gutter) * -1)" : "calc(var(--p-anchor-gutter))");
      }
      static absolutePosition(element, target, gutter = true) {
        const elementDimensions = element.offsetParent ? {
          width: element.offsetWidth,
          height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        const elementOuterHeight = elementDimensions.height;
        const elementOuterWidth = elementDimensions.width;
        const targetOuterHeight = target.offsetHeight;
        const targetOuterWidth = target.offsetWidth;
        const targetOffset = target.getBoundingClientRect();
        const windowScrollTop = this.getWindowScrollTop();
        const windowScrollLeft = this.getWindowScrollLeft();
        const viewport = this.getViewport();
        let top, left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
          top = targetOffset.top + windowScrollTop - elementOuterHeight;
          element.style.transformOrigin = "bottom";
          if (top < 0) {
            top = windowScrollTop;
          }
        } else {
          top = targetOuterHeight + targetOffset.top + windowScrollTop;
          element.style.transformOrigin = "top";
        }
        if (targetOffset.left + elementOuterWidth > viewport.width) left = Math.max(0, targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth);
        else left = targetOffset.left + windowScrollLeft;
        element.style.top = top + "px";
        element.style.left = left + "px";
        gutter && (element.style.marginTop = origin === "bottom" ? "calc(var(--p-anchor-gutter) * -1)" : "calc(var(--p-anchor-gutter))");
      }
      static getParents(element, parents = []) {
        return element["parentNode"] === null ? parents : this.getParents(element.parentNode, parents.concat([element.parentNode]));
      }
      static getScrollableParents(element) {
        let scrollableParents = [];
        if (element) {
          let parents = this.getParents(element);
          const overflowRegex = /(auto|scroll)/;
          const overflowCheck = (node) => {
            let styleDeclaration = window["getComputedStyle"](node, null);
            return overflowRegex.test(styleDeclaration.getPropertyValue("overflow")) || overflowRegex.test(styleDeclaration.getPropertyValue("overflowX")) || overflowRegex.test(styleDeclaration.getPropertyValue("overflowY"));
          };
          for (let parent of parents) {
            let scrollSelectors = parent.nodeType === 1 && parent.dataset["scrollselectors"];
            if (scrollSelectors) {
              let selectors = scrollSelectors.split(",");
              for (let selector of selectors) {
                let el = this.findSingle(parent, selector);
                if (el && overflowCheck(el)) {
                  scrollableParents.push(el);
                }
              }
            }
            if (parent.nodeType !== 9 && overflowCheck(parent)) {
              scrollableParents.push(parent);
            }
          }
        }
        return scrollableParents;
      }
      static getHiddenElementOuterHeight(element) {
        element.style.visibility = "hidden";
        element.style.display = "block";
        let elementHeight = element.offsetHeight;
        element.style.display = "none";
        element.style.visibility = "visible";
        return elementHeight;
      }
      static getHiddenElementOuterWidth(element) {
        element.style.visibility = "hidden";
        element.style.display = "block";
        let elementWidth = element.offsetWidth;
        element.style.display = "none";
        element.style.visibility = "visible";
        return elementWidth;
      }
      static getHiddenElementDimensions(element) {
        let dimensions = {};
        element.style.visibility = "hidden";
        element.style.display = "block";
        dimensions.width = element.offsetWidth;
        dimensions.height = element.offsetHeight;
        element.style.display = "none";
        element.style.visibility = "visible";
        return dimensions;
      }
      static scrollInView(container, item) {
        let borderTopValue = getComputedStyle(container).getPropertyValue("borderTopWidth");
        let borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        let paddingTopValue = getComputedStyle(container).getPropertyValue("paddingTop");
        let paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        let containerRect = container.getBoundingClientRect();
        let itemRect = item.getBoundingClientRect();
        let offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        let scroll = container.scrollTop;
        let elementHeight = container.clientHeight;
        let itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
          container.scrollTop = scroll + offset;
        } else if (offset + itemHeight > elementHeight) {
          container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
      }
      static fadeIn(element, duration) {
        element.style.opacity = 0;
        let last = +/* @__PURE__ */ new Date();
        let opacity = 0;
        let tick2 = function() {
          opacity = +element.style.opacity.replace(",", ".") + ((/* @__PURE__ */ new Date()).getTime() - last) / duration;
          element.style.opacity = opacity;
          last = +/* @__PURE__ */ new Date();
          if (+opacity < 1) {
            window.requestAnimationFrame && requestAnimationFrame(tick2) || setTimeout(tick2, 16);
          }
        };
        tick2();
      }
      static fadeOut(element, ms) {
        var opacity = 1, interval = 50, duration = ms, gap = interval / duration;
        let fading = setInterval(() => {
          opacity = opacity - gap;
          if (opacity <= 0) {
            opacity = 0;
            clearInterval(fading);
          }
          element.style.opacity = opacity;
        }, interval);
      }
      static getWindowScrollTop() {
        let doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      }
      static getWindowScrollLeft() {
        let doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      }
      static matches(element, selector) {
        var p = Element.prototype;
        var f = p["matches"] || p.webkitMatchesSelector || p["mozMatchesSelector"] || p["msMatchesSelector"] || function(s) {
          return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };
        return f.call(element, selector);
      }
      static getOuterWidth(el, margin) {
        let width = el.offsetWidth;
        if (margin) {
          let style2 = getComputedStyle(el);
          width += parseFloat(style2.marginLeft) + parseFloat(style2.marginRight);
        }
        return width;
      }
      static getHorizontalPadding(el) {
        let style2 = getComputedStyle(el);
        return parseFloat(style2.paddingLeft) + parseFloat(style2.paddingRight);
      }
      static getHorizontalMargin(el) {
        let style2 = getComputedStyle(el);
        return parseFloat(style2.marginLeft) + parseFloat(style2.marginRight);
      }
      static innerWidth(el) {
        let width = el.offsetWidth;
        let style2 = getComputedStyle(el);
        width += parseFloat(style2.paddingLeft) + parseFloat(style2.paddingRight);
        return width;
      }
      static width(el) {
        let width = el.offsetWidth;
        let style2 = getComputedStyle(el);
        width -= parseFloat(style2.paddingLeft) + parseFloat(style2.paddingRight);
        return width;
      }
      static getInnerHeight(el) {
        let height = el.offsetHeight;
        let style2 = getComputedStyle(el);
        height += parseFloat(style2.paddingTop) + parseFloat(style2.paddingBottom);
        return height;
      }
      static getOuterHeight(el, margin) {
        let height = el.offsetHeight;
        if (margin) {
          let style2 = getComputedStyle(el);
          height += parseFloat(style2.marginTop) + parseFloat(style2.marginBottom);
        }
        return height;
      }
      static getHeight(el) {
        let height = el.offsetHeight;
        let style2 = getComputedStyle(el);
        height -= parseFloat(style2.paddingTop) + parseFloat(style2.paddingBottom) + parseFloat(style2.borderTopWidth) + parseFloat(style2.borderBottomWidth);
        return height;
      }
      static getWidth(el) {
        let width = el.offsetWidth;
        let style2 = getComputedStyle(el);
        width -= parseFloat(style2.paddingLeft) + parseFloat(style2.paddingRight) + parseFloat(style2.borderLeftWidth) + parseFloat(style2.borderRightWidth);
        return width;
      }
      static getViewport() {
        let win = window, d = document, e = d.documentElement, g = d.getElementsByTagName("body")[0], w = win.innerWidth || e.clientWidth || g.clientWidth, h = win.innerHeight || e.clientHeight || g.clientHeight;
        return {
          width: w,
          height: h
        };
      }
      static getOffset(el) {
        var rect = el.getBoundingClientRect();
        return {
          top: rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0),
          left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0)
        };
      }
      static replaceElementWith(element, replacementElement) {
        let parentNode = element.parentNode;
        if (!parentNode) throw `Can't replace element`;
        return parentNode.replaceChild(replacementElement, element);
      }
      static getUserAgent() {
        if (navigator && this.isClient()) {
          return navigator.userAgent;
        }
      }
      static isIE() {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        if (msie > 0) {
          return true;
        }
        var trident = ua.indexOf("Trident/");
        if (trident > 0) {
          var rv = ua.indexOf("rv:");
          return true;
        }
        var edge = ua.indexOf("Edge/");
        if (edge > 0) {
          return true;
        }
        return false;
      }
      static isIOS() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window["MSStream"];
      }
      static isAndroid() {
        return /(android)/i.test(navigator.userAgent);
      }
      static isTouchDevice() {
        return "ontouchstart" in window || navigator.maxTouchPoints > 0;
      }
      static appendChild(element, target) {
        if (this.isElement(target)) target.appendChild(element);
        else if (target && target.el && target.el.nativeElement) target.el.nativeElement.appendChild(element);
        else throw "Cannot append " + target + " to " + element;
      }
      static removeChild(element, target) {
        if (this.isElement(target)) target.removeChild(element);
        else if (target.el && target.el.nativeElement) target.el.nativeElement.removeChild(element);
        else throw "Cannot remove " + element + " from " + target;
      }
      static removeElement(element) {
        if (!("remove" in Element.prototype)) element.parentNode.removeChild(element);
        else element.remove();
      }
      static isElement(obj) {
        return typeof HTMLElement === "object" ? obj instanceof HTMLElement : obj && typeof obj === "object" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === "string";
      }
      static calculateScrollbarWidth(el) {
        if (el) {
          let style2 = getComputedStyle(el);
          return el.offsetWidth - el.clientWidth - parseFloat(style2.borderLeftWidth) - parseFloat(style2.borderRightWidth);
        } else {
          if (this.calculatedScrollbarWidth !== null) return this.calculatedScrollbarWidth;
          let scrollDiv = document.createElement("div");
          scrollDiv.className = "p-scrollbar-measure";
          document.body.appendChild(scrollDiv);
          let scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
          document.body.removeChild(scrollDiv);
          this.calculatedScrollbarWidth = scrollbarWidth;
          return scrollbarWidth;
        }
      }
      static calculateScrollbarHeight() {
        if (this.calculatedScrollbarHeight !== null) return this.calculatedScrollbarHeight;
        let scrollDiv = document.createElement("div");
        scrollDiv.className = "p-scrollbar-measure";
        document.body.appendChild(scrollDiv);
        let scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarHeight;
        return scrollbarHeight;
      }
      static invokeElementMethod(element, methodName, args) {
        element[methodName].apply(element, args);
      }
      static clearSelection() {
        if (window.getSelection) {
          if (window.getSelection().empty) {
            window.getSelection().empty();
          } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
            window.getSelection().removeAllRanges();
          }
        } else if (document["selection"] && document["selection"].empty) {
          try {
            document["selection"].empty();
          } catch (error) {
          }
        }
      }
      static getBrowser() {
        if (!this.browser) {
          let matched = this.resolveUserAgent();
          this.browser = {};
          if (matched.browser) {
            this.browser[matched.browser] = true;
            this.browser["version"] = matched.version;
          }
          if (this.browser["chrome"]) {
            this.browser["webkit"] = true;
          } else if (this.browser["webkit"]) {
            this.browser["safari"] = true;
          }
        }
        return this.browser;
      }
      static resolveUserAgent() {
        let ua = navigator.userAgent.toLowerCase();
        let match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        return {
          browser: match[1] || "",
          version: match[2] || "0"
        };
      }
      static isInteger(value) {
        if (Number.isInteger) {
          return Number.isInteger(value);
        } else {
          return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
        }
      }
      static isHidden(element) {
        return !element || element.offsetParent === null;
      }
      static isVisible(element) {
        return element && element.offsetParent != null;
      }
      static isExist(element) {
        return element !== null && typeof element !== "undefined" && element.nodeName && element.parentNode;
      }
      static focus(element, options) {
        element && document.activeElement !== element && element.focus(options);
      }
      static getFocusableSelectorString(selector = "") {
        return `button:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        [href][clientHeight][clientWidth]:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        input:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        select:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        textarea:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        [tabIndex]:not([tabIndex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        [contenteditable]:not([tabIndex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        .p-inputtext:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
        .p-button:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector}`;
      }
      static getFocusableElements(element, selector = "") {
        let focusableElements = this.find(element, this.getFocusableSelectorString(selector));
        let visibleFocusableElements = [];
        for (let focusableElement of focusableElements) {
          const computedStyle = getComputedStyle(focusableElement);
          if (this.isVisible(focusableElement) && computedStyle.display != "none" && computedStyle.visibility != "hidden") visibleFocusableElements.push(focusableElement);
        }
        return visibleFocusableElements;
      }
      static getFocusableElement(element, selector = "") {
        let focusableElement = this.findSingle(element, this.getFocusableSelectorString(selector));
        if (focusableElement) {
          const computedStyle = getComputedStyle(focusableElement);
          if (this.isVisible(focusableElement) && computedStyle.display != "none" && computedStyle.visibility != "hidden") return focusableElement;
        }
        return null;
      }
      static getFirstFocusableElement(element, selector = "") {
        const focusableElements = this.getFocusableElements(element, selector);
        return focusableElements.length > 0 ? focusableElements[0] : null;
      }
      static getLastFocusableElement(element, selector) {
        const focusableElements = this.getFocusableElements(element, selector);
        return focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : null;
      }
      static getNextFocusableElement(element, reverse = false) {
        const focusableElements = _DomHandler.getFocusableElements(element);
        let index = 0;
        if (focusableElements && focusableElements.length > 0) {
          const focusedIndex = focusableElements.indexOf(focusableElements[0].ownerDocument.activeElement);
          if (reverse) {
            if (focusedIndex == -1 || focusedIndex === 0) {
              index = focusableElements.length - 1;
            } else {
              index = focusedIndex - 1;
            }
          } else if (focusedIndex != -1 && focusedIndex !== focusableElements.length - 1) {
            index = focusedIndex + 1;
          }
        }
        return focusableElements[index];
      }
      static generateZIndex() {
        this.zindex = this.zindex || 999;
        return ++this.zindex;
      }
      static getSelection() {
        if (window.getSelection) return window.getSelection().toString();
        else if (document.getSelection) return document.getSelection().toString();
        else if (document["selection"]) return document["selection"].createRange().text;
        return null;
      }
      static getTargetElement(target, el) {
        if (!target) return null;
        switch (target) {
          case "document":
            return document;
          case "window":
            return window;
          case "@next":
            return el?.nextElementSibling;
          case "@prev":
            return el?.previousElementSibling;
          case "@parent":
            return el?.parentElement;
          case "@grandparent":
            return el?.parentElement.parentElement;
          default:
            const type = typeof target;
            if (type === "string") {
              return document.querySelector(target);
            } else if (type === "object" && target.hasOwnProperty("nativeElement")) {
              return this.isExist(target.nativeElement) ? target.nativeElement : void 0;
            }
            const isFunction = (obj) => !!(obj && obj.constructor && obj.call && obj.apply);
            const element = isFunction(target) ? target() : target;
            return element && element.nodeType === 9 || this.isExist(element) ? element : null;
        }
      }
      static isClient() {
        return !!(typeof window !== "undefined" && window.document && window.document.createElement);
      }
      static getAttribute(element, name) {
        if (element) {
          const value = element.getAttribute(name);
          if (!isNaN(value)) {
            return +value;
          }
          if (value === "true" || value === "false") {
            return value === "true";
          }
          return value;
        }
        return void 0;
      }
      static calculateBodyScrollbarWidth() {
        return window.innerWidth - document.documentElement.offsetWidth;
      }
      static blockBodyScroll(className = "p-overflow-hidden") {
        document.body.style.setProperty("--scrollbar-width", this.calculateBodyScrollbarWidth() + "px");
        this.addClass(document.body, className);
      }
      static unblockBodyScroll(className = "p-overflow-hidden") {
        document.body.style.removeProperty("--scrollbar-width");
        this.removeClass(document.body, className);
      }
      static createElement(type, attributes = {}, ...children) {
        if (type) {
          const element = document.createElement(type);
          this.setAttributes(element, attributes);
          element.append(...children);
          return element;
        }
        return void 0;
      }
      static setAttribute(element, attribute = "", value) {
        if (this.isElement(element) && value !== null && value !== void 0) {
          element.setAttribute(attribute, value);
        }
      }
      static setAttributes(element, attributes = {}) {
        if (this.isElement(element)) {
          const computedStyles = (rule, value) => {
            const styles = element?.$attrs?.[rule] ? [element?.$attrs?.[rule]] : [];
            return [value].flat().reduce((cv, v) => {
              if (v !== null && v !== void 0) {
                const type = typeof v;
                if (type === "string" || type === "number") {
                  cv.push(v);
                } else if (type === "object") {
                  const _cv = Array.isArray(v) ? computedStyles(rule, v) : Object.entries(v).map(([_k, _v]) => rule === "style" && (!!_v || _v === 0) ? `${_k.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()}:${_v}` : !!_v ? _k : void 0);
                  cv = _cv.length ? cv.concat(_cv.filter((c) => !!c)) : cv;
                }
              }
              return cv;
            }, styles);
          };
          Object.entries(attributes).forEach(([key, value]) => {
            if (value !== void 0 && value !== null) {
              const matchedEvent = key.match(/^on(.+)/);
              if (matchedEvent) {
                element.addEventListener(matchedEvent[1].toLowerCase(), value);
              } else if (key === "pBind") {
                this.setAttributes(element, value);
              } else {
                value = key === "class" ? [...new Set(computedStyles("class", value))].join(" ").trim() : key === "style" ? computedStyles("style", value).join(";").trim() : value;
                (element.$attrs = element.$attrs || {}) && (element.$attrs[key] = value);
                element.setAttribute(key, value);
              }
            }
          });
        }
      }
      static isFocusableElement(element, selector = "") {
        return this.isElement(element) ? element.matches(`button:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
                [href][clientHeight][clientWidth]:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
                input:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
                select:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
                textarea:not([tabindex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
                [tabIndex]:not([tabIndex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector},
                [contenteditable]:not([tabIndex = "-1"]):not([disabled]):not([style*="display:none"]):not([hidden])${selector}`) : false;
      }
    };
    ConnectedOverlayScrollHandler = class {
      element;
      listener;
      scrollableParents;
      constructor(element, listener = () => {
      }) {
        this.element = element;
        this.listener = listener;
      }
      bindScrollListener() {
        this.scrollableParents = DomHandler.getScrollableParents(this.element);
        for (let i = 0; i < this.scrollableParents.length; i++) {
          this.scrollableParents[i].addEventListener("scroll", this.listener);
        }
      }
      unbindScrollListener() {
        if (this.scrollableParents) {
          for (let i = 0; i < this.scrollableParents.length; i++) {
            this.scrollableParents[i].removeEventListener("scroll", this.listener);
          }
        }
      }
      destroy() {
        this.unbindScrollListener();
        this.element = null;
        this.listener = null;
        this.scrollableParents = null;
      }
    };
  }
});

// node_modules/primeng/fesm2022/primeng-autofocus.mjs
var AutoFocus, AutoFocusModule;
var init_primeng_autofocus = __esm({
  "node_modules/primeng/fesm2022/primeng-autofocus.mjs"() {
    "use strict";
    init_common();
    init_core();
    init_core();
    init_primeng_basecomponent();
    init_primeng_dom();
    AutoFocus = class _AutoFocus extends BaseComponent {
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @deprecated use [pAutoFocus]="true"
       * @group Props
       */
      autofocus = false;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      _autofocus = false;
      focused = false;
      platformId = inject(PLATFORM_ID);
      document = inject(DOCUMENT);
      host = inject(ElementRef);
      ngAfterContentChecked() {
        if (this.autofocus === false) {
          this.host.nativeElement.removeAttribute("autofocus");
        } else {
          this.host.nativeElement.setAttribute("autofocus", true);
        }
        if (!this.focused) {
          this.autoFocus();
        }
      }
      ngAfterViewChecked() {
        if (!this.focused) {
          this.autoFocus();
        }
      }
      autoFocus() {
        if (isPlatformBrowser(this.platformId) && this._autofocus) {
          setTimeout(() => {
            const focusableElements = DomHandler.getFocusableElements(this.host?.nativeElement);
            if (focusableElements.length === 0) {
              this.host.nativeElement.focus();
            }
            if (focusableElements.length > 0) {
              focusableElements[0].focus();
            }
            this.focused = true;
          });
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _AutoFocus,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _AutoFocus,
        isStandalone: true,
        selector: "[pAutoFocus]",
        inputs: {
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          _autofocus: ["pAutoFocus", "_autofocus"]
        },
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: AutoFocus,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pAutoFocus]",
          standalone: true
        }]
      }],
      propDecorators: {
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        _autofocus: [{
          type: Input,
          args: ["pAutoFocus"]
        }]
      }
    });
    AutoFocusModule = class _AutoFocusModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _AutoFocusModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _AutoFocusModule,
        imports: [AutoFocus],
        exports: [AutoFocus]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _AutoFocusModule
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: AutoFocusModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [AutoFocus],
          exports: [AutoFocus]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-badge.mjs
var theme, classes, BadgeStyle, BadgeClasses, BadgeDirective, Badge, BadgeModule;
var init_primeng_badge = __esm({
  "node_modules/primeng/fesm2022/primeng-badge.mjs"() {
    "use strict";
    init_common();
    init_core();
    init_core();
    init_utils();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_base();
    theme = ({
      dt
    }) => `
.p-badge {
    display: inline-flex;
    border-radius: ${dt("badge.border.radius")};
    justify-content: center;
    padding: ${dt("badge.padding")};
    background: ${dt("badge.primary.background")};
    color: ${dt("badge.primary.color")};
    font-size: ${dt("badge.font.size")};
    font-weight: ${dt("badge.font.weight")};
    min-width: ${dt("badge.min.width")};
    height: ${dt("badge.height")};
    line-height: ${dt("badge.height")};
}

.p-badge-dot {
    width: ${dt("badge.dot.size")};
    min-width: ${dt("badge.dot.size")};
    height: ${dt("badge.dot.size")};
    border-radius: 50%;
    padding: 0;
}

.p-badge-circle {
    padding: 0;
    border-radius: 50%;
}

.p-badge-secondary {
    background: ${dt("badge.secondary.background")};
    color: ${dt("badge.secondary.color")};
}

.p-badge-success {
    background: ${dt("badge.success.background")};
    color: ${dt("badge.success.color")};
}

.p-badge-info {
    background: ${dt("badge.info.background")};
    color: ${dt("badge.info.color")};
}

.p-badge-warn {
    background: ${dt("badge.warn.background")};
    color: ${dt("badge.warn.color")};
}

.p-badge-danger {
    background: ${dt("badge.danger.background")};
    color: ${dt("badge.danger.color")};
}

.p-badge-contrast {
    background: ${dt("badge.contrast.background")};
    color: ${dt("badge.contrast.color")};
}

.p-badge-sm {
    font-size: ${dt("badge.sm.font.size")};
    min-width: ${dt("badge.sm.min.width")};
    height: ${dt("badge.sm.height")};
    line-height: ${dt("badge.sm.height")};
}

.p-badge-lg {
    font-size: ${dt("badge.lg.font.size")};
    min-width: ${dt("badge.lg.min.width")};
    height: ${dt("badge.lg.height")};
    line-height: ${dt("badge.lg.height")};
}

.p-badge-xl {
    font-size: ${dt("badge.xl.font.size")};
    min-width: ${dt("badge.xl.min.width")};
    height: ${dt("badge.xl.height")};
    line-height: ${dt("badge.xl.height")};
}

/* For PrimeNG (directive)*/

.p-overlay-badge {
    position: relative;
}

.p-overlay-badge > .p-badge {
    position: absolute;
    top: 0;
    inset-inline-end: 0;
    transform: translate(50%, -50%);
    transform-origin: 100% 0;
    margin: 0;
}
`;
    classes = {
      root: ({
        props,
        instance
      }) => ["p-badge p-component", {
        "p-badge-circle": isNotEmpty(props.value) && String(props.value).length === 1,
        "p-badge-dot": isEmpty(props.value) && !instance.$slots.default,
        "p-badge-sm": props.size === "small",
        "p-badge-lg": props.size === "large",
        "p-badge-xl": props.size === "xlarge",
        "p-badge-info": props.severity === "info",
        "p-badge-success": props.severity === "success",
        "p-badge-warn": props.severity === "warn",
        "p-badge-danger": props.severity === "danger",
        "p-badge-secondary": props.severity === "secondary",
        "p-badge-contrast": props.severity === "contrast"
      }]
    };
    BadgeStyle = class _BadgeStyle extends BaseStyle {
      name = "badge";
      theme = theme;
      classes = classes;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _BadgeStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _BadgeStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: BadgeStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(BadgeClasses2) {
      BadgeClasses2["root"] = "p-badge";
    })(BadgeClasses || (BadgeClasses = {}));
    BadgeDirective = class _BadgeDirective extends BaseComponent {
      /**
       * When specified, disables the component.
       * @group Props
       */
      disabled;
      /**
       * Size of the badge, valid options are "large" and "xlarge".
       * @group Props
       */
      badgeSize;
      /**
       * Size of the badge, valid options are "large" and "xlarge".
       * @group Props
       * @deprecated use badgeSize instead.
       */
      set size(value) {
        this._size = value;
        console.log("size property is deprecated and will removed in v18, use badgeSize instead.");
      }
      get size() {
        return this._size;
      }
      _size;
      /**
       * Severity type of the badge.
       * @group Props
       */
      severity;
      /**
       * Value to display inside the badge.
       * @group Props
       */
      value;
      /**
       * Inline style of the element.
       * @group Props
       */
      badgeStyle;
      /**
       * Class of the element.
       * @group Props
       */
      badgeStyleClass;
      id;
      badgeEl;
      _componentStyle = inject(BadgeStyle);
      get activeElement() {
        return this.el.nativeElement.nodeName.indexOf("-") != -1 ? this.el.nativeElement.firstChild : this.el.nativeElement;
      }
      get canUpdateBadge() {
        return this.id && !this.disabled;
      }
      constructor() {
        super();
      }
      ngOnChanges({
        value,
        size,
        severity,
        disabled,
        badgeStyle,
        badgeStyleClass
      }) {
        super.ngOnChanges({
          value,
          size,
          severity,
          disabled
        });
        if (disabled) {
          this.toggleDisableState();
        }
        if (!this.canUpdateBadge) {
          return;
        }
        if (severity) {
          this.setSeverity(severity.previousValue);
        }
        if (size) {
          this.setSizeClasses();
        }
        if (value) {
          this.setValue();
        }
        if (badgeStyle || badgeStyleClass) {
          this.applyStyles();
        }
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        this.id = uuid("pn_id_") + "_badge";
        this.renderBadgeContent();
      }
      setValue(element) {
        const badge = element ?? this.document.getElementById(this.id);
        if (!badge) {
          return;
        }
        if (this.value != null) {
          if (hasClass(badge, "p-badge-dot")) {
            removeClass(badge, "p-badge-dot");
          }
          if (this.value && String(this.value).length === 1) {
            addClass(badge, "p-badge-circle");
          } else {
            removeClass(badge, "p-badge-circle");
          }
        } else {
          if (!hasClass(badge, "p-badge-dot")) {
            addClass(badge, "p-badge-dot");
          }
          removeClass(badge, "p-badge-circle");
        }
        badge.innerHTML = "";
        const badgeValue = this.value != null ? String(this.value) : "";
        this.renderer.appendChild(badge, this.document.createTextNode(badgeValue));
      }
      setSizeClasses(element) {
        const badge = element ?? this.document.getElementById(this.id);
        if (!badge) {
          return;
        }
        if (this.badgeSize) {
          if (this.badgeSize === "large") {
            addClass(badge, "p-badge-lg");
            removeClass(badge, "p-badge-xl");
          }
          if (this.badgeSize === "xlarge") {
            addClass(badge, "p-badge-xl");
            removeClass(badge, "p-badge-lg");
          }
        } else if (this.size && !this.badgeSize) {
          if (this.size === "large") {
            addClass(badge, "p-badge-lg");
            removeClass(badge, "p-badge-xl");
          }
          if (this.size === "xlarge") {
            addClass(badge, "p-badge-xl");
            removeClass(badge, "p-badge-lg");
          }
        } else {
          removeClass(badge, "p-badge-lg");
          removeClass(badge, "p-badge-xl");
        }
      }
      renderBadgeContent() {
        if (this.disabled) {
          return null;
        }
        const el = this.activeElement;
        const badge = this.document.createElement("span");
        badge.id = this.id;
        badge.className = "p-badge p-component";
        this.setSeverity(null, badge);
        this.setSizeClasses(badge);
        this.setValue(badge);
        addClass(el, "p-overlay-badge");
        this.renderer.appendChild(el, badge);
        this.badgeEl = badge;
        this.applyStyles();
      }
      applyStyles() {
        if (this.badgeEl && this.badgeStyle && typeof this.badgeStyle === "object") {
          for (const [key, value] of Object.entries(this.badgeStyle)) {
            this.renderer.setStyle(this.badgeEl, key, value);
          }
        }
        if (this.badgeEl && this.badgeStyleClass) {
          this.badgeEl.classList.add(...this.badgeStyleClass.split(" "));
        }
      }
      setSeverity(oldSeverity, element) {
        const badge = element ?? this.document.getElementById(this.id);
        if (!badge) {
          return;
        }
        if (this.severity) {
          addClass(badge, `p-badge-${this.severity}`);
        }
        if (oldSeverity) {
          removeClass(badge, `p-badge-${oldSeverity}`);
        }
      }
      toggleDisableState() {
        if (!this.id) {
          return;
        }
        if (this.disabled) {
          const badge = this.activeElement?.querySelector(`#${this.id}`);
          if (badge) {
            this.renderer.removeChild(this.activeElement, badge);
          }
        } else {
          this.renderBadgeContent();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _BadgeDirective,
        deps: [],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _BadgeDirective,
        isStandalone: true,
        selector: "[pBadge]",
        inputs: {
          disabled: ["badgeDisabled", "disabled"],
          badgeSize: "badgeSize",
          size: "size",
          severity: "severity",
          value: "value",
          badgeStyle: "badgeStyle",
          badgeStyleClass: "badgeStyleClass"
        },
        providers: [BadgeStyle],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: BadgeDirective,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pBadge]",
          providers: [BadgeStyle],
          standalone: true
        }]
      }],
      ctorParameters: () => [],
      propDecorators: {
        disabled: [{
          type: Input,
          args: ["badgeDisabled"]
        }],
        badgeSize: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        severity: [{
          type: Input
        }],
        value: [{
          type: Input
        }],
        badgeStyle: [{
          type: Input
        }],
        badgeStyleClass: [{
          type: Input
        }]
      }
    });
    Badge = class _Badge extends BaseComponent {
      /**
       * Class of the element.
       * @group Props
       */
      styleClass = input();
      /**
       * Inline style of the element.
       * @group Props
       */
      style = input();
      /**
       * Size of the badge, valid options are "large" and "xlarge".
       * @group Props
       */
      badgeSize = input();
      /**
       * Size of the badge, valid options are "large" and "xlarge".
       * @group Props
       */
      size = input();
      /**
       * Severity type of the badge.
       * @group Props
       */
      severity = input();
      /**
       * Value to display inside the badge.
       * @group Props
       */
      value = input();
      /**
       * When specified, disables the component.
       * @group Props
       */
      badgeDisabled = input(false, {
        transform: booleanAttribute
      });
      _componentStyle = inject(BadgeStyle);
      /**
       * Computes the container class for the badge element based on its properties.
       * @returns An object representing the CSS classes to be applied to the badge container.
       */
      containerClass = computed(() => {
        let classes21 = "p-badge p-component";
        if (isNotEmpty(this.value()) && String(this.value()).length === 1) {
          classes21 += " p-badge-circle";
        }
        if (this.badgeSize() === "large") {
          classes21 += " p-badge-lg";
        } else if (this.badgeSize() === "xlarge") {
          classes21 += " p-badge-xl";
        } else if (this.badgeSize() === "small") {
          classes21 += " p-badge-sm";
        }
        if (isEmpty(this.value())) {
          classes21 += " p-badge-dot";
        }
        if (this.styleClass()) {
          classes21 += ` ${this.styleClass()}`;
        }
        if (this.severity()) {
          classes21 += ` p-badge-${this.severity()}`;
        }
        return classes21;
      });
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Badge,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.1.0",
        version: "19.2.10",
        type: _Badge,
        isStandalone: true,
        selector: "p-badge",
        inputs: {
          styleClass: {
            classPropertyName: "styleClass",
            publicName: "styleClass",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          style: {
            classPropertyName: "style",
            publicName: "style",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          badgeSize: {
            classPropertyName: "badgeSize",
            publicName: "badgeSize",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          size: {
            classPropertyName: "size",
            publicName: "size",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          severity: {
            classPropertyName: "severity",
            publicName: "severity",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          value: {
            classPropertyName: "value",
            publicName: "value",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          badgeDisabled: {
            classPropertyName: "badgeDisabled",
            publicName: "badgeDisabled",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          }
        },
        host: {
          properties: {
            "class": "containerClass()",
            "style.display": 'badgeDisabled() ? "none" : null',
            "style": "style()"
          }
        },
        providers: [BadgeStyle],
        usesInheritance: true,
        ngImport: core_exports,
        template: `{{ value() }}`,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Badge,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-badge",
          template: `{{ value() }}`,
          standalone: true,
          imports: [CommonModule, SharedModule],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None,
          providers: [BadgeStyle],
          host: {
            "[class]": "containerClass()",
            "[style.display]": 'badgeDisabled() ? "none" : null',
            "[style]": "style()"
          }
        }]
      }]
    });
    BadgeModule = class _BadgeModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _BadgeModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _BadgeModule,
        imports: [Badge, BadgeDirective, SharedModule],
        exports: [Badge, BadgeDirective, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _BadgeModule,
        imports: [Badge, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: BadgeModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Badge, BadgeDirective, SharedModule],
          exports: [Badge, BadgeDirective, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-ripple.mjs
var theme2, classes2, RippleStyle, RippleClasses, Ripple, RippleModule;
var init_primeng_ripple = __esm({
  "node_modules/primeng/fesm2022/primeng-ripple.mjs"() {
    "use strict";
    init_common();
    init_core();
    init_core();
    init_utils();
    init_primeng_basecomponent();
    init_primeng_base();
    theme2 = ({
      dt
    }) => `
/* For PrimeNG */
.p-ripple {
    overflow: hidden;
    position: relative;
}

.p-ink {
    display: block;
    position: absolute;
    background: ${dt("ripple.background")};
    border-radius: 100%;
    transform: scale(0);
}

.p-ink-active {
    animation: ripple 0.4s linear;
}

.p-ripple-disabled .p-ink {
    display: none !important;
}

@keyframes ripple {
    100% {
        opacity: 0;
        transform: scale(2.5);
    }
}
`;
    classes2 = {
      root: "p-ink"
    };
    RippleStyle = class _RippleStyle extends BaseStyle {
      name = "ripple";
      theme = theme2;
      classes = classes2;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RippleStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RippleStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RippleStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(RippleClasses2) {
      RippleClasses2["root"] = "p-ink";
    })(RippleClasses || (RippleClasses = {}));
    Ripple = class _Ripple extends BaseComponent {
      zone = inject(NgZone);
      _componentStyle = inject(RippleStyle);
      animationListener;
      mouseDownListener;
      timeout;
      constructor() {
        super();
        effect(() => {
          if (isPlatformBrowser(this.platformId)) {
            if (this.config.ripple()) {
              this.zone.runOutsideAngular(() => {
                this.create();
                this.mouseDownListener = this.renderer.listen(this.el.nativeElement, "mousedown", this.onMouseDown.bind(this));
              });
            } else {
              this.remove();
            }
          }
        });
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
      }
      onMouseDown(event2) {
        let ink = this.getInk();
        if (!ink || this.document.defaultView?.getComputedStyle(ink, null).display === "none") {
          return;
        }
        removeClass(ink, "p-ink-active");
        if (!getHeight(ink) && !getWidth(ink)) {
          let d = Math.max(getOuterWidth(this.el.nativeElement), getOuterHeight(this.el.nativeElement));
          ink.style.height = d + "px";
          ink.style.width = d + "px";
        }
        let offset = getOffset(this.el.nativeElement);
        let x = event2.pageX - offset.left + this.document.body.scrollTop - getWidth(ink) / 2;
        let y = event2.pageY - offset.top + this.document.body.scrollLeft - getHeight(ink) / 2;
        this.renderer.setStyle(ink, "top", y + "px");
        this.renderer.setStyle(ink, "left", x + "px");
        addClass(ink, "p-ink-active");
        this.timeout = setTimeout(() => {
          let ink2 = this.getInk();
          if (ink2) {
            removeClass(ink2, "p-ink-active");
          }
        }, 401);
      }
      getInk() {
        const children = this.el.nativeElement.children;
        for (let i = 0; i < children.length; i++) {
          if (typeof children[i].className === "string" && children[i].className.indexOf("p-ink") !== -1) {
            return children[i];
          }
        }
        return null;
      }
      resetInk() {
        let ink = this.getInk();
        if (ink) {
          removeClass(ink, "p-ink-active");
        }
      }
      onAnimationEnd(event2) {
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        removeClass(event2.currentTarget, "p-ink-active");
      }
      create() {
        let ink = this.renderer.createElement("span");
        this.renderer.addClass(ink, "p-ink");
        this.renderer.appendChild(this.el.nativeElement, ink);
        this.renderer.setAttribute(ink, "aria-hidden", "true");
        this.renderer.setAttribute(ink, "role", "presentation");
        if (!this.animationListener) {
          this.animationListener = this.renderer.listen(ink, "animationend", this.onAnimationEnd.bind(this));
        }
      }
      remove() {
        let ink = this.getInk();
        if (ink) {
          this.mouseDownListener && this.mouseDownListener();
          this.animationListener && this.animationListener();
          this.mouseDownListener = null;
          this.animationListener = null;
          remove(ink);
        }
      }
      ngOnDestroy() {
        if (this.config && this.config.ripple()) {
          this.remove();
        }
        super.ngOnDestroy();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Ripple,
        deps: [],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _Ripple,
        isStandalone: true,
        selector: "[pRipple]",
        host: {
          classAttribute: "p-ripple"
        },
        providers: [RippleStyle],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Ripple,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pRipple]",
          host: {
            class: "p-ripple"
          },
          standalone: true,
          providers: [RippleStyle]
        }]
      }],
      ctorParameters: () => []
    });
    RippleModule = class _RippleModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RippleModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RippleModule,
        imports: [Ripple],
        exports: [Ripple]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RippleModule
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RippleModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Ripple],
          exports: [Ripple]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-button.mjs
var theme3, classes3, ButtonStyle, ButtonClasses, INTERNAL_BUTTON_CLASSES, ButtonLabel, ButtonIcon, ButtonDirective, Button, ButtonModule;
var init_primeng_button = __esm({
  "node_modules/primeng/fesm2022/primeng-button.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_utils();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_badge();
    init_primeng_badge();
    init_primeng_basecomponent();
    init_primeng_icons();
    init_primeng_ripple();
    init_primeng_base();
    theme3 = ({
      dt
    }) => `
.p-button {
    display: inline-flex;
    cursor: pointer;
    user-select: none;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    position: relative;
    color: ${dt("button.primary.color")};
    background: ${dt("button.primary.background")};
    border: 1px solid ${dt("button.primary.border.color")};
    padding-block: ${dt("button.padding.y")};
    padding-inline: ${dt("button.padding.x")};
    font-size: 1rem;
    font-family: inherit;
    font-feature-settings: inherit;
    transition: background ${dt("button.transition.duration")}, color ${dt("button.transition.duration")}, border-color ${dt("button.transition.duration")},
            outline-color ${dt("button.transition.duration")}, box-shadow ${dt("button.transition.duration")};
    border-radius: ${dt("button.border.radius")};
    outline-color: transparent;
    gap: ${dt("button.gap")};
}

.p-button-icon,
.p-button-icon:before,
.p-button-icon:after {
    line-height: inherit;
}

.p-button:disabled {
    cursor: default;
}

.p-button-icon-right {
    order: 1;
}

.p-button-icon-right:dir(rtl) {
    order: -1;
}

.p-button:not(.p-button-vertical) .p-button-icon:not(.p-button-icon-right):dir(rtl) {
    order: 1;
}

.p-button-icon-bottom {
    order: 2;
}

.p-button-icon-only {
    width: ${dt("button.icon.only.width")};
    padding-inline-start: 0;
    padding-inline-end: 0;
    gap: 0;
}

.p-button-icon-only.p-button-rounded {
    border-radius: 50%;
    height: ${dt("button.icon.only.width")};
}

.p-button-icon-only .p-button-label {
    visibility: hidden;
    width: 0;
}

.p-button-sm {
    font-size: ${dt("button.sm.font.size")};
    padding-block: ${dt("button.sm.padding.y")};
    padding-inline: ${dt("button.sm.padding.x")};
}

.p-button-sm .p-button-icon {
    font-size: ${dt("button.sm.font.size")};
}

.p-button-sm.p-button-icon-only {
    width: ${dt("button.sm.icon.only.width")};
}

.p-button-sm.p-button-icon-only.p-button-rounded {
    height: ${dt("button.sm.icon.only.width")};
}

.p-button-lg {
    font-size: ${dt("button.lg.font.size")};
    padding-block: ${dt("button.lg.padding.y")};
    padding-inline: ${dt("button.lg.padding.x")};
}

.p-button-lg .p-button-icon {
    font-size: ${dt("button.lg.font.size")};
}

.p-button-lg.p-button-icon-only {
    width: ${dt("button.lg.icon.only.width")};
}

.p-button-lg.p-button-icon-only.p-button-rounded {
    height: ${dt("button.lg.icon.only.width")};
}

.p-button-vertical {
    flex-direction: column;
}

.p-button-label {
    font-weight: ${dt("button.label.font.weight")};
}

.p-button-fluid {
    width: 100%;
}

.p-button-fluid.p-button-icon-only {
    width: ${dt("button.icon.only.width")};
}

.p-button:not(:disabled):hover {
    background: ${dt("button.primary.hover.background")};
    border: 1px solid ${dt("button.primary.hover.border.color")};
    color: ${dt("button.primary.hover.color")};
}

.p-button:not(:disabled):active {
    background: ${dt("button.primary.active.background")};
    border: 1px solid ${dt("button.primary.active.border.color")};
    color: ${dt("button.primary.active.color")};
}

.p-button:focus-visible {
    box-shadow: ${dt("button.primary.focus.ring.shadow")};
    outline: ${dt("button.focus.ring.width")} ${dt("button.focus.ring.style")} ${dt("button.primary.focus.ring.color")};
    outline-offset: ${dt("button.focus.ring.offset")};
}

.p-button .p-badge {
    min-width: ${dt("button.badge.size")};
    height: ${dt("button.badge.size")};
    line-height: ${dt("button.badge.size")};
}

.p-button-raised {
    box-shadow: ${dt("button.raised.shadow")};
}

.p-button-rounded {
    border-radius: ${dt("button.rounded.border.radius")};
}

.p-button-secondary {
    background: ${dt("button.secondary.background")};
    border: 1px solid ${dt("button.secondary.border.color")};
    color: ${dt("button.secondary.color")};
}

.p-button-secondary:not(:disabled):hover {
    background: ${dt("button.secondary.hover.background")};
    border: 1px solid ${dt("button.secondary.hover.border.color")};
    color: ${dt("button.secondary.hover.color")};
}

.p-button-secondary:not(:disabled):active {
    background: ${dt("button.secondary.active.background")};
    border: 1px solid ${dt("button.secondary.active.border.color")};
    color: ${dt("button.secondary.active.color")};
}

.p-button-secondary:focus-visible {
    outline-color: ${dt("button.secondary.focus.ring.color")};
    box-shadow: ${dt("button.secondary.focus.ring.shadow")};
}

.p-button-success {
    background: ${dt("button.success.background")};
    border: 1px solid ${dt("button.success.border.color")};
    color: ${dt("button.success.color")};
}

.p-button-success:not(:disabled):hover {
    background: ${dt("button.success.hover.background")};
    border: 1px solid ${dt("button.success.hover.border.color")};
    color: ${dt("button.success.hover.color")};
}

.p-button-success:not(:disabled):active {
    background: ${dt("button.success.active.background")};
    border: 1px solid ${dt("button.success.active.border.color")};
    color: ${dt("button.success.active.color")};
}

.p-button-success:focus-visible {
    outline-color: ${dt("button.success.focus.ring.color")};
    box-shadow: ${dt("button.success.focus.ring.shadow")};
}

.p-button-info {
    background: ${dt("button.info.background")};
    border: 1px solid ${dt("button.info.border.color")};
    color: ${dt("button.info.color")};
}

.p-button-info:not(:disabled):hover {
    background: ${dt("button.info.hover.background")};
    border: 1px solid ${dt("button.info.hover.border.color")};
    color: ${dt("button.info.hover.color")};
}

.p-button-info:not(:disabled):active {
    background: ${dt("button.info.active.background")};
    border: 1px solid ${dt("button.info.active.border.color")};
    color: ${dt("button.info.active.color")};
}

.p-button-info:focus-visible {
    outline-color: ${dt("button.info.focus.ring.color")};
    box-shadow: ${dt("button.info.focus.ring.shadow")};
}

.p-button-warn {
    background: ${dt("button.warn.background")};
    border: 1px solid ${dt("button.warn.border.color")};
    color: ${dt("button.warn.color")};
}

.p-button-warn:not(:disabled):hover {
    background: ${dt("button.warn.hover.background")};
    border: 1px solid ${dt("button.warn.hover.border.color")};
    color: ${dt("button.warn.hover.color")};
}

.p-button-warn:not(:disabled):active {
    background: ${dt("button.warn.active.background")};
    border: 1px solid ${dt("button.warn.active.border.color")};
    color: ${dt("button.warn.active.color")};
}

.p-button-warn:focus-visible {
    outline-color: ${dt("button.warn.focus.ring.color")};
    box-shadow: ${dt("button.warn.focus.ring.shadow")};
}

.p-button-help {
    background: ${dt("button.help.background")};
    border: 1px solid ${dt("button.help.border.color")};
    color: ${dt("button.help.color")};
}

.p-button-help:not(:disabled):hover {
    background: ${dt("button.help.hover.background")};
    border: 1px solid ${dt("button.help.hover.border.color")};
    color: ${dt("button.help.hover.color")};
}

.p-button-help:not(:disabled):active {
    background: ${dt("button.help.active.background")};
    border: 1px solid ${dt("button.help.active.border.color")};
    color: ${dt("button.help.active.color")};
}

.p-button-help:focus-visible {
    outline-color: ${dt("button.help.focus.ring.color")};
    box-shadow: ${dt("button.help.focus.ring.shadow")};
}

.p-button-danger {
    background: ${dt("button.danger.background")};
    border: 1px solid ${dt("button.danger.border.color")};
    color: ${dt("button.danger.color")};
}

.p-button-danger:not(:disabled):hover {
    background: ${dt("button.danger.hover.background")};
    border: 1px solid ${dt("button.danger.hover.border.color")};
    color: ${dt("button.danger.hover.color")};
}

.p-button-danger:not(:disabled):active {
    background: ${dt("button.danger.active.background")};
    border: 1px solid ${dt("button.danger.active.border.color")};
    color: ${dt("button.danger.active.color")};
}

.p-button-danger:focus-visible {
    outline-color: ${dt("button.danger.focus.ring.color")};
    box-shadow: ${dt("button.danger.focus.ring.shadow")};
}

.p-button-contrast {
    background: ${dt("button.contrast.background")};
    border: 1px solid ${dt("button.contrast.border.color")};
    color: ${dt("button.contrast.color")};
}

.p-button-contrast:not(:disabled):hover {
    background: ${dt("button.contrast.hover.background")};
    border: 1px solid ${dt("button.contrast.hover.border.color")};
    color: ${dt("button.contrast.hover.color")};
}

.p-button-contrast:not(:disabled):active {
    background: ${dt("button.contrast.active.background")};
    border: 1px solid ${dt("button.contrast.active.border.color")};
    color: ${dt("button.contrast.active.color")};
}

.p-button-contrast:focus-visible {
    outline-color: ${dt("button.contrast.focus.ring.color")};
    box-shadow: ${dt("button.contrast.focus.ring.shadow")};
}

.p-button-outlined {
    background: transparent;
    border-color: ${dt("button.outlined.primary.border.color")};
    color: ${dt("button.outlined.primary.color")};
}

.p-button-outlined:not(:disabled):hover {
    background: ${dt("button.outlined.primary.hover.background")};
    border-color: ${dt("button.outlined.primary.border.color")};
    color: ${dt("button.outlined.primary.color")};
}

.p-button-outlined:not(:disabled):active {
    background: ${dt("button.outlined.primary.active.background")};
    border-color: ${dt("button.outlined.primary.border.color")};
    color: ${dt("button.outlined.primary.color")};
}

.p-button-outlined.p-button-secondary {
    border-color: ${dt("button.outlined.secondary.border.color")};
    color: ${dt("button.outlined.secondary.color")};
}

.p-button-outlined.p-button-secondary:not(:disabled):hover {
    background: ${dt("button.outlined.secondary.hover.background")};
    border-color: ${dt("button.outlined.secondary.border.color")};
    color: ${dt("button.outlined.secondary.color")};
}

.p-button-outlined.p-button-secondary:not(:disabled):active {
    background: ${dt("button.outlined.secondary.active.background")};
    border-color: ${dt("button.outlined.secondary.border.color")};
    color: ${dt("button.outlined.secondary.color")};
}

.p-button-outlined.p-button-success {
    border-color: ${dt("button.outlined.success.border.color")};
    color: ${dt("button.outlined.success.color")};
}

.p-button-outlined.p-button-success:not(:disabled):hover {
    background: ${dt("button.outlined.success.hover.background")};
    border-color: ${dt("button.outlined.success.border.color")};
    color: ${dt("button.outlined.success.color")};
}

.p-button-outlined.p-button-success:not(:disabled):active {
    background: ${dt("button.outlined.success.active.background")};
    border-color: ${dt("button.outlined.success.border.color")};
    color: ${dt("button.outlined.success.color")};
}

.p-button-outlined.p-button-info {
    border-color: ${dt("button.outlined.info.border.color")};
    color: ${dt("button.outlined.info.color")};
}

.p-button-outlined.p-button-info:not(:disabled):hover {
    background: ${dt("button.outlined.info.hover.background")};
    border-color: ${dt("button.outlined.info.border.color")};
    color: ${dt("button.outlined.info.color")};
}

.p-button-outlined.p-button-info:not(:disabled):active {
    background: ${dt("button.outlined.info.active.background")};
    border-color: ${dt("button.outlined.info.border.color")};
    color: ${dt("button.outlined.info.color")};
}

.p-button-outlined.p-button-warn {
    border-color: ${dt("button.outlined.warn.border.color")};
    color: ${dt("button.outlined.warn.color")};
}

.p-button-outlined.p-button-warn:not(:disabled):hover {
    background: ${dt("button.outlined.warn.hover.background")};
    border-color: ${dt("button.outlined.warn.border.color")};
    color: ${dt("button.outlined.warn.color")};
}

.p-button-outlined.p-button-warn:not(:disabled):active {
    background: ${dt("button.outlined.warn.active.background")};
    border-color: ${dt("button.outlined.warn.border.color")};
    color: ${dt("button.outlined.warn.color")};
}

.p-button-outlined.p-button-help {
    border-color: ${dt("button.outlined.help.border.color")};
    color: ${dt("button.outlined.help.color")};
}

.p-button-outlined.p-button-help:not(:disabled):hover {
    background: ${dt("button.outlined.help.hover.background")};
    border-color: ${dt("button.outlined.help.border.color")};
    color: ${dt("button.outlined.help.color")};
}

.p-button-outlined.p-button-help:not(:disabled):active {
    background: ${dt("button.outlined.help.active.background")};
    border-color: ${dt("button.outlined.help.border.color")};
    color: ${dt("button.outlined.help.color")};
}

.p-button-outlined.p-button-danger {
    border-color: ${dt("button.outlined.danger.border.color")};
    color: ${dt("button.outlined.danger.color")};
}

.p-button-outlined.p-button-danger:not(:disabled):hover {
    background: ${dt("button.outlined.danger.hover.background")};
    border-color: ${dt("button.outlined.danger.border.color")};
    color: ${dt("button.outlined.danger.color")};
}

.p-button-outlined.p-button-danger:not(:disabled):active {
    background: ${dt("button.outlined.danger.active.background")};
    border-color: ${dt("button.outlined.danger.border.color")};
    color: ${dt("button.outlined.danger.color")};
}

.p-button-outlined.p-button-contrast {
    border-color: ${dt("button.outlined.contrast.border.color")};
    color: ${dt("button.outlined.contrast.color")};
}

.p-button-outlined.p-button-contrast:not(:disabled):hover {
    background: ${dt("button.outlined.contrast.hover.background")};
    border-color: ${dt("button.outlined.contrast.border.color")};
    color: ${dt("button.outlined.contrast.color")};
}

.p-button-outlined.p-button-contrast:not(:disabled):active {
    background: ${dt("button.outlined.contrast.active.background")};
    border-color: ${dt("button.outlined.contrast.border.color")};
    color: ${dt("button.outlined.contrast.color")};
}

.p-button-outlined.p-button-plain {
    border-color: ${dt("button.outlined.plain.border.color")};
    color: ${dt("button.outlined.plain.color")};
}

.p-button-outlined.p-button-plain:not(:disabled):hover {
    background: ${dt("button.outlined.plain.hover.background")};
    border-color: ${dt("button.outlined.plain.border.color")};
    color: ${dt("button.outlined.plain.color")};
}

.p-button-outlined.p-button-plain:not(:disabled):active {
    background: ${dt("button.outlined.plain.active.background")};
    border-color: ${dt("button.outlined.plain.border.color")};
    color: ${dt("button.outlined.plain.color")};
}

.p-button-text {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.primary.color")};
}

.p-button-text:not(:disabled):hover {
    background: ${dt("button.text.primary.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.primary.color")};
}

.p-button-text:not(:disabled):active {
    background: ${dt("button.text.primary.active.background")};
    border-color: transparent;
    color: ${dt("button.text.primary.color")};
}

.p-button-text.p-button-secondary {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.secondary.color")};
}

.p-button-text.p-button-secondary:not(:disabled):hover {
    background: ${dt("button.text.secondary.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.secondary.color")};
}

.p-button-text.p-button-secondary:not(:disabled):active {
    background: ${dt("button.text.secondary.active.background")};
    border-color: transparent;
    color: ${dt("button.text.secondary.color")};
}

.p-button-text.p-button-success {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.success.color")};
}

.p-button-text.p-button-success:not(:disabled):hover {
    background: ${dt("button.text.success.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.success.color")};
}

.p-button-text.p-button-success:not(:disabled):active {
    background: ${dt("button.text.success.active.background")};
    border-color: transparent;
    color: ${dt("button.text.success.color")};
}

.p-button-text.p-button-info {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.info.color")};
}

.p-button-text.p-button-info:not(:disabled):hover {
    background: ${dt("button.text.info.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.info.color")};
}

.p-button-text.p-button-info:not(:disabled):active {
    background: ${dt("button.text.info.active.background")};
    border-color: transparent;
    color: ${dt("button.text.info.color")};
}

.p-button-text.p-button-warn {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.warn.color")};
}

.p-button-text.p-button-warn:not(:disabled):hover {
    background: ${dt("button.text.warn.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.warn.color")};
}

.p-button-text.p-button-warn:not(:disabled):active {
    background: ${dt("button.text.warn.active.background")};
    border-color: transparent;
    color: ${dt("button.text.warn.color")};
}

.p-button-text.p-button-help {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.help.color")};
}

.p-button-text.p-button-help:not(:disabled):hover {
    background: ${dt("button.text.help.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.help.color")};
}

.p-button-text.p-button-help:not(:disabled):active {
    background: ${dt("button.text.help.active.background")};
    border-color: transparent;
    color: ${dt("button.text.help.color")};
}

.p-button-text.p-button-danger {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.danger.color")};
}

.p-button-text.p-button-danger:not(:disabled):hover {
    background: ${dt("button.text.danger.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.danger.color")};
}

.p-button-text.p-button-danger:not(:disabled):active {
    background: ${dt("button.text.danger.active.background")};
    border-color: transparent;
    color: ${dt("button.text.danger.color")};
}

.p-button-text.p-button-plain {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.plain.color")};
}

.p-button-text.p-button-plain:not(:disabled):hover {
    background: ${dt("button.text.plain.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.plain.color")};
}

.p-button-text.p-button-plain:not(:disabled):active {
    background: ${dt("button.text.plain.active.background")};
    border-color: transparent;
    color: ${dt("button.text.plain.color")};
}

.p-button-text.p-button-contrast {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.text.contrast.color")};
}

.p-button-text.p-button-contrast:not(:disabled):hover {
    background: ${dt("button.text.contrast.hover.background")};
    border-color: transparent;
    color: ${dt("button.text.contrast.color")};
}

.p-button-text.p-button-contrast:not(:disabled):active {
    background: ${dt("button.text.contrast.active.background")};
    border-color: transparent;
    color: ${dt("button.text.contrast.color")};
}

.p-button-link {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.link.color")};
}

.p-button-link:not(:disabled):hover {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.link.hover.color")};
}

.p-button-link:not(:disabled):hover .p-button-label {
    text-decoration: underline;
}

.p-button-link:not(:disabled):active {
    background: transparent;
    border-color: transparent;
    color: ${dt("button.link.active.color")};
}

/* For PrimeNG */
.p-button-icon-right {
    order: 1;
}

p-button[iconpos='right'] spinnericon {
    order: 1;
}
`;
    classes3 = {
      root: ({
        instance,
        props
      }) => ["p-button p-component", {
        "p-button-icon-only": instance.hasIcon && !props.label && !props.badge,
        "p-button-vertical": (props.iconPos === "top" || props.iconPos === "bottom") && props.label,
        "p-button-loading": props.loading,
        "p-button-link": props.link,
        [`p-button-${props.severity}`]: props.severity,
        "p-button-raised": props.raised,
        "p-button-rounded": props.rounded,
        "p-button-text": props.text,
        "p-button-outlined": props.outlined,
        "p-button-sm": props.size === "small",
        "p-button-lg": props.size === "large",
        "p-button-plain": props.plain,
        "p-button-fluid": props.fluid
      }],
      loadingIcon: "p-button-loading-icon",
      icon: ({
        props
      }) => ["p-button-icon", {
        [`p-button-icon-${props.iconPos}`]: props.label
      }],
      label: "p-button-label"
    };
    ButtonStyle = class _ButtonStyle extends BaseStyle {
      name = "button";
      theme = theme3;
      classes = classes3;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ButtonStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(ButtonClasses2) {
      ButtonClasses2["root"] = "p-button";
      ButtonClasses2["loadingIcon"] = "p-button-loading-icon";
      ButtonClasses2["icon"] = "p-button-icon";
      ButtonClasses2["label"] = "p-button-label";
    })(ButtonClasses || (ButtonClasses = {}));
    INTERNAL_BUTTON_CLASSES = {
      button: "p-button",
      component: "p-component",
      iconOnly: "p-button-icon-only",
      disabled: "p-disabled",
      loading: "p-button-loading",
      labelOnly: "p-button-loading-label-only"
    };
    ButtonLabel = class _ButtonLabel extends BaseComponent {
      _componentStyle = inject(ButtonStyle);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonLabel,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _ButtonLabel,
        isStandalone: true,
        selector: "[pButtonLabel]",
        host: {
          properties: {
            "class.p-button-label": "true"
          }
        },
        providers: [ButtonStyle],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ButtonLabel,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pButtonLabel]",
          providers: [ButtonStyle],
          standalone: true,
          host: {
            "[class.p-button-label]": "true"
          }
        }]
      }]
    });
    ButtonIcon = class _ButtonIcon extends BaseComponent {
      _componentStyle = inject(ButtonStyle);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonIcon,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _ButtonIcon,
        isStandalone: true,
        selector: "[pButtonIcon]",
        host: {
          properties: {
            "class.p-button-icon": "true"
          }
        },
        providers: [ButtonStyle],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ButtonIcon,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pButtonIcon]",
          providers: [ButtonStyle],
          standalone: true,
          host: {
            "[class.p-button-icon]": "true"
          }
        }]
      }]
    });
    ButtonDirective = class _ButtonDirective extends BaseComponent {
      /**
       * Position of the icon.
       * @deprecated utilize pButtonIcon and pButtonLabel directives.
       * @group Props
       */
      iconPos = "left";
      /**
       * Uses to pass attributes to the loading icon's DOM element.
       * @deprecated utilize pButonIcon instead.
       * @group Props
       */
      loadingIcon;
      set label(val) {
        this._label = val;
        if (this.initialized) {
          this.updateLabel();
          this.updateIcon();
          this.setStyleClass();
        }
      }
      set icon(val) {
        this._icon = val;
        if (this.initialized) {
          this.updateIcon();
          this.setStyleClass();
        }
      }
      /**
       * Whether the button is in loading state.
       * @group Props
       */
      get loading() {
        return this._loading;
      }
      set loading(val) {
        this._loading = val;
        if (this.initialized) {
          this.updateIcon();
          this.setStyleClass();
        }
      }
      _buttonProps;
      iconSignal = contentChild(ButtonIcon);
      labelSignal = contentChild(ButtonLabel);
      isIconOnly = computed(() => !!(!this.labelSignal() && this.iconSignal()));
      set buttonProps(val) {
        this._buttonProps = val;
        if (val && typeof val === "object") {
          Object.entries(val).forEach(([k, v]) => this[`_${k}`] !== v && (this[`_${k}`] = v));
        }
      }
      _severity;
      /**
       * Defines the style of the button.
       * @group Props
       */
      get severity() {
        return this._severity;
      }
      set severity(value) {
        this._severity = value;
        if (this.initialized) {
          this.setStyleClass();
        }
      }
      /**
       * Add a shadow to indicate elevation.
       * @group Props
       */
      raised = false;
      /**
       * Add a circular border radius to the button.
       * @group Props
       */
      rounded = false;
      /**
       * Add a textual class to the button without a background initially.
       * @group Props
       */
      text = false;
      /**
       * Add a border class without a background initially.
       * @group Props
       */
      outlined = false;
      /**
       * Defines the size of the button.
       * @group Props
       */
      size = null;
      /**
       * Add a plain textual class to the button without a background initially.
       * @deprecated use variant property instead.
       * @group Props
       */
      plain = false;
      /**
       * Spans 100% width of the container when enabled.
       * @group Props
       */
      fluid;
      _label;
      _icon;
      _loading = false;
      initialized;
      get htmlElement() {
        return this.el.nativeElement;
      }
      _internalClasses = Object.values(INTERNAL_BUTTON_CLASSES);
      isTextButton = computed(() => !!(!this.iconSignal() && this.labelSignal() && this.text));
      /**
       * Text of the button.
       * @deprecated use pButtonLabel directive instead.
       * @group Props
       */
      get label() {
        return this._label;
      }
      /**
       * Name of the icon.
       * @deprecated use pButtonIcon directive instead
       * @group Props
       */
      get icon() {
        return this._icon;
      }
      /**
       * Used to pass all properties of the ButtonProps to the Button component.
       * @deprecated assign props directly to the button element.
       * @group Props
       */
      get buttonProps() {
        return this._buttonProps;
      }
      spinnerIcon = `<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg" class="p-icon-spin">
        <g clip-path="url(#clip0_417_21408)">
            <path
                d="M6.99701 14C5.85441 13.999 4.72939 13.7186 3.72012 13.1832C2.71084 12.6478 1.84795 11.8737 1.20673 10.9284C0.565504 9.98305 0.165424 8.89526 0.041387 7.75989C-0.0826496 6.62453 0.073125 5.47607 0.495122 4.4147C0.917119 3.35333 1.59252 2.4113 2.46241 1.67077C3.33229 0.930247 4.37024 0.413729 5.4857 0.166275C6.60117 -0.0811796 7.76026 -0.0520535 8.86188 0.251112C9.9635 0.554278 10.9742 1.12227 11.8057 1.90555C11.915 2.01493 11.9764 2.16319 11.9764 2.31778C11.9764 2.47236 11.915 2.62062 11.8057 2.73C11.7521 2.78503 11.688 2.82877 11.6171 2.85864C11.5463 2.8885 11.4702 2.90389 11.3933 2.90389C11.3165 2.90389 11.2404 2.8885 11.1695 2.85864C11.0987 2.82877 11.0346 2.78503 10.9809 2.73C9.9998 1.81273 8.73246 1.26138 7.39226 1.16876C6.05206 1.07615 4.72086 1.44794 3.62279 2.22152C2.52471 2.99511 1.72683 4.12325 1.36345 5.41602C1.00008 6.70879 1.09342 8.08723 1.62775 9.31926C2.16209 10.5513 3.10478 11.5617 4.29713 12.1803C5.48947 12.7989 6.85865 12.988 8.17414 12.7157C9.48963 12.4435 10.6711 11.7264 11.5196 10.6854C12.3681 9.64432 12.8319 8.34282 12.8328 7C12.8328 6.84529 12.8943 6.69692 13.0038 6.58752C13.1132 6.47812 13.2616 6.41667 13.4164 6.41667C13.5712 6.41667 13.7196 6.47812 13.8291 6.58752C13.9385 6.69692 14 6.84529 14 7C14 8.85651 13.2622 10.637 11.9489 11.9497C10.6356 13.2625 8.85432 14 6.99701 14Z"
                fill="currentColor"
            />
        </g>
        <defs>
            <clipPath id="clip0_417_21408">
                <rect width="14" height="14" fill="white" />
            </clipPath>
        </defs>
    </svg>`;
      _componentStyle = inject(ButtonStyle);
      ngAfterViewInit() {
        super.ngAfterViewInit();
        addClass(this.htmlElement, this.getStyleClass().join(" "));
        this.createIcon();
        this.createLabel();
        this.initialized = true;
      }
      ngOnChanges(simpleChanges) {
        super.ngOnChanges(simpleChanges);
        const {
          buttonProps
        } = simpleChanges;
        if (buttonProps) {
          const props = buttonProps.currentValue;
          for (const property in props) {
            this[property] = props[property];
          }
        }
      }
      getStyleClass() {
        const styleClass = [INTERNAL_BUTTON_CLASSES.button, INTERNAL_BUTTON_CLASSES.component];
        if (this.icon && !this.label && isEmpty(this.htmlElement.textContent)) {
          styleClass.push(INTERNAL_BUTTON_CLASSES.iconOnly);
        }
        if (this.loading) {
          styleClass.push(INTERNAL_BUTTON_CLASSES.disabled, INTERNAL_BUTTON_CLASSES.loading);
          if (!this.icon && this.label) {
            styleClass.push(INTERNAL_BUTTON_CLASSES.labelOnly);
          }
          if (this.icon && !this.label && !isEmpty(this.htmlElement.textContent)) {
            styleClass.push(INTERNAL_BUTTON_CLASSES.iconOnly);
          }
        }
        if (this.text) {
          styleClass.push("p-button-text");
        }
        if (this.severity) {
          styleClass.push(`p-button-${this.severity}`);
        }
        if (this.plain) {
          styleClass.push("p-button-plain");
        }
        if (this.raised) {
          styleClass.push("p-button-raised");
        }
        if (this.size) {
          styleClass.push(`p-button-${this.size}`);
        }
        if (this.outlined) {
          styleClass.push("p-button-outlined");
        }
        if (this.rounded) {
          styleClass.push("p-button-rounded");
        }
        if (this.size === "small") {
          styleClass.push("p-button-sm");
        }
        if (this.size === "large") {
          styleClass.push("p-button-lg");
        }
        if (this.hasFluid) {
          styleClass.push("p-button-fluid");
        }
        return styleClass;
      }
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return isEmpty(this.fluid) ? !!fluidComponent : this.fluid;
      }
      setStyleClass() {
        const styleClass = this.getStyleClass();
        this.removeExistingSeverityClass();
        this.htmlElement.classList.remove(...this._internalClasses);
        this.htmlElement.classList.add(...styleClass);
      }
      removeExistingSeverityClass() {
        const severityArray = ["success", "info", "warn", "danger", "help", "primary", "secondary", "contrast"];
        const existingSeverityClass = this.htmlElement.classList.value.split(" ").find((cls) => severityArray.some((severity) => cls === `p-button-${severity}`));
        if (existingSeverityClass) {
          this.htmlElement.classList.remove(existingSeverityClass);
        }
      }
      createLabel() {
        const created = findSingle(this.htmlElement, ".p-button-label");
        if (!created && this.label) {
          let labelElement = this.document.createElement("span");
          if (this.icon && !this.label) {
            labelElement.setAttribute("aria-hidden", "true");
          }
          labelElement.className = "p-button-label";
          labelElement.appendChild(this.document.createTextNode(this.label));
          this.htmlElement.appendChild(labelElement);
        }
      }
      createIcon() {
        const created = findSingle(this.htmlElement, ".p-button-icon");
        if (!created && (this.icon || this.loading)) {
          let iconElement = this.document.createElement("span");
          iconElement.className = "p-button-icon";
          iconElement.setAttribute("aria-hidden", "true");
          let iconPosClass = this.label ? "p-button-icon-" + this.iconPos : null;
          if (iconPosClass) {
            addClass(iconElement, iconPosClass);
          }
          let iconClass = this.getIconClass();
          if (iconClass) {
            addClass(iconElement, iconClass);
          }
          if (!this.loadingIcon && this.loading) {
            iconElement.innerHTML = this.spinnerIcon;
          }
          this.htmlElement.insertBefore(iconElement, this.htmlElement.firstChild);
        }
      }
      updateLabel() {
        let labelElement = findSingle(this.htmlElement, ".p-button-label");
        if (!this.label) {
          labelElement && this.htmlElement.removeChild(labelElement);
          return;
        }
        labelElement ? labelElement.textContent = this.label : this.createLabel();
      }
      updateIcon() {
        let iconElement = findSingle(this.htmlElement, ".p-button-icon");
        let labelElement = findSingle(this.htmlElement, ".p-button-label");
        if (this.loading && !this.loadingIcon && iconElement) {
          iconElement.innerHTML = this.spinnerIcon;
        } else if (iconElement?.innerHTML) {
          iconElement.innerHTML = "";
        }
        if (iconElement) {
          if (this.iconPos) {
            iconElement.className = "p-button-icon " + (labelElement ? "p-button-icon-" + this.iconPos : "") + " " + this.getIconClass();
          } else {
            iconElement.className = "p-button-icon " + this.getIconClass();
          }
        } else {
          this.createIcon();
        }
      }
      getIconClass() {
        return this.loading ? "p-button-loading-icon " + (this.loadingIcon ? this.loadingIcon : "p-icon") : this.icon || "p-hidden";
      }
      ngOnDestroy() {
        this.initialized = false;
        super.ngOnDestroy();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonDirective,
        deps: null,
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "17.2.0",
        version: "19.2.10",
        type: _ButtonDirective,
        isStandalone: true,
        selector: "[pButton]",
        inputs: {
          iconPos: "iconPos",
          loadingIcon: "loadingIcon",
          loading: "loading",
          severity: "severity",
          raised: ["raised", "raised", booleanAttribute],
          rounded: ["rounded", "rounded", booleanAttribute],
          text: ["text", "text", booleanAttribute],
          outlined: ["outlined", "outlined", booleanAttribute],
          size: "size",
          plain: ["plain", "plain", booleanAttribute],
          fluid: ["fluid", "fluid", booleanAttribute],
          label: "label",
          icon: "icon",
          buttonProps: "buttonProps"
        },
        host: {
          properties: {
            "class.p-button-icon-only": "isIconOnly()",
            "class.p-button-text": "isTextButton()"
          }
        },
        providers: [ButtonStyle],
        queries: [{
          propertyName: "iconSignal",
          first: true,
          predicate: ButtonIcon,
          descendants: true,
          isSignal: true
        }, {
          propertyName: "labelSignal",
          first: true,
          predicate: ButtonLabel,
          descendants: true,
          isSignal: true
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ButtonDirective,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pButton]",
          standalone: true,
          providers: [ButtonStyle],
          host: {
            "[class.p-button-icon-only]": "isIconOnly()",
            "[class.p-button-text]": "isTextButton()"
          }
        }]
      }],
      propDecorators: {
        iconPos: [{
          type: Input
        }],
        loadingIcon: [{
          type: Input
        }],
        loading: [{
          type: Input
        }],
        severity: [{
          type: Input
        }],
        raised: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        rounded: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        text: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        outlined: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        size: [{
          type: Input
        }],
        plain: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        label: [{
          type: Input
        }],
        icon: [{
          type: Input
        }],
        buttonProps: [{
          type: Input
        }]
      }
    });
    Button = class _Button extends BaseComponent {
      /**
       * Type of the button.
       * @group Props
       */
      type = "button";
      /**
       * Position of the icon.
       * @group Props
       */
      iconPos = "left";
      /**
       * Name of the icon.
       * @group Props
       */
      icon;
      /**
       * Value of the badge.
       * @group Props
       */
      badge;
      /**
       * Uses to pass attributes to the label's DOM element.
       * @group Props
       */
      label;
      /**
       * When present, it specifies that the component should be disabled.
       * @group Props
       */
      disabled;
      /**
       * Whether the button is in loading state.
       * @group Props
       */
      loading = false;
      /**
       * Icon to display in loading state.
       * @group Props
       */
      loadingIcon;
      /**
       * Add a shadow to indicate elevation.
       * @group Props
       */
      raised = false;
      /**
       * Add a circular border radius to the button.
       * @group Props
       */
      rounded = false;
      /**
       * Add a textual class to the button without a background initially.
       * @group Props
       */
      text = false;
      /**
       * Add a plain textual class to the button without a background initially.
       * @deprecated use variant property instead.
       * @group Props
       */
      plain = false;
      /**
       * Defines the style of the button.
       * @group Props
       */
      severity;
      /**
       * Add a border class without a background initially.
       * @group Props
       */
      outlined = false;
      /**
       * Add a link style to the button.
       * @group Props
       */
      link = false;
      /**
       * Add a tabindex to the button.
       * @group Props
       */
      tabindex;
      /**
       * Defines the size of the button.
       * @group Props
       */
      size;
      /**
       * Specifies the variant of the component.
       * @group Props
       */
      variant;
      /**
       * Inline style of the element.
       * @group Props
       */
      style;
      /**
       * Class of the element.
       * @group Props
       */
      styleClass;
      /**
       * Style class of the badge.
       * @group Props
       * @deprecated use badgeSeverity instead.
       */
      badgeClass;
      /**
       * Severity type of the badge.
       * @group Props
       * @defaultValue secondary
       */
      badgeSeverity = "secondary";
      /**
       * Used to define a string that autocomplete attribute the current element.
       * @group Props
       */
      ariaLabel;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Spans 100% width of the container when enabled.
       * @group Props
       */
      fluid;
      /**
       * Callback to execute when button is clicked.
       * This event is intended to be used with the <p-button> component. Using a regular <button> element, use (click).
       * @param {MouseEvent} event - Mouse event.
       * @group Emits
       */
      onClick = new EventEmitter();
      /**
       * Callback to execute when button is focused.
       * This event is intended to be used with the <p-button> component. Using a regular <button> element, use (focus).
       * @param {FocusEvent} event - Focus event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to execute when button loses focus.
       * This event is intended to be used with the <p-button> component. Using a regular <button> element, use (blur).
       * @param {FocusEvent} event - Focus event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      /**
       * Template of the content.
       * @group Templates
       **/
      contentTemplate;
      /**
       * Template of the loading.
       * @group Templates
       **/
      loadingIconTemplate;
      /**
       * Template of the icon.
       * @group Templates
       **/
      iconTemplate;
      _buttonProps;
      /**
       * Used to pass all properties of the ButtonProps to the Button component.
       * @group Props
       */
      get buttonProps() {
        return this._buttonProps;
      }
      set buttonProps(val) {
        this._buttonProps = val;
        if (val && typeof val === "object") {
          Object.entries(val).forEach(([k, v]) => this[`_${k}`] !== v && (this[`_${k}`] = v));
        }
      }
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return isEmpty(this.fluid) ? !!fluidComponent : this.fluid;
      }
      _componentStyle = inject(ButtonStyle);
      templates;
      _contentTemplate;
      _iconTemplate;
      _loadingIconTemplate;
      ngAfterContentInit() {
        this.templates?.forEach((item) => {
          switch (item.getType()) {
            case "content":
              this._contentTemplate = item.template;
              break;
            case "icon":
              this._iconTemplate = item.template;
              break;
            case "loadingicon":
              this._loadingIconTemplate = item.template;
              break;
            default:
              this._contentTemplate = item.template;
              break;
          }
        });
      }
      ngOnChanges(simpleChanges) {
        super.ngOnChanges(simpleChanges);
        const {
          buttonProps
        } = simpleChanges;
        if (buttonProps) {
          const props = buttonProps.currentValue;
          for (const property in props) {
            this[property] = props[property];
          }
        }
      }
      spinnerIconClass() {
        return Object.entries(this.iconClass()).filter(([, value]) => !!value).reduce((acc, [key]) => acc + ` ${key}`, "p-button-loading-icon");
      }
      iconClass() {
        return {
          [`p-button-loading-icon pi-spin ${this.loadingIcon ?? ""}`]: this.loading,
          "p-button-icon": true,
          "p-button-icon-left": this.iconPos === "left" && this.label,
          "p-button-icon-right": this.iconPos === "right" && this.label,
          "p-button-icon-top": this.iconPos === "top" && this.label,
          "p-button-icon-bottom": this.iconPos === "bottom" && this.label
        };
      }
      get buttonClass() {
        return {
          "p-button p-component": true,
          "p-button-icon-only": (this.icon || this.iconTemplate || this._iconTemplate || this.loadingIcon || this.loadingIconTemplate || this._loadingIconTemplate) && !this.label,
          "p-button-vertical": (this.iconPos === "top" || this.iconPos === "bottom") && this.label,
          "p-button-loading": this.loading,
          "p-button-loading-label-only": this.loading && !this.icon && this.label && !this.loadingIcon && this.iconPos === "left",
          "p-button-link": this.link,
          [`p-button-${this.severity}`]: this.severity,
          "p-button-raised": this.raised,
          "p-button-rounded": this.rounded,
          "p-button-text": this.text || this.variant == "text",
          "p-button-outlined": this.outlined || this.variant == "outlined",
          "p-button-sm": this.size === "small",
          "p-button-lg": this.size === "large",
          "p-button-plain": this.plain,
          "p-button-fluid": this.hasFluid,
          [`${this.styleClass}`]: this.styleClass
        };
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Button,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _Button,
        isStandalone: true,
        selector: "p-button",
        inputs: {
          type: "type",
          iconPos: "iconPos",
          icon: "icon",
          badge: "badge",
          label: "label",
          disabled: ["disabled", "disabled", booleanAttribute],
          loading: ["loading", "loading", booleanAttribute],
          loadingIcon: "loadingIcon",
          raised: ["raised", "raised", booleanAttribute],
          rounded: ["rounded", "rounded", booleanAttribute],
          text: ["text", "text", booleanAttribute],
          plain: ["plain", "plain", booleanAttribute],
          severity: "severity",
          outlined: ["outlined", "outlined", booleanAttribute],
          link: ["link", "link", booleanAttribute],
          tabindex: ["tabindex", "tabindex", numberAttribute],
          size: "size",
          variant: "variant",
          style: "style",
          styleClass: "styleClass",
          badgeClass: "badgeClass",
          badgeSeverity: "badgeSeverity",
          ariaLabel: "ariaLabel",
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          fluid: ["fluid", "fluid", booleanAttribute],
          buttonProps: "buttonProps"
        },
        outputs: {
          onClick: "onClick",
          onFocus: "onFocus",
          onBlur: "onBlur"
        },
        providers: [ButtonStyle],
        queries: [{
          propertyName: "contentTemplate",
          first: true,
          predicate: ["content"],
          descendants: true
        }, {
          propertyName: "loadingIconTemplate",
          first: true,
          predicate: ["loadingicon"],
          descendants: true
        }, {
          propertyName: "iconTemplate",
          first: true,
          predicate: ["icon"],
          descendants: true
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports,
        template: `
        <button
            [attr.type]="type"
            [attr.aria-label]="ariaLabel"
            [ngStyle]="style"
            [disabled]="disabled || loading"
            [ngClass]="buttonClass"
            (click)="onClick.emit($event)"
            (focus)="onFocus.emit($event)"
            (blur)="onBlur.emit($event)"
            pRipple
            [attr.data-pc-name]="'button'"
            [attr.data-pc-section]="'root'"
            [attr.tabindex]="tabindex"
            [pAutoFocus]="autofocus"
        >
            <ng-content></ng-content>
            <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate"></ng-container>
            <ng-container *ngIf="loading">
                <ng-container *ngIf="!loadingIconTemplate && !_loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="iconClass()" [attr.aria-hidden]="true" [attr.data-pc-section]="'loadingicon'"></span>
                    <SpinnerIcon *ngIf="!loadingIcon" [styleClass]="spinnerIconClass()" [spin]="true" [attr.aria-hidden]="true" [attr.data-pc-section]="'loadingicon'" />
                </ng-container>
                <ng-template [ngIf]="loadingIconTemplate || _loadingIconTemplate" *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate; context: { class: iconClass() }"></ng-template>
            </ng-container>
            <ng-container *ngIf="!loading">
                <span *ngIf="icon && !iconTemplate && !_iconTemplate" [class]="icon" [ngClass]="iconClass()" [attr.data-pc-section]="'icon'"></span>
                <ng-template [ngIf]="!icon && (iconTemplate || _iconTemplate)" *ngTemplateOutlet="iconTemplate || _iconTemplate; context: { class: iconClass() }"></ng-template>
            </ng-container>
            <span class="p-button-label" [attr.aria-hidden]="icon && !label" *ngIf="!contentTemplate && !_contentTemplate && label" [attr.data-pc-section]="'label'">{{ label }}</span>
            <p-badge *ngIf="!contentTemplate && !_contentTemplate && badge" [value]="badge" [severity]="badgeSeverity"></p-badge>
        </button>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "directive",
          type: Ripple,
          selector: "[pRipple]"
        }, {
          kind: "directive",
          type: AutoFocus,
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "component",
          type: SpinnerIcon,
          selector: "SpinnerIcon"
        }, {
          kind: "ngmodule",
          type: BadgeModule
        }, {
          kind: "component",
          type: Badge,
          selector: "p-badge",
          inputs: ["styleClass", "style", "badgeSize", "size", "severity", "value", "badgeDisabled"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Button,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-button",
          standalone: true,
          imports: [CommonModule, Ripple, AutoFocus, SpinnerIcon, BadgeModule, SharedModule],
          template: `
        <button
            [attr.type]="type"
            [attr.aria-label]="ariaLabel"
            [ngStyle]="style"
            [disabled]="disabled || loading"
            [ngClass]="buttonClass"
            (click)="onClick.emit($event)"
            (focus)="onFocus.emit($event)"
            (blur)="onBlur.emit($event)"
            pRipple
            [attr.data-pc-name]="'button'"
            [attr.data-pc-section]="'root'"
            [attr.tabindex]="tabindex"
            [pAutoFocus]="autofocus"
        >
            <ng-content></ng-content>
            <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate"></ng-container>
            <ng-container *ngIf="loading">
                <ng-container *ngIf="!loadingIconTemplate && !_loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="iconClass()" [attr.aria-hidden]="true" [attr.data-pc-section]="'loadingicon'"></span>
                    <SpinnerIcon *ngIf="!loadingIcon" [styleClass]="spinnerIconClass()" [spin]="true" [attr.aria-hidden]="true" [attr.data-pc-section]="'loadingicon'" />
                </ng-container>
                <ng-template [ngIf]="loadingIconTemplate || _loadingIconTemplate" *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate; context: { class: iconClass() }"></ng-template>
            </ng-container>
            <ng-container *ngIf="!loading">
                <span *ngIf="icon && !iconTemplate && !_iconTemplate" [class]="icon" [ngClass]="iconClass()" [attr.data-pc-section]="'icon'"></span>
                <ng-template [ngIf]="!icon && (iconTemplate || _iconTemplate)" *ngTemplateOutlet="iconTemplate || _iconTemplate; context: { class: iconClass() }"></ng-template>
            </ng-container>
            <span class="p-button-label" [attr.aria-hidden]="icon && !label" *ngIf="!contentTemplate && !_contentTemplate && label" [attr.data-pc-section]="'label'">{{ label }}</span>
            <p-badge *ngIf="!contentTemplate && !_contentTemplate && badge" [value]="badge" [severity]="badgeSeverity"></p-badge>
        </button>
    `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None,
          providers: [ButtonStyle]
        }]
      }],
      propDecorators: {
        type: [{
          type: Input
        }],
        iconPos: [{
          type: Input
        }],
        icon: [{
          type: Input
        }],
        badge: [{
          type: Input
        }],
        label: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        loading: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        loadingIcon: [{
          type: Input
        }],
        raised: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        rounded: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        text: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        plain: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        severity: [{
          type: Input
        }],
        outlined: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        link: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        size: [{
          type: Input
        }],
        variant: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        badgeClass: [{
          type: Input
        }],
        badgeSeverity: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: Output
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        contentTemplate: [{
          type: ContentChild,
          args: ["content"]
        }],
        loadingIconTemplate: [{
          type: ContentChild,
          args: ["loadingicon"]
        }],
        iconTemplate: [{
          type: ContentChild,
          args: ["icon"]
        }],
        buttonProps: [{
          type: Input
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    ButtonModule = class _ButtonModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonModule,
        imports: [CommonModule, ButtonDirective, Button, SharedModule, ButtonLabel, ButtonIcon],
        exports: [ButtonDirective, Button, ButtonLabel, ButtonIcon, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ButtonModule,
        imports: [CommonModule, Button, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ButtonModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [CommonModule, ButtonDirective, Button, SharedModule, ButtonLabel, ButtonIcon],
          exports: [ButtonDirective, Button, ButtonLabel, ButtonIcon, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-checkbox.mjs
var theme4, classes4, CheckboxStyle, CheckboxClasses, CHECKBOX_VALUE_ACCESSOR2, Checkbox, CheckboxModule;
var init_primeng_checkbox = __esm({
  "node_modules/primeng/fesm2022/primeng-checkbox.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_utils();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_icons();
    init_primeng_base();
    theme4 = ({
      dt
    }) => `
.p-checkbox {
    position: relative;
    display: inline-flex;
    user-select: none;
    vertical-align: bottom;
    width: ${dt("checkbox.width")};
    height: ${dt("checkbox.height")};
}

.p-checkbox-input {
    cursor: pointer;
    appearance: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    opacity: 0;
    z-index: 1;
    outline: 0 none;
    border: 1px solid transparent;
    border-radius: ${dt("checkbox.border.radius")};
}

.p-checkbox-box {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: ${dt("checkbox.border.radius")};
    border: 1px solid ${dt("checkbox.border.color")};
    background: ${dt("checkbox.background")};
    width: ${dt("checkbox.width")};
    height: ${dt("checkbox.height")};
    transition: background ${dt("checkbox.transition.duration")}, color ${dt("checkbox.transition.duration")}, border-color ${dt("checkbox.transition.duration")}, box-shadow ${dt("checkbox.transition.duration")}, outline-color ${dt("checkbox.transition.duration")};
    outline-color: transparent;
    box-shadow: ${dt("checkbox.shadow")};
}

.p-checkbox-icon {
    transition-duration: ${dt("checkbox.transition.duration")};
    color: ${dt("checkbox.icon.color")};
    font-size: ${dt("checkbox.icon.size")};
    width: ${dt("checkbox.icon.size")};
    height: ${dt("checkbox.icon.size")};
}

.p-checkbox:not(.p-disabled):has(.p-checkbox-input:hover) .p-checkbox-box {
    border-color: ${dt("checkbox.hover.border.color")};
}

.p-checkbox-checked .p-checkbox-box {
    border-color: ${dt("checkbox.checked.border.color")};
    background: ${dt("checkbox.checked.background")};
}

.p-checkbox-checked .p-checkbox-icon {
    color: ${dt("checkbox.icon.checked.color")};
}

.p-checkbox-checked:not(.p-disabled):has(.p-checkbox-input:hover) .p-checkbox-box {
    background: ${dt("checkbox.checked.hover.background")};
    border-color: ${dt("checkbox.checked.hover.border.color")};
}

.p-checkbox-checked:not(.p-disabled):has(.p-checkbox-input:hover) .p-checkbox-icon {
    color: ${dt("checkbox.icon.checked.hover.color")};
}

.p-checkbox:not(.p-disabled):has(.p-checkbox-input:focus-visible) .p-checkbox-box {
    border-color: ${dt("checkbox.focus.border.color")};
    box-shadow: ${dt("checkbox.focus.ring.shadow")};
    outline: ${dt("checkbox.focus.ring.width")} ${dt("checkbox.focus.ring.style")} ${dt("checkbox.focus.ring.color")};
    outline-offset: ${dt("checkbox.focus.ring.offset")};
}

.p-checkbox-checked:not(.p-disabled):has(.p-checkbox-input:focus-visible) .p-checkbox-box {
    border-color: ${dt("checkbox.checked.focus.border.color")};
}

p-checkBox.ng-invalid.ng-dirty .p-checkbox-box,
p-check-box.ng-invalid.ng-dirty .p-checkbox-box,
p-checkbox.ng-invalid.ng-dirty .p-checkbox-box {
    border-color: ${dt("checkbox.invalid.border.color")};
}

.p-checkbox.p-variant-filled .p-checkbox-box {
    background: ${dt("checkbox.filled.background")};
}

.p-checkbox-checked.p-variant-filled .p-checkbox-box {
    background: ${dt("checkbox.checked.background")};
}

.p-checkbox-checked.p-variant-filled:not(.p-disabled):has(.p-checkbox-input:hover) .p-checkbox-box {
    background: ${dt("checkbox.checked.hover.background")};
}

.p-checkbox.p-disabled {
    opacity: 1;
}

.p-checkbox.p-disabled .p-checkbox-box {
    background: ${dt("checkbox.disabled.background")};
    border-color: ${dt("checkbox.checked.disabled.border.color")};
}

.p-checkbox.p-disabled .p-checkbox-box .p-checkbox-icon {
    color: ${dt("checkbox.icon.disabled.color")};
}

.p-checkbox-sm,
.p-checkbox-sm .p-checkbox-box {
    width: ${dt("checkbox.sm.width")};
    height: ${dt("checkbox.sm.height")};
}

.p-checkbox-sm .p-checkbox-icon {
    font-size: ${dt("checkbox.icon.sm.size")};
    width: ${dt("checkbox.icon.sm.size")};
    height: ${dt("checkbox.icon.sm.size")};
}

.p-checkbox-lg,
.p-checkbox-lg .p-checkbox-box {
    width: ${dt("checkbox.lg.width")};
    height: ${dt("checkbox.lg.height")};
}

.p-checkbox-lg .p-checkbox-icon {
    font-size: ${dt("checkbox.icon.lg.size")};
    width: ${dt("checkbox.icon.lg.size")};
    height: ${dt("checkbox.icon.lg.size")};
}
`;
    classes4 = {
      root: ({
        instance,
        props
      }) => ["p-checkbox p-component", {
        "p-checkbox-checked": instance.checked,
        "p-disabled": props.disabled,
        "p-invalid": props.invalid,
        "p-variant-filled": props.variant ? props.variant === "filled" : instance.config.inputStyle === "filled" || instance.config.inputVariant === "filled"
      }],
      box: "p-checkbox-box",
      input: "p-checkbox-input",
      icon: "p-checkbox-icon"
    };
    CheckboxStyle = class _CheckboxStyle extends BaseStyle {
      name = "checkbox";
      theme = theme4;
      classes = classes4;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _CheckboxStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _CheckboxStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: CheckboxStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(CheckboxClasses2) {
      CheckboxClasses2["root"] = "p-checkbox";
      CheckboxClasses2["box"] = "p-checkbox-box";
      CheckboxClasses2["input"] = "p-checkbox-input";
      CheckboxClasses2["icon"] = "p-checkbox-icon";
    })(CheckboxClasses || (CheckboxClasses = {}));
    CHECKBOX_VALUE_ACCESSOR2 = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => Checkbox),
      multi: true
    };
    Checkbox = class _Checkbox extends BaseComponent {
      /**
       * Value of the checkbox.
       * @group Props
       */
      value;
      /**
       * Name of the checkbox group.
       * @group Props
       */
      name;
      /**
       * When present, it specifies that the element should be disabled.
       * @group Props
       */
      disabled;
      /**
       * Allows to select a boolean value instead of multiple values.
       * @group Props
       */
      binary;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Used to define a string that labels the input element.
       * @group Props
       */
      ariaLabel;
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex;
      /**
       * Identifier of the focus input to match a label defined for the component.
       * @group Props
       */
      inputId;
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Inline style of the input element.
       * @group Props
       */
      inputStyle;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * Style class of the input element.
       * @group Props
       */
      inputClass;
      /**
       * When present, it specifies input state as indeterminate.
       * @group Props
       */
      indeterminate = false;
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * Form control value.
       * @group Props
       */
      formControl;
      /**
       * Icon class of the checkbox icon.
       * @group Props
       */
      checkboxIcon;
      /**
       * When present, it specifies that the component cannot be edited.
       * @group Props
       */
      readonly;
      /**
       * When present, it specifies that checkbox must be checked before submitting the form.
       * @group Props
       */
      required;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Value in checked state.
       * @group Props
       */
      trueValue = true;
      /**
       * Value in unchecked state.
       * @group Props
       */
      falseValue = false;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * Callback to invoke on value change.
       * @param {CheckboxChangeEvent} event - Custom value change event.
       * @group Emits
       */
      onChange = new EventEmitter();
      /**
       * Callback to invoke when the receives focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to invoke when the loses focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      inputViewChild;
      get checked() {
        return this._indeterminate() ? false : this.binary ? this.model === this.trueValue : contains(this.value, this.model);
      }
      get containerClass() {
        return {
          "p-checkbox p-component": true,
          "p-checkbox-checked p-highlight": this.checked,
          "p-disabled": this.disabled,
          "p-variant-filled": this.variant === "filled" || this.config.inputStyle() === "filled" || this.config.inputVariant() === "filled",
          "p-checkbox-sm p-inputfield-sm": this.size === "small",
          "p-checkbox-lg p-inputfield-lg": this.size === "large"
        };
      }
      _indeterminate = signal(void 0);
      /**
       * The template of the checkbox icon.
       * @group Templates
       */
      checkboxIconTemplate;
      templates;
      _checkboxIconTemplate;
      model;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      focused = false;
      _componentStyle = inject(CheckboxStyle);
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "icon":
              this._checkboxIconTemplate = item.template;
              break;
            case "checkboxicon":
              this._checkboxIconTemplate = item.template;
              break;
          }
        });
      }
      ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes.indeterminate) {
          this._indeterminate.set(changes.indeterminate.currentValue);
        }
      }
      updateModel(event2) {
        let newModelValue;
        const selfControl = this.injector.get(NgControl, null, {
          optional: true,
          self: true
        });
        const currentModelValue = selfControl && !this.formControl ? selfControl.value : this.model;
        if (!this.binary) {
          if (this.checked || this._indeterminate()) newModelValue = currentModelValue.filter((val) => !equals(val, this.value));
          else newModelValue = currentModelValue ? [...currentModelValue, this.value] : [this.value];
          this.onModelChange(newModelValue);
          this.model = newModelValue;
          if (this.formControl) {
            this.formControl.setValue(newModelValue);
          }
        } else {
          newModelValue = this._indeterminate() ? this.trueValue : this.checked ? this.falseValue : this.trueValue;
          this.model = newModelValue;
          this.onModelChange(newModelValue);
        }
        if (this._indeterminate()) {
          this._indeterminate.set(false);
        }
        this.onChange.emit({
          checked: newModelValue,
          originalEvent: event2
        });
      }
      handleChange(event2) {
        if (!this.readonly) {
          this.updateModel(event2);
        }
      }
      onInputFocus(event2) {
        this.focused = true;
        this.onFocus.emit(event2);
      }
      onInputBlur(event2) {
        this.focused = false;
        this.onBlur.emit(event2);
        this.onModelTouched();
      }
      focus() {
        this.inputViewChild.nativeElement.focus();
      }
      writeValue(model) {
        this.model = model;
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        setTimeout(() => {
          this.disabled = val;
          this.cd.markForCheck();
        });
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Checkbox,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _Checkbox,
        isStandalone: true,
        selector: "p-checkbox, p-checkBox, p-check-box",
        inputs: {
          value: "value",
          name: "name",
          disabled: ["disabled", "disabled", booleanAttribute],
          binary: ["binary", "binary", booleanAttribute],
          ariaLabelledBy: "ariaLabelledBy",
          ariaLabel: "ariaLabel",
          tabindex: ["tabindex", "tabindex", numberAttribute],
          inputId: "inputId",
          style: "style",
          inputStyle: "inputStyle",
          styleClass: "styleClass",
          inputClass: "inputClass",
          indeterminate: ["indeterminate", "indeterminate", booleanAttribute],
          size: "size",
          formControl: "formControl",
          checkboxIcon: "checkboxIcon",
          readonly: ["readonly", "readonly", booleanAttribute],
          required: ["required", "required", booleanAttribute],
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          trueValue: "trueValue",
          falseValue: "falseValue",
          variant: "variant"
        },
        outputs: {
          onChange: "onChange",
          onFocus: "onFocus",
          onBlur: "onBlur"
        },
        providers: [CHECKBOX_VALUE_ACCESSOR2, CheckboxStyle],
        queries: [{
          propertyName: "checkboxIconTemplate",
          first: true,
          predicate: ["checkboxicon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "inputViewChild",
          first: true,
          predicate: ["input"],
          descendants: true
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports,
        template: `
        <div [style]="style" [class]="styleClass" [ngClass]="containerClass" [attr.data-p-highlight]="checked" [attr.data-p-checked]="checked" [attr.data-p-disabled]="disabled">
            <input
                #input
                [attr.id]="inputId"
                type="checkbox"
                [value]="value"
                [attr.name]="name"
                [checked]="checked"
                [attr.tabindex]="tabindex"
                [disabled]="disabled"
                [readonly]="readonly"
                [attr.required]="required ? true : null"
                [attr.aria-labelledby]="ariaLabelledBy"
                [attr.aria-label]="ariaLabel"
                [style]="inputStyle"
                [class]="inputClass"
                [ngClass]="{ 'p-checkbox-input': true }"
                (focus)="onInputFocus($event)"
                (blur)="onInputBlur($event)"
                (change)="handleChange($event)"
            />
            <div class="p-checkbox-box">
                <ng-container *ngIf="!checkboxIconTemplate && !_checkboxIconTemplate">
                    <ng-container *ngIf="checked">
                        <span *ngIf="checkboxIcon" class="p-checkbox-icon" [ngClass]="checkboxIcon" [attr.data-pc-section]="'icon'"></span>
                        <CheckIcon *ngIf="!checkboxIcon" [styleClass]="'p-checkbox-icon'" [attr.data-pc-section]="'icon'" />
                    </ng-container>
                    <MinusIcon *ngIf="_indeterminate()" [styleClass]="'p-checkbox-icon'" [attr.data-pc-section]="'icon'" />
                </ng-container>
                <ng-template *ngTemplateOutlet="checkboxIconTemplate || _checkboxIconTemplate; context: { checked: checked, class: 'p-checkbox-icon' }"></ng-template>
            </div>
        </div>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "component",
          type: CheckIcon,
          selector: "CheckIcon"
        }, {
          kind: "component",
          type: MinusIcon,
          selector: "MinusIcon"
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Checkbox,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-checkbox, p-checkBox, p-check-box",
          standalone: true,
          imports: [CommonModule, CheckIcon, MinusIcon, SharedModule],
          template: `
        <div [style]="style" [class]="styleClass" [ngClass]="containerClass" [attr.data-p-highlight]="checked" [attr.data-p-checked]="checked" [attr.data-p-disabled]="disabled">
            <input
                #input
                [attr.id]="inputId"
                type="checkbox"
                [value]="value"
                [attr.name]="name"
                [checked]="checked"
                [attr.tabindex]="tabindex"
                [disabled]="disabled"
                [readonly]="readonly"
                [attr.required]="required ? true : null"
                [attr.aria-labelledby]="ariaLabelledBy"
                [attr.aria-label]="ariaLabel"
                [style]="inputStyle"
                [class]="inputClass"
                [ngClass]="{ 'p-checkbox-input': true }"
                (focus)="onInputFocus($event)"
                (blur)="onInputBlur($event)"
                (change)="handleChange($event)"
            />
            <div class="p-checkbox-box">
                <ng-container *ngIf="!checkboxIconTemplate && !_checkboxIconTemplate">
                    <ng-container *ngIf="checked">
                        <span *ngIf="checkboxIcon" class="p-checkbox-icon" [ngClass]="checkboxIcon" [attr.data-pc-section]="'icon'"></span>
                        <CheckIcon *ngIf="!checkboxIcon" [styleClass]="'p-checkbox-icon'" [attr.data-pc-section]="'icon'" />
                    </ng-container>
                    <MinusIcon *ngIf="_indeterminate()" [styleClass]="'p-checkbox-icon'" [attr.data-pc-section]="'icon'" />
                </ng-container>
                <ng-template *ngTemplateOutlet="checkboxIconTemplate || _checkboxIconTemplate; context: { checked: checked, class: 'p-checkbox-icon' }"></ng-template>
            </div>
        </div>
    `,
          providers: [CHECKBOX_VALUE_ACCESSOR2, CheckboxStyle],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      propDecorators: {
        value: [{
          type: Input
        }],
        name: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        binary: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        inputId: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        inputStyle: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        inputClass: [{
          type: Input
        }],
        indeterminate: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        size: [{
          type: Input
        }],
        formControl: [{
          type: Input
        }],
        checkboxIcon: [{
          type: Input
        }],
        readonly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        required: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        trueValue: [{
          type: Input
        }],
        falseValue: [{
          type: Input
        }],
        variant: [{
          type: Input
        }],
        onChange: [{
          type: Output
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        inputViewChild: [{
          type: ViewChild,
          args: ["input"]
        }],
        checkboxIconTemplate: [{
          type: ContentChild,
          args: ["checkboxicon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    CheckboxModule = class _CheckboxModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _CheckboxModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _CheckboxModule,
        imports: [Checkbox, SharedModule],
        exports: [Checkbox, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _CheckboxModule,
        imports: [Checkbox, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: CheckboxModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Checkbox, SharedModule],
          exports: [Checkbox, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-inputtext.mjs
var theme5, classes5, InputTextStyle, InputTextClasses, InputText, InputTextModule;
var init_primeng_inputtext = __esm({
  "node_modules/primeng/fesm2022/primeng-inputtext.mjs"() {
    "use strict";
    init_core();
    init_core();
    init_utils();
    init_primeng_basecomponent();
    init_primeng_base();
    init_forms();
    theme5 = ({
      dt
    }) => `
.p-inputtext {
    font-family: inherit;
    font-feature-settings: inherit;
    font-size: 1rem;
    color: ${dt("inputtext.color")};
    background: ${dt("inputtext.background")};
    padding-block: ${dt("inputtext.padding.y")};
    padding-inline: ${dt("inputtext.padding.x")};
    border: 1px solid ${dt("inputtext.border.color")};
    transition: background ${dt("inputtext.transition.duration")}, color ${dt("inputtext.transition.duration")}, border-color ${dt("inputtext.transition.duration")}, outline-color ${dt("inputtext.transition.duration")}, box-shadow ${dt("inputtext.transition.duration")};
    appearance: none;
    border-radius: ${dt("inputtext.border.radius")};
    outline-color: transparent;
    box-shadow: ${dt("inputtext.shadow")};
}

.p-inputtext.ng-invalid.ng-dirty {
    border-color: ${dt("inputtext.invalid.border.color")};
}

.p-inputtext:enabled:hover {
    border-color: ${dt("inputtext.hover.border.color")};
}

.p-inputtext:enabled:focus {
    border-color: ${dt("inputtext.focus.border.color")};
    box-shadow: ${dt("inputtext.focus.ring.shadow")};
    outline: ${dt("inputtext.focus.ring.width")} ${dt("inputtext.focus.ring.style")} ${dt("inputtext.focus.ring.color")};
    outline-offset: ${dt("inputtext.focus.ring.offset")};
}

.p-inputtext.p-invalid {
    border-color: ${dt("inputtext.invalid.border.color")};
}

.p-inputtext.p-variant-filled {
    background: ${dt("inputtext.filled.background")};
}
    
.p-inputtext.p-variant-filled:enabled:hover {
    background: ${dt("inputtext.filled.hover.background")};
}

.p-inputtext.p-variant-filled:enabled:focus {
    background: ${dt("inputtext.filled.focus.background")};
}

.p-inputtext:disabled {
    opacity: 1;
    background: ${dt("inputtext.disabled.background")};
    color: ${dt("inputtext.disabled.color")};
}

.p-inputtext::placeholder {
    color: ${dt("inputtext.placeholder.color")};
}

.p-inputtext.ng-invalid.ng-dirty::placeholder {
    color: ${dt("inputtext.invalid.placeholder.color")};
}

.p-inputtext-sm {
    font-size: ${dt("inputtext.sm.font.size")};
    padding-block: ${dt("inputtext.sm.padding.y")};
    padding-inline: ${dt("inputtext.sm.padding.x")};
}

.p-inputtext-lg {
    font-size: ${dt("inputtext.lg.font.size")};
    padding-block: ${dt("inputtext.lg.padding.y")};
    padding-inline: ${dt("inputtext.lg.padding.x")};
}

.p-inputtext-fluid {
    width: 100%;
}
`;
    classes5 = {
      root: ({
        instance,
        props
      }) => ["p-inputtext p-component", {
        "p-filled": instance.filled,
        "p-inputtext-sm": props.size === "small",
        "p-inputtext-lg": props.size === "large",
        "p-invalid": props.invalid,
        "p-variant-filled": props.variant === "filled",
        "p-inputtext-fluid": props.fluid
      }]
    };
    InputTextStyle = class _InputTextStyle extends BaseStyle {
      name = "inputtext";
      theme = theme5;
      classes = classes5;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputTextStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputTextStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputTextStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(InputTextClasses2) {
      InputTextClasses2["root"] = "p-inputtext";
    })(InputTextClasses || (InputTextClasses = {}));
    InputText = class _InputText extends BaseComponent {
      ngModel;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * Spans 100% width of the container when enabled.
       * @group Props
       */
      fluid;
      /**
       * Defines the size of the component.
       * @group Props
       */
      pSize;
      filled;
      _componentStyle = inject(InputTextStyle);
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return isEmpty(this.fluid) ? !!fluidComponent : this.fluid;
      }
      constructor(ngModel) {
        super();
        this.ngModel = ngModel;
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        this.updateFilledState();
        this.cd.detectChanges();
      }
      ngDoCheck() {
        this.updateFilledState();
      }
      onInput() {
        this.updateFilledState();
      }
      updateFilledState() {
        this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length || this.ngModel && this.ngModel.model;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputText,
        deps: [{
          token: NgModel,
          optional: true
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _InputText,
        isStandalone: true,
        selector: "[pInputText]",
        inputs: {
          variant: "variant",
          fluid: ["fluid", "fluid", booleanAttribute],
          pSize: "pSize"
        },
        host: {
          listeners: {
            "input": "onInput($event)"
          },
          properties: {
            "class.p-filled": "filled",
            "class.p-variant-filled": '(variant ?? (config.inputStyle() || config.inputVariant())) === "filled"',
            "class.p-inputtext-fluid": "hasFluid",
            "class.p-inputtext-sm": 'pSize === "small"',
            "class.p-inputfield-sm": 'pSize === "small"',
            "class.p-inputtext-lg": 'pSize === "large"',
            "class.p-inputfield-lg": 'pSize === "large"'
          },
          classAttribute: "p-inputtext p-component"
        },
        providers: [InputTextStyle],
        usesInheritance: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputText,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pInputText]",
          standalone: true,
          host: {
            class: "p-inputtext p-component",
            "[class.p-filled]": "filled",
            "[class.p-variant-filled]": '(variant ?? (config.inputStyle() || config.inputVariant())) === "filled"',
            "[class.p-inputtext-fluid]": "hasFluid",
            "[class.p-inputtext-sm]": 'pSize === "small"',
            "[class.p-inputfield-sm]": 'pSize === "small"',
            "[class.p-inputtext-lg]": 'pSize === "large"',
            "[class.p-inputfield-lg]": 'pSize === "large"'
          },
          providers: [InputTextStyle]
        }]
      }],
      ctorParameters: () => [{
        type: NgModel,
        decorators: [{
          type: Optional
        }]
      }],
      propDecorators: {
        variant: [{
          type: Input
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        pSize: [{
          type: Input,
          args: ["pSize"]
        }],
        onInput: [{
          type: HostListener,
          args: ["input", ["$event"]]
        }]
      }
    });
    InputTextModule = class _InputTextModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputTextModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputTextModule,
        imports: [InputText],
        exports: [InputText]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputTextModule
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputTextModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [InputText],
          exports: [InputText]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-datepicker.mjs
var theme6, inlineStyles, classes6, DatePickerStyle, DatePickerClasses, DATEPICKER_VALUE_ACCESSOR, DatePicker, DatePickerModule;
var init_primeng_datepicker = __esm({
  "node_modules/primeng/fesm2022/primeng-datepicker.mjs"() {
    "use strict";
    init_animations();
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_utils();
    init_primeng_api();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_basecomponent();
    init_primeng_button();
    init_primeng_dom();
    init_primeng_icons();
    init_primeng_inputtext();
    init_primeng_ripple();
    init_primeng_utils();
    init_primeng_base();
    theme6 = ({
      dt
    }) => `
.p-datepicker {
    position: relative;
    display: inline-flex;
    max-width: 100%;
}

.p-datepicker-input {
    flex: 1 1 auto;
    width: 1%;
}

.p-datepicker:has(.p-datepicker-dropdown) .p-datepicker-input {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
}

.p-datepicker-dropdown {
    cursor: pointer;
    display: inline-flex;
    user-select: none;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    position: relative;
    width: ${dt("datepicker.dropdown.width")};
    border-start-end-radius: ${dt("datepicker.dropdown.border.radius")};
    border-end-end-radius: ${dt("datepicker.dropdown.border.radius")};
    background: ${dt("datepicker.dropdown.background")};
    border: 1px solid ${dt("datepicker.dropdown.border.color")};
    border-inline-start: 0 none;
    color: ${dt("datepicker.dropdown.color")};
    transition: background ${dt("datepicker.transition.duration")}, color ${dt("datepicker.transition.duration")}, border-color ${dt("datepicker.transition.duration")}, outline-color ${dt("datepicker.transition.duration")};
    outline-color: transparent;
}

.p-datepicker-dropdown:not(:disabled):hover {
    background: ${dt("datepicker.dropdown.hover.background")};
    border-color: ${dt("datepicker.dropdown.hover.border.color")};
    color: ${dt("datepicker.dropdown.hover.color")};
}

.p-datepicker-dropdown:not(:disabled):active {
    background: ${dt("datepicker.dropdown.active.background")};
    border-color: ${dt("datepicker.dropdown.active.border.color")};
    color: ${dt("datepicker.dropdown.active.color")};
}

.p-datepicker-dropdown:focus-visible {
    box-shadow: ${dt("datepicker.dropdown.focus.ring.shadow")};
    outline: ${dt("datepicker.dropdown.focus.ring.width")} ${dt("datepicker.dropdown.focus.ring.style")} ${dt("datepicker.dropdown.focus.ring.color")};
    outline-offset: ${dt("datepicker.dropdown.focus.ring.offset")};
}

.p-datepicker:has(.p-datepicker-input-icon-container) {
    position: relative;
}

.p-datepicker:has(.p-datepicker-input-icon-container) .p-datepicker-input {
    padding-inline-end: calc((${dt("form.field.padding.x")} * 2) + ${dt("icon.size")});
}

.p-datepicker-input-icon-container {
    cursor: pointer;
    position: absolute;
    top: 50%;
    inset-inline-end: ${dt("form.field.padding.x")};
    margin-top: calc(-1 * (${dt("icon.size")} / 2));
    color: ${dt("datepicker.input.icon.color")};
    line-height: 1;
}

.p-datepicker:has(.p-datepicker-dropdown) .p-datepicker-clear-icon,
.p-datepicker:has(.p-datepicker-input-icon-container) .p-datepicker-clear-icon {
    inset-inline-end: calc(${dt("datepicker.dropdown.width")} + ${dt("form.field.padding.x")});
}

.p-datepicker-clear-icon {
    position: absolute;
    top: 50%;
    margin-top: -0.5rem;
    cursor: pointer;
    color: ${dt("form.field.icon.color")};
    inset-inline-end: ${dt("form.field.padding.x")};
}

.p-datepicker-fluid {
    display: flex;
}

.p-datepicker-fluid .p-datepicker-input {
    width: 1%;
}

.p-datepicker .p-datepicker-panel {
    min-width: 100%;
}

.p-datepicker-panel {
    width: auto;
    padding: ${dt("datepicker.panel.padding")};
    background: ${dt("datepicker.panel.background")};
    color: ${dt("datepicker.panel.color")};
    border: 1px solid ${dt("datepicker.panel.border.color")};
    border-radius: ${dt("datepicker.panel.border.radius")};
    box-shadow: ${dt("datepicker.panel.shadow")};
}

.p-datepicker-panel-inline {
    display: inline-block;
    overflow-x: auto;
    box-shadow: none;
}

.p-datepicker-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: ${dt("datepicker.header.padding")};
    background: ${dt("datepicker.header.background")};
    color: ${dt("datepicker.header.color")};
    border-bottom: 1px solid ${dt("datepicker.header.border.color")};
}

.p-datepicker-next-button:dir(rtl) {
    transform: rotate(180deg);
}

.p-datepicker-prev-button:dir(rtl) {
    transform: rotate(180deg);
}

.p-datepicker-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: ${dt("datepicker.title.gap")};
    font-weight: ${dt("datepicker.title.font.weight")};
}

.p-datepicker-select-year,
.p-datepicker-select-month {
    border: none;
    background: transparent;
    margin: 0;
    cursor: pointer;
    font-weight: inherit;
    transition: background ${dt("datepicker.transition.duration")}, color ${dt("datepicker.transition.duration")}, border-color ${dt("datepicker.transition.duration")}, outline-color ${dt("datepicker.transition.duration")}, box-shadow ${dt("datepicker.transition.duration")};
}

.p-datepicker-select-month {
    padding: ${dt("datepicker.select.month.padding")};
    color: ${dt("datepicker.select.month.color")};
    border-radius: ${dt("datepicker.select.month.border.radius")};
}

.p-datepicker-select-year {
    padding: ${dt("datepicker.select.year.padding")};
    color: ${dt("datepicker.select.year.color")};
    border-radius: ${dt("datepicker.select.year.border.radius")};
}

.p-datepicker-select-month:enabled:hover {
    background: ${dt("datepicker.select.month.hover.background")};
    color: ${dt("datepicker.select.month.hover.color")};
}

.p-datepicker-select-year:enabled:hover {
    background: ${dt("datepicker.select.year.hover.background")};
    color: ${dt("datepicker.select.year.hover.color")};
}

.p-datepicker-calendar-container {
    display: flex;
}

.p-datepicker-calendar-container .p-datepicker-calendar {
    flex: 1 1 auto;
    border-inline-start: 1px solid ${dt("datepicker.group.border.color")};
    padding-inline: ${dt("datepicker.group.gap")};
}

.p-datepicker-calendar-container .p-datepicker-calendar:first-child {
    padding-inline-start: 0;
    border-inline-start: 0 none;
}

.p-datepicker-calendar-container .p-datepicker-calendar:last-child {
    padding-inline-end: 0;
}

.p-datepicker-day-view {
    width: 100%;
    border-collapse: collapse;
    font-size: 1rem;
    margin: ${dt("datepicker.day.view.margin")};
}

.p-datepicker-weekday-cell {
    padding: ${dt("datepicker.week.day.padding")};
}

.p-datepicker-weekday {
    font-weight: ${dt("datepicker.week.day.font.weight")};
    color: ${dt("datepicker.week.day.color")};
}

.p-datepicker-day-cell {
    padding: ${dt("datepicker.date.padding")};
}

.p-datepicker-day {
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    margin: 0 auto;
    overflow: hidden;
    position: relative;
    width: ${dt("datepicker.date.width")};
    height: ${dt("datepicker.date.height")};
    border-radius: ${dt("datepicker.date.border.radius")};
    transition: background ${dt("datepicker.transition.duration")}, color ${dt("datepicker.transition.duration")}, border-color ${dt("datepicker.transition.duration")},
        box-shadow ${dt("datepicker.transition.duration")}, outline-color ${dt("datepicker.transition.duration")};
    border: 1px solid transparent;
    outline-color: transparent;
    color: ${dt("datepicker.date.color")};
}

.p-datepicker-day:not(.p-datepicker-day-selected):not(.p-disabled):hover {
    background: ${dt("datepicker.date.hover.background")};
    color: ${dt("datepicker.date.hover.color")};
}

.p-datepicker-day:focus-visible {
    box-shadow: ${dt("datepicker.date.focus.ring.shadow")};
    outline: ${dt("datepicker.date.focus.ring.width")} ${dt("datepicker.date.focus.ring.style")} ${dt("datepicker.date.focus.ring.color")};
    outline-offset: ${dt("datepicker.date.focus.ring.offset")};
}

.p-datepicker-day-selected {
    background: ${dt("datepicker.date.selected.background")};
    color: ${dt("datepicker.date.selected.color")};
}

.p-datepicker-day-selected-range {
    background: ${dt("datepicker.date.range.selected.background")};
    color: ${dt("datepicker.date.range.selected.color")};
}

.p-datepicker-today > .p-datepicker-day {
    background: ${dt("datepicker.today.background")};
    color: ${dt("datepicker.today.color")};
}

.p-datepicker-today > .p-datepicker-day-selected {
    background: ${dt("datepicker.date.selected.background")};
    color: ${dt("datepicker.date.selected.color")};
}

.p-datepicker-today > .p-datepicker-day-selected-range {
    background: ${dt("datepicker.date.range.selected.background")};
    color: ${dt("datepicker.date.range.selected.color")};
}

.p-datepicker-weeknumber {
    text-align: center
}

.p-datepicker-month-view {
    margin: ${dt("datepicker.month.view.margin")};
}

.p-datepicker-month {
    width: 33.3%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    overflow: hidden;
    position: relative;
    padding: ${dt("datepicker.month.padding")};
    transition: background ${dt("datepicker.transition.duration")}, color ${dt("datepicker.transition.duration")}, border-color ${dt("datepicker.transition.duration")}, box-shadow ${dt("datepicker.transition.duration")}, outline-color ${dt("datepicker.transition.duration")};
    border-radius: ${dt("datepicker.month.border.radius")};
    outline-color: transparent;
    color: ${dt("datepicker.date.color")};
}

.p-datepicker-month:not(.p-disabled):not(.p-datepicker-month-selected):hover {
    color:  ${dt("datepicker.date.hover.color")};
    background: ${dt("datepicker.date.hover.background")};
}

.p-datepicker-month-selected {
    color: ${dt("datepicker.date.selected.color")};
    background: ${dt("datepicker.date.selected.background")};
}

.p-datepicker-month:not(.p-disabled):focus-visible {
    box-shadow: ${dt("datepicker.date.focus.ring.shadow")};
    outline: ${dt("datepicker.date.focus.ring.width")} ${dt("datepicker.date.focus.ring.style")} ${dt("datepicker.date.focus.ring.color")};
    outline-offset: ${dt("datepicker.date.focus.ring.offset")};
}

.p-datepicker-year-view {
    margin: ${dt("datepicker.year.view.margin")};
}

.p-datepicker-year {
    width: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    overflow: hidden;
    position: relative;
    padding: ${dt("datepicker.year.padding")};
    transition: background ${dt("datepicker.transition.duration")}, color ${dt("datepicker.transition.duration")}, border-color ${dt("datepicker.transition.duration")}, box-shadow ${dt("datepicker.transition.duration")}, outline-color ${dt("datepicker.transition.duration")};
    border-radius: ${dt("datepicker.year.border.radius")};
    outline-color: transparent;
    color: ${dt("datepicker.date.color")};
}

.p-datepicker-year:not(.p-disabled):not(.p-datepicker-year-selected):hover {
    color: ${dt("datepicker.date.hover.color")};
    background: ${dt("datepicker.date.hover.background")};
}

.p-datepicker-year-selected {
    color: ${dt("datepicker.date.selected.color")};
    background: ${dt("datepicker.date.selected.background")};
}

.p-datepicker-year:not(.p-disabled):focus-visible {
    box-shadow: ${dt("datepicker.date.focus.ring.shadow")};
    outline: ${dt("datepicker.date.focus.ring.width")} ${dt("datepicker.date.focus.ring.style")} ${dt("datepicker.date.focus.ring.color")};
    outline-offset: ${dt("datepicker.date.focus.ring.offset")};
}

.p-datepicker-buttonbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding:  ${dt("datepicker.buttonbar.padding")};
    border-top: 1px solid ${dt("datepicker.buttonbar.border.color")};
}

.p-datepicker-buttonbar .p-button {
    width: auto;
}

.p-datepicker-time-picker {
    display: flex;
    justify-content: center;
    align-items: center;
    border-top: 1px solid ${dt("datepicker.time.picker.border.color")};
    padding: 0;
    gap: ${dt("datepicker.time.picker.gap")};
}

.p-datepicker-calendar-container + .p-datepicker-time-picker {
    padding: ${dt("datepicker.time.picker.padding")};
}

.p-datepicker-time-picker > div {
    display: flex;
    align-items: center;
    flex-direction: column;
    gap: ${dt("datepicker.time.picker.button.gap")};
}

.p-datepicker-time-picker span {
    font-size: 1rem;
}

.p-datepicker-timeonly .p-datepicker-time-picker {
    border-top: 0 none;
}

.p-datepicker-calendar:not(:first-child):not(:last-child) .p-datepicker-header {
    justify-content: center;
}

.p-datepicker:has(.p-inputtext-sm) .p-datepicker-dropdown {
    width: ${dt("datepicker.dropdown.sm.width")};
}

.p-datepicker:has(.p-inputtext-sm) .p-datepicker-dropdown .p-icon,
.p-datepicker:has(.p-inputtext-sm) .p-datepicker-input-icon {
    font-size: ${dt("form.field.sm.font.size")};
    width: ${dt("form.field.sm.font.size")};
    height: ${dt("form.field.sm.font.size")};
}

.p-datepicker:has(.p-inputtext-lg) .p-datepicker-dropdown {
    width: ${dt("datepicker.dropdown.lg.width")};
}

.p-datepicker:has(.p-inputtext-lg) .p-datepicker-dropdown .p-icon,
.p-datepicker:has(.p-inputtext-lg) .p-datepicker-input-icon {
    font-size: ${dt("form.field.lg.font.size")};
    width: ${dt("form.field.lg.font.size")};
    height: ${dt("form.field.lg.font.size")};
}

/* For PrimeNG */

p-calendar.ng-invalid.ng-dirty .p-datepicker.p-inputwrapper .p-inputtext{
    border-color: ${dt("inputtext.invalid.border.color")};
}

p-datePicker.ng-invalid.ng-dirty .p-datepicker.p-inputwrapper .p-inputtext,
p-date-picker.ng-invalid.ng-dirty .p-datepicker.p-inputwrapper .p-inputtext,
p-datepicker.ng-invalid.ng-dirty .p-datepicker.p-inputwrapper .p-inputtext {
    border-color: ${dt("inputtext.invalid.border.color")};
}

`;
    inlineStyles = {
      root: ({
        props
      }) => ({
        position: props.appendTo === "self" ? "relative" : void 0
      })
    };
    classes6 = {
      root: ({
        instance
      }) => ({
        "p-datepicker p-component p-inputwrapper": true,
        "p-datepicker-fluid": instance.hasFluid,
        "p-inputwrapper-filled": instance.filled,
        "p-variant-filled": instance.variant === "filled" || instance.config.inputVariant() === "filled" || instance.config.inputStyle() === "filled",
        "p-inputwrapper-focus": instance.focus,
        "p-focus": instance.focus || instance.overlayVisible
      }),
      pcInput: "p-datepicker-input",
      dropdown: "p-datepicker-dropdown",
      inputIconContainer: "p-datepicker-input-icon-container",
      inputIcon: "p-datepicker-input-icon",
      panel: ({
        instance
      }) => ({
        "p-datepicker-panel p-component": true,
        "p-datepicker-panel-inline": instance.inline,
        "p-disabled": instance.disabled,
        "p-datepicker-timeonly": instance.timeOnly
      }),
      calendarContainer: "p-datepicker-calendar-container",
      calendar: "p-datepicker-calendar",
      header: "p-datepicker-header",
      pcPrevButton: "p-datepicker-prev-button",
      title: "p-datepicker-title",
      selectMonth: "p-datepicker-select-month",
      selectYear: "p-datepicker-select-year",
      decade: "p-datepicker-decade",
      pcNextButton: "p-datepicker-next-button",
      dayView: "p-datepicker-day-view",
      weekHeader: "p-datepicker-weekheader p-disabled",
      weekNumber: "p-datepicker-weeknumber",
      weekLabelContainer: "p-datepicker-weeklabel-container p-disabled",
      weekDayCell: "p-datepicker-weekday-cell",
      weekDay: "p-datepicker-weekday",
      dayCell: ({
        date
      }) => ["p-datepicker-day-cell", {
        "p-datepicker-other-month": date.otherMonth,
        "p-datepicker-today": date.today
      }],
      day: ({
        instance,
        date
      }) => {
        let selectedDayClass = "";
        if (instance.isRangeSelection() && instance.isSelected(date) && date.selectable) {
          const startDate = instance.value[0];
          const endDate = instance.value[1];
          const isStart = startDate && date.year === startDate.getFullYear() && date.month === startDate.getMonth() && date.day === startDate.getDate();
          const isEnd = endDate && date.year === endDate.getFullYear() && date.month === endDate.getMonth() && date.day === endDate.getDate();
          selectedDayClass = isStart || isEnd ? "p-datepicker-day-selected" : "p-datepicker-day-selected-range";
        }
        return {
          "p-datepicker-day": true,
          "p-datepicker-day-selected": !instance.isRangeSelection() && instance.isSelected(date) && date.selectable,
          "p-disabled": instance.disabled || !date.selectable,
          [selectedDayClass]: true
        };
      },
      monthView: "p-datepicker-month-view",
      month: ({
        instance,
        props,
        month,
        index
      }) => ["p-datepicker-month", {
        "p-datepicker-month-selected": instance.isMonthSelected(index),
        "p-disabled": props.disabled || !month.selectable
      }],
      yearView: "p-datepicker-year-view",
      year: ({
        instance,
        props,
        year
      }) => ["p-datepicker-year", {
        "p-datepicker-year-selected": instance.isYearSelected(year.value),
        "p-disabled": props.disabled || !year.selectable
      }],
      timePicker: "p-datepicker-time-picker",
      hourPicker: "p-datepicker-hour-picker",
      pcIncrementButton: "p-datepicker-increment-button",
      pcDecrementButton: "p-datepicker-decrement-button",
      separator: "p-datepicker-separator",
      minutePicker: "p-datepicker-minute-picker",
      secondPicker: "p-datepicker-second-picker",
      ampmPicker: "p-datepicker-ampm-picker",
      buttonbar: "p-datepicker-buttonbar",
      pcTodayButton: "p-datepicker-today-button",
      pcClearButton: "p-datepicker-clear-button"
    };
    DatePickerStyle = class _DatePickerStyle extends BaseStyle {
      name = "datepicker";
      theme = theme6;
      classes = classes6;
      inlineStyles = inlineStyles;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DatePickerStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DatePickerStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: DatePickerStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(DatePickerClasses2) {
      DatePickerClasses2["root"] = "p-datepicker";
      DatePickerClasses2["pcInput"] = "p-datepicker-input";
      DatePickerClasses2["dropdown"] = "p-datepicker-dropdown";
      DatePickerClasses2["inputIconContainer"] = "p-datepicker-input-icon-container";
      DatePickerClasses2["inputIcon"] = "p-datepicker-input-icon";
      DatePickerClasses2["panel"] = "p-datepicker-panel";
      DatePickerClasses2["calendarContainer"] = "p-datepicker-calendar-container";
      DatePickerClasses2["calendar"] = "p-datepicker-calendar";
      DatePickerClasses2["header"] = "p-datepicker-header";
      DatePickerClasses2["pcPrevButton"] = "p-datepicker-prev-button";
      DatePickerClasses2["title"] = "p-datepicker-title";
      DatePickerClasses2["selectMonth"] = "p-datepicker-select-month";
      DatePickerClasses2["selectYear"] = "p-datepicker-select-year";
      DatePickerClasses2["decade"] = "p-datepicker-decade";
      DatePickerClasses2["pcNextButton"] = "p-datepicker-next-button";
      DatePickerClasses2["dayView"] = "p-datepicker-day-view";
      DatePickerClasses2["weekHeader"] = "p-datepicker-weekheader";
      DatePickerClasses2["weekNumber"] = "p-datepicker-weeknumber";
      DatePickerClasses2["weekLabelContainer"] = "p-datepicker-weeklabel-container";
      DatePickerClasses2["weekDayCell"] = "p-datepicker-weekday-cell";
      DatePickerClasses2["weekDay"] = "p-datepicker-weekday";
      DatePickerClasses2["dayCell"] = "p-datepicker-day-cell";
      DatePickerClasses2["day"] = "p-datepicker-day";
      DatePickerClasses2["monthView"] = "p-datepicker-month-view";
      DatePickerClasses2["month"] = "p-datepicker-month";
      DatePickerClasses2["yearView"] = "p-datepicker-year-view";
      DatePickerClasses2["year"] = "p-datepicker-year";
      DatePickerClasses2["timePicker"] = "p-datepicker-time-picker";
      DatePickerClasses2["hourPicker"] = "p-datepicker-hour-picker";
      DatePickerClasses2["pcIncrementButton"] = "p-datepicker-increment-button";
      DatePickerClasses2["pcDecrementButton"] = "p-datepicker-decrement-button";
      DatePickerClasses2["separator"] = "p-datepicker-separator";
      DatePickerClasses2["minutePicker"] = "p-datepicker-minute-picker";
      DatePickerClasses2["secondPicker"] = "p-datepicker-second-picker";
      DatePickerClasses2["ampmPicker"] = "p-datepicker-ampm-picker";
      DatePickerClasses2["buttonbar"] = "p-datepicker-buttonbar";
      DatePickerClasses2["pcTodayButton"] = "p-datepicker-today-button";
      DatePickerClasses2["pcClearButton"] = "p-datepicker-clear-button";
    })(DatePickerClasses || (DatePickerClasses = {}));
    DATEPICKER_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => DatePicker),
      multi: true
    };
    DatePicker = class _DatePicker extends BaseComponent {
      zone;
      overlayService;
      iconDisplay = "button";
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * Inline style of the input field.
       * @group Props
       */
      inputStyle;
      /**
       * Identifier of the focus input to match a label defined for the component.
       * @group Props
       */
      inputId;
      /**
       * Name of the input element.
       * @group Props
       */
      name;
      /**
       * Style class of the input field.
       * @group Props
       */
      inputStyleClass;
      /**
       * Placeholder text for the input.
       * @group Props
       */
      placeholder;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Defines a string that labels the input for accessibility.
       * @group Props
       */
      ariaLabel;
      /**
       * Defines a string that labels the icon button for accessibility.
       * @group Props
       */
      iconAriaLabel;
      /**
       * When specified, disables the component.
       * @group Props
       */
      disabled;
      /**
       * Format of the date which can also be defined at locale settings.
       * @group Props
       */
      get dateFormat() {
        return this._dateFormat;
      }
      set dateFormat(value) {
        this._dateFormat = value;
        if (this.initialized) {
          this.updateInputfield();
        }
      }
      /**
       * Separator for multiple selection mode.
       * @group Props
       */
      multipleSeparator = ",";
      /**
       * Separator for joining start and end dates on range selection mode.
       * @group Props
       */
      rangeSeparator = "-";
      /**
       * When enabled, displays the datepicker as inline. Default is false for popup mode.
       * @group Props
       */
      inline = false;
      /**
       * Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option.
       * @group Props
       */
      showOtherMonths = true;
      /**
       * Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true.
       * @group Props
       */
      selectOtherMonths;
      /**
       * When enabled, displays a button with icon next to input.
       * @group Props
       */
      showIcon;
      /**
       * Whether the component should span the full width of its parent.
       * @group Props
       */
      fluid;
      /**
       * Icon of the datepicker button.
       * @group Props
       */
      icon;
      /**
       * Target element to attach the overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having#mydiv as variable name).
       * @group Props
       */
      appendTo;
      /**
       * When specified, prevents entering the date manually with keyboard.
       * @group Props
       */
      readonlyInput;
      /**
       * The cutoff year for determining the century for a date.
       * @group Props
       */
      shortYearCutoff = "+10";
      /**
       * Whether the month should be rendered as a dropdown instead of text.
       * @group Props
       * @deprecated Navigator is always on.
       */
      monthNavigator;
      /**
       * Whether the year should be rendered as a dropdown instead of text.
       * @group Props
       * @deprecated  Navigator is always on.
       */
      yearNavigator;
      /**
       * Specifies 12 or 24 hour format.
       * @group Props
       */
      get hourFormat() {
        return this._hourFormat;
      }
      set hourFormat(value) {
        this._hourFormat = value;
        if (this.initialized) {
          this.updateInputfield();
        }
      }
      /**
       * Whether to display timepicker only.
       * @group Props
       */
      timeOnly;
      /**
       * Hours to change per step.
       * @group Props
       */
      stepHour = 1;
      /**
       * Minutes to change per step.
       * @group Props
       */
      stepMinute = 1;
      /**
       * Seconds to change per step.
       * @group Props
       */
      stepSecond = 1;
      /**
       * Whether to show the seconds in time picker.
       * @group Props
       */
      showSeconds = false;
      /**
       * When present, it specifies that an input field must be filled out before submitting the form.
       * @group Props
       */
      required;
      /**
       * When disabled, datepicker will not be visible with input focus.
       * @group Props
       */
      showOnFocus = true;
      /**
       * When enabled, datepicker will show week numbers.
       * @group Props
       */
      showWeek = false;
      /**
       * When enabled, datepicker will start week numbers from first day of the year.
       * @group Props
       */
      startWeekFromFirstDayOfYear = false;
      /**
       * When enabled, a clear icon is displayed to clear the value.
       * @group Props
       */
      showClear = false;
      /**
       * Type of the value to write back to ngModel, default is date and alternative is string.
       * @group Props
       */
      dataType = "date";
      /**
       * Defines the quantity of the selection, valid values are "single", "multiple" and "range".
       * @group Props
       */
      selectionMode = "single";
      /**
       * Maximum number of selectable dates in multiple mode.
       * @group Props
       */
      maxDateCount;
      /**
       * Whether to display today and clear buttons at the footer
       * @group Props
       */
      showButtonBar;
      /**
       * Style class of the today button.
       * @group Props
       */
      todayButtonStyleClass;
      /**
       * Style class of the clear button.
       * @group Props
       */
      clearButtonStyleClass;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Whether to automatically manage layering.
       * @group Props
       */
      autoZIndex = true;
      /**
       * Base zIndex value to use in layering.
       * @group Props
       */
      baseZIndex = 0;
      /**
       * Style class of the datetimepicker container element.
       * @group Props
       */
      panelStyleClass;
      /**
       * Inline style of the datetimepicker container element.
       * @group Props
       */
      panelStyle;
      /**
       * Keep invalid value when input blur.
       * @group Props
       */
      keepInvalid = false;
      /**
       * Whether to hide the overlay on date selection.
       * @group Props
       */
      hideOnDateTimeSelect = true;
      /**
       * When enabled, datepicker overlay is displayed as optimized for touch devices.
       * @group Props
       */
      touchUI;
      /**
       * Separator of time selector.
       * @group Props
       */
      timeSeparator = ":";
      /**
       * When enabled, can only focus on elements inside the datepicker.
       * @group Props
       */
      focusTrap = true;
      /**
       * Transition options of the show animation.
       * @group Props
       */
      showTransitionOptions = ".12s cubic-bezier(0, 0, 0.2, 1)";
      /**
       * Transition options of the hide animation.
       * @group Props
       */
      hideTransitionOptions = ".1s linear";
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * The minimum selectable date.
       * @group Props
       */
      get minDate() {
        return this._minDate;
      }
      set minDate(date) {
        this._minDate = date;
        if (this.currentMonth != void 0 && this.currentMonth != null && this.currentYear) {
          this.createMonths(this.currentMonth, this.currentYear);
        }
      }
      /**
       * The maximum selectable date.
       * @group Props
       */
      get maxDate() {
        return this._maxDate;
      }
      set maxDate(date) {
        this._maxDate = date;
        if (this.currentMonth != void 0 && this.currentMonth != null && this.currentYear) {
          this.createMonths(this.currentMonth, this.currentYear);
        }
      }
      /**
       * Array with dates that should be disabled (not selectable).
       * @group Props
       */
      get disabledDates() {
        return this._disabledDates;
      }
      set disabledDates(disabledDates) {
        this._disabledDates = disabledDates;
        if (this.currentMonth != void 0 && this.currentMonth != null && this.currentYear) {
          this.createMonths(this.currentMonth, this.currentYear);
        }
      }
      /**
       * Array with weekday numbers that should be disabled (not selectable).
       * @group Props
       */
      get disabledDays() {
        return this._disabledDays;
      }
      set disabledDays(disabledDays) {
        this._disabledDays = disabledDays;
        if (this.currentMonth != void 0 && this.currentMonth != null && this.currentYear) {
          this.createMonths(this.currentMonth, this.currentYear);
        }
      }
      /**
       * The range of years displayed in the year drop-down in (nnnn:nnnn) format such as (2000:2020).
       * @group Props
       * @deprecated Years are based on decades by default.
       */
      get yearRange() {
        return this._yearRange;
      }
      set yearRange(yearRange) {
        this._yearRange = yearRange;
        if (yearRange) {
          const years = yearRange.split(":");
          const yearStart = parseInt(years[0]);
          const yearEnd = parseInt(years[1]);
          this.populateYearOptions(yearStart, yearEnd);
        }
      }
      /**
       * Whether to display timepicker.
       * @group Props
       */
      get showTime() {
        return this._showTime;
      }
      set showTime(showTime) {
        this._showTime = showTime;
        if (this.currentHour === void 0) {
          this.initTime(this.value || /* @__PURE__ */ new Date());
        }
        this.updateInputfield();
      }
      /**
       * An array of options for responsive design.
       * @group Props
       */
      get responsiveOptions() {
        return this._responsiveOptions;
      }
      set responsiveOptions(responsiveOptions) {
        this._responsiveOptions = responsiveOptions;
        this.destroyResponsiveStyleElement();
        this.createResponsiveStyle();
      }
      /**
       * Number of months to display.
       * @group Props
       */
      get numberOfMonths() {
        return this._numberOfMonths;
      }
      set numberOfMonths(numberOfMonths) {
        this._numberOfMonths = numberOfMonths;
        this.destroyResponsiveStyleElement();
        this.createResponsiveStyle();
      }
      /**
       * Defines the first of the week for various date calculations.
       * @group Props
       */
      get firstDayOfWeek() {
        return this._firstDayOfWeek;
      }
      set firstDayOfWeek(firstDayOfWeek) {
        this._firstDayOfWeek = firstDayOfWeek;
        this.createWeekDays();
      }
      /**
       * Option to set datepicker locale.
       * @group Props
       * @deprecated Locale property has no effect, use new i18n API instead.
       */
      set locale(newLocale) {
        console.log("Locale property has no effect, use new i18n API instead.");
      }
      /**
       * Type of view to display, valid values are "date" for datepicker and "month" for month picker.
       * @group Props
       */
      get view() {
        return this._view;
      }
      set view(view) {
        this._view = view;
        this.currentView = this._view;
      }
      /**
       * Set the date to highlight on first opening if the field is blank.
       * @group Props
       */
      get defaultDate() {
        return this._defaultDate;
      }
      set defaultDate(defaultDate) {
        this._defaultDate = defaultDate;
        if (this.initialized) {
          const date = defaultDate || /* @__PURE__ */ new Date();
          this.currentMonth = date.getMonth();
          this.currentYear = date.getFullYear();
          this.initTime(date);
          this.createMonths(this.currentMonth, this.currentYear);
        }
      }
      /**
       * Callback to invoke on focus of input field.
       * @param {Event} event - browser event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to invoke on blur of input field.
       * @param {Event} event - browser event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      /**
       * Callback to invoke when date panel closed.
       * @param {Event} event - Mouse event
       * @group Emits
       */
      onClose = new EventEmitter();
      /**
       * Callback to invoke on date select.
       * @param {Date} date - date value.
       * @group Emits
       */
      onSelect = new EventEmitter();
      /**
       * Callback to invoke when input field cleared.
       * @group Emits
       */
      onClear = new EventEmitter();
      /**
       * Callback to invoke when input field is being typed.
       * @param {Event} event - browser event
       * @group Emits
       */
      onInput = new EventEmitter();
      /**
       * Callback to invoke when today button is clicked.
       * @param {Date} date - today as a date instance.
       * @group Emits
       */
      onTodayClick = new EventEmitter();
      /**
       * Callback to invoke when clear button is clicked.
       * @param {Event} event - browser event.
       * @group Emits
       */
      onClearClick = new EventEmitter();
      /**
       * Callback to invoke when a month is changed using the navigators.
       * @param {DatePickerMonthChangeEvent} event - custom month change event.
       * @group Emits
       */
      onMonthChange = new EventEmitter();
      /**
       * Callback to invoke when a year is changed using the navigators.
       * @param {DatePickerYearChangeEvent} event - custom year change event.
       * @group Emits
       */
      onYearChange = new EventEmitter();
      /**
       * Callback to invoke when clicked outside of the date panel.
       * @group Emits
       */
      onClickOutside = new EventEmitter();
      /**
       * Callback to invoke when datepicker panel is shown.
       * @group Emits
       */
      onShow = new EventEmitter();
      containerViewChild;
      inputfieldViewChild;
      set content(content) {
        this.contentViewChild = content;
        if (this.contentViewChild) {
          if (this.isMonthNavigate) {
            Promise.resolve(null).then(() => this.updateFocus());
            this.isMonthNavigate = false;
          } else {
            if (!this.focus && !this.inline) {
              this.initFocusableCell();
            }
          }
        }
      }
      _componentStyle = inject(DatePickerStyle);
      contentViewChild;
      value;
      dates;
      months;
      weekDays;
      currentMonth;
      currentYear;
      currentHour;
      currentMinute;
      currentSecond;
      pm;
      mask;
      maskClickListener;
      overlay;
      responsiveStyleElement;
      overlayVisible;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      calendarElement;
      timePickerTimer;
      documentClickListener;
      animationEndListener;
      ticksTo1970;
      yearOptions;
      focus;
      isKeydown;
      filled;
      inputFieldValue = null;
      _minDate;
      _maxDate;
      _dateFormat;
      _hourFormat = "24";
      _showTime;
      _yearRange;
      preventDocumentListener;
      dayClass(date) {
        return this._componentStyle.classes.day({
          instance: this,
          date
        });
      }
      /**
       * Custom template for date cells.
       * @group Templates
       */
      dateTemplate;
      /**
       * Custom template for header section.
       * @group Templates
       */
      headerTemplate;
      /**
       * Custom template for footer section.
       * @group Templates
       */
      footerTemplate;
      /**
       * Custom template for disabled date cells.
       * @group Templates
       */
      disabledDateTemplate;
      /**
       * Custom template for decade view.
       * @group Templates
       */
      decadeTemplate;
      /**
       * Custom template for previous month icon.
       * @group Templates
       */
      previousIconTemplate;
      /**
       * Custom template for next month icon.
       * @group Templates
       */
      nextIconTemplate;
      /**
       * Custom template for trigger icon.
       * @group Templates
       */
      triggerIconTemplate;
      /**
       * Custom template for clear icon.
       * @group Templates
       */
      clearIconTemplate;
      /**
       * Custom template for decrement icon.
       * @group Templates
       */
      decrementIconTemplate;
      /**
       * Custom template for increment icon.
       * @group Templates
       */
      incrementIconTemplate;
      /**
       * Custom template for input icon.
       * @group Templates
       */
      inputIconTemplate;
      _dateTemplate;
      _headerTemplate;
      _footerTemplate;
      _disabledDateTemplate;
      _decadeTemplate;
      _previousIconTemplate;
      _nextIconTemplate;
      _triggerIconTemplate;
      _clearIconTemplate;
      _decrementIconTemplate;
      _incrementIconTemplate;
      _inputIconTemplate;
      _disabledDates;
      _disabledDays;
      selectElement;
      todayElement;
      focusElement;
      scrollHandler;
      documentResizeListener;
      navigationState = null;
      isMonthNavigate;
      initialized;
      translationSubscription;
      _locale;
      _responsiveOptions;
      currentView;
      attributeSelector;
      panelId;
      _numberOfMonths = 1;
      _firstDayOfWeek;
      _view = "date";
      preventFocus;
      _defaultDate;
      _focusKey = null;
      window;
      get locale() {
        return this._locale;
      }
      get iconButtonAriaLabel() {
        return this.iconAriaLabel ? this.iconAriaLabel : this.getTranslation("chooseDate");
      }
      get prevIconAriaLabel() {
        return this.currentView === "year" ? this.getTranslation("prevDecade") : this.currentView === "month" ? this.getTranslation("prevYear") : this.getTranslation("prevMonth");
      }
      get nextIconAriaLabel() {
        return this.currentView === "year" ? this.getTranslation("nextDecade") : this.currentView === "month" ? this.getTranslation("nextYear") : this.getTranslation("nextMonth");
      }
      get rootClass() {
        return this._componentStyle.classes.root({
          instance: this
        });
      }
      get panelClass() {
        return this._componentStyle.classes.panel({
          instance: this
        });
      }
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return this.fluid || !!fluidComponent;
      }
      constructor(zone, overlayService) {
        super();
        this.zone = zone;
        this.overlayService = overlayService;
        this.window = this.document.defaultView;
      }
      ngOnInit() {
        super.ngOnInit();
        this.attributeSelector = uuid("pn_id_");
        this.panelId = this.attributeSelector + "_panel";
        const date = this.defaultDate || /* @__PURE__ */ new Date();
        this.createResponsiveStyle();
        this.currentMonth = date.getMonth();
        this.currentYear = date.getFullYear();
        this.yearOptions = [];
        this.currentView = this.view;
        if (this.view === "date") {
          this.createWeekDays();
          this.initTime(date);
          this.createMonths(this.currentMonth, this.currentYear);
          this.ticksTo1970 = ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 1e7;
        }
        this.translationSubscription = this.config.translationObserver.subscribe(() => {
          this.createWeekDays();
          this.cd.markForCheck();
        });
        this.initialized = true;
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.inline) {
          this.contentViewChild && this.contentViewChild.nativeElement.setAttribute(this.attributeSelector, "");
          if (!this.disabled && !this.inline) {
            this.initFocusableCell();
            if (this.numberOfMonths === 1) {
              if (this.contentViewChild && this.contentViewChild.nativeElement) {
                this.contentViewChild.nativeElement.style.width = getOuterWidth(this.containerViewChild?.nativeElement) + "px";
              }
            }
          }
        }
      }
      templates;
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "date":
              this._dateTemplate = item.template;
              break;
            case "decade":
              this._decadeTemplate = item.template;
              break;
            case "disabledDate":
              this._disabledDateTemplate = item.template;
              break;
            case "header":
              this._headerTemplate = item.template;
              break;
            case "inputicon":
              this._inputIconTemplate = item.template;
              break;
            case "previousicon":
              this._previousIconTemplate = item.template;
              break;
            case "nexticon":
              this._nextIconTemplate = item.template;
              break;
            case "triggericon":
              this._triggerIconTemplate = item.template;
              break;
            case "clearicon":
              this._clearIconTemplate = item.template;
              break;
            case "decrementicon":
              this._decrementIconTemplate = item.template;
              break;
            case "incrementicon":
              this._incrementIconTemplate = item.template;
              break;
            case "footer":
              this._footerTemplate = item.template;
              break;
            default:
              this._dateTemplate = item.template;
              break;
          }
        });
      }
      getTranslation(option) {
        return this.config.getTranslation(option);
      }
      populateYearOptions(start, end) {
        this.yearOptions = [];
        for (let i = start; i <= end; i++) {
          this.yearOptions.push(i);
        }
      }
      createWeekDays() {
        this.weekDays = [];
        let dayIndex = this.getFirstDateOfWeek();
        let dayLabels = this.getTranslation(TranslationKeys.DAY_NAMES_MIN);
        for (let i = 0; i < 7; i++) {
          this.weekDays.push(dayLabels[dayIndex]);
          dayIndex = dayIndex == 6 ? 0 : ++dayIndex;
        }
      }
      monthPickerValues() {
        let monthPickerValues = [];
        for (let i = 0; i <= 11; i++) {
          monthPickerValues.push(this.config.getTranslation("monthNamesShort")[i]);
        }
        return monthPickerValues;
      }
      yearPickerValues() {
        let yearPickerValues = [];
        let base = this.currentYear - this.currentYear % 10;
        for (let i = 0; i < 10; i++) {
          yearPickerValues.push(base + i);
        }
        return yearPickerValues;
      }
      createMonths(month, year) {
        this.months = this.months = [];
        for (let i = 0; i < this.numberOfMonths; i++) {
          let m = month + i;
          let y = year;
          if (m > 11) {
            m = m % 12;
            y = year + Math.floor((month + i) / 12);
          }
          this.months.push(this.createMonth(m, y));
        }
      }
      getWeekNumber(date) {
        let checkDate = new Date(date.getTime());
        if (this.startWeekFromFirstDayOfYear) {
          let firstDayOfWeek = +this.getFirstDateOfWeek();
          checkDate.setDate(checkDate.getDate() + 6 + firstDayOfWeek - checkDate.getDay());
        } else {
          checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
        }
        let time = checkDate.getTime();
        checkDate.setMonth(0);
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate.getTime()) / 864e5) / 7) + 1;
      }
      createMonth(month, year) {
        let dates = [];
        let firstDay = this.getFirstDayOfMonthIndex(month, year);
        let daysLength = this.getDaysCountInMonth(month, year);
        let prevMonthDaysLength = this.getDaysCountInPrevMonth(month, year);
        let dayNo = 1;
        let today = /* @__PURE__ */ new Date();
        let weekNumbers = [];
        let monthRows = Math.ceil((daysLength + firstDay) / 7);
        for (let i = 0; i < monthRows; i++) {
          let week = [];
          if (i == 0) {
            for (let j = prevMonthDaysLength - firstDay + 1; j <= prevMonthDaysLength; j++) {
              let prev = this.getPreviousMonthAndYear(month, year);
              week.push({
                day: j,
                month: prev.month,
                year: prev.year,
                otherMonth: true,
                today: this.isToday(today, j, prev.month, prev.year),
                selectable: this.isSelectable(j, prev.month, prev.year, true)
              });
            }
            let remainingDaysLength = 7 - week.length;
            for (let j = 0; j < remainingDaysLength; j++) {
              week.push({
                day: dayNo,
                month,
                year,
                today: this.isToday(today, dayNo, month, year),
                selectable: this.isSelectable(dayNo, month, year, false)
              });
              dayNo++;
            }
          } else {
            for (let j = 0; j < 7; j++) {
              if (dayNo > daysLength) {
                let next = this.getNextMonthAndYear(month, year);
                week.push({
                  day: dayNo - daysLength,
                  month: next.month,
                  year: next.year,
                  otherMonth: true,
                  today: this.isToday(today, dayNo - daysLength, next.month, next.year),
                  selectable: this.isSelectable(dayNo - daysLength, next.month, next.year, true)
                });
              } else {
                week.push({
                  day: dayNo,
                  month,
                  year,
                  today: this.isToday(today, dayNo, month, year),
                  selectable: this.isSelectable(dayNo, month, year, false)
                });
              }
              dayNo++;
            }
          }
          if (this.showWeek) {
            weekNumbers.push(this.getWeekNumber(new Date(week[0].year, week[0].month, week[0].day)));
          }
          dates.push(week);
        }
        return {
          month,
          year,
          dates,
          weekNumbers
        };
      }
      initTime(date) {
        this.pm = date.getHours() > 11;
        if (this.showTime) {
          this.currentMinute = date.getMinutes();
          this.currentSecond = date.getSeconds();
          this.setCurrentHourPM(date.getHours());
        } else if (this.timeOnly) {
          this.currentMinute = 0;
          this.currentHour = 0;
          this.currentSecond = 0;
        }
      }
      navBackward(event2) {
        if (this.disabled) {
          event2.preventDefault();
          return;
        }
        this.isMonthNavigate = true;
        if (this.currentView === "month") {
          this.decrementYear();
          setTimeout(() => {
            this.updateFocus();
          }, 1);
        } else if (this.currentView === "year") {
          this.decrementDecade();
          setTimeout(() => {
            this.updateFocus();
          }, 1);
        } else {
          if (this.currentMonth === 0) {
            this.currentMonth = 11;
            this.decrementYear();
          } else {
            this.currentMonth--;
          }
          this.onMonthChange.emit({
            month: this.currentMonth + 1,
            year: this.currentYear
          });
          this.createMonths(this.currentMonth, this.currentYear);
        }
      }
      navForward(event2) {
        if (this.disabled) {
          event2.preventDefault();
          return;
        }
        this.isMonthNavigate = true;
        if (this.currentView === "month") {
          this.incrementYear();
          setTimeout(() => {
            this.updateFocus();
          }, 1);
        } else if (this.currentView === "year") {
          this.incrementDecade();
          setTimeout(() => {
            this.updateFocus();
          }, 1);
        } else {
          if (this.currentMonth === 11) {
            this.currentMonth = 0;
            this.incrementYear();
          } else {
            this.currentMonth++;
          }
          this.onMonthChange.emit({
            month: this.currentMonth + 1,
            year: this.currentYear
          });
          this.createMonths(this.currentMonth, this.currentYear);
        }
      }
      decrementYear() {
        this.currentYear--;
        let _yearOptions = this.yearOptions;
        if (this.yearNavigator && this.currentYear < _yearOptions[0]) {
          let difference = _yearOptions[_yearOptions.length - 1] - _yearOptions[0];
          this.populateYearOptions(_yearOptions[0] - difference, _yearOptions[_yearOptions.length - 1] - difference);
        }
      }
      decrementDecade() {
        this.currentYear = this.currentYear - 10;
      }
      incrementDecade() {
        this.currentYear = this.currentYear + 10;
      }
      incrementYear() {
        this.currentYear++;
        let _yearOptions = this.yearOptions;
        if (this.yearNavigator && this.currentYear > _yearOptions[_yearOptions.length - 1]) {
          let difference = _yearOptions[_yearOptions.length - 1] - _yearOptions[0];
          this.populateYearOptions(_yearOptions[0] + difference, _yearOptions[_yearOptions.length - 1] + difference);
        }
      }
      switchToMonthView(event2) {
        this.setCurrentView("month");
        event2.preventDefault();
      }
      switchToYearView(event2) {
        this.setCurrentView("year");
        event2.preventDefault();
      }
      onDateSelect(event2, dateMeta) {
        if (this.disabled || !dateMeta.selectable) {
          event2.preventDefault();
          return;
        }
        if (this.isMultipleSelection() && this.isSelected(dateMeta)) {
          this.value = this.value.filter((date, i) => {
            return !this.isDateEquals(date, dateMeta);
          });
          if (this.value.length === 0) {
            this.value = null;
          }
          this.updateModel(this.value);
        } else {
          if (this.shouldSelectDate(dateMeta)) {
            this.selectDate(dateMeta);
          }
        }
        if (this.hideOnDateTimeSelect && (this.isSingleSelection() || this.isRangeSelection() && this.value[1])) {
          setTimeout(() => {
            event2.preventDefault();
            this.hideOverlay();
            if (this.mask) {
              this.disableModality();
            }
            this.cd.markForCheck();
          }, 150);
        }
        this.updateInputfield();
        event2.preventDefault();
      }
      shouldSelectDate(dateMeta) {
        if (this.isMultipleSelection()) return this.maxDateCount != null ? this.maxDateCount > (this.value ? this.value.length : 0) : true;
        else return true;
      }
      onMonthSelect(event2, index) {
        if (this.view === "month") {
          this.onDateSelect(event2, {
            year: this.currentYear,
            month: index,
            day: 1,
            selectable: true
          });
        } else {
          this.currentMonth = index;
          this.createMonths(this.currentMonth, this.currentYear);
          this.setCurrentView("date");
          this.onMonthChange.emit({
            month: this.currentMonth + 1,
            year: this.currentYear
          });
        }
      }
      onYearSelect(event2, year) {
        if (this.view === "year") {
          this.onDateSelect(event2, {
            year,
            month: 0,
            day: 1,
            selectable: true
          });
        } else {
          this.currentYear = year;
          this.setCurrentView("month");
          this.onYearChange.emit({
            month: this.currentMonth + 1,
            year: this.currentYear
          });
        }
      }
      updateInputfield() {
        let formattedValue = "";
        if (this.value) {
          if (this.isSingleSelection()) {
            formattedValue = this.formatDateTime(this.value);
          } else if (this.isMultipleSelection()) {
            for (let i = 0; i < this.value.length; i++) {
              let dateAsString = this.formatDateTime(this.value[i]);
              formattedValue += dateAsString;
              if (i !== this.value.length - 1) {
                formattedValue += this.multipleSeparator + " ";
              }
            }
          } else if (this.isRangeSelection()) {
            if (this.value && this.value.length) {
              let startDate = this.value[0];
              let endDate = this.value[1];
              formattedValue = this.formatDateTime(startDate);
              if (endDate) {
                formattedValue += " " + this.rangeSeparator + " " + this.formatDateTime(endDate);
              }
            }
          }
        }
        this.inputFieldValue = formattedValue;
        this.updateFilledState();
        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {
          this.inputfieldViewChild.nativeElement.value = this.inputFieldValue;
        }
      }
      formatDateTime(date) {
        let formattedValue = this.keepInvalid ? date : null;
        const isDateValid = this.isValidDateForTimeConstraints(date);
        if (this.isValidDate(date)) {
          if (this.timeOnly) {
            formattedValue = this.formatTime(date);
          } else {
            formattedValue = this.formatDate(date, this.getDateFormat());
            if (this.showTime) {
              formattedValue += " " + this.formatTime(date);
            }
          }
        } else if (this.dataType === "string") {
          formattedValue = date;
        }
        formattedValue = isDateValid ? formattedValue : "";
        return formattedValue;
      }
      formatDateMetaToDate(dateMeta) {
        return new Date(dateMeta.year, dateMeta.month, dateMeta.day);
      }
      formatDateKey(date) {
        return `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;
      }
      setCurrentHourPM(hours) {
        if (this.hourFormat == "12") {
          this.pm = hours > 11;
          if (hours >= 12) {
            this.currentHour = hours == 12 ? 12 : hours - 12;
          } else {
            this.currentHour = hours == 0 ? 12 : hours;
          }
        } else {
          this.currentHour = hours;
        }
      }
      setCurrentView(currentView) {
        this.currentView = currentView;
        this.cd.detectChanges();
        this.alignOverlay();
      }
      selectDate(dateMeta) {
        let date = this.formatDateMetaToDate(dateMeta);
        if (this.showTime) {
          if (this.hourFormat == "12") {
            if (this.currentHour === 12) date.setHours(this.pm ? 12 : 0);
            else date.setHours(this.pm ? this.currentHour + 12 : this.currentHour);
          } else {
            date.setHours(this.currentHour);
          }
          date.setMinutes(this.currentMinute);
          date.setSeconds(this.currentSecond);
        }
        if (this.minDate && this.minDate > date) {
          date = this.minDate;
          this.setCurrentHourPM(date.getHours());
          this.currentMinute = date.getMinutes();
          this.currentSecond = date.getSeconds();
        }
        if (this.maxDate && this.maxDate < date) {
          date = this.maxDate;
          this.setCurrentHourPM(date.getHours());
          this.currentMinute = date.getMinutes();
          this.currentSecond = date.getSeconds();
        }
        if (this.isSingleSelection()) {
          this.updateModel(date);
        } else if (this.isMultipleSelection()) {
          this.updateModel(this.value ? [...this.value, date] : [date]);
        } else if (this.isRangeSelection()) {
          if (this.value && this.value.length) {
            let startDate = this.value[0];
            let endDate = this.value[1];
            if (!endDate && date.getTime() >= startDate.getTime()) {
              endDate = date;
            } else {
              startDate = date;
              endDate = null;
            }
            this.updateModel([startDate, endDate]);
          } else {
            this.updateModel([date, null]);
          }
        }
        this.onSelect.emit(date);
      }
      updateModel(value) {
        this.value = value;
        if (this.dataType == "date") {
          this.onModelChange(this.value);
        } else if (this.dataType == "string") {
          if (this.isSingleSelection()) {
            this.onModelChange(this.formatDateTime(this.value));
          } else {
            let stringArrValue = null;
            if (Array.isArray(this.value)) {
              stringArrValue = this.value.map((date) => this.formatDateTime(date));
            }
            this.onModelChange(stringArrValue);
          }
        }
      }
      getFirstDayOfMonthIndex(month, year) {
        let day = /* @__PURE__ */ new Date();
        day.setDate(1);
        day.setMonth(month);
        day.setFullYear(year);
        let dayIndex = day.getDay() + this.getSundayIndex();
        return dayIndex >= 7 ? dayIndex - 7 : dayIndex;
      }
      getDaysCountInMonth(month, year) {
        return 32 - this.daylightSavingAdjust(new Date(year, month, 32)).getDate();
      }
      getDaysCountInPrevMonth(month, year) {
        let prev = this.getPreviousMonthAndYear(month, year);
        return this.getDaysCountInMonth(prev.month, prev.year);
      }
      getPreviousMonthAndYear(month, year) {
        let m, y;
        if (month === 0) {
          m = 11;
          y = year - 1;
        } else {
          m = month - 1;
          y = year;
        }
        return {
          month: m,
          year: y
        };
      }
      getNextMonthAndYear(month, year) {
        let m, y;
        if (month === 11) {
          m = 0;
          y = year + 1;
        } else {
          m = month + 1;
          y = year;
        }
        return {
          month: m,
          year: y
        };
      }
      getSundayIndex() {
        let firstDayOfWeek = this.getFirstDateOfWeek();
        return firstDayOfWeek > 0 ? 7 - firstDayOfWeek : 0;
      }
      isSelected(dateMeta) {
        if (this.value) {
          if (this.isSingleSelection()) {
            return this.isDateEquals(this.value, dateMeta);
          } else if (this.isMultipleSelection()) {
            let selected = false;
            for (let date of this.value) {
              selected = this.isDateEquals(date, dateMeta);
              if (selected) {
                break;
              }
            }
            return selected;
          } else if (this.isRangeSelection()) {
            if (this.value[1]) return this.isDateEquals(this.value[0], dateMeta) || this.isDateEquals(this.value[1], dateMeta) || this.isDateBetween(this.value[0], this.value[1], dateMeta);
            else return this.isDateEquals(this.value[0], dateMeta);
          }
        } else {
          return false;
        }
      }
      isComparable() {
        return this.value != null && typeof this.value !== "string";
      }
      isMonthSelected(month) {
        if (!this.isComparable()) return false;
        if (this.isMultipleSelection()) {
          return this.value.some((currentValue) => currentValue.getMonth() === month && currentValue.getFullYear() === this.currentYear);
        } else if (this.isRangeSelection()) {
          if (!this.value[1]) {
            return this.value[0]?.getFullYear() === this.currentYear && this.value[0]?.getMonth() === month;
          } else {
            const currentDate = new Date(this.currentYear, month, 1);
            const startDate = new Date(this.value[0].getFullYear(), this.value[0].getMonth(), 1);
            const endDate = new Date(this.value[1].getFullYear(), this.value[1].getMonth(), 1);
            return currentDate >= startDate && currentDate <= endDate;
          }
        } else {
          return this.value.getMonth() === month && this.value.getFullYear() === this.currentYear;
        }
      }
      isMonthDisabled(month, year) {
        const yearToCheck = year ?? this.currentYear;
        for (let day = 1; day < this.getDaysCountInMonth(month, yearToCheck) + 1; day++) {
          if (this.isSelectable(day, month, yearToCheck, false)) {
            return false;
          }
        }
        return true;
      }
      isYearDisabled(year) {
        return Array(12).fill(0).every((v, month) => this.isMonthDisabled(month, year));
      }
      isYearSelected(year) {
        if (this.isComparable()) {
          let value = this.isRangeSelection() ? this.value[0] : this.value;
          return !this.isMultipleSelection() ? value.getFullYear() === year : false;
        }
        return false;
      }
      isDateEquals(value, dateMeta) {
        if (value && isDate(value)) return value.getDate() === dateMeta.day && value.getMonth() === dateMeta.month && value.getFullYear() === dateMeta.year;
        else return false;
      }
      isDateBetween(start, end, dateMeta) {
        let between = false;
        if (isDate(start) && isDate(end)) {
          let date = this.formatDateMetaToDate(dateMeta);
          return start.getTime() <= date.getTime() && end.getTime() >= date.getTime();
        }
        return between;
      }
      isSingleSelection() {
        return this.selectionMode === "single";
      }
      isRangeSelection() {
        return this.selectionMode === "range";
      }
      isMultipleSelection() {
        return this.selectionMode === "multiple";
      }
      isToday(today, day, month, year) {
        return today.getDate() === day && today.getMonth() === month && today.getFullYear() === year;
      }
      isSelectable(day, month, year, otherMonth) {
        let validMin = true;
        let validMax = true;
        let validDate = true;
        let validDay = true;
        if (otherMonth && !this.selectOtherMonths) {
          return false;
        }
        if (this.minDate) {
          if (this.minDate.getFullYear() > year) {
            validMin = false;
          } else if (this.minDate.getFullYear() === year && this.currentView != "year") {
            if (this.minDate.getMonth() > month) {
              validMin = false;
            } else if (this.minDate.getMonth() === month) {
              if (this.minDate.getDate() > day) {
                validMin = false;
              }
            }
          }
        }
        if (this.maxDate) {
          if (this.maxDate.getFullYear() < year) {
            validMax = false;
          } else if (this.maxDate.getFullYear() === year) {
            if (this.maxDate.getMonth() < month) {
              validMax = false;
            } else if (this.maxDate.getMonth() === month) {
              if (this.maxDate.getDate() < day) {
                validMax = false;
              }
            }
          }
        }
        if (this.disabledDates) {
          validDate = !this.isDateDisabled(day, month, year);
        }
        if (this.disabledDays) {
          validDay = !this.isDayDisabled(day, month, year);
        }
        return validMin && validMax && validDate && validDay;
      }
      isDateDisabled(day, month, year) {
        if (this.disabledDates) {
          for (let disabledDate of this.disabledDates) {
            if (disabledDate.getFullYear() === year && disabledDate.getMonth() === month && disabledDate.getDate() === day) {
              return true;
            }
          }
        }
        return false;
      }
      isDayDisabled(day, month, year) {
        if (this.disabledDays) {
          let weekday = new Date(year, month, day);
          let weekdayNumber = weekday.getDay();
          return this.disabledDays.indexOf(weekdayNumber) !== -1;
        }
        return false;
      }
      onInputFocus(event2) {
        this.focus = true;
        if (this.showOnFocus) {
          this.showOverlay();
        }
        this.onFocus.emit(event2);
      }
      onInputClick() {
        if (this.showOnFocus && !this.overlayVisible) {
          this.showOverlay();
        }
      }
      onInputBlur(event2) {
        this.focus = false;
        this.onBlur.emit(event2);
        if (!this.keepInvalid) {
          this.updateInputfield();
        }
        this.onModelTouched();
      }
      onButtonClick(event2, inputfield = this.inputfieldViewChild?.nativeElement) {
        if (this.disabled) {
          return;
        }
        if (!this.overlayVisible) {
          inputfield.focus();
          this.showOverlay();
        } else {
          this.hideOverlay();
        }
      }
      clear() {
        this.value = null;
        this.onModelChange(this.value);
        this.updateInputfield();
        this.onClear.emit();
      }
      onOverlayClick(event2) {
        this.overlayService.add({
          originalEvent: event2,
          target: this.el.nativeElement
        });
      }
      getMonthName(index) {
        return this.config.getTranslation("monthNames")[index];
      }
      getYear(month) {
        return this.currentView === "month" ? this.currentYear : month.year;
      }
      switchViewButtonDisabled() {
        return this.numberOfMonths > 1 || this.disabled;
      }
      onPrevButtonClick(event2) {
        this.navigationState = {
          backward: true,
          button: true
        };
        this.navBackward(event2);
      }
      onNextButtonClick(event2) {
        this.navigationState = {
          backward: false,
          button: true
        };
        this.navForward(event2);
      }
      onContainerButtonKeydown(event2) {
        switch (event2.which) {
          //tab
          case 9:
            if (!this.inline) {
              this.trapFocus(event2);
            }
            if (this.inline) {
              const headerElements = findSingle(this.containerViewChild?.nativeElement, ".p-datepicker-header");
              const element = event2.target;
              if (this.timeOnly) {
                return;
              } else {
                if (element == headerElements.children[headerElements?.children?.length - 1]) {
                  this.initFocusableCell();
                }
              }
            }
            break;
          //escape
          case 27:
            this.inputfieldViewChild?.nativeElement.focus();
            this.overlayVisible = false;
            event2.preventDefault();
            break;
          default:
            break;
        }
      }
      onInputKeydown(event2) {
        this.isKeydown = true;
        if (event2.keyCode === 40 && this.contentViewChild) {
          this.trapFocus(event2);
        } else if (event2.keyCode === 27) {
          if (this.overlayVisible) {
            this.inputfieldViewChild?.nativeElement.focus();
            this.overlayVisible = false;
            event2.preventDefault();
          }
        } else if (event2.keyCode === 13) {
          if (this.overlayVisible) {
            this.overlayVisible = false;
            event2.preventDefault();
          }
        } else if (event2.keyCode === 9 && this.contentViewChild) {
          getFocusableElements(this.contentViewChild.nativeElement).forEach((el) => el.tabIndex = "-1");
          if (this.overlayVisible) {
            this.overlayVisible = false;
          }
        }
      }
      onDateCellKeydown(event2, dateMeta, groupIndex) {
        const cellContent = event2.currentTarget;
        const cell = cellContent.parentElement;
        const currentDate = this.formatDateMetaToDate(dateMeta);
        switch (event2.which) {
          //down arrow
          case 40: {
            cellContent.tabIndex = "-1";
            let cellIndex = getIndex(cell);
            let nextRow = cell.parentElement.nextElementSibling;
            if (nextRow) {
              let focusCell = nextRow.children[cellIndex].children[0];
              if (hasClass(focusCell, "p-disabled")) {
                this.navigationState = {
                  backward: false
                };
                this.navForward(event2);
              } else {
                nextRow.children[cellIndex].children[0].tabIndex = "0";
                nextRow.children[cellIndex].children[0].focus();
              }
            } else {
              this.navigationState = {
                backward: false
              };
              this.navForward(event2);
            }
            event2.preventDefault();
            break;
          }
          //up arrow
          case 38: {
            cellContent.tabIndex = "-1";
            let cellIndex = getIndex(cell);
            let prevRow = cell.parentElement.previousElementSibling;
            if (prevRow) {
              let focusCell = prevRow.children[cellIndex].children[0];
              if (hasClass(focusCell, "p-disabled")) {
                this.navigationState = {
                  backward: true
                };
                this.navBackward(event2);
              } else {
                focusCell.tabIndex = "0";
                focusCell.focus();
              }
            } else {
              this.navigationState = {
                backward: true
              };
              this.navBackward(event2);
            }
            event2.preventDefault();
            break;
          }
          //left arrow
          case 37: {
            cellContent.tabIndex = "-1";
            let prevCell = cell.previousElementSibling;
            if (prevCell) {
              let focusCell = prevCell.children[0];
              if (hasClass(focusCell, "p-disabled") || hasClass(focusCell.parentElement, "p-datepicker-weeknumber")) {
                this.navigateToMonth(true, groupIndex);
              } else {
                focusCell.tabIndex = "0";
                focusCell.focus();
              }
            } else {
              this.navigateToMonth(true, groupIndex);
            }
            event2.preventDefault();
            break;
          }
          //right arrow
          case 39: {
            cellContent.tabIndex = "-1";
            let nextCell = cell.nextElementSibling;
            if (nextCell) {
              let focusCell = nextCell.children[0];
              if (hasClass(focusCell, "p-disabled")) {
                this.navigateToMonth(false, groupIndex);
              } else {
                focusCell.tabIndex = "0";
                focusCell.focus();
              }
            } else {
              this.navigateToMonth(false, groupIndex);
            }
            event2.preventDefault();
            break;
          }
          //enter
          //space
          case 13:
          case 32: {
            this.onDateSelect(event2, dateMeta);
            event2.preventDefault();
            break;
          }
          //escape
          case 27: {
            this.inputfieldViewChild?.nativeElement.focus();
            this.overlayVisible = false;
            event2.preventDefault();
            break;
          }
          //tab
          case 9: {
            if (!this.inline) {
              this.trapFocus(event2);
            }
            break;
          }
          // page up
          case 33: {
            cellContent.tabIndex = "-1";
            const dateToFocus = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, currentDate.getDate());
            const focusKey = this.formatDateKey(dateToFocus);
            this.navigateToMonth(true, groupIndex, `span[data-date='${focusKey}']:not(.p-disabled):not(.p-ink)`);
            event2.preventDefault();
            break;
          }
          // page down
          case 34: {
            cellContent.tabIndex = "-1";
            const dateToFocus = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, currentDate.getDate());
            const focusKey = this.formatDateKey(dateToFocus);
            this.navigateToMonth(false, groupIndex, `span[data-date='${focusKey}']:not(.p-disabled):not(.p-ink)`);
            event2.preventDefault();
            break;
          }
          //home
          case 36:
            cellContent.tabIndex = "-1";
            const firstDayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const firstDayDateKey = this.formatDateKey(firstDayDate);
            const firstDayCell = findSingle(cellContent.offsetParent, `span[data-date='${firstDayDateKey}']:not(.p-disabled):not(.p-ink)`);
            if (firstDayCell) {
              firstDayCell.tabIndex = "0";
              firstDayCell.focus();
            }
            event2.preventDefault();
            break;
          //end
          case 35:
            cellContent.tabIndex = "-1";
            const lastDayDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const lastDayDateKey = this.formatDateKey(lastDayDate);
            const lastDayCell = findSingle(cellContent.offsetParent, `span[data-date='${lastDayDateKey}']:not(.p-disabled):not(.p-ink)`);
            if (lastDayDate) {
              lastDayCell.tabIndex = "0";
              lastDayCell.focus();
            }
            event2.preventDefault();
            break;
          default:
            break;
        }
      }
      onMonthCellKeydown(event2, index) {
        const cell = event2.currentTarget;
        switch (event2.which) {
          //arrows
          case 38:
          case 40: {
            cell.tabIndex = "-1";
            var cells = cell.parentElement.children;
            var cellIndex = getIndex(cell);
            let nextCell = cells[event2.which === 40 ? cellIndex + 3 : cellIndex - 3];
            if (nextCell) {
              nextCell.tabIndex = "0";
              nextCell.focus();
            }
            event2.preventDefault();
            break;
          }
          //left arrow
          case 37: {
            cell.tabIndex = "-1";
            let prevCell = cell.previousElementSibling;
            if (prevCell) {
              prevCell.tabIndex = "0";
              prevCell.focus();
            } else {
              this.navigationState = {
                backward: true
              };
              this.navBackward(event2);
            }
            event2.preventDefault();
            break;
          }
          //right arrow
          case 39: {
            cell.tabIndex = "-1";
            let nextCell = cell.nextElementSibling;
            if (nextCell) {
              nextCell.tabIndex = "0";
              nextCell.focus();
            } else {
              this.navigationState = {
                backward: false
              };
              this.navForward(event2);
            }
            event2.preventDefault();
            break;
          }
          //enter
          //space
          case 13:
          case 32: {
            this.onMonthSelect(event2, index);
            event2.preventDefault();
            break;
          }
          //escape
          case 27: {
            this.inputfieldViewChild?.nativeElement.focus();
            this.overlayVisible = false;
            event2.preventDefault();
            break;
          }
          //tab
          case 9: {
            if (!this.inline) {
              this.trapFocus(event2);
            }
            break;
          }
          default:
            break;
        }
      }
      onYearCellKeydown(event2, index) {
        const cell = event2.currentTarget;
        switch (event2.which) {
          //arrows
          case 38:
          case 40: {
            cell.tabIndex = "-1";
            var cells = cell.parentElement.children;
            var cellIndex = getIndex(cell);
            let nextCell = cells[event2.which === 40 ? cellIndex + 2 : cellIndex - 2];
            if (nextCell) {
              nextCell.tabIndex = "0";
              nextCell.focus();
            }
            event2.preventDefault();
            break;
          }
          //left arrow
          case 37: {
            cell.tabIndex = "-1";
            let prevCell = cell.previousElementSibling;
            if (prevCell) {
              prevCell.tabIndex = "0";
              prevCell.focus();
            } else {
              this.navigationState = {
                backward: true
              };
              this.navBackward(event2);
            }
            event2.preventDefault();
            break;
          }
          //right arrow
          case 39: {
            cell.tabIndex = "-1";
            let nextCell = cell.nextElementSibling;
            if (nextCell) {
              nextCell.tabIndex = "0";
              nextCell.focus();
            } else {
              this.navigationState = {
                backward: false
              };
              this.navForward(event2);
            }
            event2.preventDefault();
            break;
          }
          //enter
          //space
          case 13:
          case 32: {
            this.onYearSelect(event2, index);
            event2.preventDefault();
            break;
          }
          //escape
          case 27: {
            this.inputfieldViewChild?.nativeElement.focus();
            this.overlayVisible = false;
            event2.preventDefault();
            break;
          }
          //tab
          case 9: {
            this.trapFocus(event2);
            break;
          }
          default:
            break;
        }
      }
      navigateToMonth(prev, groupIndex, focusKey) {
        if (prev) {
          if (this.numberOfMonths === 1 || groupIndex === 0) {
            this.navigationState = {
              backward: true
            };
            this._focusKey = focusKey;
            this.navBackward(event);
          } else {
            let prevMonthContainer = this.contentViewChild.nativeElement.children[groupIndex - 1];
            if (focusKey) {
              const firstDayCell = findSingle(prevMonthContainer, focusKey);
              firstDayCell.tabIndex = "0";
              firstDayCell.focus();
            } else {
              let cells = find(prevMonthContainer, ".p-datepicker-calendar td span:not(.p-disabled):not(.p-ink)");
              let focusCell = cells[cells.length - 1];
              focusCell.tabIndex = "0";
              focusCell.focus();
            }
          }
        } else {
          if (this.numberOfMonths === 1 || groupIndex === this.numberOfMonths - 1) {
            this.navigationState = {
              backward: false
            };
            this._focusKey = focusKey;
            this.navForward(event);
          } else {
            let nextMonthContainer = this.contentViewChild.nativeElement.children[groupIndex + 1];
            if (focusKey) {
              const firstDayCell = findSingle(nextMonthContainer, focusKey);
              firstDayCell.tabIndex = "0";
              firstDayCell.focus();
            } else {
              let focusCell = findSingle(nextMonthContainer, ".p-datepicker-calendar td span:not(.p-disabled):not(.p-ink)");
              focusCell.tabIndex = "0";
              focusCell.focus();
            }
          }
        }
      }
      updateFocus() {
        let cell;
        if (this.navigationState) {
          if (this.navigationState.button) {
            this.initFocusableCell();
            if (this.navigationState.backward) findSingle(this.contentViewChild.nativeElement, ".p-datepicker-prev-button").focus();
            else findSingle(this.contentViewChild.nativeElement, ".p-datepicker-next-button").focus();
          } else {
            if (this.navigationState.backward) {
              let cells;
              if (this.currentView === "month") {
                cells = find(this.contentViewChild.nativeElement, ".p-datepicker-month-view .p-datepicker-month:not(.p-disabled)");
              } else if (this.currentView === "year") {
                cells = find(this.contentViewChild.nativeElement, ".p-datepicker-year-view .p-datepicker-year:not(.p-disabled)");
              } else {
                cells = find(this.contentViewChild.nativeElement, this._focusKey || ".p-datepicker-calendar td span:not(.p-disabled):not(.p-ink)");
              }
              if (cells && cells.length > 0) {
                cell = cells[cells.length - 1];
              }
            } else {
              if (this.currentView === "month") {
                cell = findSingle(this.contentViewChild.nativeElement, ".p-datepicker-month-view .p-datepicker-month:not(.p-disabled)");
              } else if (this.currentView === "year") {
                cell = findSingle(this.contentViewChild.nativeElement, ".p-datepicker-year-view .p-datepicker-year:not(.p-disabled)");
              } else {
                cell = findSingle(this.contentViewChild.nativeElement, this._focusKey || ".p-datepicker-calendar td span:not(.p-disabled):not(.p-ink)");
              }
            }
            if (cell) {
              cell.tabIndex = "0";
              cell.focus();
            }
          }
          this.navigationState = null;
          this._focusKey = null;
        } else {
          this.initFocusableCell();
        }
      }
      initFocusableCell() {
        const contentEl = this.contentViewChild?.nativeElement;
        let cell;
        if (this.currentView === "month") {
          let cells = find(contentEl, ".p-datepicker-month-view .p-datepicker-month:not(.p-disabled)");
          let selectedCell = findSingle(contentEl, ".p-datepicker-month-view .p-datepicker-month.p-highlight");
          cells.forEach((cell2) => cell2.tabIndex = -1);
          cell = selectedCell || cells[0];
          if (cells.length === 0) {
            let disabledCells = find(contentEl, '.p-datepicker-month-view .p-datepicker-month.p-disabled[tabindex = "0"]');
            disabledCells.forEach((cell2) => cell2.tabIndex = -1);
          }
        } else if (this.currentView === "year") {
          let cells = find(contentEl, ".p-datepicker-year-view .p-datepicker-year:not(.p-disabled)");
          let selectedCell = findSingle(contentEl, ".p-datepicker-year-view .p-datepicker-year.p-highlight");
          cells.forEach((cell2) => cell2.tabIndex = -1);
          cell = selectedCell || cells[0];
          if (cells.length === 0) {
            let disabledCells = find(contentEl, '.p-datepicker-year-view .p-datepicker-year.p-disabled[tabindex = "0"]');
            disabledCells.forEach((cell2) => cell2.tabIndex = -1);
          }
        } else {
          cell = findSingle(contentEl, "span.p-highlight");
          if (!cell) {
            let todayCell = findSingle(contentEl, "td.p-datepicker-today span:not(.p-disabled):not(.p-ink)");
            if (todayCell) cell = todayCell;
            else cell = findSingle(contentEl, ".p-datepicker-calendar td span:not(.p-disabled):not(.p-ink)");
          }
        }
        if (cell) {
          cell.tabIndex = "0";
          if (!this.preventFocus && (!this.navigationState || !this.navigationState.button)) {
            setTimeout(() => {
              if (!this.disabled) {
                cell.focus();
              }
            }, 1);
          }
          this.preventFocus = false;
        }
      }
      trapFocus(event2) {
        let focusableElements = getFocusableElements(this.contentViewChild.nativeElement);
        if (focusableElements && focusableElements.length > 0) {
          if (!focusableElements[0].ownerDocument.activeElement) {
            focusableElements[0].focus();
          } else {
            let focusedIndex = focusableElements.indexOf(focusableElements[0].ownerDocument.activeElement);
            if (event2.shiftKey) {
              if (focusedIndex == -1 || focusedIndex === 0) {
                if (this.focusTrap) {
                  focusableElements[focusableElements.length - 1].focus();
                } else {
                  if (focusedIndex === -1) return this.hideOverlay();
                  else if (focusedIndex === 0) return;
                }
              } else {
                focusableElements[focusedIndex - 1].focus();
              }
            } else {
              if (focusedIndex == -1) {
                if (this.timeOnly) {
                  focusableElements[0].focus();
                } else {
                  let spanIndex = 0;
                  for (let i = 0; i < focusableElements.length; i++) {
                    if (focusableElements[i].tagName === "SPAN") spanIndex = i;
                  }
                  focusableElements[spanIndex].focus();
                }
              } else if (focusedIndex === focusableElements.length - 1) {
                if (!this.focusTrap && focusedIndex != -1) return this.hideOverlay();
                focusableElements[0].focus();
              } else {
                focusableElements[focusedIndex + 1].focus();
              }
            }
          }
        }
        event2.preventDefault();
      }
      onMonthDropdownChange(m) {
        this.currentMonth = parseInt(m);
        this.onMonthChange.emit({
          month: this.currentMonth + 1,
          year: this.currentYear
        });
        this.createMonths(this.currentMonth, this.currentYear);
      }
      onYearDropdownChange(y) {
        this.currentYear = parseInt(y);
        this.onYearChange.emit({
          month: this.currentMonth + 1,
          year: this.currentYear
        });
        this.createMonths(this.currentMonth, this.currentYear);
      }
      convertTo24Hour(hours, pm) {
        if (this.hourFormat == "12") {
          if (hours === 12) {
            return pm ? 12 : 0;
          } else {
            return pm ? hours + 12 : hours;
          }
        }
        return hours;
      }
      constrainTime(hour, minute, second, pm) {
        let returnTimeTriple = [hour, minute, second];
        let minHoursExceeds12;
        let value = this.value;
        const convertedHour = this.convertTo24Hour(hour, pm);
        const isRange = this.isRangeSelection(), isMultiple = this.isMultipleSelection(), isMultiValue = isRange || isMultiple;
        if (isMultiValue) {
          if (!this.value) {
            this.value = [/* @__PURE__ */ new Date(), /* @__PURE__ */ new Date()];
          }
          if (isRange) {
            value = this.value[1] || this.value[0];
          }
          if (isMultiple) {
            value = this.value[this.value.length - 1];
          }
        }
        const valueDateString = value ? value.toDateString() : null;
        let isMinDate = this.minDate && valueDateString && this.minDate.toDateString() === valueDateString;
        let isMaxDate = this.maxDate && valueDateString && this.maxDate.toDateString() === valueDateString;
        if (isMinDate) {
          minHoursExceeds12 = this.minDate.getHours() >= 12;
        }
        switch (true) {
          case (isMinDate && minHoursExceeds12 && this.minDate.getHours() === 12 && this.minDate.getHours() > convertedHour):
            returnTimeTriple[0] = 11;
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() > minute):
            returnTimeTriple[1] = this.minDate.getMinutes();
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() === minute && this.minDate.getSeconds() > second):
            returnTimeTriple[2] = this.minDate.getSeconds();
            break;
          case (isMinDate && !minHoursExceeds12 && this.minDate.getHours() - 1 === convertedHour && this.minDate.getHours() > convertedHour):
            returnTimeTriple[0] = 11;
            this.pm = true;
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() > minute):
            returnTimeTriple[1] = this.minDate.getMinutes();
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() === minute && this.minDate.getSeconds() > second):
            returnTimeTriple[2] = this.minDate.getSeconds();
            break;
          case (isMinDate && minHoursExceeds12 && this.minDate.getHours() > convertedHour && convertedHour !== 12):
            this.setCurrentHourPM(this.minDate.getHours());
            returnTimeTriple[0] = this.currentHour;
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() > minute):
            returnTimeTriple[1] = this.minDate.getMinutes();
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() === minute && this.minDate.getSeconds() > second):
            returnTimeTriple[2] = this.minDate.getSeconds();
            break;
          case (isMinDate && this.minDate.getHours() > convertedHour):
            returnTimeTriple[0] = this.minDate.getHours();
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() > minute):
            returnTimeTriple[1] = this.minDate.getMinutes();
          case (isMinDate && this.minDate.getHours() === convertedHour && this.minDate.getMinutes() === minute && this.minDate.getSeconds() > second):
            returnTimeTriple[2] = this.minDate.getSeconds();
            break;
          case (isMaxDate && this.maxDate.getHours() < convertedHour):
            returnTimeTriple[0] = this.maxDate.getHours();
          case (isMaxDate && this.maxDate.getHours() === convertedHour && this.maxDate.getMinutes() < minute):
            returnTimeTriple[1] = this.maxDate.getMinutes();
          case (isMaxDate && this.maxDate.getHours() === convertedHour && this.maxDate.getMinutes() === minute && this.maxDate.getSeconds() < second):
            returnTimeTriple[2] = this.maxDate.getSeconds();
            break;
        }
        return returnTimeTriple;
      }
      incrementHour(event2) {
        const prevHour = this.currentHour ?? 0;
        let newHour = (this.currentHour ?? 0) + this.stepHour;
        let newPM = this.pm;
        if (this.hourFormat == "24") newHour = newHour >= 24 ? newHour - 24 : newHour;
        else if (this.hourFormat == "12") {
          if (prevHour < 12 && newHour > 11) {
            newPM = !this.pm;
          }
          newHour = newHour >= 13 ? newHour - 12 : newHour;
        }
        this.toggleAMPMIfNotMinDate(newPM);
        [this.currentHour, this.currentMinute, this.currentSecond] = this.constrainTime(newHour, this.currentMinute, this.currentSecond, newPM);
        event2.preventDefault();
      }
      toggleAMPMIfNotMinDate(newPM) {
        let value = this.value;
        const valueDateString = value ? value.toDateString() : null;
        let isMinDate = this.minDate && valueDateString && this.minDate.toDateString() === valueDateString;
        if (isMinDate && this.minDate.getHours() >= 12) {
          this.pm = true;
        } else {
          this.pm = newPM;
        }
      }
      onTimePickerElementMouseDown(event2, type, direction) {
        if (!this.disabled) {
          this.repeat(event2, null, type, direction);
          event2.preventDefault();
        }
      }
      onTimePickerElementMouseUp(event2) {
        if (!this.disabled) {
          this.clearTimePickerTimer();
          this.updateTime();
        }
      }
      onTimePickerElementMouseLeave() {
        if (!this.disabled && this.timePickerTimer) {
          this.clearTimePickerTimer();
          this.updateTime();
        }
      }
      repeat(event2, interval, type, direction) {
        let i = interval || 500;
        this.clearTimePickerTimer();
        this.timePickerTimer = setTimeout(() => {
          this.repeat(event2, 100, type, direction);
          this.cd.markForCheck();
        }, i);
        switch (type) {
          case 0:
            if (direction === 1) this.incrementHour(event2);
            else this.decrementHour(event2);
            break;
          case 1:
            if (direction === 1) this.incrementMinute(event2);
            else this.decrementMinute(event2);
            break;
          case 2:
            if (direction === 1) this.incrementSecond(event2);
            else this.decrementSecond(event2);
            break;
        }
        this.updateInputfield();
      }
      clearTimePickerTimer() {
        if (this.timePickerTimer) {
          clearTimeout(this.timePickerTimer);
          this.timePickerTimer = null;
        }
      }
      decrementHour(event2) {
        let newHour = (this.currentHour ?? 0) - this.stepHour;
        let newPM = this.pm;
        if (this.hourFormat == "24") newHour = newHour < 0 ? 24 + newHour : newHour;
        else if (this.hourFormat == "12") {
          if (this.currentHour === 12) {
            newPM = !this.pm;
          }
          newHour = newHour <= 0 ? 12 + newHour : newHour;
        }
        this.toggleAMPMIfNotMinDate(newPM);
        [this.currentHour, this.currentMinute, this.currentSecond] = this.constrainTime(newHour, this.currentMinute, this.currentSecond, newPM);
        event2.preventDefault();
      }
      incrementMinute(event2) {
        let newMinute = (this.currentMinute ?? 0) + this.stepMinute;
        newMinute = newMinute > 59 ? newMinute - 60 : newMinute;
        [this.currentHour, this.currentMinute, this.currentSecond] = this.constrainTime(this.currentHour, newMinute, this.currentSecond, this.pm);
        event2.preventDefault();
      }
      decrementMinute(event2) {
        let newMinute = (this.currentMinute ?? 0) - this.stepMinute;
        newMinute = newMinute < 0 ? 60 + newMinute : newMinute;
        [this.currentHour, this.currentMinute, this.currentSecond] = this.constrainTime(this.currentHour, newMinute, this.currentSecond, this.pm);
        event2.preventDefault();
      }
      incrementSecond(event2) {
        let newSecond = this.currentSecond + this.stepSecond;
        newSecond = newSecond > 59 ? newSecond - 60 : newSecond;
        [this.currentHour, this.currentMinute, this.currentSecond] = this.constrainTime(this.currentHour, this.currentMinute, newSecond, this.pm);
        event2.preventDefault();
      }
      decrementSecond(event2) {
        let newSecond = this.currentSecond - this.stepSecond;
        newSecond = newSecond < 0 ? 60 + newSecond : newSecond;
        [this.currentHour, this.currentMinute, this.currentSecond] = this.constrainTime(this.currentHour, this.currentMinute, newSecond, this.pm);
        event2.preventDefault();
      }
      updateTime() {
        let value = this.value;
        if (this.isRangeSelection()) {
          value = this.value[1] || this.value[0];
        }
        if (this.isMultipleSelection()) {
          value = this.value[this.value.length - 1];
        }
        value = value ? new Date(value.getTime()) : /* @__PURE__ */ new Date();
        if (this.hourFormat == "12") {
          if (this.currentHour === 12) value.setHours(this.pm ? 12 : 0);
          else value.setHours(this.pm ? this.currentHour + 12 : this.currentHour);
        } else {
          value.setHours(this.currentHour);
        }
        value.setMinutes(this.currentMinute);
        value.setSeconds(this.currentSecond);
        if (this.isRangeSelection()) {
          if (this.value[1]) value = [this.value[0], value];
          else value = [value, null];
        }
        if (this.isMultipleSelection()) {
          value = [...this.value.slice(0, -1), value];
        }
        this.updateModel(value);
        this.onSelect.emit(value);
        this.updateInputfield();
      }
      toggleAMPM(event2) {
        const newPM = !this.pm;
        this.pm = newPM;
        [this.currentHour, this.currentMinute, this.currentSecond] = this.constrainTime(this.currentHour, this.currentMinute, this.currentSecond, newPM);
        this.updateTime();
        event2.preventDefault();
      }
      onUserInput(event2) {
        if (!this.isKeydown) {
          return;
        }
        this.isKeydown = false;
        let val = event2.target.value;
        try {
          let value = this.parseValueFromString(val);
          if (this.isValidSelection(value)) {
            this.updateModel(value);
            this.updateUI();
          } else if (this.keepInvalid) {
            this.updateModel(value);
          }
        } catch (err) {
          let value = this.keepInvalid ? val : null;
          this.updateModel(value);
        }
        this.filled = val != null && val.length;
        this.onInput.emit(event2);
      }
      isValidSelection(value) {
        if (this.isSingleSelection()) {
          return this.isSelectable(value.getDate(), value.getMonth(), value.getFullYear(), false);
        }
        let isValid = value.every((v) => this.isSelectable(v.getDate(), v.getMonth(), v.getFullYear(), false));
        if (isValid && this.isRangeSelection()) {
          isValid = value.length === 1 || value.length > 1 && value[1] >= value[0];
        }
        return isValid;
      }
      parseValueFromString(text) {
        if (!text || text.trim().length === 0) {
          return null;
        }
        let value;
        if (this.isSingleSelection()) {
          value = this.parseDateTime(text);
        } else if (this.isMultipleSelection()) {
          let tokens = text.split(this.multipleSeparator);
          value = [];
          for (let token of tokens) {
            value.push(this.parseDateTime(token.trim()));
          }
        } else if (this.isRangeSelection()) {
          let tokens = text.split(" " + this.rangeSeparator + " ");
          value = [];
          for (let i = 0; i < tokens.length; i++) {
            value[i] = this.parseDateTime(tokens[i].trim());
          }
        }
        return value;
      }
      parseDateTime(text) {
        let date;
        let parts = text.split(" ");
        if (this.timeOnly) {
          date = /* @__PURE__ */ new Date();
          this.populateTime(date, parts[0], parts[1]);
        } else {
          const dateFormat = this.getDateFormat();
          if (this.showTime) {
            let ampm = this.hourFormat == "12" ? parts.pop() : null;
            let timeString = parts.pop();
            date = this.parseDate(parts.join(" "), dateFormat);
            this.populateTime(date, timeString, ampm);
          } else {
            date = this.parseDate(text, dateFormat);
          }
        }
        return date;
      }
      populateTime(value, timeString, ampm) {
        if (this.hourFormat == "12" && !ampm) {
          throw "Invalid Time";
        }
        this.pm = ampm === "PM" || ampm === "pm";
        let time = this.parseTime(timeString);
        value.setHours(time.hour);
        value.setMinutes(time.minute);
        value.setSeconds(time.second);
      }
      isValidDate(date) {
        return isDate(date) && isNotEmpty(date);
      }
      updateUI() {
        let propValue = this.value;
        if (Array.isArray(propValue)) {
          propValue = propValue.length === 2 ? propValue[1] : propValue[0];
        }
        let val = this.defaultDate && this.isValidDate(this.defaultDate) && !this.value ? this.defaultDate : propValue && this.isValidDate(propValue) ? propValue : /* @__PURE__ */ new Date();
        this.currentMonth = val.getMonth();
        this.currentYear = val.getFullYear();
        this.createMonths(this.currentMonth, this.currentYear);
        if (this.showTime || this.timeOnly) {
          this.setCurrentHourPM(val.getHours());
          this.currentMinute = val.getMinutes();
          this.currentSecond = val.getSeconds();
        }
      }
      showOverlay() {
        if (!this.overlayVisible) {
          this.updateUI();
          if (!this.touchUI) {
            this.preventFocus = true;
          }
          this.overlayVisible = true;
        }
      }
      hideOverlay() {
        this.inputfieldViewChild?.nativeElement.focus();
        this.overlayVisible = false;
        this.clearTimePickerTimer();
        if (this.touchUI) {
          this.disableModality();
        }
        this.cd.markForCheck();
      }
      toggle() {
        if (!this.inline) {
          if (!this.overlayVisible) {
            this.showOverlay();
            this.inputfieldViewChild?.nativeElement.focus();
          } else {
            this.hideOverlay();
          }
        }
      }
      onOverlayAnimationStart(event2) {
        switch (event2.toState) {
          case "visible":
          case "visibleTouchUI":
            if (!this.inline) {
              this.overlay = event2.element;
              this.overlay?.setAttribute(this.attributeSelector, "");
              const styles = !this.inline ? {
                position: "absolute",
                top: "0",
                left: "0"
              } : void 0;
              addStyle(this.overlay, styles);
              this.appendOverlay();
              this.updateFocus();
              if (this.autoZIndex) {
                if (this.touchUI) zindexutils.set("modal", this.overlay, this.baseZIndex || this.config.zIndex.modal);
                else zindexutils.set("overlay", this.overlay, this.baseZIndex || this.config.zIndex.overlay);
              }
              this.alignOverlay();
              this.onShow.emit(event2);
            }
            break;
          case "void":
            this.onOverlayHide();
            this.onClose.emit(event2);
            break;
        }
      }
      onOverlayAnimationDone(event2) {
        switch (event2.toState) {
          case "visible":
          case "visibleTouchUI":
            if (!this.inline) {
              this.bindDocumentClickListener();
              this.bindDocumentResizeListener();
              this.bindScrollListener();
            }
            break;
          case "void":
            if (this.autoZIndex) {
              zindexutils.clear(event2.element);
            }
            break;
        }
      }
      appendOverlay() {
        if (this.appendTo) {
          if (this.appendTo === "body") this.document.body.appendChild(this.overlay);
          else appendChild(this.appendTo, this.overlay);
        }
      }
      restoreOverlayAppend() {
        if (this.overlay && this.appendTo) {
          this.el.nativeElement.appendChild(this.overlay);
        }
      }
      alignOverlay() {
        if (this.touchUI) {
          this.enableModality(this.overlay);
        } else if (this.overlay) {
          if (this.appendTo) {
            if (this.view === "date") {
              if (!this.overlay.style.width) {
                this.overlay.style.width = getOuterWidth(this.overlay) + "px";
              }
              if (!this.overlay.style.minWidth) {
                this.overlay.style.minWidth = getOuterWidth(this.inputfieldViewChild?.nativeElement) + "px";
              }
            } else {
              if (!this.overlay.style.width) {
                this.overlay.style.width = getOuterWidth(this.inputfieldViewChild?.nativeElement) + "px";
              }
            }
            absolutePosition(this.overlay, this.inputfieldViewChild?.nativeElement);
          } else {
            relativePosition(this.overlay, this.inputfieldViewChild?.nativeElement);
          }
        }
      }
      enableModality(element) {
        if (!this.mask && this.touchUI) {
          this.mask = this.renderer.createElement("div");
          this.renderer.setStyle(this.mask, "zIndex", String(parseInt(element.style.zIndex) - 1));
          let maskStyleClass = "p-overlay-mask p-datepicker-mask p-datepicker-mask-scrollblocker p-overlay-mask p-overlay-mask-enter";
          addClass(this.mask, maskStyleClass);
          this.maskClickListener = this.renderer.listen(this.mask, "click", (event2) => {
            this.disableModality();
            this.overlayVisible = false;
          });
          this.renderer.appendChild(this.document.body, this.mask);
          blockBodyScroll();
        }
      }
      disableModality() {
        if (this.mask) {
          addClass(this.mask, "p-overlay-mask-leave");
          if (!this.animationEndListener) {
            this.animationEndListener = this.renderer.listen(this.mask, "animationend", this.destroyMask.bind(this));
          }
        }
      }
      destroyMask() {
        if (!this.mask) {
          return;
        }
        this.renderer.removeChild(this.document.body, this.mask);
        let bodyChildren = this.document.body.children;
        let hasBlockerMasks;
        for (let i = 0; i < bodyChildren.length; i++) {
          let bodyChild = bodyChildren[i];
          if (hasClass(bodyChild, "p-datepicker-mask-scrollblocker")) {
            hasBlockerMasks = true;
            break;
          }
        }
        if (!hasBlockerMasks) {
          unblockBodyScroll();
        }
        this.unbindAnimationEndListener();
        this.unbindMaskClickListener();
        this.mask = null;
      }
      unbindMaskClickListener() {
        if (this.maskClickListener) {
          this.maskClickListener();
          this.maskClickListener = null;
        }
      }
      unbindAnimationEndListener() {
        if (this.animationEndListener && this.mask) {
          this.animationEndListener();
          this.animationEndListener = null;
        }
      }
      writeValue(value) {
        this.value = value;
        if (this.value && typeof this.value === "string") {
          try {
            this.value = this.parseValueFromString(this.value);
          } catch {
            if (this.keepInvalid) {
              this.value = value;
            }
          }
        }
        this.updateInputfield();
        this.updateUI();
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      getDateFormat() {
        return this.dateFormat || this.getTranslation("dateFormat");
      }
      getFirstDateOfWeek() {
        return this._firstDayOfWeek || this.getTranslation(TranslationKeys.FIRST_DAY_OF_WEEK);
      }
      // Ported from jquery-ui datepicker formatDate
      formatDate(date, format) {
        if (!date) {
          return "";
        }
        let iFormat;
        const lookAhead = (match) => {
          const matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
          if (matches) {
            iFormat++;
          }
          return matches;
        }, formatNumber = (match, value, len) => {
          let num = "" + value;
          if (lookAhead(match)) {
            while (num.length < len) {
              num = "0" + num;
            }
          }
          return num;
        }, formatName = (match, value, shortNames, longNames) => {
          return lookAhead(match) ? longNames[value] : shortNames[value];
        };
        let output = "";
        let literal = false;
        if (date) {
          for (iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal) {
              if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                literal = false;
              } else {
                output += format.charAt(iFormat);
              }
            } else {
              switch (format.charAt(iFormat)) {
                case "d":
                  output += formatNumber("d", date.getDate(), 2);
                  break;
                case "D":
                  output += formatName("D", date.getDay(), this.getTranslation(TranslationKeys.DAY_NAMES_SHORT), this.getTranslation(TranslationKeys.DAY_NAMES));
                  break;
                case "o":
                  output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                  break;
                case "m":
                  output += formatNumber("m", date.getMonth() + 1, 2);
                  break;
                case "M":
                  output += formatName("M", date.getMonth(), this.getTranslation(TranslationKeys.MONTH_NAMES_SHORT), this.getTranslation(TranslationKeys.MONTH_NAMES));
                  break;
                case "y":
                  output += lookAhead("y") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100;
                  break;
                case "@":
                  output += date.getTime();
                  break;
                case "!":
                  output += date.getTime() * 1e4 + this.ticksTo1970;
                  break;
                case "'":
                  if (lookAhead("'")) {
                    output += "'";
                  } else {
                    literal = true;
                  }
                  break;
                default:
                  output += format.charAt(iFormat);
              }
            }
          }
        }
        return output;
      }
      formatTime(date) {
        if (!date) {
          return "";
        }
        let output = "";
        let hours = date.getHours();
        let minutes = date.getMinutes();
        let seconds = date.getSeconds();
        if (this.hourFormat == "12" && hours > 11 && hours != 12) {
          hours -= 12;
        }
        if (this.hourFormat == "12") {
          output += hours === 0 ? 12 : hours < 10 ? "0" + hours : hours;
        } else {
          output += hours < 10 ? "0" + hours : hours;
        }
        output += ":";
        output += minutes < 10 ? "0" + minutes : minutes;
        if (this.showSeconds) {
          output += ":";
          output += seconds < 10 ? "0" + seconds : seconds;
        }
        if (this.hourFormat == "12") {
          output += date.getHours() > 11 ? " PM" : " AM";
        }
        return output;
      }
      parseTime(value) {
        let tokens = value.split(":");
        let validTokenLength = this.showSeconds ? 3 : 2;
        if (tokens.length !== validTokenLength) {
          throw "Invalid time";
        }
        let h = parseInt(tokens[0]);
        let m = parseInt(tokens[1]);
        let s = this.showSeconds ? parseInt(tokens[2]) : null;
        if (isNaN(h) || isNaN(m) || h > 23 || m > 59 || this.hourFormat == "12" && h > 12 || this.showSeconds && (isNaN(s) || s > 59)) {
          throw "Invalid time";
        } else {
          if (this.hourFormat == "12") {
            if (h !== 12 && this.pm) {
              h += 12;
            } else if (!this.pm && h === 12) {
              h -= 12;
            }
          }
          return {
            hour: h,
            minute: m,
            second: s
          };
        }
      }
      // Ported from jquery-ui datepicker parseDate
      parseDate(value, format) {
        if (format == null || value == null) {
          throw "Invalid arguments";
        }
        value = typeof value === "object" ? value.toString() : value + "";
        if (value === "") {
          return null;
        }
        let iFormat, dim, extra, iValue = 0, shortYearCutoff = typeof this.shortYearCutoff !== "string" ? this.shortYearCutoff : (/* @__PURE__ */ new Date()).getFullYear() % 100 + parseInt(this.shortYearCutoff, 10), year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = (match) => {
          let matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
          if (matches) {
            iFormat++;
          }
          return matches;
        }, getNumber = (match) => {
          let isDoubled = lookAhead(match), size = match === "@" ? 14 : match === "!" ? 20 : match === "y" && isDoubled ? 4 : match === "o" ? 3 : 2, minSize = match === "y" ? size : 1, digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits);
          if (!num) {
            throw "Missing number at position " + iValue;
          }
          iValue += num[0].length;
          return parseInt(num[0], 10);
        }, getName = (match, shortNames, longNames) => {
          let index = -1;
          let arr = lookAhead(match) ? longNames : shortNames;
          let names = [];
          for (let i = 0; i < arr.length; i++) {
            names.push([i, arr[i]]);
          }
          names.sort((a, b) => {
            return -(a[1].length - b[1].length);
          });
          for (let i = 0; i < names.length; i++) {
            let name = names[i][1];
            if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
              index = names[i][0];
              iValue += name.length;
              break;
            }
          }
          if (index !== -1) {
            return index + 1;
          } else {
            throw "Unknown name at position " + iValue;
          }
        }, checkLiteral = () => {
          if (value.charAt(iValue) !== format.charAt(iFormat)) {
            throw "Unexpected literal at position " + iValue;
          }
          iValue++;
        };
        if (this.view === "month") {
          day = 1;
        }
        for (iFormat = 0; iFormat < format.length; iFormat++) {
          if (literal) {
            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
              literal = false;
            } else {
              checkLiteral();
            }
          } else {
            switch (format.charAt(iFormat)) {
              case "d":
                day = getNumber("d");
                break;
              case "D":
                getName("D", this.getTranslation(TranslationKeys.DAY_NAMES_SHORT), this.getTranslation(TranslationKeys.DAY_NAMES));
                break;
              case "o":
                doy = getNumber("o");
                break;
              case "m":
                month = getNumber("m");
                break;
              case "M":
                month = getName("M", this.getTranslation(TranslationKeys.MONTH_NAMES_SHORT), this.getTranslation(TranslationKeys.MONTH_NAMES));
                break;
              case "y":
                year = getNumber("y");
                break;
              case "@":
                date = new Date(getNumber("@"));
                year = date.getFullYear();
                month = date.getMonth() + 1;
                day = date.getDate();
                break;
              case "!":
                date = new Date((getNumber("!") - this.ticksTo1970) / 1e4);
                year = date.getFullYear();
                month = date.getMonth() + 1;
                day = date.getDate();
                break;
              case "'":
                if (lookAhead("'")) {
                  checkLiteral();
                } else {
                  literal = true;
                }
                break;
              default:
                checkLiteral();
            }
          }
        }
        if (iValue < value.length) {
          extra = value.substr(iValue);
          if (!/^\s+/.test(extra)) {
            throw "Extra/unparsed characters found in date: " + extra;
          }
        }
        if (year === -1) {
          year = (/* @__PURE__ */ new Date()).getFullYear();
        } else if (year < 100) {
          year += (/* @__PURE__ */ new Date()).getFullYear() - (/* @__PURE__ */ new Date()).getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
        }
        if (doy > -1) {
          month = 1;
          day = doy;
          do {
            dim = this.getDaysCountInMonth(year, month - 1);
            if (day <= dim) {
              break;
            }
            month++;
            day -= dim;
          } while (true);
        }
        if (this.view === "year") {
          month = month === -1 ? 1 : month;
          day = day === -1 ? 1 : day;
        }
        date = this.daylightSavingAdjust(new Date(year, month - 1, day));
        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
          throw "Invalid date";
        }
        return date;
      }
      daylightSavingAdjust(date) {
        if (!date) {
          return null;
        }
        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
        return date;
      }
      updateFilledState() {
        this.filled = this.inputFieldValue && this.inputFieldValue != "";
      }
      isValidDateForTimeConstraints(selectedDate) {
        if (this.keepInvalid) {
          return true;
        }
        return (!this.minDate || selectedDate >= this.minDate) && (!this.maxDate || selectedDate <= this.maxDate);
      }
      onTodayButtonClick(event2) {
        const date = /* @__PURE__ */ new Date();
        const dateMeta = {
          day: date.getDate(),
          month: date.getMonth(),
          year: date.getFullYear(),
          otherMonth: date.getMonth() !== this.currentMonth || date.getFullYear() !== this.currentYear,
          today: true,
          selectable: true
        };
        this.createMonths(date.getMonth(), date.getFullYear());
        this.onDateSelect(event2, dateMeta);
        this.onTodayClick.emit(date);
      }
      onClearButtonClick(event2) {
        this.updateModel(null);
        this.updateInputfield();
        this.hideOverlay();
        this.onClearClick.emit(event2);
      }
      createResponsiveStyle() {
        if (this.numberOfMonths > 1 && this.responsiveOptions) {
          if (!this.responsiveStyleElement) {
            this.responsiveStyleElement = this.renderer.createElement("style");
            this.responsiveStyleElement.type = "text/css";
            this.renderer.appendChild(this.document.body, this.responsiveStyleElement);
          }
          let innerHTML = "";
          if (this.responsiveOptions) {
            let responsiveOptions = [...this.responsiveOptions].filter((o) => !!(o.breakpoint && o.numMonths)).sort((o1, o2) => -1 * o1.breakpoint.localeCompare(o2.breakpoint, void 0, {
              numeric: true
            }));
            for (let i = 0; i < responsiveOptions.length; i++) {
              let {
                breakpoint,
                numMonths
              } = responsiveOptions[i];
              let styles = `
                        .p-datepicker[${this.attributeSelector}] .p-datepicker-group:nth-child(${numMonths}) .p-datepicker-next {
                            display: inline-flex !important;
                        }
                    `;
              for (let j = numMonths; j < this.numberOfMonths; j++) {
                styles += `
                            .p-datepicker[${this.attributeSelector}] .p-datepicker-group:nth-child(${j + 1}) {
                                display: none !important;
                            }
                        `;
              }
              innerHTML += `
                        @media screen and (max-width: ${breakpoint}) {
                            ${styles}
                        }
                    `;
            }
          }
          this.responsiveStyleElement.innerHTML = innerHTML;
          setAttribute(this.responsiveStyleElement, "nonce", this.config?.csp()?.nonce);
        }
      }
      destroyResponsiveStyleElement() {
        if (this.responsiveStyleElement) {
          this.responsiveStyleElement.remove();
          this.responsiveStyleElement = null;
        }
      }
      bindDocumentClickListener() {
        if (!this.documentClickListener) {
          this.zone.runOutsideAngular(() => {
            const documentTarget = this.el ? this.el.nativeElement.ownerDocument : this.document;
            this.documentClickListener = this.renderer.listen(documentTarget, "mousedown", (event2) => {
              if (this.isOutsideClicked(event2) && this.overlayVisible) {
                this.zone.run(() => {
                  this.hideOverlay();
                  this.onClickOutside.emit(event2);
                  this.cd.markForCheck();
                });
              }
            });
          });
        }
      }
      unbindDocumentClickListener() {
        if (this.documentClickListener) {
          this.documentClickListener();
          this.documentClickListener = null;
        }
      }
      bindDocumentResizeListener() {
        if (!this.documentResizeListener && !this.touchUI) {
          this.documentResizeListener = this.renderer.listen(this.window, "resize", this.onWindowResize.bind(this));
        }
      }
      unbindDocumentResizeListener() {
        if (this.documentResizeListener) {
          this.documentResizeListener();
          this.documentResizeListener = null;
        }
      }
      bindScrollListener() {
        if (!this.scrollHandler) {
          this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerViewChild?.nativeElement, () => {
            if (this.overlayVisible) {
              this.hideOverlay();
            }
          });
        }
        this.scrollHandler.bindScrollListener();
      }
      unbindScrollListener() {
        if (this.scrollHandler) {
          this.scrollHandler.unbindScrollListener();
        }
      }
      isOutsideClicked(event2) {
        return !(this.el.nativeElement.isSameNode(event2.target) || this.isNavIconClicked(event2) || this.el.nativeElement.contains(event2.target) || this.overlay && this.overlay.contains(event2.target));
      }
      isNavIconClicked(event2) {
        return hasClass(event2.target, "p-datepicker-prev-button") || hasClass(event2.target, "p-datepicker-prev-icon") || hasClass(event2.target, "p-datepicker-next-button") || hasClass(event2.target, "p-datepicker-next-icon");
      }
      onWindowResize() {
        if (this.overlayVisible && !isTouchDevice()) {
          this.hideOverlay();
        }
      }
      onOverlayHide() {
        this.currentView = this.view;
        if (this.mask) {
          this.destroyMask();
        }
        this.unbindDocumentClickListener();
        this.unbindDocumentResizeListener();
        this.unbindScrollListener();
        this.overlay = null;
      }
      ngOnDestroy() {
        if (this.scrollHandler) {
          this.scrollHandler.destroy();
          this.scrollHandler = null;
        }
        if (this.translationSubscription) {
          this.translationSubscription.unsubscribe();
        }
        if (this.overlay && this.autoZIndex) {
          zindexutils.clear(this.overlay);
        }
        this.destroyResponsiveStyleElement();
        this.clearTimePickerTimer();
        this.restoreOverlayAppend();
        this.onOverlayHide();
        super.ngOnDestroy();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DatePicker,
        deps: [{
          token: NgZone
        }, {
          token: OverlayService
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _DatePicker,
        isStandalone: true,
        selector: "p-datePicker, p-datepicker, p-date-picker",
        inputs: {
          iconDisplay: "iconDisplay",
          style: "style",
          styleClass: "styleClass",
          inputStyle: "inputStyle",
          inputId: "inputId",
          name: "name",
          inputStyleClass: "inputStyleClass",
          placeholder: "placeholder",
          ariaLabelledBy: "ariaLabelledBy",
          ariaLabel: "ariaLabel",
          iconAriaLabel: "iconAriaLabel",
          disabled: ["disabled", "disabled", booleanAttribute],
          dateFormat: "dateFormat",
          multipleSeparator: "multipleSeparator",
          rangeSeparator: "rangeSeparator",
          inline: ["inline", "inline", booleanAttribute],
          showOtherMonths: ["showOtherMonths", "showOtherMonths", booleanAttribute],
          selectOtherMonths: ["selectOtherMonths", "selectOtherMonths", booleanAttribute],
          showIcon: ["showIcon", "showIcon", booleanAttribute],
          fluid: ["fluid", "fluid", booleanAttribute],
          icon: "icon",
          appendTo: "appendTo",
          readonlyInput: ["readonlyInput", "readonlyInput", booleanAttribute],
          shortYearCutoff: "shortYearCutoff",
          monthNavigator: ["monthNavigator", "monthNavigator", booleanAttribute],
          yearNavigator: ["yearNavigator", "yearNavigator", booleanAttribute],
          hourFormat: "hourFormat",
          timeOnly: ["timeOnly", "timeOnly", booleanAttribute],
          stepHour: ["stepHour", "stepHour", numberAttribute],
          stepMinute: ["stepMinute", "stepMinute", numberAttribute],
          stepSecond: ["stepSecond", "stepSecond", numberAttribute],
          showSeconds: ["showSeconds", "showSeconds", booleanAttribute],
          required: ["required", "required", booleanAttribute],
          showOnFocus: ["showOnFocus", "showOnFocus", booleanAttribute],
          showWeek: ["showWeek", "showWeek", booleanAttribute],
          startWeekFromFirstDayOfYear: "startWeekFromFirstDayOfYear",
          showClear: ["showClear", "showClear", booleanAttribute],
          dataType: "dataType",
          selectionMode: "selectionMode",
          maxDateCount: ["maxDateCount", "maxDateCount", numberAttribute],
          showButtonBar: ["showButtonBar", "showButtonBar", booleanAttribute],
          todayButtonStyleClass: "todayButtonStyleClass",
          clearButtonStyleClass: "clearButtonStyleClass",
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          autoZIndex: ["autoZIndex", "autoZIndex", booleanAttribute],
          baseZIndex: ["baseZIndex", "baseZIndex", numberAttribute],
          panelStyleClass: "panelStyleClass",
          panelStyle: "panelStyle",
          keepInvalid: ["keepInvalid", "keepInvalid", booleanAttribute],
          hideOnDateTimeSelect: ["hideOnDateTimeSelect", "hideOnDateTimeSelect", booleanAttribute],
          touchUI: ["touchUI", "touchUI", booleanAttribute],
          timeSeparator: "timeSeparator",
          focusTrap: ["focusTrap", "focusTrap", booleanAttribute],
          showTransitionOptions: "showTransitionOptions",
          hideTransitionOptions: "hideTransitionOptions",
          tabindex: ["tabindex", "tabindex", numberAttribute],
          variant: "variant",
          size: "size",
          minDate: "minDate",
          maxDate: "maxDate",
          disabledDates: "disabledDates",
          disabledDays: "disabledDays",
          yearRange: "yearRange",
          showTime: "showTime",
          responsiveOptions: "responsiveOptions",
          numberOfMonths: "numberOfMonths",
          firstDayOfWeek: "firstDayOfWeek",
          locale: "locale",
          view: "view",
          defaultDate: "defaultDate"
        },
        outputs: {
          onFocus: "onFocus",
          onBlur: "onBlur",
          onClose: "onClose",
          onSelect: "onSelect",
          onClear: "onClear",
          onInput: "onInput",
          onTodayClick: "onTodayClick",
          onClearClick: "onClearClick",
          onMonthChange: "onMonthChange",
          onYearChange: "onYearChange",
          onClickOutside: "onClickOutside",
          onShow: "onShow"
        },
        providers: [DATEPICKER_VALUE_ACCESSOR, DatePickerStyle],
        queries: [{
          propertyName: "dateTemplate",
          first: true,
          predicate: ["date"]
        }, {
          propertyName: "headerTemplate",
          first: true,
          predicate: ["header"]
        }, {
          propertyName: "footerTemplate",
          first: true,
          predicate: ["footer"]
        }, {
          propertyName: "disabledDateTemplate",
          first: true,
          predicate: ["disabledDate"]
        }, {
          propertyName: "decadeTemplate",
          first: true,
          predicate: ["decade"]
        }, {
          propertyName: "previousIconTemplate",
          first: true,
          predicate: ["previousicon"]
        }, {
          propertyName: "nextIconTemplate",
          first: true,
          predicate: ["nexticon"]
        }, {
          propertyName: "triggerIconTemplate",
          first: true,
          predicate: ["triggericon"]
        }, {
          propertyName: "clearIconTemplate",
          first: true,
          predicate: ["clearicon"]
        }, {
          propertyName: "decrementIconTemplate",
          first: true,
          predicate: ["decrementicon"]
        }, {
          propertyName: "incrementIconTemplate",
          first: true,
          predicate: ["incrementicon"]
        }, {
          propertyName: "inputIconTemplate",
          first: true,
          predicate: ["inputicon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "containerViewChild",
          first: true,
          predicate: ["container"],
          descendants: true
        }, {
          propertyName: "inputfieldViewChild",
          first: true,
          predicate: ["inputfield"],
          descendants: true
        }, {
          propertyName: "content",
          first: true,
          predicate: ["contentWrapper"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <span #container [ngClass]="rootClass" [ngStyle]="style" [class]="styleClass">
            <ng-template [ngIf]="!inline">
                <input
                    #inputfield
                    pInputText
                    [pSize]="size"
                    type="text"
                    role="combobox"
                    [attr.id]="inputId"
                    [attr.name]="name"
                    [attr.required]="required"
                    [attr.aria-required]="required"
                    aria-autocomplete="none"
                    aria-haspopup="dialog"
                    [attr.aria-expanded]="overlayVisible ?? false"
                    [attr.aria-controls]="overlayVisible ? panelId : null"
                    [attr.aria-labelledby]="ariaLabelledBy"
                    [attr.aria-label]="ariaLabel"
                    [value]="inputFieldValue"
                    (focus)="onInputFocus($event)"
                    (keydown)="onInputKeydown($event)"
                    (click)="onInputClick()"
                    (blur)="onInputBlur($event)"
                    [readonly]="readonlyInput"
                    (input)="onUserInput($event)"
                    [ngStyle]="inputStyle"
                    [class]="inputStyleClass"
                    [ngClass]="'p-datepicker-input'"
                    [placeholder]="placeholder || ''"
                    [disabled]="disabled"
                    [attr.tabindex]="tabindex"
                    [attr.inputmode]="touchUI ? 'off' : null"
                    autocomplete="off"
                    [pAutoFocus]="autofocus"
                    [variant]="variant"
                    [fluid]="hasFluid"
                />
                <ng-container *ngIf="showClear && !disabled && value != null">
                    <TimesIcon *ngIf="!clearIconTemplate && !_clearIconTemplate" [class]="'p-datepicker-clear-icon'" (click)="clear()" />
                    <span *ngIf="clearIconTemplate || _clearIconTemplate" class="p-datepicker-clear-icon" (click)="clear()">
                        <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate"></ng-template>
                    </span>
                </ng-container>
                <button
                    type="button"
                    [attr.aria-label]="iconButtonAriaLabel"
                    aria-haspopup="dialog"
                    [attr.aria-expanded]="overlayVisible ?? false"
                    [attr.aria-controls]="overlayVisible ? panelId : null"
                    *ngIf="showIcon && iconDisplay === 'button'"
                    (click)="onButtonClick($event, inputfield)"
                    class="p-datepicker-dropdown"
                    [disabled]="disabled"
                    tabindex="0"
                >
                    <span *ngIf="icon" [ngClass]="icon"></span>
                    <ng-container *ngIf="!icon">
                        <CalendarIcon *ngIf="!triggerIconTemplate && !_triggerIconTemplate" />
                        <ng-template *ngTemplateOutlet="triggerIconTemplate || _triggerIconTemplate"></ng-template>
                    </ng-container>
                </button>
                <ng-container *ngIf="iconDisplay === 'input' && showIcon">
                    <span class="p-datepicker-input-icon-container">
                        <CalendarIcon
                            (click)="onButtonClick($event)"
                            *ngIf="!inputIconTemplate && !_inputIconTemplate"
                            [ngClass]="{
                                'p-datepicker-input-icon': showOnFocus
                            }"
                        />

                        <ng-container *ngTemplateOutlet="inputIconTemplate || _inputIconTemplate; context: { clickCallBack: onButtonClick.bind(this) }"></ng-container>
                    </span>
                </ng-container>
            </ng-template>
            <div
                #contentWrapper
                [attr.id]="panelId"
                [class]="panelStyleClass"
                [ngStyle]="panelStyle"
                [ngClass]="panelClass"
                [@overlayAnimation]="{
                    value: 'visible',
                    params: { showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions }
                }"
                [attr.aria-label]="getTranslation('chooseDate')"
                [attr.role]="inline ? null : 'dialog'"
                [attr.aria-modal]="inline ? null : 'true'"
                [@.disabled]="inline === true"
                (@overlayAnimation.start)="onOverlayAnimationStart($event)"
                (@overlayAnimation.done)="onOverlayAnimationDone($event)"
                (click)="onOverlayClick($event)"
                *ngIf="inline || overlayVisible"
            >
                <ng-content select="p-header"></ng-content>
                <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate"></ng-container>
                <ng-container *ngIf="!timeOnly">
                    <div class="p-datepicker-calendar-container">
                        <div class="p-datepicker-calendar" *ngFor="let month of months; let i = index">
                            <div class="p-datepicker-header">
                                <p-button
                                    size="small"
                                    rounded
                                    text
                                    (keydown)="onContainerButtonKeydown($event)"
                                    styleClass="p-datepicker-prev-button p-button-icon-only"
                                    (onClick)="onPrevButtonClick($event)"
                                    [ngStyle]="{ visibility: i === 0 ? 'visible' : 'hidden' }"
                                    type="button"
                                    [ariaLabel]="prevIconAriaLabel"
                                >
                                    <ChevronLeftIcon *ngIf="!previousIconTemplate && !_previousIconTemplate" />
                                    <span *ngIf="previousIconTemplate || _previousIconTemplate">
                                        <ng-template *ngTemplateOutlet="previousIconTemplate || _previousIconTemplate"></ng-template>
                                    </span>
                                </p-button>
                                <div class="p-datepicker-title">
                                    <button
                                        *ngIf="currentView === 'date'"
                                        type="button"
                                        (click)="switchToMonthView($event)"
                                        (keydown)="onContainerButtonKeydown($event)"
                                        class="p-datepicker-select-month"
                                        [disabled]="switchViewButtonDisabled()"
                                        [attr.aria-label]="this.getTranslation('chooseMonth')"
                                        pRipple
                                    >
                                        {{ getMonthName(month.month) }}
                                    </button>
                                    <button
                                        *ngIf="currentView !== 'year'"
                                        type="button"
                                        (click)="switchToYearView($event)"
                                        (keydown)="onContainerButtonKeydown($event)"
                                        class="p-datepicker-select-year"
                                        [disabled]="switchViewButtonDisabled()"
                                        [attr.aria-label]="getTranslation('chooseYear')"
                                        pRipple
                                    >
                                        {{ getYear(month) }}
                                    </button>
                                    <span class="p-datepicker-decade" *ngIf="currentView === 'year'">
                                        <ng-container *ngIf="!decadeTemplate && !_decadeTemplate">{{ yearPickerValues()[0] }} - {{ yearPickerValues()[yearPickerValues().length - 1] }}</ng-container>
                                        <ng-container *ngTemplateOutlet="decadeTemplate || _decadeTemplate; context: { $implicit: yearPickerValues }"></ng-container>
                                    </span>
                                </div>
                                <p-button
                                    rounded
                                    text
                                    size="small"
                                    (keydown)="onContainerButtonKeydown($event)"
                                    styleClass="p-datepicker-next-button p-button-icon-only"
                                    (onClick)="onNextButtonClick($event)"
                                    [ngStyle]="{ visibility: i === months.length - 1 ? 'visible' : 'hidden' }"
                                    [ariaLabel]="nextIconAriaLabel"
                                >
                                    <ChevronRightIcon *ngIf="!nextIconTemplate && !_nextIconTemplate" />

                                    <span *ngIf="nextIconTemplate || _nextIconTemplate">
                                        <ng-template *ngTemplateOutlet="nextIconTemplate || _nextIconTemplate"></ng-template>
                                    </span>
                                </p-button>
                            </div>
                            <table class="p-datepicker-day-view" role="grid" *ngIf="currentView === 'date'">
                                <thead>
                                    <tr>
                                        <th *ngIf="showWeek" class="p-datepicker-weekheader p-disabled">
                                            <span>{{ getTranslation('weekHeader') }}</span>
                                        </th>
                                        <th class="p-datepicker-weekday-cell" scope="col" *ngFor="let weekDay of weekDays; let begin = first; let end = last">
                                            <span class="p-datepicker-weekday">{{ weekDay }}</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr *ngFor="let week of month.dates; let j = index">
                                        <td *ngIf="showWeek" class="p-datepicker-weeknumber">
                                            <span class="p-datepicker-weeklabel-container p-disabled">
                                                {{ month.weekNumbers[j] }}
                                            </span>
                                        </td>
                                        <td
                                            *ngFor="let date of week"
                                            [attr.aria-label]="date.day"
                                            [ngClass]="{
                                                'p-datepicker-day-cell': true,
                                                'p-datepicker-other-month': date.otherMonth,
                                                'p-datepicker-today': date.today
                                            }"
                                        >
                                            <ng-container *ngIf="date.otherMonth ? showOtherMonths : true">
                                                <span
                                                    [ngClass]="dayClass(date)"
                                                    (click)="onDateSelect($event, date)"
                                                    draggable="false"
                                                    [attr.data-date]="formatDateKey(formatDateMetaToDate(date))"
                                                    (keydown)="onDateCellKeydown($event, date, i)"
                                                    pRipple
                                                >
                                                    <ng-container *ngIf="!dateTemplate && !_dateTemplate && (date.selectable || (!disabledDateTemplate && !_disabledDateTemplate))">{{ date.day }}</ng-container>
                                                    <ng-container *ngIf="date.selectable || (!disabledDateTemplate && !_disabledDateTemplate)">
                                                        <ng-container *ngTemplateOutlet="dateTemplate || _dateTemplate; context: { $implicit: date }"></ng-container>
                                                    </ng-container>
                                                    <ng-container *ngIf="!date.selectable">
                                                        <ng-container *ngTemplateOutlet="disabledDateTemplate || _disabledDateTemplate; context: { $implicit: date }"></ng-container>
                                                    </ng-container>
                                                </span>
                                                <div *ngIf="isSelected(date)" class="p-hidden-accessible" aria-live="polite">
                                                    {{ date.day }}
                                                </div>
                                            </ng-container>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="p-datepicker-month-view" *ngIf="currentView === 'month'">
                        <span
                            *ngFor="let m of monthPickerValues(); let i = index"
                            (click)="onMonthSelect($event, i)"
                            (keydown)="onMonthCellKeydown($event, i)"
                            [ngClass]="{
                                'p-datepicker-month': true,
                                'p-datepicker-month-selected': isMonthSelected(i),
                                'p-disabled': isMonthDisabled(i)
                            }"
                            pRipple
                        >
                            {{ m }}
                            <div *ngIf="isMonthSelected(i)" class="p-hidden-accessible" aria-live="polite">
                                {{ m }}
                            </div>
                        </span>
                    </div>
                    <div class="p-datepicker-year-view" *ngIf="currentView === 'year'">
                        <span
                            *ngFor="let y of yearPickerValues()"
                            (click)="onYearSelect($event, y)"
                            (keydown)="onYearCellKeydown($event, y)"
                            [ngClass]="{
                                'p-datepicker-year': true,
                                'p-datepicker-year-selected': isYearSelected(y),
                                'p-disabled': isYearDisabled(y)
                            }"
                            pRipple
                        >
                            {{ y }}
                            <div *ngIf="isYearSelected(y)" class="p-hidden-accessible" aria-live="polite">
                                {{ y }}
                            </div>
                        </span>
                    </div>
                </ng-container>
                <div class="p-datepicker-time-picker" *ngIf="(showTime || timeOnly) && currentView === 'date'">
                    <div class="p-datepicker-hour-picker">
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="incrementHour($event)"
                            (keydown.space)="incrementHour($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 0, 1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('nextHour')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span><ng-container *ngIf="currentHour < 10">0</ng-container>{{ currentHour }}</span>
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="decrementHour($event)"
                            (keydown.space)="decrementHour($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 0, -1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('prevHour')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                        </p-button>
                    </div>
                    <div class="p-datepicker-separator">
                        <span>{{ timeSeparator }}</span>
                    </div>
                    <div class="p-datepicker-minute-picker">
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="incrementMinute($event)"
                            (keydown.space)="incrementMinute($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 1, 1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('nextMinute')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span><ng-container *ngIf="currentMinute < 10">0</ng-container>{{ currentMinute }}</span>
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="decrementMinute($event)"
                            (keydown.space)="decrementMinute($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 1, -1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('prevMinute')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />
                            <ng-container *ngIf="decrementIconTemplate || _decrementIconTemplate">
                                <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                            </ng-container>
                        </p-button>
                    </div>
                    <div class="p-datepicker-separator" *ngIf="showSeconds">
                        <span>{{ timeSeparator }}</span>
                    </div>
                    <div class="p-datepicker-second-picker" *ngIf="showSeconds">
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="incrementSecond($event)"
                            (keydown.space)="incrementSecond($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 2, 1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('nextSecond')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span><ng-container *ngIf="currentSecond < 10">0</ng-container>{{ currentSecond }}</span>
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="decrementSecond($event)"
                            (keydown.space)="decrementSecond($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 2, -1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('prevSecond')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                        </p-button>
                    </div>
                    <div class="p-datepicker-separator" *ngIf="hourFormat == '12'">
                        <span>{{ timeSeparator }}</span>
                    </div>
                    <div class="p-datepicker-ampm-picker" *ngIf="hourFormat == '12'">
                        <p-button
                            size="small"
                            text
                            rounded
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (onClick)="toggleAMPM($event)"
                            (keydown.enter)="toggleAMPM($event)"
                            [attr.aria-label]="getTranslation('am')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />
                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span>{{ pm ? 'PM' : 'AM' }}</span>
                        <p-button
                            size="small"
                            text
                            rounded
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (click)="toggleAMPM($event)"
                            (keydown.enter)="toggleAMPM($event)"
                            [attr.aria-label]="getTranslation('pm')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />
                            <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                        </p-button>
                    </div>
                </div>
                <div class="p-datepicker-buttonbar" *ngIf="showButtonBar">
                    <p-button size="small" styleClass="p-datepicker-today-button" [label]="getTranslation('today')" (keydown)="onContainerButtonKeydown($event)" (onClick)="onTodayButtonClick($event)" [ngClass]="todayButtonStyleClass" />
                    <p-button size="small" styleClass="p-datepicker-clear-button" [label]="getTranslation('clear')" (keydown)="onContainerButtonKeydown($event)" (onClick)="onClearButtonClick($event)" [ngClass]="clearButtonStyleClass" />
                </div>
                <ng-content select="p-footer"></ng-content>
                <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate"></ng-container>
            </div>
        </span>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgForOf,
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: Button,
          selector: "p-button",
          inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "raised", "rounded", "text", "plain", "severity", "outlined", "link", "tabindex", "size", "variant", "style", "styleClass", "badgeClass", "badgeSeverity", "ariaLabel", "autofocus", "fluid", "buttonProps"],
          outputs: ["onClick", "onFocus", "onBlur"]
        }, {
          kind: "directive",
          type: Ripple,
          selector: "[pRipple]"
        }, {
          kind: "component",
          type: ChevronLeftIcon,
          selector: "ChevronLeftIcon"
        }, {
          kind: "component",
          type: ChevronRightIcon,
          selector: "ChevronRightIcon"
        }, {
          kind: "component",
          type: ChevronUpIcon,
          selector: "ChevronUpIcon"
        }, {
          kind: "component",
          type: ChevronDownIcon,
          selector: "ChevronDownIcon"
        }, {
          kind: "component",
          type: TimesIcon,
          selector: "TimesIcon"
        }, {
          kind: "component",
          type: CalendarIcon,
          selector: "CalendarIcon"
        }, {
          kind: "directive",
          type: AutoFocus,
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "directive",
          type: InputText,
          selector: "[pInputText]",
          inputs: ["variant", "fluid", "pSize"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        animations: [trigger("overlayAnimation", [state("visibleTouchUI", style({
          transform: "translate(-50%,-50%)",
          opacity: 1
        })), transition("void => visible", [style({
          opacity: 0,
          transform: "scaleY(0.8)"
        }), animate("{{showTransitionParams}}", style({
          opacity: 1,
          transform: "*"
        }))]), transition("visible => void", [animate("{{hideTransitionParams}}", style({
          opacity: 0
        }))]), transition("void => visibleTouchUI", [style({
          opacity: 0,
          transform: "translate3d(-50%, -40%, 0) scale(0.9)"
        }), animate("{{showTransitionParams}}")]), transition("visibleTouchUI => void", [animate("{{hideTransitionParams}}", style({
          opacity: 0,
          transform: "translate3d(-50%, -40%, 0) scale(0.9)"
        }))])])],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: DatePicker,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-datePicker, p-datepicker, p-date-picker",
          standalone: true,
          imports: [CommonModule, Button, Ripple, ChevronLeftIcon, ChevronRightIcon, ChevronUpIcon, ChevronDownIcon, TimesIcon, CalendarIcon, AutoFocus, InputText, SharedModule],
          template: `
        <span #container [ngClass]="rootClass" [ngStyle]="style" [class]="styleClass">
            <ng-template [ngIf]="!inline">
                <input
                    #inputfield
                    pInputText
                    [pSize]="size"
                    type="text"
                    role="combobox"
                    [attr.id]="inputId"
                    [attr.name]="name"
                    [attr.required]="required"
                    [attr.aria-required]="required"
                    aria-autocomplete="none"
                    aria-haspopup="dialog"
                    [attr.aria-expanded]="overlayVisible ?? false"
                    [attr.aria-controls]="overlayVisible ? panelId : null"
                    [attr.aria-labelledby]="ariaLabelledBy"
                    [attr.aria-label]="ariaLabel"
                    [value]="inputFieldValue"
                    (focus)="onInputFocus($event)"
                    (keydown)="onInputKeydown($event)"
                    (click)="onInputClick()"
                    (blur)="onInputBlur($event)"
                    [readonly]="readonlyInput"
                    (input)="onUserInput($event)"
                    [ngStyle]="inputStyle"
                    [class]="inputStyleClass"
                    [ngClass]="'p-datepicker-input'"
                    [placeholder]="placeholder || ''"
                    [disabled]="disabled"
                    [attr.tabindex]="tabindex"
                    [attr.inputmode]="touchUI ? 'off' : null"
                    autocomplete="off"
                    [pAutoFocus]="autofocus"
                    [variant]="variant"
                    [fluid]="hasFluid"
                />
                <ng-container *ngIf="showClear && !disabled && value != null">
                    <TimesIcon *ngIf="!clearIconTemplate && !_clearIconTemplate" [class]="'p-datepicker-clear-icon'" (click)="clear()" />
                    <span *ngIf="clearIconTemplate || _clearIconTemplate" class="p-datepicker-clear-icon" (click)="clear()">
                        <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate"></ng-template>
                    </span>
                </ng-container>
                <button
                    type="button"
                    [attr.aria-label]="iconButtonAriaLabel"
                    aria-haspopup="dialog"
                    [attr.aria-expanded]="overlayVisible ?? false"
                    [attr.aria-controls]="overlayVisible ? panelId : null"
                    *ngIf="showIcon && iconDisplay === 'button'"
                    (click)="onButtonClick($event, inputfield)"
                    class="p-datepicker-dropdown"
                    [disabled]="disabled"
                    tabindex="0"
                >
                    <span *ngIf="icon" [ngClass]="icon"></span>
                    <ng-container *ngIf="!icon">
                        <CalendarIcon *ngIf="!triggerIconTemplate && !_triggerIconTemplate" />
                        <ng-template *ngTemplateOutlet="triggerIconTemplate || _triggerIconTemplate"></ng-template>
                    </ng-container>
                </button>
                <ng-container *ngIf="iconDisplay === 'input' && showIcon">
                    <span class="p-datepicker-input-icon-container">
                        <CalendarIcon
                            (click)="onButtonClick($event)"
                            *ngIf="!inputIconTemplate && !_inputIconTemplate"
                            [ngClass]="{
                                'p-datepicker-input-icon': showOnFocus
                            }"
                        />

                        <ng-container *ngTemplateOutlet="inputIconTemplate || _inputIconTemplate; context: { clickCallBack: onButtonClick.bind(this) }"></ng-container>
                    </span>
                </ng-container>
            </ng-template>
            <div
                #contentWrapper
                [attr.id]="panelId"
                [class]="panelStyleClass"
                [ngStyle]="panelStyle"
                [ngClass]="panelClass"
                [@overlayAnimation]="{
                    value: 'visible',
                    params: { showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions }
                }"
                [attr.aria-label]="getTranslation('chooseDate')"
                [attr.role]="inline ? null : 'dialog'"
                [attr.aria-modal]="inline ? null : 'true'"
                [@.disabled]="inline === true"
                (@overlayAnimation.start)="onOverlayAnimationStart($event)"
                (@overlayAnimation.done)="onOverlayAnimationDone($event)"
                (click)="onOverlayClick($event)"
                *ngIf="inline || overlayVisible"
            >
                <ng-content select="p-header"></ng-content>
                <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate"></ng-container>
                <ng-container *ngIf="!timeOnly">
                    <div class="p-datepicker-calendar-container">
                        <div class="p-datepicker-calendar" *ngFor="let month of months; let i = index">
                            <div class="p-datepicker-header">
                                <p-button
                                    size="small"
                                    rounded
                                    text
                                    (keydown)="onContainerButtonKeydown($event)"
                                    styleClass="p-datepicker-prev-button p-button-icon-only"
                                    (onClick)="onPrevButtonClick($event)"
                                    [ngStyle]="{ visibility: i === 0 ? 'visible' : 'hidden' }"
                                    type="button"
                                    [ariaLabel]="prevIconAriaLabel"
                                >
                                    <ChevronLeftIcon *ngIf="!previousIconTemplate && !_previousIconTemplate" />
                                    <span *ngIf="previousIconTemplate || _previousIconTemplate">
                                        <ng-template *ngTemplateOutlet="previousIconTemplate || _previousIconTemplate"></ng-template>
                                    </span>
                                </p-button>
                                <div class="p-datepicker-title">
                                    <button
                                        *ngIf="currentView === 'date'"
                                        type="button"
                                        (click)="switchToMonthView($event)"
                                        (keydown)="onContainerButtonKeydown($event)"
                                        class="p-datepicker-select-month"
                                        [disabled]="switchViewButtonDisabled()"
                                        [attr.aria-label]="this.getTranslation('chooseMonth')"
                                        pRipple
                                    >
                                        {{ getMonthName(month.month) }}
                                    </button>
                                    <button
                                        *ngIf="currentView !== 'year'"
                                        type="button"
                                        (click)="switchToYearView($event)"
                                        (keydown)="onContainerButtonKeydown($event)"
                                        class="p-datepicker-select-year"
                                        [disabled]="switchViewButtonDisabled()"
                                        [attr.aria-label]="getTranslation('chooseYear')"
                                        pRipple
                                    >
                                        {{ getYear(month) }}
                                    </button>
                                    <span class="p-datepicker-decade" *ngIf="currentView === 'year'">
                                        <ng-container *ngIf="!decadeTemplate && !_decadeTemplate">{{ yearPickerValues()[0] }} - {{ yearPickerValues()[yearPickerValues().length - 1] }}</ng-container>
                                        <ng-container *ngTemplateOutlet="decadeTemplate || _decadeTemplate; context: { $implicit: yearPickerValues }"></ng-container>
                                    </span>
                                </div>
                                <p-button
                                    rounded
                                    text
                                    size="small"
                                    (keydown)="onContainerButtonKeydown($event)"
                                    styleClass="p-datepicker-next-button p-button-icon-only"
                                    (onClick)="onNextButtonClick($event)"
                                    [ngStyle]="{ visibility: i === months.length - 1 ? 'visible' : 'hidden' }"
                                    [ariaLabel]="nextIconAriaLabel"
                                >
                                    <ChevronRightIcon *ngIf="!nextIconTemplate && !_nextIconTemplate" />

                                    <span *ngIf="nextIconTemplate || _nextIconTemplate">
                                        <ng-template *ngTemplateOutlet="nextIconTemplate || _nextIconTemplate"></ng-template>
                                    </span>
                                </p-button>
                            </div>
                            <table class="p-datepicker-day-view" role="grid" *ngIf="currentView === 'date'">
                                <thead>
                                    <tr>
                                        <th *ngIf="showWeek" class="p-datepicker-weekheader p-disabled">
                                            <span>{{ getTranslation('weekHeader') }}</span>
                                        </th>
                                        <th class="p-datepicker-weekday-cell" scope="col" *ngFor="let weekDay of weekDays; let begin = first; let end = last">
                                            <span class="p-datepicker-weekday">{{ weekDay }}</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr *ngFor="let week of month.dates; let j = index">
                                        <td *ngIf="showWeek" class="p-datepicker-weeknumber">
                                            <span class="p-datepicker-weeklabel-container p-disabled">
                                                {{ month.weekNumbers[j] }}
                                            </span>
                                        </td>
                                        <td
                                            *ngFor="let date of week"
                                            [attr.aria-label]="date.day"
                                            [ngClass]="{
                                                'p-datepicker-day-cell': true,
                                                'p-datepicker-other-month': date.otherMonth,
                                                'p-datepicker-today': date.today
                                            }"
                                        >
                                            <ng-container *ngIf="date.otherMonth ? showOtherMonths : true">
                                                <span
                                                    [ngClass]="dayClass(date)"
                                                    (click)="onDateSelect($event, date)"
                                                    draggable="false"
                                                    [attr.data-date]="formatDateKey(formatDateMetaToDate(date))"
                                                    (keydown)="onDateCellKeydown($event, date, i)"
                                                    pRipple
                                                >
                                                    <ng-container *ngIf="!dateTemplate && !_dateTemplate && (date.selectable || (!disabledDateTemplate && !_disabledDateTemplate))">{{ date.day }}</ng-container>
                                                    <ng-container *ngIf="date.selectable || (!disabledDateTemplate && !_disabledDateTemplate)">
                                                        <ng-container *ngTemplateOutlet="dateTemplate || _dateTemplate; context: { $implicit: date }"></ng-container>
                                                    </ng-container>
                                                    <ng-container *ngIf="!date.selectable">
                                                        <ng-container *ngTemplateOutlet="disabledDateTemplate || _disabledDateTemplate; context: { $implicit: date }"></ng-container>
                                                    </ng-container>
                                                </span>
                                                <div *ngIf="isSelected(date)" class="p-hidden-accessible" aria-live="polite">
                                                    {{ date.day }}
                                                </div>
                                            </ng-container>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="p-datepicker-month-view" *ngIf="currentView === 'month'">
                        <span
                            *ngFor="let m of monthPickerValues(); let i = index"
                            (click)="onMonthSelect($event, i)"
                            (keydown)="onMonthCellKeydown($event, i)"
                            [ngClass]="{
                                'p-datepicker-month': true,
                                'p-datepicker-month-selected': isMonthSelected(i),
                                'p-disabled': isMonthDisabled(i)
                            }"
                            pRipple
                        >
                            {{ m }}
                            <div *ngIf="isMonthSelected(i)" class="p-hidden-accessible" aria-live="polite">
                                {{ m }}
                            </div>
                        </span>
                    </div>
                    <div class="p-datepicker-year-view" *ngIf="currentView === 'year'">
                        <span
                            *ngFor="let y of yearPickerValues()"
                            (click)="onYearSelect($event, y)"
                            (keydown)="onYearCellKeydown($event, y)"
                            [ngClass]="{
                                'p-datepicker-year': true,
                                'p-datepicker-year-selected': isYearSelected(y),
                                'p-disabled': isYearDisabled(y)
                            }"
                            pRipple
                        >
                            {{ y }}
                            <div *ngIf="isYearSelected(y)" class="p-hidden-accessible" aria-live="polite">
                                {{ y }}
                            </div>
                        </span>
                    </div>
                </ng-container>
                <div class="p-datepicker-time-picker" *ngIf="(showTime || timeOnly) && currentView === 'date'">
                    <div class="p-datepicker-hour-picker">
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="incrementHour($event)"
                            (keydown.space)="incrementHour($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 0, 1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('nextHour')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span><ng-container *ngIf="currentHour < 10">0</ng-container>{{ currentHour }}</span>
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="decrementHour($event)"
                            (keydown.space)="decrementHour($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 0, -1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('prevHour')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                        </p-button>
                    </div>
                    <div class="p-datepicker-separator">
                        <span>{{ timeSeparator }}</span>
                    </div>
                    <div class="p-datepicker-minute-picker">
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="incrementMinute($event)"
                            (keydown.space)="incrementMinute($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 1, 1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('nextMinute')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span><ng-container *ngIf="currentMinute < 10">0</ng-container>{{ currentMinute }}</span>
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="decrementMinute($event)"
                            (keydown.space)="decrementMinute($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 1, -1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('prevMinute')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />
                            <ng-container *ngIf="decrementIconTemplate || _decrementIconTemplate">
                                <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                            </ng-container>
                        </p-button>
                    </div>
                    <div class="p-datepicker-separator" *ngIf="showSeconds">
                        <span>{{ timeSeparator }}</span>
                    </div>
                    <div class="p-datepicker-second-picker" *ngIf="showSeconds">
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="incrementSecond($event)"
                            (keydown.space)="incrementSecond($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 2, 1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('nextSecond')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span><ng-container *ngIf="currentSecond < 10">0</ng-container>{{ currentSecond }}</span>
                        <p-button
                            rounded
                            text
                            size="small"
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (keydown.enter)="decrementSecond($event)"
                            (keydown.space)="decrementSecond($event)"
                            (mousedown)="onTimePickerElementMouseDown($event, 2, -1)"
                            (mouseup)="onTimePickerElementMouseUp($event)"
                            (keyup.enter)="onTimePickerElementMouseUp($event)"
                            (keyup.space)="onTimePickerElementMouseUp($event)"
                            (mouseleave)="onTimePickerElementMouseLeave()"
                            [attr.aria-label]="getTranslation('prevSecond')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />

                            <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                        </p-button>
                    </div>
                    <div class="p-datepicker-separator" *ngIf="hourFormat == '12'">
                        <span>{{ timeSeparator }}</span>
                    </div>
                    <div class="p-datepicker-ampm-picker" *ngIf="hourFormat == '12'">
                        <p-button
                            size="small"
                            text
                            rounded
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (onClick)="toggleAMPM($event)"
                            (keydown.enter)="toggleAMPM($event)"
                            [attr.aria-label]="getTranslation('am')"
                        >
                            <ChevronUpIcon *ngIf="!incrementIconTemplate && !_incrementIconTemplate" />
                            <ng-template *ngTemplateOutlet="incrementIconTemplate || _incrementIconTemplate"></ng-template>
                        </p-button>
                        <span>{{ pm ? 'PM' : 'AM' }}</span>
                        <p-button
                            size="small"
                            text
                            rounded
                            styleClass="p-datepicker-increment-button p-button-icon-only"
                            (keydown)="onContainerButtonKeydown($event)"
                            (click)="toggleAMPM($event)"
                            (keydown.enter)="toggleAMPM($event)"
                            [attr.aria-label]="getTranslation('pm')"
                        >
                            <ChevronDownIcon *ngIf="!decrementIconTemplate && !_decrementIconTemplate" />
                            <ng-template *ngTemplateOutlet="decrementIconTemplate || _decrementIconTemplate"></ng-template>
                        </p-button>
                    </div>
                </div>
                <div class="p-datepicker-buttonbar" *ngIf="showButtonBar">
                    <p-button size="small" styleClass="p-datepicker-today-button" [label]="getTranslation('today')" (keydown)="onContainerButtonKeydown($event)" (onClick)="onTodayButtonClick($event)" [ngClass]="todayButtonStyleClass" />
                    <p-button size="small" styleClass="p-datepicker-clear-button" [label]="getTranslation('clear')" (keydown)="onContainerButtonKeydown($event)" (onClick)="onClearButtonClick($event)" [ngClass]="clearButtonStyleClass" />
                </div>
                <ng-content select="p-footer"></ng-content>
                <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate"></ng-container>
            </div>
        </span>
    `,
          animations: [trigger("overlayAnimation", [state("visibleTouchUI", style({
            transform: "translate(-50%,-50%)",
            opacity: 1
          })), transition("void => visible", [style({
            opacity: 0,
            transform: "scaleY(0.8)"
          }), animate("{{showTransitionParams}}", style({
            opacity: 1,
            transform: "*"
          }))]), transition("visible => void", [animate("{{hideTransitionParams}}", style({
            opacity: 0
          }))]), transition("void => visibleTouchUI", [style({
            opacity: 0,
            transform: "translate3d(-50%, -40%, 0) scale(0.9)"
          }), animate("{{showTransitionParams}}")]), transition("visibleTouchUI => void", [animate("{{hideTransitionParams}}", style({
            opacity: 0,
            transform: "translate3d(-50%, -40%, 0) scale(0.9)"
          }))])])],
          providers: [DATEPICKER_VALUE_ACCESSOR, DatePickerStyle],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: NgZone
      }, {
        type: OverlayService
      }],
      propDecorators: {
        iconDisplay: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        inputStyle: [{
          type: Input
        }],
        inputId: [{
          type: Input
        }],
        name: [{
          type: Input
        }],
        inputStyleClass: [{
          type: Input
        }],
        placeholder: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        iconAriaLabel: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        dateFormat: [{
          type: Input
        }],
        multipleSeparator: [{
          type: Input
        }],
        rangeSeparator: [{
          type: Input
        }],
        inline: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showOtherMonths: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        selectOtherMonths: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showIcon: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        icon: [{
          type: Input
        }],
        appendTo: [{
          type: Input
        }],
        readonlyInput: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        shortYearCutoff: [{
          type: Input
        }],
        monthNavigator: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        yearNavigator: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        hourFormat: [{
          type: Input
        }],
        timeOnly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        stepHour: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        stepMinute: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        stepSecond: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        showSeconds: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        required: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showOnFocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showWeek: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        startWeekFromFirstDayOfYear: [{
          type: Input
        }],
        showClear: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        dataType: [{
          type: Input
        }],
        selectionMode: [{
          type: Input
        }],
        maxDateCount: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        showButtonBar: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        todayButtonStyleClass: [{
          type: Input
        }],
        clearButtonStyleClass: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autoZIndex: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        baseZIndex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        panelStyleClass: [{
          type: Input
        }],
        panelStyle: [{
          type: Input
        }],
        keepInvalid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        hideOnDateTimeSelect: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        touchUI: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        timeSeparator: [{
          type: Input
        }],
        focusTrap: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showTransitionOptions: [{
          type: Input
        }],
        hideTransitionOptions: [{
          type: Input
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        variant: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        minDate: [{
          type: Input
        }],
        maxDate: [{
          type: Input
        }],
        disabledDates: [{
          type: Input
        }],
        disabledDays: [{
          type: Input
        }],
        yearRange: [{
          type: Input
        }],
        showTime: [{
          type: Input
        }],
        responsiveOptions: [{
          type: Input
        }],
        numberOfMonths: [{
          type: Input
        }],
        firstDayOfWeek: [{
          type: Input
        }],
        locale: [{
          type: Input
        }],
        view: [{
          type: Input
        }],
        defaultDate: [{
          type: Input
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        onClose: [{
          type: Output
        }],
        onSelect: [{
          type: Output
        }],
        onClear: [{
          type: Output
        }],
        onInput: [{
          type: Output
        }],
        onTodayClick: [{
          type: Output
        }],
        onClearClick: [{
          type: Output
        }],
        onMonthChange: [{
          type: Output
        }],
        onYearChange: [{
          type: Output
        }],
        onClickOutside: [{
          type: Output
        }],
        onShow: [{
          type: Output
        }],
        containerViewChild: [{
          type: ViewChild,
          args: ["container", {
            static: false
          }]
        }],
        inputfieldViewChild: [{
          type: ViewChild,
          args: ["inputfield", {
            static: false
          }]
        }],
        content: [{
          type: ViewChild,
          args: ["contentWrapper", {
            static: false
          }]
        }],
        dateTemplate: [{
          type: ContentChild,
          args: ["date", {
            descendants: false
          }]
        }],
        headerTemplate: [{
          type: ContentChild,
          args: ["header", {
            descendants: false
          }]
        }],
        footerTemplate: [{
          type: ContentChild,
          args: ["footer", {
            descendants: false
          }]
        }],
        disabledDateTemplate: [{
          type: ContentChild,
          args: ["disabledDate", {
            descendants: false
          }]
        }],
        decadeTemplate: [{
          type: ContentChild,
          args: ["decade", {
            descendants: false
          }]
        }],
        previousIconTemplate: [{
          type: ContentChild,
          args: ["previousicon", {
            descendants: false
          }]
        }],
        nextIconTemplate: [{
          type: ContentChild,
          args: ["nexticon", {
            descendants: false
          }]
        }],
        triggerIconTemplate: [{
          type: ContentChild,
          args: ["triggericon", {
            descendants: false
          }]
        }],
        clearIconTemplate: [{
          type: ContentChild,
          args: ["clearicon", {
            descendants: false
          }]
        }],
        decrementIconTemplate: [{
          type: ContentChild,
          args: ["decrementicon", {
            descendants: false
          }]
        }],
        incrementIconTemplate: [{
          type: ContentChild,
          args: ["incrementicon", {
            descendants: false
          }]
        }],
        inputIconTemplate: [{
          type: ContentChild,
          args: ["inputicon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    DatePickerModule = class _DatePickerModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DatePickerModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DatePickerModule,
        imports: [DatePicker, SharedModule],
        exports: [DatePicker, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DatePickerModule,
        imports: [DatePicker, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: DatePickerModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [DatePicker, SharedModule],
          exports: [DatePicker, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-inputnumber.mjs
var theme7, classes7, InputNumberStyle, InputNumberClasses, INPUTNUMBER_VALUE_ACCESSOR, InputNumber, InputNumberModule;
var init_primeng_inputnumber = __esm({
  "node_modules/primeng/fesm2022/primeng-inputnumber.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_utils();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_basecomponent();
    init_primeng_icons();
    init_primeng_inputtext();
    init_primeng_base();
    theme7 = ({
      dt
    }) => `
.p-inputnumber {
    display: inline-flex;
    position: relative;
}

.p-inputnumber-button {
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 0 0 auto;
    cursor: pointer;
    background: ${dt("inputnumber.button.background")};
    color: ${dt("inputnumber.button.color")};
    width: ${dt("inputnumber.button.width")};
    transition: background ${dt("inputnumber.transition.duration")}, color ${dt("inputnumber.transition.duration")}, border-color ${dt("inputnumber.transition.duration")}, outline-color ${dt("inputnumber.transition.duration")};
}

.p-inputnumber-clear-icon {
    position: absolute;
    top: 50%;
    margin-top: -0.5rem;
    cursor: pointer;
    right: 0.75rem;
    color: ${dt("inputnumber.button.color")};
}

.p-inputnumber-button:hover {
    background: ${dt("inputnumber.button.hover.background")};
    color: ${dt("inputnumber.button.hover.color")};
}

.p-inputnumber-button:active {
    background: ${dt("inputnumber.button.active.background")};
    color: ${dt("inputnumber.button.active.color")};
}

.p-inputnumber-stacked .p-inputnumber-button {
    position: relative;
    border: 0 none;
}

.p-inputnumber-stacked .p-inputnumber-button-group {
    display: flex;
    flex-direction: column;
    position: absolute;
    inset-block-start: 1px;
    inset-inline-end: 1px;
    height: calc(100% - 2px);
    z-index: 1;
}

.p-inputnumber-stacked .p-inputnumber-increment-button {
    padding: 0;
    border-start-end-radius: calc(${dt("inputnumber.button.border.radius")} - 1px);
}

.p-inputnumber-stacked .p-inputnumber-decrement-button {
    padding: 0;
    border-end-end-radius: calc(${dt("inputnumber.button.border.radius")} - 1px);
}

.p-inputnumber-stacked .p-inputnumber-button {
    flex: 1 1 auto;
    border: 0 none;
}

.p-inputnumber-horizontal .p-inputnumber-button {
    border: 1px solid ${dt("inputnumber.button.border.color")};
}

.p-inputnumber-horizontal .p-inputnumber-button:hover {
    border-color: ${dt("inputnumber.button.hover.border.color")};
}

.p-inputnumber-horizontal .p-inputnumber-button:active {
    border-color: ${dt("inputnumber.button.active.border.color")};
}

.p-inputnumber-horizontal .p-inputnumber-increment-button {
    order: 3;
    border-start-end-radius: ${dt("inputnumber.button.border.radius")};
    border-end-end-radius: ${dt("inputnumber.button.border.radius")};
    border-inline-start: 0 none;
}

.p-inputnumber-horizontal .p-inputnumber-input {
    order: 2;
    border-radius: 0;
}

.p-inputnumber-horizontal .p-inputnumber-decrement-button {
    order: 1;
    border-start-start-radius: ${dt("inputnumber.button.border.radius")};
    border-end-start-radius: ${dt("inputnumber.button.border.radius")};
    border-inline-end: 0 none;
}

.p-floatlabel:has(.p-inputnumber-horizontal) label {
    margin-inline-start: ${dt("inputnumber.button.width")};
}

.p-inputnumber-vertical {
    flex-direction: column;
}

.p-inputnumber-vertical .p-inputnumber-button {
    border: 1px solid ${dt("inputnumber.button.border.color")};
    padding-block: ${dt("inputnumber.button.vertical.padding")};
    padding-inline: 0;
}

.p-inputnumber-vertical .p-inputnumber-button:hover {
    border-color: ${dt("inputnumber.button.hover.border.color")};
}

.p-inputnumber-vertical .p-inputnumber-button:active {
    border-color: ${dt("inputnumber.button.active.border.color")};
}

.p-inputnumber-vertical .p-inputnumber-increment-button {
    order: 1;
    border-start-start-radius: ${dt("inputnumber.button.border.radius")};
    border-start-end-radius: ${dt("inputnumber.button.border.radius")};
    width: 100%;
    border-block-end: 0 none;
}

.p-inputnumber-vertical .p-inputnumber-input {
    order: 2;
    border-radius: 0;
    text-align: center;
}

.p-inputnumber-vertical .p-inputnumber-decrement-button {
    order: 3;
    border-end-start-radius: ${dt("inputnumber.button.border.radius")};
    border-end-end-radius: ${dt("inputnumber.button.border.radius")};
    width: 100%;
    border-block-start: 0 none;
}

.p-inputnumber-input {
    flex: 1 1 auto;
}

.p-inputnumber-fluid {
    width: 100%;
}

.p-inputnumber-fluid .p-inputnumber-input {
    width: 1%;
}

.p-inputnumber-fluid.p-inputnumber-vertical .p-inputnumber-input {
    width: 100%;
}

.p-inputnumber:has(.p-inputtext-sm) .p-inputnumber-button .p-icon {
    font-size: ${dt("form.field.sm.font.size")};
    width: ${dt("form.field.sm.font.size")};
    height: ${dt("form.field.sm.font.size")};
}

.p-inputnumber:has(.p-inputtext-lg) .p-inputnumber-button .p-icon {
    font-size: ${dt("form.field.lg.font.size")};
    width: ${dt("form.field.lg.font.size")};
    height: ${dt("form.field.lg.font.size")};
}

p-inputNumber.ng-invalid.ng-dirty > .p-inputtext,
p-input-number.ng-invalid.ng-dirty > .p-inputtext,
p-inputnumber.ng-invalid.ng-dirty > .p-inputtext {
    border-color: ${dt("inputtext.invalid.border.color")};
}

p-inputNumber.ng-invalid.ng-dirty > .p-inputtext:enabled:focus,
p-input-number.ng-invalid.ng-dirty > .p-inputtext:enabled:focus,
p-inputnumber.ng-invalid.ng-dirty > .p-inputtext:enabled:focus {
    border-color: ${dt("inputtext.focus.border.color")};
}

p-inputNumber.ng-invalid.ng-dirty > .p-inputtext::placeholder,
p-input-number.ng-invalid.ng-dirty > .p-inputtext::placeholder,
p-inputnumber.ng-invalid.ng-dirty > .p-inputtext::placeholder {
    color: ${dt("inputtext.invalid.placeholder.color")};
}
`;
    classes7 = {
      root: ({
        instance
      }) => ({
        "p-inputnumber p-component p-inputwrapper": true,
        "p-inputwrapper-filled": instance.filled || instance.allowEmpty === false,
        "p-inputwrapper-focus": instance.focused,
        "p-inputnumber-stacked": instance.showButtons && instance.buttonLayout === "stacked",
        "p-inputnumber-horizontal": instance.showButtons && instance.buttonLayout === "horizontal",
        "p-inputnumber-vertical": instance.showButtons && instance.buttonLayout === "vertical",
        "p-inputnumber-fluid": instance.hasFluid
      }),
      pcInput: "p-inputnumber-input",
      buttonGroup: "p-inputnumber-button-group",
      incrementButton: ({
        instance
      }) => ({
        "p-inputnumber-button p-inputnumber-increment-button": true,
        "p-disabled": instance.showButtons && instance.max !== null && instance.maxlength
      }),
      decrementButton: ({
        instance
      }) => ({
        "p-inputnumber-button p-inputnumber-decrement-button": true,
        "p-disabled": instance.showButtons && instance.min !== null && instance.minlength
      })
    };
    InputNumberStyle = class _InputNumberStyle extends BaseStyle {
      name = "inputnumber";
      theme = theme7;
      classes = classes7;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputNumberStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputNumberStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputNumberStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(InputNumberClasses2) {
      InputNumberClasses2["root"] = "p-inputnumber";
      InputNumberClasses2["pcInput"] = "p-inputnumber-input";
      InputNumberClasses2["buttonGroup"] = "p-inputnumber-button-group";
      InputNumberClasses2["incrementButton"] = "p-inputnumber-increment-button";
      InputNumberClasses2["decrementButton"] = "p-inputnumber-decrement-button";
    })(InputNumberClasses || (InputNumberClasses = {}));
    INPUTNUMBER_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => InputNumber),
      multi: true
    };
    InputNumber = class _InputNumber extends BaseComponent {
      injector;
      /**
       * Displays spinner buttons.
       * @group Props
       */
      showButtons = false;
      /**
       * Whether to format the value.
       * @group Props
       */
      format = true;
      /**
       * Layout of the buttons, valid values are "stacked" (default), "horizontal" and "vertical".
       * @group Props
       */
      buttonLayout = "stacked";
      /**
       * Identifier of the focus input to match a label defined for the component.
       * @group Props
       */
      inputId;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Advisory information to display on input.
       * @group Props
       */
      placeholder;
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * Maximum number of character allows in the input field.
       * @group Props
       */
      maxlength;
      /**
       * Specifies tab order of the element.
       * @group Props
       */
      tabindex;
      /**
       * Title text of the input text.
       * @group Props
       */
      title;
      /**
       * Specifies one or more IDs in the DOM that labels the input field.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Specifies one or more IDs in the DOM that describes the input field.
       * @group Props
       */
      ariaDescribedBy;
      /**
       * Used to define a string that labels the input element.
       * @group Props
       */
      ariaLabel;
      /**
       * Used to indicate that user input is required on an element before a form can be submitted.
       * @group Props
       */
      ariaRequired;
      /**
       * Name of the input field.
       * @group Props
       */
      name;
      /**
       * Indicates that whether the input field is required.
       * @group Props
       */
      required;
      /**
       * Used to define a string that autocomplete attribute the current element.
       * @group Props
       */
      autocomplete;
      /**
       * Mininum boundary value.
       * @group Props
       */
      min;
      /**
       * Maximum boundary value.
       * @group Props
       */
      max;
      /**
       * Style class of the increment button.
       * @group Props
       */
      incrementButtonClass;
      /**
       * Style class of the decrement button.
       * @group Props
       */
      decrementButtonClass;
      /**
       * Style class of the increment button.
       * @group Props
       */
      incrementButtonIcon;
      /**
       * Style class of the decrement button.
       * @group Props
       */
      decrementButtonIcon;
      /**
       * When present, it specifies that an input field is read-only.
       * @group Props
       */
      readonly = false;
      /**
       * Step factor to increment/decrement the value.
       * @group Props
       */
      step = 1;
      /**
       * Determines whether the input field is empty.
       * @group Props
       */
      allowEmpty = true;
      /**
       * Locale to be used in formatting.
       * @group Props
       */
      locale;
      /**
       * The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". See Locale Negotiation for details.
       * @group Props
       */
      localeMatcher;
      /**
       * Defines the behavior of the component, valid values are "decimal" and "currency".
       * @group Props
       */
      mode = "decimal";
      /**
       * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. There is no default value; if the style is "currency", the currency property must be provided.
       * @group Props
       */
      currency;
      /**
       * How to display the currency in currency formatting. Possible values are "symbol" to use a localized currency symbol such as €, ü"code" to use the ISO currency code, "name" to use a localized currency name such as "dollar"; the default is "symbol".
       * @group Props
       */
      currencyDisplay;
      /**
       * Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
       * @group Props
       */
      useGrouping = true;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information).
       * @group Props
       */
      minFractionDigits;
      /**
       * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information).
       * @group Props
       */
      maxFractionDigits;
      /**
       * Text to display before the value.
       * @group Props
       */
      prefix;
      /**
       * Text to display after the value.
       * @group Props
       */
      suffix;
      /**
       * Inline style of the input field.
       * @group Props
       */
      inputStyle;
      /**
       * Style class of the input field.
       * @group Props
       */
      inputStyleClass;
      /**
       * When enabled, a clear icon is displayed to clear the value.
       * @group Props
       */
      showClear = false;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * When present, it specifies that the element should be disabled.
       * @group Props
       */
      get disabled() {
        return this._disabled;
      }
      set disabled(disabled) {
        if (disabled) this.focused = false;
        this._disabled = disabled;
        if (this.timer) this.clearTimer();
      }
      /**
       * Spans 100% width of the container when enabled.
       * @group Props
       */
      fluid = false;
      /**
       * Callback to invoke on input.
       * @param {InputNumberInputEvent} event - Custom input event.
       * @group Emits
       */
      onInput = new EventEmitter();
      /**
       * Callback to invoke when the component receives focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to invoke when the component loses focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      /**
       * Callback to invoke on input key press.
       * @param {KeyboardEvent} event - Keyboard event.
       * @group Emits
       */
      onKeyDown = new EventEmitter();
      /**
       * Callback to invoke when clear token is clicked.
       * @group Emits
       */
      onClear = new EventEmitter();
      /**
       * Template of the clear icon.
       * @group Templates
       */
      clearIconTemplate;
      /**
       * Template of the increment button icon.
       * @group Templates
       */
      incrementButtonIconTemplate;
      /**
       * Template of the decrement button icon.
       * @group Templates
       */
      decrementButtonIconTemplate;
      templates;
      input;
      _clearIconTemplate;
      _incrementButtonIconTemplate;
      _decrementButtonIconTemplate;
      value;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      focused;
      initialized;
      groupChar = "";
      prefixChar = "";
      suffixChar = "";
      isSpecialChar;
      timer;
      lastValue;
      _numeral;
      numberFormat;
      _decimal;
      _decimalChar;
      _group;
      _minusSign;
      _currency;
      _prefix;
      _suffix;
      _index;
      _disabled;
      _componentStyle = inject(InputNumberStyle);
      ngControl = null;
      get _rootClass() {
        return this._componentStyle.classes.root({
          instance: this
        });
      }
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return this.fluid || !!fluidComponent;
      }
      get _incrementButtonClass() {
        return this._componentStyle.classes.incrementButton({
          instance: this
        });
      }
      get _decrementButtonClass() {
        return this._componentStyle.classes.decrementButton({
          instance: this
        });
      }
      constructor(injector) {
        super();
        this.injector = injector;
      }
      ngOnChanges(simpleChange) {
        super.ngOnChanges(simpleChange);
        const props = ["locale", "localeMatcher", "mode", "currency", "currencyDisplay", "useGrouping", "minFractionDigits", "maxFractionDigits", "prefix", "suffix"];
        if (props.some((p) => !!simpleChange[p])) {
          this.updateConstructParser();
        }
      }
      get hostClass() {
        return ["p-inputnumber p-component p-inputwrapper", this.styleClass, this.filled || this.allowEmpty === false ? "p-inputwrapper-filled" : "", this.focused ? "p-inputwrapper-focus" : "", this.showButtons && this.buttonLayout === "stacked" ? "p-inputnumber-stacked" : "", this.showButtons && this.buttonLayout === "horizontal" ? "p-inputnumber-horizontal" : "", this.showButtons && this.buttonLayout === "vertical" ? "p-inputnumber-vertical" : "", this.hasFluid ? "p-inputnumber-fluid" : ""].filter((cls) => !!cls).join(" ");
      }
      get hostStyle() {
        return this.style;
      }
      ngOnInit() {
        super.ngOnInit();
        this.ngControl = this.injector.get(NgControl, null, {
          optional: true
        });
        this.constructParser();
        this.initialized = true;
      }
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "clearicon":
              this._clearIconTemplate = item.template;
              break;
            case "incrementbuttonicon":
              this._incrementButtonIconTemplate = item.template;
              break;
            case "decrementbuttonicon":
              this._decrementButtonIconTemplate = item.template;
              break;
          }
        });
      }
      getOptions() {
        return {
          localeMatcher: this.localeMatcher,
          style: this.mode,
          currency: this.currency,
          currencyDisplay: this.currencyDisplay,
          useGrouping: this.useGrouping,
          minimumFractionDigits: this.minFractionDigits ?? void 0,
          maximumFractionDigits: this.maxFractionDigits ?? void 0
        };
      }
      constructParser() {
        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());
        const numerals = [...new Intl.NumberFormat(this.locale, {
          useGrouping: false
        }).format(9876543210)].reverse();
        const index = new Map(numerals.map((d, i) => [d, i]));
        this._numeral = new RegExp(`[${numerals.join("")}]`, "g");
        this._group = this.getGroupingExpression();
        this._minusSign = this.getMinusSignExpression();
        this._currency = this.getCurrencyExpression();
        this._decimal = this.getDecimalExpression();
        this._decimalChar = this.getDecimalChar();
        this._suffix = this.getSuffixExpression();
        this._prefix = this.getPrefixExpression();
        this._index = (d) => index.get(d);
      }
      updateConstructParser() {
        if (this.initialized) {
          this.constructParser();
        }
      }
      escapeRegExp(text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      }
      getDecimalExpression() {
        const decimalChar = this.getDecimalChar();
        return new RegExp(`[${decimalChar}]`, "g");
      }
      getDecimalChar() {
        const formatter = new Intl.NumberFormat(this.locale, __spreadProps(__spreadValues({}, this.getOptions()), {
          useGrouping: false
        }));
        return formatter.format(1.1).replace(this._currency, "").trim().replace(this._numeral, "");
      }
      getGroupingExpression() {
        const formatter = new Intl.NumberFormat(this.locale, {
          useGrouping: true
        });
        this.groupChar = formatter.format(1e6).trim().replace(this._numeral, "").charAt(0);
        return new RegExp(`[${this.groupChar}]`, "g");
      }
      getMinusSignExpression() {
        const formatter = new Intl.NumberFormat(this.locale, {
          useGrouping: false
        });
        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, "")}]`, "g");
      }
      getCurrencyExpression() {
        if (this.currency) {
          const formatter = new Intl.NumberFormat(this.locale, {
            style: "currency",
            currency: this.currency,
            currencyDisplay: this.currencyDisplay,
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
          });
          return new RegExp(`[${formatter.format(1).replace(/\s/g, "").replace(this._numeral, "").replace(this._group, "")}]`, "g");
        }
        return new RegExp(`[]`, "g");
      }
      getPrefixExpression() {
        if (this.prefix) {
          this.prefixChar = this.prefix;
        } else {
          const formatter = new Intl.NumberFormat(this.locale, {
            style: this.mode,
            currency: this.currency,
            currencyDisplay: this.currencyDisplay
          });
          this.prefixChar = formatter.format(1).split("1")[0];
        }
        return new RegExp(`${this.escapeRegExp(this.prefixChar || "")}`, "g");
      }
      getSuffixExpression() {
        if (this.suffix) {
          this.suffixChar = this.suffix;
        } else {
          const formatter = new Intl.NumberFormat(this.locale, {
            style: this.mode,
            currency: this.currency,
            currencyDisplay: this.currencyDisplay,
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
          });
          this.suffixChar = formatter.format(1).split("1")[1];
        }
        return new RegExp(`${this.escapeRegExp(this.suffixChar || "")}`, "g");
      }
      formatValue(value) {
        if (value != null) {
          if (value === "-") {
            return value;
          }
          if (this.format) {
            let formatter = new Intl.NumberFormat(this.locale, this.getOptions());
            let formattedValue = formatter.format(value);
            if (this.prefix && value != this.prefix) {
              formattedValue = this.prefix + formattedValue;
            }
            if (this.suffix && value != this.suffix) {
              formattedValue = formattedValue + this.suffix;
            }
            return formattedValue;
          }
          return value.toString();
        }
        return "";
      }
      parseValue(text) {
        const suffixRegex = new RegExp(this._suffix, "");
        const prefixRegex = new RegExp(this._prefix, "");
        const currencyRegex = new RegExp(this._currency, "");
        let filteredText = text.replace(suffixRegex, "").replace(prefixRegex, "").trim().replace(/\s/g, "").replace(currencyRegex, "").replace(this._group, "").replace(this._minusSign, "-").replace(this._decimal, ".").replace(this._numeral, this._index);
        if (filteredText) {
          if (filteredText === "-")
            return filteredText;
          let parsedValue = +filteredText;
          return isNaN(parsedValue) ? null : parsedValue;
        }
        return null;
      }
      repeat(event2, interval, dir) {
        if (this.readonly) {
          return;
        }
        let i = interval || 500;
        this.clearTimer();
        this.timer = setTimeout(() => {
          this.repeat(event2, 40, dir);
        }, i);
        this.spin(event2, dir);
      }
      spin(event2, dir) {
        let step = this.step * dir;
        let currentValue = this.parseValue(this.input?.nativeElement.value) || 0;
        let newValue = this.validateValue(currentValue + step);
        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {
          return;
        }
        this.updateInput(newValue, null, "spin", null);
        this.updateModel(event2, newValue);
        this.handleOnInput(event2, currentValue, newValue);
      }
      clear() {
        this.value = null;
        this.onModelChange(this.value);
        this.onClear.emit();
      }
      onUpButtonMouseDown(event2) {
        if (event2.button === 2) {
          this.clearTimer();
          return;
        }
        if (!this.disabled) {
          this.input?.nativeElement.focus();
          this.repeat(event2, null, 1);
          event2.preventDefault();
        }
      }
      onUpButtonMouseUp() {
        if (!this.disabled) {
          this.clearTimer();
        }
      }
      onUpButtonMouseLeave() {
        if (!this.disabled) {
          this.clearTimer();
        }
      }
      onUpButtonKeyDown(event2) {
        if (event2.keyCode === 32 || event2.keyCode === 13) {
          this.repeat(event2, null, 1);
        }
      }
      onUpButtonKeyUp() {
        if (!this.disabled) {
          this.clearTimer();
        }
      }
      onDownButtonMouseDown(event2) {
        if (event2.button === 2) {
          this.clearTimer();
          return;
        }
        if (!this.disabled) {
          this.input?.nativeElement.focus();
          this.repeat(event2, null, -1);
          event2.preventDefault();
        }
      }
      onDownButtonMouseUp() {
        if (!this.disabled) {
          this.clearTimer();
        }
      }
      onDownButtonMouseLeave() {
        if (!this.disabled) {
          this.clearTimer();
        }
      }
      onDownButtonKeyUp() {
        if (!this.disabled) {
          this.clearTimer();
        }
      }
      onDownButtonKeyDown(event2) {
        if (event2.keyCode === 32 || event2.keyCode === 13) {
          this.repeat(event2, null, -1);
        }
      }
      onUserInput(event2) {
        if (this.readonly) {
          return;
        }
        if (this.isSpecialChar) {
          event2.target.value = this.lastValue;
        }
        this.isSpecialChar = false;
      }
      onInputKeyDown(event2) {
        if (this.readonly) {
          return;
        }
        this.lastValue = event2.target.value;
        if (event2.shiftKey || event2.altKey) {
          this.isSpecialChar = true;
          return;
        }
        let selectionStart = event2.target.selectionStart;
        let selectionEnd = event2.target.selectionEnd;
        let inputValue = event2.target.value;
        let newValueStr = null;
        if (event2.altKey) {
          event2.preventDefault();
        }
        switch (event2.key) {
          case "ArrowUp":
            this.spin(event2, 1);
            event2.preventDefault();
            break;
          case "ArrowDown":
            this.spin(event2, -1);
            event2.preventDefault();
            break;
          case "ArrowLeft":
            for (let index = selectionStart; index <= inputValue.length; index++) {
              const previousCharIndex = index === 0 ? 0 : index - 1;
              if (this.isNumeralChar(inputValue.charAt(previousCharIndex))) {
                this.input.nativeElement.setSelectionRange(index, index);
                break;
              }
            }
            break;
          case "ArrowRight":
            for (let index = selectionEnd; index >= 0; index--) {
              if (this.isNumeralChar(inputValue.charAt(index))) {
                this.input.nativeElement.setSelectionRange(index, index);
                break;
              }
            }
            break;
          case "Tab":
          case "Enter":
            newValueStr = this.validateValue(this.parseValue(this.input.nativeElement.value));
            this.input.nativeElement.value = this.formatValue(newValueStr);
            this.input.nativeElement.setAttribute("aria-valuenow", newValueStr);
            this.updateModel(event2, newValueStr);
            break;
          case "Backspace": {
            event2.preventDefault();
            if (selectionStart === selectionEnd) {
              if (selectionStart == 1 && this.prefix || selectionStart == inputValue.length && this.suffix) {
                break;
              }
              const deleteChar = inputValue.charAt(selectionStart - 1);
              const {
                decimalCharIndex,
                decimalCharIndexWithoutPrefix
              } = this.getDecimalCharIndexes(inputValue);
              if (this.isNumeralChar(deleteChar)) {
                const decimalLength = this.getDecimalLength(inputValue);
                if (this._group.test(deleteChar)) {
                  this._group.lastIndex = 0;
                  newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);
                } else if (this._decimal.test(deleteChar)) {
                  this._decimal.lastIndex = 0;
                  if (decimalLength) {
                    this.input?.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);
                  } else {
                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);
                  }
                } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {
                  const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? "" : "0";
                  newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);
                } else if (decimalCharIndexWithoutPrefix === 1) {
                  newValueStr = inputValue.slice(0, selectionStart - 1) + "0" + inputValue.slice(selectionStart);
                  newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : "";
                } else {
                  newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);
                }
              } else if (this.mode === "currency" && deleteChar.search(this._currency) != -1) {
                newValueStr = inputValue.slice(1);
              }
              this.updateValue(event2, newValueStr, null, "delete-single");
            } else {
              newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);
              this.updateValue(event2, newValueStr, null, "delete-range");
            }
            break;
          }
          case "Delete":
            event2.preventDefault();
            if (selectionStart === selectionEnd) {
              if (selectionStart == 0 && this.prefix || selectionStart == inputValue.length - 1 && this.suffix) {
                break;
              }
              const deleteChar = inputValue.charAt(selectionStart);
              const {
                decimalCharIndex,
                decimalCharIndexWithoutPrefix
              } = this.getDecimalCharIndexes(inputValue);
              if (this.isNumeralChar(deleteChar)) {
                const decimalLength = this.getDecimalLength(inputValue);
                if (this._group.test(deleteChar)) {
                  this._group.lastIndex = 0;
                  newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);
                } else if (this._decimal.test(deleteChar)) {
                  this._decimal.lastIndex = 0;
                  if (decimalLength) {
                    this.input?.nativeElement.setSelectionRange(selectionStart + 1, selectionStart + 1);
                  } else {
                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);
                  }
                } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {
                  const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? "" : "0";
                  newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);
                } else if (decimalCharIndexWithoutPrefix === 1) {
                  newValueStr = inputValue.slice(0, selectionStart) + "0" + inputValue.slice(selectionStart + 1);
                  newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : "";
                } else {
                  newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);
                }
              }
              this.updateValue(event2, newValueStr, null, "delete-back-single");
            } else {
              newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);
              this.updateValue(event2, newValueStr, null, "delete-range");
            }
            break;
          case "Home":
            if (this.min) {
              this.updateModel(event2, this.min);
              event2.preventDefault();
            }
            break;
          case "End":
            if (this.max) {
              this.updateModel(event2, this.max);
              event2.preventDefault();
            }
            break;
          default:
            break;
        }
        this.onKeyDown.emit(event2);
      }
      onInputKeyPress(event2) {
        if (this.readonly) {
          return;
        }
        let code = event2.which || event2.keyCode;
        let char = String.fromCharCode(code);
        let isDecimalSign = this.isDecimalSign(char);
        const isMinusSign = this.isMinusSign(char);
        if (code != 13) {
          event2.preventDefault();
        }
        if (!isDecimalSign && event2.code === "NumpadDecimal") {
          isDecimalSign = true;
          char = this._decimalChar;
          code = char.charCodeAt(0);
        }
        const {
          value,
          selectionStart,
          selectionEnd
        } = this.input.nativeElement;
        const newValue = this.parseValue(value + char);
        const newValueStr = newValue != null ? newValue.toString() : "";
        const selectedValue = value.substring(selectionStart, selectionEnd);
        const selectedValueParsed = this.parseValue(selectedValue);
        const selectedValueStr = selectedValueParsed != null ? selectedValueParsed.toString() : "";
        if (selectionStart !== selectionEnd && selectedValueStr.length > 0) {
          this.insert(event2, char, {
            isDecimalSign,
            isMinusSign
          });
          return;
        }
        if (this.maxlength && newValueStr.length > this.maxlength) {
          return;
        }
        if (48 <= code && code <= 57 || isMinusSign || isDecimalSign) {
          this.insert(event2, char, {
            isDecimalSign,
            isMinusSign
          });
        }
      }
      onPaste(event2) {
        if (!this.disabled && !this.readonly) {
          event2.preventDefault();
          let data = (event2.clipboardData || this.document.defaultView["clipboardData"]).getData("Text");
          if (data) {
            if (this.maxlength) {
              data = data.toString().substring(0, this.maxlength);
            }
            let filteredData = this.parseValue(data);
            if (filteredData != null) {
              this.insert(event2, filteredData.toString());
            }
          }
        }
      }
      allowMinusSign() {
        return this.min == null || this.min < 0;
      }
      isMinusSign(char) {
        if (this._minusSign.test(char) || char === "-") {
          this._minusSign.lastIndex = 0;
          return true;
        }
        return false;
      }
      isDecimalSign(char) {
        if (this._decimal.test(char)) {
          this._decimal.lastIndex = 0;
          return true;
        }
        return false;
      }
      isDecimalMode() {
        return this.mode === "decimal";
      }
      getDecimalCharIndexes(val) {
        let decimalCharIndex = val.search(this._decimal);
        this._decimal.lastIndex = 0;
        const filteredVal = val.replace(this._prefix, "").trim().replace(/\s/g, "").replace(this._currency, "");
        const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);
        this._decimal.lastIndex = 0;
        return {
          decimalCharIndex,
          decimalCharIndexWithoutPrefix
        };
      }
      getCharIndexes(val) {
        const decimalCharIndex = val.search(this._decimal);
        this._decimal.lastIndex = 0;
        const minusCharIndex = val.search(this._minusSign);
        this._minusSign.lastIndex = 0;
        const suffixCharIndex = val.search(this._suffix);
        this._suffix.lastIndex = 0;
        const currencyCharIndex = val.search(this._currency);
        this._currency.lastIndex = 0;
        return {
          decimalCharIndex,
          minusCharIndex,
          suffixCharIndex,
          currencyCharIndex
        };
      }
      insert(event2, text, sign = {
        isDecimalSign: false,
        isMinusSign: false
      }) {
        const minusCharIndexOnText = text.search(this._minusSign);
        this._minusSign.lastIndex = 0;
        if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {
          return;
        }
        let selectionStart = this.input?.nativeElement.selectionStart;
        let selectionEnd = this.input?.nativeElement.selectionEnd;
        let inputValue = this.input?.nativeElement.value.trim();
        const {
          decimalCharIndex,
          minusCharIndex,
          suffixCharIndex,
          currencyCharIndex
        } = this.getCharIndexes(inputValue);
        let newValueStr;
        if (sign.isMinusSign) {
          if (selectionStart === 0) {
            newValueStr = inputValue;
            if (minusCharIndex === -1 || selectionEnd !== 0) {
              newValueStr = this.insertText(inputValue, text, 0, selectionEnd);
            }
            this.updateValue(event2, newValueStr, text, "insert");
          }
        } else if (sign.isDecimalSign) {
          if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {
            this.updateValue(event2, inputValue, text, "insert");
          } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {
            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);
            this.updateValue(event2, newValueStr, text, "insert");
          } else if (decimalCharIndex === -1 && this.maxFractionDigits) {
            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);
            this.updateValue(event2, newValueStr, text, "insert");
          }
        } else {
          const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;
          const operation = selectionStart !== selectionEnd ? "range-insert" : "insert";
          if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {
            if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {
              const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;
              newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);
              this.updateValue(event2, newValueStr, text, operation);
            }
          } else {
            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);
            this.updateValue(event2, newValueStr, text, operation);
          }
        }
      }
      insertText(value, text, start, end) {
        let textSplit = text === "." ? text : text.split(".");
        if (textSplit.length === 2) {
          const decimalCharIndex = value.slice(start, end).search(this._decimal);
          this._decimal.lastIndex = 0;
          return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value || this.formatValue(text);
        } else if (end - start === value.length) {
          return this.formatValue(text);
        } else if (start === 0) {
          return text + value.slice(end);
        } else if (end === value.length) {
          return value.slice(0, start) + text;
        } else {
          return value.slice(0, start) + text + value.slice(end);
        }
      }
      deleteRange(value, start, end) {
        let newValueStr;
        if (end - start === value.length) newValueStr = "";
        else if (start === 0) newValueStr = value.slice(end);
        else if (end === value.length) newValueStr = value.slice(0, start);
        else newValueStr = value.slice(0, start) + value.slice(end);
        return newValueStr;
      }
      initCursor() {
        let selectionStart = this.input?.nativeElement.selectionStart;
        let selectionEnd = this.input?.nativeElement.selectionEnd;
        let inputValue = this.input?.nativeElement.value;
        let valueLength = inputValue.length;
        let index = null;
        let prefixLength = (this.prefixChar || "").length;
        inputValue = inputValue.replace(this._prefix, "");
        if (selectionStart === selectionEnd || selectionStart !== 0 || selectionEnd < prefixLength) {
          selectionStart -= prefixLength;
        }
        let char = inputValue.charAt(selectionStart);
        if (this.isNumeralChar(char)) {
          return selectionStart + prefixLength;
        }
        let i = selectionStart - 1;
        while (i >= 0) {
          char = inputValue.charAt(i);
          if (this.isNumeralChar(char)) {
            index = i + prefixLength;
            break;
          } else {
            i--;
          }
        }
        if (index !== null) {
          this.input?.nativeElement.setSelectionRange(index + 1, index + 1);
        } else {
          i = selectionStart;
          while (i < valueLength) {
            char = inputValue.charAt(i);
            if (this.isNumeralChar(char)) {
              index = i + prefixLength;
              break;
            } else {
              i++;
            }
          }
          if (index !== null) {
            this.input?.nativeElement.setSelectionRange(index, index);
          }
        }
        return index || 0;
      }
      onInputClick() {
        const currentValue = this.input?.nativeElement.value;
        if (!this.readonly && currentValue !== getSelection()) {
          this.initCursor();
        }
      }
      isNumeralChar(char) {
        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {
          this.resetRegex();
          return true;
        }
        return false;
      }
      resetRegex() {
        this._numeral.lastIndex = 0;
        this._decimal.lastIndex = 0;
        this._group.lastIndex = 0;
        this._minusSign.lastIndex = 0;
      }
      updateValue(event2, valueStr, insertedValueStr, operation) {
        let currentValue = this.input?.nativeElement.value;
        let newValue = null;
        if (valueStr != null) {
          newValue = this.parseValue(valueStr);
          newValue = !newValue && !this.allowEmpty ? 0 : newValue;
          this.updateInput(newValue, insertedValueStr, operation, valueStr);
          this.handleOnInput(event2, currentValue, newValue);
        }
      }
      handleOnInput(event2, currentValue, newValue) {
        if (this.isValueChanged(currentValue, newValue)) {
          this.input.nativeElement.value = this.formatValue(newValue);
          this.input?.nativeElement.setAttribute("aria-valuenow", newValue);
          this.updateModel(event2, newValue);
          this.onInput.emit({
            originalEvent: event2,
            value: newValue,
            formattedValue: currentValue
          });
        }
      }
      isValueChanged(currentValue, newValue) {
        if (newValue === null && currentValue !== null) {
          return true;
        }
        if (newValue != null) {
          let parsedCurrentValue = typeof currentValue === "string" ? this.parseValue(currentValue) : currentValue;
          return newValue !== parsedCurrentValue;
        }
        return false;
      }
      validateValue(value) {
        if (value === "-" || value == null) {
          return null;
        }
        if (this.min != null && value < this.min) {
          return this.min;
        }
        if (this.max != null && value > this.max) {
          return this.max;
        }
        return value;
      }
      updateInput(value, insertedValueStr, operation, valueStr) {
        insertedValueStr = insertedValueStr || "";
        let inputValue = this.input?.nativeElement.value;
        let newValue = this.formatValue(value);
        let currentLength = inputValue.length;
        if (newValue !== valueStr) {
          newValue = this.concatValues(newValue, valueStr);
        }
        if (currentLength === 0) {
          this.input.nativeElement.value = newValue;
          this.input.nativeElement.setSelectionRange(0, 0);
          const index = this.initCursor();
          const selectionEnd = index + insertedValueStr.length;
          this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);
        } else {
          let selectionStart = this.input.nativeElement.selectionStart;
          let selectionEnd = this.input.nativeElement.selectionEnd;
          if (this.maxlength && newValue.length > this.maxlength) {
            newValue = newValue.slice(0, this.maxlength);
            selectionStart = Math.min(selectionStart, this.maxlength);
            selectionEnd = Math.min(selectionEnd, this.maxlength);
          }
          if (this.maxlength && this.maxlength < newValue.length) {
            return;
          }
          this.input.nativeElement.value = newValue;
          let newLength = newValue.length;
          if (operation === "range-insert") {
            const startValue = this.parseValue((inputValue || "").slice(0, selectionStart));
            const startValueStr = startValue !== null ? startValue.toString() : "";
            const startExpr = startValueStr.split("").join(`(${this.groupChar})?`);
            const sRegex = new RegExp(startExpr, "g");
            sRegex.test(newValue);
            const tExpr = insertedValueStr.split("").join(`(${this.groupChar})?`);
            const tRegex = new RegExp(tExpr, "g");
            tRegex.test(newValue.slice(sRegex.lastIndex));
            selectionEnd = sRegex.lastIndex + tRegex.lastIndex;
            this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);
          } else if (newLength === currentLength) {
            if (operation === "insert" || operation === "delete-back-single") this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);
            else if (operation === "delete-single") this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);
            else if (operation === "delete-range" || operation === "spin") this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);
          } else if (operation === "delete-back-single") {
            let prevChar = inputValue.charAt(selectionEnd - 1);
            let nextChar = inputValue.charAt(selectionEnd);
            let diff = currentLength - newLength;
            let isGroupChar = this._group.test(nextChar);
            if (isGroupChar && diff === 1) {
              selectionEnd += 1;
            } else if (!isGroupChar && this.isNumeralChar(prevChar)) {
              selectionEnd += -1 * diff + 1;
            }
            this._group.lastIndex = 0;
            this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);
          } else if (inputValue === "-" && operation === "insert") {
            this.input.nativeElement.setSelectionRange(0, 0);
            const index = this.initCursor();
            const selectionEnd2 = index + insertedValueStr.length + 1;
            this.input.nativeElement.setSelectionRange(selectionEnd2, selectionEnd2);
          } else {
            selectionEnd = selectionEnd + (newLength - currentLength);
            this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);
          }
        }
        this.input.nativeElement.setAttribute("aria-valuenow", value);
      }
      concatValues(val1, val2) {
        if (val1 && val2) {
          let decimalCharIndex = val2.search(this._decimal);
          this._decimal.lastIndex = 0;
          if (this.suffixChar) {
            return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, "").split(this._decimal)[0] + val2.replace(this.suffixChar, "").slice(decimalCharIndex) + this.suffixChar : val1;
          } else {
            return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;
          }
        }
        return val1;
      }
      getDecimalLength(value) {
        if (value) {
          const valueSplit = value.split(this._decimal);
          if (valueSplit.length === 2) {
            return valueSplit[1].replace(this._suffix, "").trim().replace(/\s/g, "").replace(this._currency, "").length;
          }
        }
        return 0;
      }
      onInputFocus(event2) {
        this.focused = true;
        this.onFocus.emit(event2);
      }
      onInputBlur(event2) {
        this.focused = false;
        const newValueNumber = this.validateValue(this.parseValue(this.input.nativeElement.value));
        const newValueString = newValueNumber?.toString();
        this.input.nativeElement.value = this.formatValue(newValueString);
        this.input.nativeElement.setAttribute("aria-valuenow", newValueString);
        this.updateModel(event2, newValueNumber);
        this.onModelTouched();
        this.onBlur.emit(event2);
      }
      formattedValue() {
        const val = !this.value && !this.allowEmpty ? 0 : this.value;
        return this.formatValue(val);
      }
      updateModel(event2, value) {
        const isBlurUpdateOnMode = this.ngControl?.control?.updateOn === "blur";
        if (this.value !== value) {
          this.value = value;
          if (!(isBlurUpdateOnMode && this.focused)) {
            this.onModelChange(value);
          }
        } else if (isBlurUpdateOnMode) {
          this.onModelChange(value);
        }
      }
      writeValue(value) {
        this.value = value ? Number(value) : value;
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      get filled() {
        return this.value != null && this.value.toString().length > 0;
      }
      clearTimer() {
        if (this.timer) {
          clearInterval(this.timer);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputNumber,
        deps: [{
          token: Injector
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _InputNumber,
        isStandalone: true,
        selector: "p-inputNumber, p-inputnumber, p-input-number",
        inputs: {
          showButtons: ["showButtons", "showButtons", booleanAttribute],
          format: ["format", "format", booleanAttribute],
          buttonLayout: "buttonLayout",
          inputId: "inputId",
          styleClass: "styleClass",
          style: "style",
          placeholder: "placeholder",
          size: "size",
          maxlength: ["maxlength", "maxlength", numberAttribute],
          tabindex: ["tabindex", "tabindex", numberAttribute],
          title: "title",
          ariaLabelledBy: "ariaLabelledBy",
          ariaDescribedBy: "ariaDescribedBy",
          ariaLabel: "ariaLabel",
          ariaRequired: ["ariaRequired", "ariaRequired", booleanAttribute],
          name: "name",
          required: ["required", "required", booleanAttribute],
          autocomplete: "autocomplete",
          min: ["min", "min", numberAttribute],
          max: ["max", "max", numberAttribute],
          incrementButtonClass: "incrementButtonClass",
          decrementButtonClass: "decrementButtonClass",
          incrementButtonIcon: "incrementButtonIcon",
          decrementButtonIcon: "decrementButtonIcon",
          readonly: ["readonly", "readonly", booleanAttribute],
          step: ["step", "step", numberAttribute],
          allowEmpty: ["allowEmpty", "allowEmpty", booleanAttribute],
          locale: "locale",
          localeMatcher: "localeMatcher",
          mode: "mode",
          currency: "currency",
          currencyDisplay: "currencyDisplay",
          useGrouping: ["useGrouping", "useGrouping", booleanAttribute],
          variant: "variant",
          minFractionDigits: ["minFractionDigits", "minFractionDigits", (value) => numberAttribute(value, null)],
          maxFractionDigits: ["maxFractionDigits", "maxFractionDigits", (value) => numberAttribute(value, null)],
          prefix: "prefix",
          suffix: "suffix",
          inputStyle: "inputStyle",
          inputStyleClass: "inputStyleClass",
          showClear: ["showClear", "showClear", booleanAttribute],
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          disabled: "disabled",
          fluid: ["fluid", "fluid", booleanAttribute]
        },
        outputs: {
          onInput: "onInput",
          onFocus: "onFocus",
          onBlur: "onBlur",
          onKeyDown: "onKeyDown",
          onClear: "onClear"
        },
        host: {
          properties: {
            "attr.data-pc-name": "'inputnumber'",
            "attr.data-pc-section": "'root'",
            "class": "hostClass",
            "style": "this.hostStyle"
          }
        },
        providers: [INPUTNUMBER_VALUE_ACCESSOR, InputNumberStyle],
        queries: [{
          propertyName: "clearIconTemplate",
          first: true,
          predicate: ["clearicon"]
        }, {
          propertyName: "incrementButtonIconTemplate",
          first: true,
          predicate: ["incrementbuttonicon"]
        }, {
          propertyName: "decrementButtonIconTemplate",
          first: true,
          predicate: ["decrementbuttonicon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "input",
          first: true,
          predicate: ["input"],
          descendants: true
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports,
        template: `
        <input
            pInputText
            #input
            [attr.id]="inputId"
            role="spinbutton"
            [ngClass]="'p-inputnumber-input'"
            [ngStyle]="inputStyle"
            [class]="inputStyleClass"
            [value]="formattedValue()"
            [variant]="variant"
            [attr.aria-valuemin]="min"
            [attr.aria-valuemax]="max"
            [attr.aria-valuenow]="value"
            [disabled]="disabled"
            [readonly]="readonly"
            [attr.placeholder]="placeholder"
            [attr.aria-label]="ariaLabel"
            [attr.aria-labelledby]="ariaLabelledBy"
            [attr.aria-describedby]="ariaDescribedBy"
            [attr.title]="title"
            [pSize]="size"
            [attr.name]="name"
            [attr.autocomplete]="autocomplete"
            [attr.maxlength]="maxlength"
            [attr.tabindex]="tabindex"
            [attr.aria-required]="ariaRequired"
            [attr.required]="required"
            [attr.min]="min"
            [attr.max]="max"
            inputmode="decimal"
            (input)="onUserInput($event)"
            (keydown)="onInputKeyDown($event)"
            (keypress)="onInputKeyPress($event)"
            (paste)="onPaste($event)"
            (click)="onInputClick()"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
            [attr.data-pc-section]="'input'"
            [pAutoFocus]="autofocus"
            [fluid]="hasFluid"
        />
        <ng-container *ngIf="buttonLayout != 'vertical' && showClear && value">
            <TimesIcon *ngIf="!clearIconTemplate && !_clearIconTemplate" [ngClass]="'p-inputnumber-clear-icon'" (click)="clear()" [attr.data-pc-section]="'clearIcon'" />
            <span *ngIf="clearIconTemplate || _clearIconTemplate" (click)="clear()" class="p-inputnumber-clear-icon" [attr.data-pc-section]="'clearIcon'">
                <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate"></ng-template>
            </span>
        </ng-container>
        <span class="p-inputnumber-button-group" *ngIf="showButtons && buttonLayout === 'stacked'" [attr.data-pc-section]="'buttonGroup'">
            <button
                type="button"
                [ngClass]="_incrementButtonClass"
                [class]="incrementButtonClass"
                [disabled]="disabled"
                tabindex="-1"
                (mousedown)="onUpButtonMouseDown($event)"
                (mouseup)="onUpButtonMouseUp()"
                (mouseleave)="onUpButtonMouseLeave()"
                (keydown)="onUpButtonKeyDown($event)"
                (keyup)="onUpButtonKeyUp()"
                [attr.aria-hidden]="true"
                [attr.data-pc-section]="'incrementbutton'"
            >
                <span *ngIf="incrementButtonIcon" [ngClass]="incrementButtonIcon" [attr.data-pc-section]="'incrementbuttonicon'"></span>
                <ng-container *ngIf="!incrementButtonIcon">
                    <AngleUpIcon *ngIf="!incrementButtonIconTemplate && !_incrementButtonIconTemplate" [attr.data-pc-section]="'incrementbuttonicon'" />
                    <ng-template *ngTemplateOutlet="incrementButtonIconTemplate || _incrementButtonIconTemplate"></ng-template>
                </ng-container>
            </button>

            <button
                type="button"
                [ngClass]="_decrementButtonClass"
                [class]="decrementButtonClass"
                [disabled]="disabled"
                tabindex="-1"
                [attr.aria-hidden]="true"
                (mousedown)="onDownButtonMouseDown($event)"
                (mouseup)="onDownButtonMouseUp()"
                (mouseleave)="onDownButtonMouseLeave()"
                (keydown)="onDownButtonKeyDown($event)"
                (keyup)="onDownButtonKeyUp()"
                [attr.data-pc-section]="'decrementbutton'"
            >
                <span *ngIf="decrementButtonIcon" [ngClass]="decrementButtonIcon" [attr.data-pc-section]="'decrementbuttonicon'"></span>
                <ng-container *ngIf="!decrementButtonIcon">
                    <AngleDownIcon *ngIf="!decrementButtonIconTemplate && !_decrementButtonIconTemplate" [attr.data-pc-section]="'decrementbuttonicon'" />
                    <ng-template *ngTemplateOutlet="decrementButtonIconTemplate || _decrementButtonIconTemplate"></ng-template>
                </ng-container>
            </button>
        </span>
        <button
            *ngIf="showButtons && buttonLayout !== 'stacked'"
            type="button"
            [ngClass]="_incrementButtonClass"
            [class]="incrementButtonClass"
            [disabled]="disabled"
            tabindex="-1"
            [attr.aria-hidden]="true"
            (mousedown)="onUpButtonMouseDown($event)"
            (mouseup)="onUpButtonMouseUp()"
            (mouseleave)="onUpButtonMouseLeave()"
            (keydown)="onUpButtonKeyDown($event)"
            (keyup)="onUpButtonKeyUp()"
            [attr.data-pc-section]="'incrementbutton'"
        >
            <span *ngIf="incrementButtonIcon" [ngClass]="incrementButtonIcon" [attr.data-pc-section]="'incrementbuttonicon'"></span>
            <ng-container *ngIf="!incrementButtonIcon">
                <AngleUpIcon *ngIf="!incrementButtonIconTemplate && !_incrementButtonIconTemplate" [attr.data-pc-section]="'incrementbuttonicon'" />
                <ng-template *ngTemplateOutlet="incrementButtonIconTemplate || _incrementButtonIconTemplate"></ng-template>
            </ng-container>
        </button>
        <button
            *ngIf="showButtons && buttonLayout !== 'stacked'"
            type="button"
            [ngClass]="_decrementButtonClass"
            [class]="decrementButtonClass"
            [disabled]="disabled"
            tabindex="-1"
            [attr.aria-hidden]="true"
            (mousedown)="onDownButtonMouseDown($event)"
            (mouseup)="onDownButtonMouseUp()"
            (mouseleave)="onDownButtonMouseLeave()"
            (keydown)="onDownButtonKeyDown($event)"
            (keyup)="onDownButtonKeyUp()"
            [attr.data-pc-section]="'decrementbutton'"
        >
            <span *ngIf="decrementButtonIcon" [ngClass]="decrementButtonIcon" [attr.data-pc-section]="'decrementbuttonicon'"></span>
            <ng-container *ngIf="!decrementButtonIcon">
                <AngleDownIcon *ngIf="!decrementButtonIconTemplate && !_decrementButtonIconTemplate" [attr.data-pc-section]="'decrementbuttonicon'" />
                <ng-template *ngTemplateOutlet="decrementButtonIconTemplate || _decrementButtonIconTemplate"></ng-template>
            </ng-container>
        </button>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "directive",
          type: InputText,
          selector: "[pInputText]",
          inputs: ["variant", "fluid", "pSize"]
        }, {
          kind: "directive",
          type: AutoFocus,
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "component",
          type: TimesIcon,
          selector: "TimesIcon"
        }, {
          kind: "component",
          type: AngleUpIcon,
          selector: "AngleUpIcon"
        }, {
          kind: "component",
          type: AngleDownIcon,
          selector: "AngleDownIcon"
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputNumber,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-inputNumber, p-inputnumber, p-input-number",
          standalone: true,
          imports: [CommonModule, InputText, AutoFocus, TimesIcon, AngleUpIcon, AngleDownIcon, SharedModule],
          template: `
        <input
            pInputText
            #input
            [attr.id]="inputId"
            role="spinbutton"
            [ngClass]="'p-inputnumber-input'"
            [ngStyle]="inputStyle"
            [class]="inputStyleClass"
            [value]="formattedValue()"
            [variant]="variant"
            [attr.aria-valuemin]="min"
            [attr.aria-valuemax]="max"
            [attr.aria-valuenow]="value"
            [disabled]="disabled"
            [readonly]="readonly"
            [attr.placeholder]="placeholder"
            [attr.aria-label]="ariaLabel"
            [attr.aria-labelledby]="ariaLabelledBy"
            [attr.aria-describedby]="ariaDescribedBy"
            [attr.title]="title"
            [pSize]="size"
            [attr.name]="name"
            [attr.autocomplete]="autocomplete"
            [attr.maxlength]="maxlength"
            [attr.tabindex]="tabindex"
            [attr.aria-required]="ariaRequired"
            [attr.required]="required"
            [attr.min]="min"
            [attr.max]="max"
            inputmode="decimal"
            (input)="onUserInput($event)"
            (keydown)="onInputKeyDown($event)"
            (keypress)="onInputKeyPress($event)"
            (paste)="onPaste($event)"
            (click)="onInputClick()"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
            [attr.data-pc-section]="'input'"
            [pAutoFocus]="autofocus"
            [fluid]="hasFluid"
        />
        <ng-container *ngIf="buttonLayout != 'vertical' && showClear && value">
            <TimesIcon *ngIf="!clearIconTemplate && !_clearIconTemplate" [ngClass]="'p-inputnumber-clear-icon'" (click)="clear()" [attr.data-pc-section]="'clearIcon'" />
            <span *ngIf="clearIconTemplate || _clearIconTemplate" (click)="clear()" class="p-inputnumber-clear-icon" [attr.data-pc-section]="'clearIcon'">
                <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate"></ng-template>
            </span>
        </ng-container>
        <span class="p-inputnumber-button-group" *ngIf="showButtons && buttonLayout === 'stacked'" [attr.data-pc-section]="'buttonGroup'">
            <button
                type="button"
                [ngClass]="_incrementButtonClass"
                [class]="incrementButtonClass"
                [disabled]="disabled"
                tabindex="-1"
                (mousedown)="onUpButtonMouseDown($event)"
                (mouseup)="onUpButtonMouseUp()"
                (mouseleave)="onUpButtonMouseLeave()"
                (keydown)="onUpButtonKeyDown($event)"
                (keyup)="onUpButtonKeyUp()"
                [attr.aria-hidden]="true"
                [attr.data-pc-section]="'incrementbutton'"
            >
                <span *ngIf="incrementButtonIcon" [ngClass]="incrementButtonIcon" [attr.data-pc-section]="'incrementbuttonicon'"></span>
                <ng-container *ngIf="!incrementButtonIcon">
                    <AngleUpIcon *ngIf="!incrementButtonIconTemplate && !_incrementButtonIconTemplate" [attr.data-pc-section]="'incrementbuttonicon'" />
                    <ng-template *ngTemplateOutlet="incrementButtonIconTemplate || _incrementButtonIconTemplate"></ng-template>
                </ng-container>
            </button>

            <button
                type="button"
                [ngClass]="_decrementButtonClass"
                [class]="decrementButtonClass"
                [disabled]="disabled"
                tabindex="-1"
                [attr.aria-hidden]="true"
                (mousedown)="onDownButtonMouseDown($event)"
                (mouseup)="onDownButtonMouseUp()"
                (mouseleave)="onDownButtonMouseLeave()"
                (keydown)="onDownButtonKeyDown($event)"
                (keyup)="onDownButtonKeyUp()"
                [attr.data-pc-section]="'decrementbutton'"
            >
                <span *ngIf="decrementButtonIcon" [ngClass]="decrementButtonIcon" [attr.data-pc-section]="'decrementbuttonicon'"></span>
                <ng-container *ngIf="!decrementButtonIcon">
                    <AngleDownIcon *ngIf="!decrementButtonIconTemplate && !_decrementButtonIconTemplate" [attr.data-pc-section]="'decrementbuttonicon'" />
                    <ng-template *ngTemplateOutlet="decrementButtonIconTemplate || _decrementButtonIconTemplate"></ng-template>
                </ng-container>
            </button>
        </span>
        <button
            *ngIf="showButtons && buttonLayout !== 'stacked'"
            type="button"
            [ngClass]="_incrementButtonClass"
            [class]="incrementButtonClass"
            [disabled]="disabled"
            tabindex="-1"
            [attr.aria-hidden]="true"
            (mousedown)="onUpButtonMouseDown($event)"
            (mouseup)="onUpButtonMouseUp()"
            (mouseleave)="onUpButtonMouseLeave()"
            (keydown)="onUpButtonKeyDown($event)"
            (keyup)="onUpButtonKeyUp()"
            [attr.data-pc-section]="'incrementbutton'"
        >
            <span *ngIf="incrementButtonIcon" [ngClass]="incrementButtonIcon" [attr.data-pc-section]="'incrementbuttonicon'"></span>
            <ng-container *ngIf="!incrementButtonIcon">
                <AngleUpIcon *ngIf="!incrementButtonIconTemplate && !_incrementButtonIconTemplate" [attr.data-pc-section]="'incrementbuttonicon'" />
                <ng-template *ngTemplateOutlet="incrementButtonIconTemplate || _incrementButtonIconTemplate"></ng-template>
            </ng-container>
        </button>
        <button
            *ngIf="showButtons && buttonLayout !== 'stacked'"
            type="button"
            [ngClass]="_decrementButtonClass"
            [class]="decrementButtonClass"
            [disabled]="disabled"
            tabindex="-1"
            [attr.aria-hidden]="true"
            (mousedown)="onDownButtonMouseDown($event)"
            (mouseup)="onDownButtonMouseUp()"
            (mouseleave)="onDownButtonMouseLeave()"
            (keydown)="onDownButtonKeyDown($event)"
            (keyup)="onDownButtonKeyUp()"
            [attr.data-pc-section]="'decrementbutton'"
        >
            <span *ngIf="decrementButtonIcon" [ngClass]="decrementButtonIcon" [attr.data-pc-section]="'decrementbuttonicon'"></span>
            <ng-container *ngIf="!decrementButtonIcon">
                <AngleDownIcon *ngIf="!decrementButtonIconTemplate && !_decrementButtonIconTemplate" [attr.data-pc-section]="'decrementbuttonicon'" />
                <ng-template *ngTemplateOutlet="decrementButtonIconTemplate || _decrementButtonIconTemplate"></ng-template>
            </ng-container>
        </button>
    `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          providers: [INPUTNUMBER_VALUE_ACCESSOR, InputNumberStyle],
          encapsulation: ViewEncapsulation.None,
          host: {
            "[attr.data-pc-name]": "'inputnumber'",
            "[attr.data-pc-section]": "'root'",
            "[class]": "hostClass"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Injector
      }],
      propDecorators: {
        showButtons: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        format: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        buttonLayout: [{
          type: Input
        }],
        inputId: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        placeholder: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        maxlength: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        title: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        ariaDescribedBy: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        ariaRequired: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        name: [{
          type: Input
        }],
        required: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autocomplete: [{
          type: Input
        }],
        min: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        max: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        incrementButtonClass: [{
          type: Input
        }],
        decrementButtonClass: [{
          type: Input
        }],
        incrementButtonIcon: [{
          type: Input
        }],
        decrementButtonIcon: [{
          type: Input
        }],
        readonly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        step: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        allowEmpty: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        locale: [{
          type: Input
        }],
        localeMatcher: [{
          type: Input
        }],
        mode: [{
          type: Input
        }],
        currency: [{
          type: Input
        }],
        currencyDisplay: [{
          type: Input
        }],
        useGrouping: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        variant: [{
          type: Input
        }],
        minFractionDigits: [{
          type: Input,
          args: [{
            transform: (value) => numberAttribute(value, null)
          }]
        }],
        maxFractionDigits: [{
          type: Input,
          args: [{
            transform: (value) => numberAttribute(value, null)
          }]
        }],
        prefix: [{
          type: Input
        }],
        suffix: [{
          type: Input
        }],
        inputStyle: [{
          type: Input
        }],
        inputStyleClass: [{
          type: Input
        }],
        showClear: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        disabled: [{
          type: Input
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onInput: [{
          type: Output
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        onKeyDown: [{
          type: Output
        }],
        onClear: [{
          type: Output
        }],
        clearIconTemplate: [{
          type: ContentChild,
          args: ["clearicon", {
            descendants: false
          }]
        }],
        incrementButtonIconTemplate: [{
          type: ContentChild,
          args: ["incrementbuttonicon", {
            descendants: false
          }]
        }],
        decrementButtonIconTemplate: [{
          type: ContentChild,
          args: ["decrementbuttonicon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }],
        input: [{
          type: ViewChild,
          args: ["input"]
        }],
        hostStyle: [{
          type: HostBinding,
          args: ["style"]
        }]
      }
    });
    InputNumberModule = class _InputNumberModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputNumberModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputNumberModule,
        imports: [InputNumber, SharedModule],
        exports: [InputNumber, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputNumberModule,
        imports: [InputNumber, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputNumberModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [InputNumber, SharedModule],
          exports: [InputNumber, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-iconfield.mjs
var theme8, classes8, IconFieldStyle, IconFieldClasses, IconField, IconFieldModule;
var init_primeng_iconfield = __esm({
  "node_modules/primeng/fesm2022/primeng-iconfield.mjs"() {
    "use strict";
    init_common();
    init_core();
    init_core();
    init_primeng_basecomponent();
    init_primeng_base();
    theme8 = ({
      dt
    }) => `
.p-iconfield {
    position: relative;
    display: block;
}

.p-inputicon {
    position: absolute;
    top: 50%;
    margin-top: calc(-1 * (${dt("icon.size")} / 2));
    color: ${dt("iconfield.icon.color")};
    line-height: 1;
}

.p-iconfield .p-inputicon:first-child {
    inset-inline-start: ${dt("form.field.padding.x")};
}

.p-iconfield .p-inputicon:last-child {
    inset-inline-end: ${dt("form.field.padding.x")};
}

.p-iconfield .p-inputtext:not(:first-child) {
    padding-inline-start: calc((${dt("form.field.padding.x")} * 2) + ${dt("icon.size")});
}

.p-iconfield .p-inputtext:not(:last-child) {
    padding-inline-end: calc((${dt("form.field.padding.x")} * 2) + ${dt("icon.size")});
}

.p-iconfield:has(.p-inputfield-sm) .p-inputicon {
    font-size: ${dt("form.field.sm.font.size")};
    width: ${dt("form.field.sm.font.size")};
    height: ${dt("form.field.sm.font.size")};
    margin-top: calc(-1 * (${dt("form.field.sm.font.size")} / 2));
}

.p-iconfield:has(.p-inputfield-lg) .p-inputicon {
    font-size: ${dt("form.field.lg.font.size")};
    width: ${dt("form.field.lg.font.size")};
    height: ${dt("form.field.lg.font.size")};
    margin-top: calc(-1 * (${dt("form.field.lg.font.size")} / 2));
}
`;
    classes8 = {
      root: "p-iconfield"
    };
    IconFieldStyle = class _IconFieldStyle extends BaseStyle {
      name = "iconfield";
      theme = theme8;
      classes = classes8;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _IconFieldStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _IconFieldStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: IconFieldStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(IconFieldClasses2) {
      IconFieldClasses2["root"] = "p-iconfield";
    })(IconFieldClasses || (IconFieldClasses = {}));
    IconField = class _IconField extends BaseComponent {
      /**
       * Position of the icon.
       * @group Props
       */
      iconPosition = "left";
      get _styleClass() {
        return this.styleClass;
      }
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      _componentStyle = inject(IconFieldStyle);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _IconField,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _IconField,
        isStandalone: true,
        selector: "p-iconfield, p-iconField, p-icon-field",
        inputs: {
          iconPosition: "iconPosition",
          styleClass: "styleClass"
        },
        host: {
          properties: {
            "class.p-iconfield-left": 'iconPosition === "left"',
            "class.p-iconfield-right": 'iconPosition === "right"',
            "class": "this._styleClass"
          },
          classAttribute: "p-iconfield"
        },
        providers: [IconFieldStyle],
        usesInheritance: true,
        ngImport: core_exports,
        template: ` <ng-content></ng-content>`,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: IconField,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-iconfield, p-iconField, p-icon-field",
          standalone: true,
          imports: [CommonModule],
          template: ` <ng-content></ng-content>`,
          providers: [IconFieldStyle],
          encapsulation: ViewEncapsulation.None,
          changeDetection: ChangeDetectionStrategy.OnPush,
          host: {
            class: "p-iconfield",
            "[class.p-iconfield-left]": 'iconPosition === "left"',
            "[class.p-iconfield-right]": 'iconPosition === "right"'
          }
        }]
      }],
      propDecorators: {
        iconPosition: [{
          type: Input
        }],
        _styleClass: [{
          type: HostBinding,
          args: ["class"]
        }],
        styleClass: [{
          type: Input
        }]
      }
    });
    IconFieldModule = class _IconFieldModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _IconFieldModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _IconFieldModule,
        imports: [IconField],
        exports: [IconField]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _IconFieldModule,
        imports: [IconField]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: IconFieldModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [IconField],
          exports: [IconField]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-inputicon.mjs
var classes9, InputIconStyle, InputIcon, InputIconModule;
var init_primeng_inputicon = __esm({
  "node_modules/primeng/fesm2022/primeng-inputicon.mjs"() {
    "use strict";
    init_common();
    init_core();
    init_core();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_base();
    classes9 = {
      root: "p-inputicon"
    };
    InputIconStyle = class _InputIconStyle extends BaseStyle {
      name = "inputicon";
      classes = classes9;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputIconStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputIconStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputIconStyle,
      decorators: [{
        type: Injectable
      }]
    });
    InputIcon = class _InputIcon extends BaseComponent {
      /**
       * Style class of the element.
       * @group Props
       */
      styleClass;
      get hostClasses() {
        return this.styleClass;
      }
      _componentStyle = inject(InputIconStyle);
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputIcon,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _InputIcon,
        isStandalone: true,
        selector: "p-inputicon, p-inputIcon",
        inputs: {
          styleClass: "styleClass"
        },
        host: {
          properties: {
            "class": "this.hostClasses",
            "class.p-inputicon": "true"
          }
        },
        providers: [InputIconStyle],
        usesInheritance: true,
        ngImport: core_exports,
        template: `<ng-content></ng-content>`,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputIcon,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-inputicon, p-inputIcon",
          standalone: true,
          imports: [CommonModule, SharedModule],
          template: `<ng-content></ng-content>`,
          encapsulation: ViewEncapsulation.None,
          changeDetection: ChangeDetectionStrategy.OnPush,
          providers: [InputIconStyle],
          host: {
            "[class]": "styleClass",
            "[class.p-inputicon]": "true"
          }
        }]
      }],
      propDecorators: {
        styleClass: [{
          type: Input
        }],
        hostClasses: [{
          type: HostBinding,
          args: ["class"]
        }]
      }
    });
    InputIconModule = class _InputIconModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputIconModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputIconModule,
        imports: [InputIcon, SharedModule],
        exports: [InputIcon, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputIconModule,
        imports: [InputIcon, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputIconModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [InputIcon, SharedModule],
          exports: [InputIcon, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-overlay.mjs
var theme9, OverlayStyle, showOverlayContentAnimation, hideOverlayContentAnimation, Overlay, OverlayModule;
var init_primeng_overlay = __esm({
  "node_modules/primeng/fesm2022/primeng-overlay.mjs"() {
    "use strict";
    init_animations();
    init_common();
    init_common();
    init_core();
    init_core();
    init_utils();
    init_primeng_api();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_dom();
    init_primeng_utils();
    init_primeng_base();
    theme9 = ({
      dt
    }) => `
.p-overlay {
    position: absolute;
    top: 0;
}

.p-overlay-modal {
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.p-overlay-content {
    transform-origin: inherit;
}

.p-overlay-modal > .p-overlay-content {
    z-index: 1;
    width: 90%;
}

/* Position */
/* top */
.p-overlay-top {
    align-items: flex-start;
}
.p-overlay-top-start {
    align-items: flex-start;
    justify-content: flex-start;
}
.p-overlay-top-end {
    align-items: flex-start;
    justify-content: flex-end;
}

/* bottom */
.p-overlay-bottom {
    align-items: flex-end;
}
.p-overlay-bottom-start {
    align-items: flex-end;
    justify-content: flex-start;
}
.p-overlay-bottom-end {
    align-items: flex-end;
    justify-content: flex-end;
}

/* left */
.p-overlay-left {
    justify-content: flex-start;
}
.p-overlay-left-start {
    justify-content: flex-start;
    align-items: flex-start;
}
.p-overlay-left-end {
    justify-content: flex-start;
    align-items: flex-end;
}

/* right */
.p-overlay-right {
    justify-content: flex-end;
}
.p-overlay-right-start {
    justify-content: flex-end;
    align-items: flex-start;
}
.p-overlay-right-end {
    justify-content: flex-end;
    align-items: flex-end;
}
`;
    OverlayStyle = class _OverlayStyle extends BaseStyle {
      name = "overlay";
      theme = theme9;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _OverlayStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _OverlayStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: OverlayStyle,
      decorators: [{
        type: Injectable
      }]
    });
    showOverlayContentAnimation = animation([style({
      transform: "{{transform}}",
      opacity: 0
    }), animate("{{showTransitionParams}}")]);
    hideOverlayContentAnimation = animation([animate("{{hideTransitionParams}}", style({
      transform: "{{transform}}",
      opacity: 0
    }))]);
    Overlay = class _Overlay extends BaseComponent {
      overlayService;
      zone;
      /**
       * The visible property is an input that determines the visibility of the component.
       * @defaultValue false
       * @group Props
       */
      get visible() {
        return this._visible;
      }
      set visible(value) {
        this._visible = value;
        if (this._visible && !this.modalVisible) {
          this.modalVisible = true;
        }
      }
      /**
       * The mode property is an input that determines the overlay mode type or string.
       * @defaultValue null
       * @group Props
       */
      get mode() {
        return this._mode || this.overlayOptions?.mode;
      }
      set mode(value) {
        this._mode = value;
      }
      /**
       * The style property is an input that determines the style object for the component.
       * @defaultValue null
       * @group Props
       */
      get style() {
        return ObjectUtils.merge(this._style, this.modal ? this.overlayResponsiveOptions?.style : this.overlayOptions?.style);
      }
      set style(value) {
        this._style = value;
      }
      /**
       * The styleClass property is an input that determines the CSS class(es) for the component.
       * @defaultValue null
       * @group Props
       */
      get styleClass() {
        return ObjectUtils.merge(this._styleClass, this.modal ? this.overlayResponsiveOptions?.styleClass : this.overlayOptions?.styleClass);
      }
      set styleClass(value) {
        this._styleClass = value;
      }
      /**
       * The contentStyle property is an input that determines the style object for the content of the component.
       * @defaultValue null
       * @group Props
       */
      get contentStyle() {
        return ObjectUtils.merge(this._contentStyle, this.modal ? this.overlayResponsiveOptions?.contentStyle : this.overlayOptions?.contentStyle);
      }
      set contentStyle(value) {
        this._contentStyle = value;
      }
      /**
       * The contentStyleClass property is an input that determines the CSS class(es) for the content of the component.
       * @defaultValue null
       * @group Props
       */
      get contentStyleClass() {
        return ObjectUtils.merge(this._contentStyleClass, this.modal ? this.overlayResponsiveOptions?.contentStyleClass : this.overlayOptions?.contentStyleClass);
      }
      set contentStyleClass(value) {
        this._contentStyleClass = value;
      }
      /**
       * The target property is an input that specifies the target element or selector for the component.
       * @defaultValue null
       * @group Props
       */
      get target() {
        const value = this._target || this.overlayOptions?.target;
        return value === void 0 ? "@prev" : value;
      }
      set target(value) {
        this._target = value;
      }
      /**
       * Overlay can be mounted into its location, body or DOM element instance using this option.
       * @defaultValue null
       * @group Props
       */
      get appendTo() {
        return this._appendTo || this.overlayOptions?.appendTo;
      }
      set appendTo(value) {
        this._appendTo = value;
      }
      /**
       * The autoZIndex determines whether to automatically manage layering. Its default value is 'false'.
       * @defaultValue false
       * @group Props
       */
      get autoZIndex() {
        const value = this._autoZIndex || this.overlayOptions?.autoZIndex;
        return value === void 0 ? true : value;
      }
      set autoZIndex(value) {
        this._autoZIndex = value;
      }
      /**
       * The baseZIndex is base zIndex value to use in layering.
       * @defaultValue null
       * @group Props
       */
      get baseZIndex() {
        const value = this._baseZIndex || this.overlayOptions?.baseZIndex;
        return value === void 0 ? 0 : value;
      }
      set baseZIndex(value) {
        this._baseZIndex = value;
      }
      /**
       * Transition options of the show or hide animation.
       * @defaultValue .12s cubic-bezier(0, 0, 0.2, 1)
       * @group Props
       */
      get showTransitionOptions() {
        const value = this._showTransitionOptions || this.overlayOptions?.showTransitionOptions;
        return value === void 0 ? ".12s cubic-bezier(0, 0, 0.2, 1)" : value;
      }
      set showTransitionOptions(value) {
        this._showTransitionOptions = value;
      }
      /**
       * The hideTransitionOptions property is an input that determines the CSS transition options for hiding the component.
       * @defaultValue .1s linear
       * @group Props
       */
      get hideTransitionOptions() {
        const value = this._hideTransitionOptions || this.overlayOptions?.hideTransitionOptions;
        return value === void 0 ? ".1s linear" : value;
      }
      set hideTransitionOptions(value) {
        this._hideTransitionOptions = value;
      }
      /**
       * The listener property is an input that specifies the listener object for the component.
       * @defaultValue null
       * @group Props
       */
      get listener() {
        return this._listener || this.overlayOptions?.listener;
      }
      set listener(value) {
        this._listener = value;
      }
      /**
       * It is the option used to determine in which mode it should appear according to the given media or breakpoint.
       * @defaultValue null
       * @group Props
       */
      get responsive() {
        return this._responsive || this.overlayOptions?.responsive;
      }
      set responsive(val) {
        this._responsive = val;
      }
      /**
       * The options property is an input that specifies the overlay options for the component.
       * @defaultValue null
       * @group Props
       */
      get options() {
        return this._options;
      }
      set options(val) {
        this._options = val;
      }
      /**
       * This EventEmitter is used to notify changes in the visibility state of a component.
       * @param {Boolean} boolean - Value of visibility as boolean.
       * @group Emits
       */
      visibleChange = new EventEmitter();
      /**
       * Callback to invoke before the overlay is shown.
       * @param {OverlayOnBeforeShowEvent} event - Custom overlay before show event.
       * @group Emits
       */
      onBeforeShow = new EventEmitter();
      /**
       * Callback to invoke when the overlay is shown.
       * @param {OverlayOnShowEvent} event - Custom overlay show event.
       * @group Emits
       */
      onShow = new EventEmitter();
      /**
       * Callback to invoke before the overlay is hidden.
       * @param {OverlayOnBeforeHideEvent} event - Custom overlay before hide event.
       * @group Emits
       */
      onBeforeHide = new EventEmitter();
      /**
       * Callback to invoke when the overlay is hidden
       * @param {OverlayOnHideEvent} event - Custom hide event.
       * @group Emits
       */
      onHide = new EventEmitter();
      /**
       * Callback to invoke when the animation is started.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onAnimationStart = new EventEmitter();
      /**
       * Callback to invoke when the animation is done.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onAnimationDone = new EventEmitter();
      overlayViewChild;
      contentViewChild;
      /**
       * Content template of the component.
       * @group Templates
       */
      contentTemplate;
      templates;
      _contentTemplate;
      _visible = false;
      _mode;
      _style;
      _styleClass;
      _contentStyle;
      _contentStyleClass;
      _target;
      _appendTo;
      _autoZIndex;
      _baseZIndex;
      _showTransitionOptions;
      _hideTransitionOptions;
      _listener;
      _responsive;
      _options;
      modalVisible = false;
      isOverlayClicked = false;
      isOverlayContentClicked = false;
      scrollHandler;
      documentClickListener;
      documentResizeListener;
      _componentStyle = inject(OverlayStyle);
      documentKeyboardListener;
      window;
      transformOptions = {
        default: "scaleY(0.8)",
        center: "scale(0.7)",
        top: "translate3d(0px, -100%, 0px)",
        "top-start": "translate3d(0px, -100%, 0px)",
        "top-end": "translate3d(0px, -100%, 0px)",
        bottom: "translate3d(0px, 100%, 0px)",
        "bottom-start": "translate3d(0px, 100%, 0px)",
        "bottom-end": "translate3d(0px, 100%, 0px)",
        left: "translate3d(-100%, 0px, 0px)",
        "left-start": "translate3d(-100%, 0px, 0px)",
        "left-end": "translate3d(-100%, 0px, 0px)",
        right: "translate3d(100%, 0px, 0px)",
        "right-start": "translate3d(100%, 0px, 0px)",
        "right-end": "translate3d(100%, 0px, 0px)"
      };
      get modal() {
        if (isPlatformBrowser(this.platformId)) {
          return this.mode === "modal" || this.overlayResponsiveOptions && this.document.defaultView?.matchMedia(this.overlayResponsiveOptions.media?.replace("@media", "") || `(max-width: ${this.overlayResponsiveOptions.breakpoint})`).matches;
        }
      }
      get overlayMode() {
        return this.mode || (this.modal ? "modal" : "overlay");
      }
      get overlayOptions() {
        return __spreadValues(__spreadValues({}, this.config?.overlayOptions), this.options);
      }
      get overlayResponsiveOptions() {
        return __spreadValues(__spreadValues({}, this.overlayOptions?.responsive), this.responsive);
      }
      get overlayResponsiveDirection() {
        return this.overlayResponsiveOptions?.direction || "center";
      }
      get overlayEl() {
        return this.overlayViewChild?.nativeElement;
      }
      get contentEl() {
        return this.contentViewChild?.nativeElement;
      }
      get targetEl() {
        return getTargetElement(this.target, this.el?.nativeElement);
      }
      constructor(overlayService, zone) {
        super();
        this.overlayService = overlayService;
        this.zone = zone;
      }
      ngAfterContentInit() {
        this.templates?.forEach((item) => {
          switch (item.getType()) {
            case "content":
              this._contentTemplate = item.template;
              break;
            // TODO: new template types may be added.
            default:
              this._contentTemplate = item.template;
              break;
          }
        });
      }
      show(overlay, isFocus = false) {
        this.onVisibleChange(true);
        this.handleEvents("onShow", {
          overlay: overlay || this.overlayEl,
          target: this.targetEl,
          mode: this.overlayMode
        });
        isFocus && focus(this.targetEl);
        this.modal && addClass(this.document?.body, "p-overflow-hidden");
      }
      hide(overlay, isFocus = false) {
        if (!this.visible) {
          return;
        } else {
          this.onVisibleChange(false);
          this.handleEvents("onHide", {
            overlay: overlay || this.overlayEl,
            target: this.targetEl,
            mode: this.overlayMode
          });
          isFocus && focus(this.targetEl);
          this.modal && removeClass(this.document?.body, "p-overflow-hidden");
        }
      }
      alignOverlay() {
        !this.modal && DomHandler.alignOverlay(this.overlayEl, this.targetEl, this.appendTo);
      }
      onVisibleChange(visible) {
        this._visible = visible;
        this.visibleChange.emit(visible);
      }
      onOverlayClick() {
        this.isOverlayClicked = true;
      }
      onOverlayContentClick(event2) {
        this.overlayService.add({
          originalEvent: event2,
          target: this.targetEl
        });
        this.isOverlayContentClicked = true;
      }
      onOverlayContentAnimationStart(event2) {
        switch (event2.toState) {
          case "visible":
            this.handleEvents("onBeforeShow", {
              overlay: this.overlayEl,
              target: this.targetEl,
              mode: this.overlayMode
            });
            if (this.autoZIndex) {
              zindexutils.set(this.overlayMode, this.overlayEl, this.baseZIndex + this.config?.zIndex[this.overlayMode]);
            }
            DomHandler.appendOverlay(this.overlayEl, this.appendTo === "body" ? this.document.body : this.appendTo, this.appendTo);
            this.alignOverlay();
            break;
          case "void":
            this.handleEvents("onBeforeHide", {
              overlay: this.overlayEl,
              target: this.targetEl,
              mode: this.overlayMode
            });
            this.modal && addClass(this.overlayEl, "p-overlay-mask-leave");
            break;
        }
        this.handleEvents("onAnimationStart", event2);
      }
      onOverlayContentAnimationDone(event2) {
        const container = this.overlayEl || event2.element.parentElement;
        switch (event2.toState) {
          case "visible":
            if (this.visible) {
              this.show(container, true);
              this.bindListeners();
            }
            break;
          case "void":
            if (!this.visible) {
              this.hide(container, true);
              this.modalVisible = false;
              this.unbindListeners();
              DomHandler.appendOverlay(this.overlayEl, this.targetEl, this.appendTo);
              zindexutils.clear(container);
              this.cd.markForCheck();
              break;
            }
        }
        this.handleEvents("onAnimationDone", event2);
      }
      handleEvents(name, params) {
        this[name].emit(params);
        this.options && this.options[name] && this.options[name](params);
        this.config?.overlayOptions && (this.config?.overlayOptions)[name] && (this.config?.overlayOptions)[name](params);
      }
      bindListeners() {
        this.bindScrollListener();
        this.bindDocumentClickListener();
        this.bindDocumentResizeListener();
        this.bindDocumentKeyboardListener();
      }
      unbindListeners() {
        this.unbindScrollListener();
        this.unbindDocumentClickListener();
        this.unbindDocumentResizeListener();
        this.unbindDocumentKeyboardListener();
      }
      bindScrollListener() {
        if (!this.scrollHandler) {
          this.scrollHandler = new ConnectedOverlayScrollHandler(this.targetEl, (event2) => {
            const valid = this.listener ? this.listener(event2, {
              type: "scroll",
              mode: this.overlayMode,
              valid: true
            }) : true;
            valid && this.hide(event2, true);
          });
        }
        this.scrollHandler.bindScrollListener();
      }
      unbindScrollListener() {
        if (this.scrollHandler) {
          this.scrollHandler.unbindScrollListener();
        }
      }
      bindDocumentClickListener() {
        if (!this.documentClickListener) {
          this.documentClickListener = this.renderer.listen(this.document, "click", (event2) => {
            const isTargetClicked = this.targetEl && (this.targetEl.isSameNode(event2.target) || !this.isOverlayClicked && this.targetEl.contains(event2.target));
            const isOutsideClicked = !isTargetClicked && !this.isOverlayContentClicked;
            const valid = this.listener ? this.listener(event2, {
              type: "outside",
              mode: this.overlayMode,
              valid: event2.which !== 3 && isOutsideClicked
            }) : isOutsideClicked;
            valid && this.hide(event2);
            this.isOverlayClicked = this.isOverlayContentClicked = false;
          });
        }
      }
      unbindDocumentClickListener() {
        if (this.documentClickListener) {
          this.documentClickListener();
          this.documentClickListener = null;
        }
      }
      bindDocumentResizeListener() {
        if (!this.documentResizeListener) {
          this.documentResizeListener = this.renderer.listen(this.document.defaultView, "resize", (event2) => {
            const valid = this.listener ? this.listener(event2, {
              type: "resize",
              mode: this.overlayMode,
              valid: !isTouchDevice()
            }) : !isTouchDevice();
            valid && this.hide(event2, true);
          });
        }
      }
      unbindDocumentResizeListener() {
        if (this.documentResizeListener) {
          this.documentResizeListener();
          this.documentResizeListener = null;
        }
      }
      bindDocumentKeyboardListener() {
        if (this.documentKeyboardListener) {
          return;
        }
        this.zone.runOutsideAngular(() => {
          this.documentKeyboardListener = this.renderer.listen(this.document.defaultView, "keydown", (event2) => {
            if (this.overlayOptions.hideOnEscape === false || event2.code !== "Escape") {
              return;
            }
            const valid = this.listener ? this.listener(event2, {
              type: "keydown",
              mode: this.overlayMode,
              valid: !isTouchDevice()
            }) : !isTouchDevice();
            if (valid) {
              this.zone.run(() => {
                this.hide(event2, true);
              });
            }
          });
        });
      }
      unbindDocumentKeyboardListener() {
        if (this.documentKeyboardListener) {
          this.documentKeyboardListener();
          this.documentKeyboardListener = null;
        }
      }
      ngOnDestroy() {
        this.hide(this.overlayEl, true);
        if (this.overlayEl) {
          DomHandler.appendOverlay(this.overlayEl, this.targetEl, this.appendTo);
          zindexutils.clear(this.overlayEl);
        }
        if (this.scrollHandler) {
          this.scrollHandler.destroy();
          this.scrollHandler = null;
        }
        this.unbindListeners();
        super.ngOnDestroy();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Overlay,
        deps: [{
          token: OverlayService
        }, {
          token: NgZone
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _Overlay,
        isStandalone: true,
        selector: "p-overlay",
        inputs: {
          visible: "visible",
          mode: "mode",
          style: "style",
          styleClass: "styleClass",
          contentStyle: "contentStyle",
          contentStyleClass: "contentStyleClass",
          target: "target",
          appendTo: "appendTo",
          autoZIndex: "autoZIndex",
          baseZIndex: "baseZIndex",
          showTransitionOptions: "showTransitionOptions",
          hideTransitionOptions: "hideTransitionOptions",
          listener: "listener",
          responsive: "responsive",
          options: "options"
        },
        outputs: {
          visibleChange: "visibleChange",
          onBeforeShow: "onBeforeShow",
          onShow: "onShow",
          onBeforeHide: "onBeforeHide",
          onHide: "onHide",
          onAnimationStart: "onAnimationStart",
          onAnimationDone: "onAnimationDone"
        },
        providers: [OverlayStyle],
        queries: [{
          propertyName: "contentTemplate",
          first: true,
          predicate: ["content"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "overlayViewChild",
          first: true,
          predicate: ["overlay"],
          descendants: true
        }, {
          propertyName: "contentViewChild",
          first: true,
          predicate: ["content"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <div
            *ngIf="modalVisible"
            #overlay
            [ngStyle]="style"
            [class]="styleClass"
            [ngClass]="{
                'p-overlay p-component': true,
                'p-overlay-modal p-overlay-mask p-overlay-mask-enter': modal,
                'p-overlay-center': modal && overlayResponsiveDirection === 'center',
                'p-overlay-top': modal && overlayResponsiveDirection === 'top',
                'p-overlay-top-start': modal && overlayResponsiveDirection === 'top-start',
                'p-overlay-top-end': modal && overlayResponsiveDirection === 'top-end',
                'p-overlay-bottom': modal && overlayResponsiveDirection === 'bottom',
                'p-overlay-bottom-start': modal && overlayResponsiveDirection === 'bottom-start',
                'p-overlay-bottom-end': modal && overlayResponsiveDirection === 'bottom-end',
                'p-overlay-left': modal && overlayResponsiveDirection === 'left',
                'p-overlay-left-start': modal && overlayResponsiveDirection === 'left-start',
                'p-overlay-left-end': modal && overlayResponsiveDirection === 'left-end',
                'p-overlay-right': modal && overlayResponsiveDirection === 'right',
                'p-overlay-right-start': modal && overlayResponsiveDirection === 'right-start',
                'p-overlay-right-end': modal && overlayResponsiveDirection === 'right-end'
            }"
            (click)="onOverlayClick()"
        >
            <div
                *ngIf="visible"
                #content
                [ngStyle]="contentStyle"
                [class]="contentStyleClass"
                [ngClass]="'p-overlay-content'"
                (click)="onOverlayContentClick($event)"
                [@overlayContentAnimation]="{
                    value: 'visible',
                    params: {
                        showTransitionParams: showTransitionOptions,
                        hideTransitionParams: hideTransitionOptions,
                        transform: transformOptions[modal ? overlayResponsiveDirection : 'default']
                    }
                }"
                (@overlayContentAnimation.start)="onOverlayContentAnimationStart($event)"
                (@overlayContentAnimation.done)="onOverlayContentAnimationDone($event)"
            >
                <ng-content></ng-content>
                <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: { mode: overlayMode } }"></ng-container>
            </div>
        </div>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        animations: [trigger("overlayContentAnimation", [transition(":enter", [useAnimation(showOverlayContentAnimation)]), transition(":leave", [useAnimation(hideOverlayContentAnimation)])])],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Overlay,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-overlay",
          standalone: true,
          imports: [CommonModule, SharedModule],
          template: `
        <div
            *ngIf="modalVisible"
            #overlay
            [ngStyle]="style"
            [class]="styleClass"
            [ngClass]="{
                'p-overlay p-component': true,
                'p-overlay-modal p-overlay-mask p-overlay-mask-enter': modal,
                'p-overlay-center': modal && overlayResponsiveDirection === 'center',
                'p-overlay-top': modal && overlayResponsiveDirection === 'top',
                'p-overlay-top-start': modal && overlayResponsiveDirection === 'top-start',
                'p-overlay-top-end': modal && overlayResponsiveDirection === 'top-end',
                'p-overlay-bottom': modal && overlayResponsiveDirection === 'bottom',
                'p-overlay-bottom-start': modal && overlayResponsiveDirection === 'bottom-start',
                'p-overlay-bottom-end': modal && overlayResponsiveDirection === 'bottom-end',
                'p-overlay-left': modal && overlayResponsiveDirection === 'left',
                'p-overlay-left-start': modal && overlayResponsiveDirection === 'left-start',
                'p-overlay-left-end': modal && overlayResponsiveDirection === 'left-end',
                'p-overlay-right': modal && overlayResponsiveDirection === 'right',
                'p-overlay-right-start': modal && overlayResponsiveDirection === 'right-start',
                'p-overlay-right-end': modal && overlayResponsiveDirection === 'right-end'
            }"
            (click)="onOverlayClick()"
        >
            <div
                *ngIf="visible"
                #content
                [ngStyle]="contentStyle"
                [class]="contentStyleClass"
                [ngClass]="'p-overlay-content'"
                (click)="onOverlayContentClick($event)"
                [@overlayContentAnimation]="{
                    value: 'visible',
                    params: {
                        showTransitionParams: showTransitionOptions,
                        hideTransitionParams: hideTransitionOptions,
                        transform: transformOptions[modal ? overlayResponsiveDirection : 'default']
                    }
                }"
                (@overlayContentAnimation.start)="onOverlayContentAnimationStart($event)"
                (@overlayContentAnimation.done)="onOverlayContentAnimationDone($event)"
            >
                <ng-content></ng-content>
                <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: { mode: overlayMode } }"></ng-container>
            </div>
        </div>
    `,
          animations: [trigger("overlayContentAnimation", [transition(":enter", [useAnimation(showOverlayContentAnimation)]), transition(":leave", [useAnimation(hideOverlayContentAnimation)])])],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None,
          providers: [OverlayStyle]
        }]
      }],
      ctorParameters: () => [{
        type: OverlayService
      }, {
        type: NgZone
      }],
      propDecorators: {
        visible: [{
          type: Input
        }],
        mode: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        contentStyle: [{
          type: Input
        }],
        contentStyleClass: [{
          type: Input
        }],
        target: [{
          type: Input
        }],
        appendTo: [{
          type: Input
        }],
        autoZIndex: [{
          type: Input
        }],
        baseZIndex: [{
          type: Input
        }],
        showTransitionOptions: [{
          type: Input
        }],
        hideTransitionOptions: [{
          type: Input
        }],
        listener: [{
          type: Input
        }],
        responsive: [{
          type: Input
        }],
        options: [{
          type: Input
        }],
        visibleChange: [{
          type: Output
        }],
        onBeforeShow: [{
          type: Output
        }],
        onShow: [{
          type: Output
        }],
        onBeforeHide: [{
          type: Output
        }],
        onHide: [{
          type: Output
        }],
        onAnimationStart: [{
          type: Output
        }],
        onAnimationDone: [{
          type: Output
        }],
        overlayViewChild: [{
          type: ViewChild,
          args: ["overlay"]
        }],
        contentViewChild: [{
          type: ViewChild,
          args: ["content"]
        }],
        contentTemplate: [{
          type: ContentChild,
          args: ["content", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    OverlayModule = class _OverlayModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _OverlayModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _OverlayModule,
        imports: [Overlay, SharedModule],
        exports: [Overlay, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _OverlayModule,
        imports: [Overlay, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: OverlayModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Overlay, SharedModule],
          exports: [Overlay, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-scroller.mjs
var theme10, ScrollerStyle, ScrollerClasses, Scroller, ScrollerModule;
var init_primeng_scroller = __esm({
  "node_modules/primeng/fesm2022/primeng-scroller.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_utils();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_icons();
    init_primeng_base();
    theme10 = ({
      dt
    }) => `
.p-virtualscroller {
    position: relative;
    overflow: auto;
    contain: strict;
    transform: translateZ(0);
    will-change: scroll-position;
    outline: 0 none;
}

.p-virtualscroller-content {
    position: absolute;
    top: 0;
    left: 0;
    min-height: 100%;
    min-width: 100%;
    will-change: transform;
}

.p-virtualscroller-spacer {
    position: absolute;
    top: 0;
    left: 0;
    height: 1px;
    width: 1px;
    transform-origin: 0 0;
    pointer-events: none;
}

.p-virtualscroller-loader {
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: ${dt("virtualscroller.loader.mask.background")};
    color: ${dt("virtualscroller.loader.mask.color")};
}

.p-virtualscroller-loader-mask {
    display: flex;
    align-items: center;
    justify-content: center;
}

.p-virtualscroller-loading-icon {
    font-size: ${dt("virtualscroller.loader.icon.size")};
    width: ${dt("virtualscroller.loader.icon.size")};
    height: ${dt("virtualscroller.loader.icon.size")};
}

.p-virtualscroller-horizontal > .p-virtualscroller-content {
    display: flex;
}

.p-virtualscroller-inline .p-virtualscroller-content {
    position: static;
}
`;
    ScrollerStyle = class _ScrollerStyle extends BaseStyle {
      name = "virtualscroller";
      theme = theme10;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ScrollerStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ScrollerStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ScrollerStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(ScrollerClasses2) {
      ScrollerClasses2["root"] = "p-virtualscroller";
      ScrollerClasses2["content"] = "p-virtualscroller-content";
      ScrollerClasses2["spacer"] = "p-virtualscroller-spacer";
      ScrollerClasses2["loader"] = "p-virtualscroller-loader";
      ScrollerClasses2["loadingIcon"] = "p-virtualscroller-loading-icon";
    })(ScrollerClasses || (ScrollerClasses = {}));
    Scroller = class _Scroller extends BaseComponent {
      zone;
      /**
       * Unique identifier of the element.
       * @group Props
       */
      get id() {
        return this._id;
      }
      set id(val) {
        this._id = val;
      }
      /**
       * Inline style of the component.
       * @group Props
       */
      get style() {
        return this._style;
      }
      set style(val) {
        this._style = val;
      }
      /**
       * Style class of the element.
       * @group Props
       */
      get styleClass() {
        return this._styleClass;
      }
      set styleClass(val) {
        this._styleClass = val;
      }
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      get tabindex() {
        return this._tabindex;
      }
      set tabindex(val) {
        this._tabindex = val;
      }
      /**
       * An array of objects to display.
       * @group Props
       */
      get items() {
        return this._items;
      }
      set items(val) {
        this._items = val;
      }
      /**
       * The height/width of item according to orientation.
       * @group Props
       */
      get itemSize() {
        return this._itemSize;
      }
      set itemSize(val) {
        this._itemSize = val;
      }
      /**
       * Height of the scroll viewport.
       * @group Props
       */
      get scrollHeight() {
        return this._scrollHeight;
      }
      set scrollHeight(val) {
        this._scrollHeight = val;
      }
      /**
       * Width of the scroll viewport.
       * @group Props
       */
      get scrollWidth() {
        return this._scrollWidth;
      }
      set scrollWidth(val) {
        this._scrollWidth = val;
      }
      /**
       * The orientation of scrollbar.
       * @group Props
       */
      get orientation() {
        return this._orientation;
      }
      set orientation(val) {
        this._orientation = val;
      }
      /**
       * Used to specify how many items to load in each load method in lazy mode.
       * @group Props
       */
      get step() {
        return this._step;
      }
      set step(val) {
        this._step = val;
      }
      /**
       * Delay in scroll before new data is loaded.
       * @group Props
       */
      get delay() {
        return this._delay;
      }
      set delay(val) {
        this._delay = val;
      }
      /**
       * Delay after window's resize finishes.
       * @group Props
       */
      get resizeDelay() {
        return this._resizeDelay;
      }
      set resizeDelay(val) {
        this._resizeDelay = val;
      }
      /**
       * Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash.
       * @group Props
       */
      get appendOnly() {
        return this._appendOnly;
      }
      set appendOnly(val) {
        this._appendOnly = val;
      }
      /**
       * Specifies whether the scroller should be displayed inline or not.
       * @group Props
       */
      get inline() {
        return this._inline;
      }
      set inline(val) {
        this._inline = val;
      }
      /**
       * Defines if data is loaded and interacted with in lazy manner.
       * @group Props
       */
      get lazy() {
        return this._lazy;
      }
      set lazy(val) {
        this._lazy = val;
      }
      /**
       * If disabled, the scroller feature is eliminated and the content is displayed directly.
       * @group Props
       */
      get disabled() {
        return this._disabled;
      }
      set disabled(val) {
        this._disabled = val;
      }
      /**
       * Used to implement a custom loader instead of using the loader feature in the scroller.
       * @group Props
       */
      get loaderDisabled() {
        return this._loaderDisabled;
      }
      set loaderDisabled(val) {
        this._loaderDisabled = val;
      }
      /**
       * Columns to display.
       * @group Props
       */
      get columns() {
        return this._columns;
      }
      set columns(val) {
        this._columns = val;
      }
      /**
       * Used to implement a custom spacer instead of using the spacer feature in the scroller.
       * @group Props
       */
      get showSpacer() {
        return this._showSpacer;
      }
      set showSpacer(val) {
        this._showSpacer = val;
      }
      /**
       * Defines whether to show loader.
       * @group Props
       */
      get showLoader() {
        return this._showLoader;
      }
      set showLoader(val) {
        this._showLoader = val;
      }
      /**
       * Determines how many additional elements to add to the DOM outside of the view. According to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number. Default value is half the number of items shown in the view.
       * @group Props
       */
      get numToleratedItems() {
        return this._numToleratedItems;
      }
      set numToleratedItems(val) {
        this._numToleratedItems = val;
      }
      /**
       * Defines whether the data is loaded.
       * @group Props
       */
      get loading() {
        return this._loading;
      }
      set loading(val) {
        this._loading = val;
      }
      /**
       * Defines whether to dynamically change the height or width of scrollable container.
       * @group Props
       */
      get autoSize() {
        return this._autoSize;
      }
      set autoSize(val) {
        this._autoSize = val;
      }
      /**
       * Function to optimize the dom operations by delegating to ngForTrackBy, default algoritm checks for object identity.
       * @group Props
       */
      get trackBy() {
        return this._trackBy;
      }
      set trackBy(val) {
        this._trackBy = val;
      }
      /**
       * Defines whether to use the scroller feature. The properties of scroller component can be used like an object in it.
       * @group Props
       */
      get options() {
        return this._options;
      }
      set options(val) {
        this._options = val;
        if (val && typeof val === "object") {
          Object.entries(val).forEach(([k, v]) => this[`_${k}`] !== v && (this[`_${k}`] = v));
          Object.entries(val).forEach(([k, v]) => this[`${k}`] !== v && (this[`${k}`] = v));
        }
      }
      /**
       * Callback to invoke in lazy mode to load new data.
       * @param {ScrollerLazyLoadEvent} event - Custom lazy load event.
       * @group Emits
       */
      onLazyLoad = new EventEmitter();
      /**
       * Callback to invoke when scroll position changes.
       * @param {ScrollerScrollEvent} event - Custom scroll event.
       * @group Emits
       */
      onScroll = new EventEmitter();
      /**
       * Callback to invoke when scroll position and item's range in view changes.
       * @param {ScrollerScrollEvent} event - Custom scroll index change event.
       * @group Emits
       */
      onScrollIndexChange = new EventEmitter();
      elementViewChild;
      contentViewChild;
      height;
      _id;
      _style;
      _styleClass;
      _tabindex = 0;
      _items;
      _itemSize = 0;
      _scrollHeight;
      _scrollWidth;
      _orientation = "vertical";
      _step = 0;
      _delay = 0;
      _resizeDelay = 10;
      _appendOnly = false;
      _inline = false;
      _lazy = false;
      _disabled = false;
      _loaderDisabled = false;
      _columns;
      _showSpacer = true;
      _showLoader = false;
      _numToleratedItems;
      _loading;
      _autoSize = false;
      _trackBy;
      _options;
      d_loading = false;
      d_numToleratedItems;
      contentEl;
      /**
       * Content template of the component.
       * @group Templates
       */
      contentTemplate;
      /**
       * Item template of the component.
       * @group Templates
       */
      itemTemplate;
      /**
       * Loader template of the component.
       * @group Templates
       */
      loaderTemplate;
      /**
       * Loader icon template of the component.
       * @group Templates
       */
      loaderIconTemplate;
      templates;
      _contentTemplate;
      _itemTemplate;
      _loaderTemplate;
      _loaderIconTemplate;
      first = 0;
      last = 0;
      page = 0;
      isRangeChanged = false;
      numItemsInViewport = 0;
      lastScrollPos = 0;
      lazyLoadState = {};
      loaderArr = [];
      spacerStyle = {};
      contentStyle = {};
      scrollTimeout;
      resizeTimeout;
      initialized = false;
      windowResizeListener;
      defaultWidth;
      defaultHeight;
      defaultContentWidth;
      defaultContentHeight;
      _contentStyleClass;
      get contentStyleClass() {
        return this._contentStyleClass;
      }
      set contentStyleClass(val) {
        this._contentStyleClass = val;
      }
      get vertical() {
        return this._orientation === "vertical";
      }
      get horizontal() {
        return this._orientation === "horizontal";
      }
      get both() {
        return this._orientation === "both";
      }
      get loadedItems() {
        if (this._items && !this.d_loading) {
          if (this.both) return this._items.slice(this._appendOnly ? 0 : this.first.rows, this.last.rows).map((item) => this._columns ? item : item.slice(this._appendOnly ? 0 : this.first.cols, this.last.cols));
          else if (this.horizontal && this._columns) return this._items;
          else return this._items.slice(this._appendOnly ? 0 : this.first, this.last);
        }
        return [];
      }
      get loadedRows() {
        return this.d_loading ? this._loaderDisabled ? this.loaderArr : [] : this.loadedItems;
      }
      get loadedColumns() {
        if (this._columns && (this.both || this.horizontal)) {
          return this.d_loading && this._loaderDisabled ? this.both ? this.loaderArr[0] : this.loaderArr : this._columns.slice(this.both ? this.first.cols : this.first, this.both ? this.last.cols : this.last);
        }
        return this._columns;
      }
      _componentStyle = inject(ScrollerStyle);
      constructor(zone) {
        super();
        this.zone = zone;
      }
      ngOnInit() {
        super.ngOnInit();
        this.setInitialState();
      }
      ngOnChanges(simpleChanges) {
        super.ngOnChanges(simpleChanges);
        let isLoadingChanged = false;
        if (this.scrollHeight == "100%") {
          this.height = "100%";
        }
        if (simpleChanges.loading) {
          const {
            previousValue,
            currentValue
          } = simpleChanges.loading;
          if (this.lazy && previousValue !== currentValue && currentValue !== this.d_loading) {
            this.d_loading = currentValue;
            isLoadingChanged = true;
          }
        }
        if (simpleChanges.orientation) {
          this.lastScrollPos = this.both ? {
            top: 0,
            left: 0
          } : 0;
        }
        if (simpleChanges.numToleratedItems) {
          const {
            previousValue,
            currentValue
          } = simpleChanges.numToleratedItems;
          if (previousValue !== currentValue && currentValue !== this.d_numToleratedItems) {
            this.d_numToleratedItems = currentValue;
          }
        }
        if (simpleChanges.options) {
          const {
            previousValue,
            currentValue
          } = simpleChanges.options;
          if (this.lazy && previousValue?.loading !== currentValue?.loading && currentValue?.loading !== this.d_loading) {
            this.d_loading = currentValue.loading;
            isLoadingChanged = true;
          }
          if (previousValue?.numToleratedItems !== currentValue?.numToleratedItems && currentValue?.numToleratedItems !== this.d_numToleratedItems) {
            this.d_numToleratedItems = currentValue.numToleratedItems;
          }
        }
        if (this.initialized) {
          const isChanged = !isLoadingChanged && (simpleChanges.items?.previousValue?.length !== simpleChanges.items?.currentValue?.length || simpleChanges.itemSize || simpleChanges.scrollHeight || simpleChanges.scrollWidth);
          if (isChanged) {
            this.init();
            this.calculateAutoSize();
          }
        }
      }
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "content":
              this._contentTemplate = item.template;
              break;
            case "item":
              this._itemTemplate = item.template;
              break;
            case "loader":
              this._loaderTemplate = item.template;
              break;
            case "loadericon":
              this._loaderIconTemplate = item.template;
              break;
            default:
              this._itemTemplate = item.template;
              break;
          }
        });
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        Promise.resolve().then(() => {
          this.viewInit();
        });
      }
      ngAfterViewChecked() {
        if (!this.initialized) {
          this.viewInit();
        }
      }
      ngOnDestroy() {
        this.unbindResizeListener();
        this.contentEl = null;
        this.initialized = false;
        super.ngOnDestroy();
      }
      viewInit() {
        if (isPlatformBrowser(this.platformId) && !this.initialized) {
          if (isVisible(this.elementViewChild?.nativeElement)) {
            this.setInitialState();
            this.setContentEl(this.contentEl);
            this.init();
            this.defaultWidth = getWidth(this.elementViewChild?.nativeElement);
            this.defaultHeight = getHeight(this.elementViewChild?.nativeElement);
            this.defaultContentWidth = getWidth(this.contentEl);
            this.defaultContentHeight = getHeight(this.contentEl);
            this.initialized = true;
          }
        }
      }
      init() {
        if (!this._disabled) {
          this.setSize();
          this.calculateOptions();
          this.setSpacerSize();
          this.bindResizeListener();
          this.cd.detectChanges();
        }
      }
      setContentEl(el) {
        this.contentEl = el || this.contentViewChild?.nativeElement || findSingle(this.elementViewChild?.nativeElement, ".p-virtualscroller-content");
      }
      setInitialState() {
        this.first = this.both ? {
          rows: 0,
          cols: 0
        } : 0;
        this.last = this.both ? {
          rows: 0,
          cols: 0
        } : 0;
        this.numItemsInViewport = this.both ? {
          rows: 0,
          cols: 0
        } : 0;
        this.lastScrollPos = this.both ? {
          top: 0,
          left: 0
        } : 0;
        this.d_loading = this._loading || false;
        this.d_numToleratedItems = this._numToleratedItems;
        this.loaderArr = [];
      }
      getElementRef() {
        return this.elementViewChild;
      }
      getPageByFirst(first) {
        return Math.floor(((first ?? this.first) + this.d_numToleratedItems * 4) / (this._step || 1));
      }
      isPageChanged(first) {
        return this._step ? this.page !== this.getPageByFirst(first ?? this.first) : true;
      }
      scrollTo(options) {
        this.elementViewChild?.nativeElement?.scrollTo(options);
      }
      scrollToIndex(index, behavior = "auto") {
        const valid = this.both ? index.every((i) => i > -1) : index > -1;
        if (valid) {
          const first = this.first;
          const {
            scrollTop = 0,
            scrollLeft = 0
          } = this.elementViewChild?.nativeElement;
          const {
            numToleratedItems
          } = this.calculateNumItems();
          const contentPos = this.getContentPosition();
          const itemSize = this.itemSize;
          const calculateFirst = (_index = 0, _numT) => _index <= _numT ? 0 : _index;
          const calculateCoord = (_first, _size, _cpos) => _first * _size + _cpos;
          const scrollTo = (left = 0, top = 0) => this.scrollTo({
            left,
            top,
            behavior
          });
          let newFirst = this.both ? {
            rows: 0,
            cols: 0
          } : 0;
          let isRangeChanged = false, isScrollChanged = false;
          if (this.both) {
            newFirst = {
              rows: calculateFirst(index[0], numToleratedItems[0]),
              cols: calculateFirst(index[1], numToleratedItems[1])
            };
            scrollTo(calculateCoord(newFirst.cols, itemSize[1], contentPos.left), calculateCoord(newFirst.rows, itemSize[0], contentPos.top));
            isScrollChanged = this.lastScrollPos.top !== scrollTop || this.lastScrollPos.left !== scrollLeft;
            isRangeChanged = newFirst.rows !== first.rows || newFirst.cols !== first.cols;
          } else {
            newFirst = calculateFirst(index, numToleratedItems);
            this.horizontal ? scrollTo(calculateCoord(newFirst, itemSize, contentPos.left), scrollTop) : scrollTo(scrollLeft, calculateCoord(newFirst, itemSize, contentPos.top));
            isScrollChanged = this.lastScrollPos !== (this.horizontal ? scrollLeft : scrollTop);
            isRangeChanged = newFirst !== first;
          }
          this.isRangeChanged = isRangeChanged;
          isScrollChanged && (this.first = newFirst);
        }
      }
      scrollInView(index, to, behavior = "auto") {
        if (to) {
          const {
            first,
            viewport
          } = this.getRenderedRange();
          const scrollTo = (left = 0, top = 0) => this.scrollTo({
            left,
            top,
            behavior
          });
          const isToStart = to === "to-start";
          const isToEnd = to === "to-end";
          if (isToStart) {
            if (this.both) {
              if (viewport.first.rows - first.rows > index[0]) {
                scrollTo(viewport.first.cols * this._itemSize[1], (viewport.first.rows - 1) * this._itemSize[0]);
              } else if (viewport.first.cols - first.cols > index[1]) {
                scrollTo((viewport.first.cols - 1) * this._itemSize[1], viewport.first.rows * this._itemSize[0]);
              }
            } else {
              if (viewport.first - first > index) {
                const pos = (viewport.first - 1) * this._itemSize;
                this.horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);
              }
            }
          } else if (isToEnd) {
            if (this.both) {
              if (viewport.last.rows - first.rows <= index[0] + 1) {
                scrollTo(viewport.first.cols * this._itemSize[1], (viewport.first.rows + 1) * this._itemSize[0]);
              } else if (viewport.last.cols - first.cols <= index[1] + 1) {
                scrollTo((viewport.first.cols + 1) * this._itemSize[1], viewport.first.rows * this._itemSize[0]);
              }
            } else {
              if (viewport.last - first <= index + 1) {
                const pos = (viewport.first + 1) * this._itemSize;
                this.horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);
              }
            }
          }
        } else {
          this.scrollToIndex(index, behavior);
        }
      }
      getRenderedRange() {
        const calculateFirstInViewport = (_pos, _size) => _size || _pos ? Math.floor(_pos / (_size || _pos)) : 0;
        let firstInViewport = this.first;
        let lastInViewport = 0;
        if (this.elementViewChild?.nativeElement) {
          const {
            scrollTop,
            scrollLeft
          } = this.elementViewChild.nativeElement;
          if (this.both) {
            firstInViewport = {
              rows: calculateFirstInViewport(scrollTop, this._itemSize[0]),
              cols: calculateFirstInViewport(scrollLeft, this._itemSize[1])
            };
            lastInViewport = {
              rows: firstInViewport.rows + this.numItemsInViewport.rows,
              cols: firstInViewport.cols + this.numItemsInViewport.cols
            };
          } else {
            const scrollPos = this.horizontal ? scrollLeft : scrollTop;
            firstInViewport = calculateFirstInViewport(scrollPos, this._itemSize);
            lastInViewport = firstInViewport + this.numItemsInViewport;
          }
        }
        return {
          first: this.first,
          last: this.last,
          viewport: {
            first: firstInViewport,
            last: lastInViewport
          }
        };
      }
      calculateNumItems() {
        const contentPos = this.getContentPosition();
        const contentWidth = (this.elementViewChild?.nativeElement ? this.elementViewChild.nativeElement.offsetWidth - contentPos.left : 0) || 0;
        const contentHeight = (this.elementViewChild?.nativeElement ? this.elementViewChild.nativeElement.offsetHeight - contentPos.top : 0) || 0;
        const calculateNumItemsInViewport = (_contentSize, _itemSize) => _itemSize || _contentSize ? Math.ceil(_contentSize / (_itemSize || _contentSize)) : 0;
        const calculateNumToleratedItems = (_numItems) => Math.ceil(_numItems / 2);
        const numItemsInViewport = this.both ? {
          rows: calculateNumItemsInViewport(contentHeight, this._itemSize[0]),
          cols: calculateNumItemsInViewport(contentWidth, this._itemSize[1])
        } : calculateNumItemsInViewport(this.horizontal ? contentWidth : contentHeight, this._itemSize);
        const numToleratedItems = this.d_numToleratedItems || (this.both ? [calculateNumToleratedItems(numItemsInViewport.rows), calculateNumToleratedItems(numItemsInViewport.cols)] : calculateNumToleratedItems(numItemsInViewport));
        return {
          numItemsInViewport,
          numToleratedItems
        };
      }
      calculateOptions() {
        const {
          numItemsInViewport,
          numToleratedItems
        } = this.calculateNumItems();
        const calculateLast = (_first, _num, _numT, _isCols = false) => this.getLast(_first + _num + (_first < _numT ? 2 : 3) * _numT, _isCols);
        const first = this.first;
        const last = this.both ? {
          rows: calculateLast(this.first.rows, numItemsInViewport.rows, numToleratedItems[0]),
          cols: calculateLast(this.first.cols, numItemsInViewport.cols, numToleratedItems[1], true)
        } : calculateLast(this.first, numItemsInViewport, numToleratedItems);
        this.last = last;
        this.numItemsInViewport = numItemsInViewport;
        this.d_numToleratedItems = numToleratedItems;
        if (this.showLoader) {
          this.loaderArr = this.both ? Array.from({
            length: numItemsInViewport.rows
          }).map(() => Array.from({
            length: numItemsInViewport.cols
          })) : Array.from({
            length: numItemsInViewport
          });
        }
        if (this._lazy) {
          Promise.resolve().then(() => {
            this.lazyLoadState = {
              first: this._step ? this.both ? {
                rows: 0,
                cols: first.cols
              } : 0 : first,
              last: Math.min(this._step ? this._step : this.last, this.items.length)
            };
            this.handleEvents("onLazyLoad", this.lazyLoadState);
          });
        }
      }
      calculateAutoSize() {
        if (this._autoSize && !this.d_loading) {
          Promise.resolve().then(() => {
            if (this.contentEl) {
              this.contentEl.style.minHeight = this.contentEl.style.minWidth = "auto";
              this.contentEl.style.position = "relative";
              this.elementViewChild.nativeElement.style.contain = "none";
              const [contentWidth, contentHeight] = [getWidth(this.contentEl), getHeight(this.contentEl)];
              contentWidth !== this.defaultContentWidth && (this.elementViewChild.nativeElement.style.width = "");
              contentHeight !== this.defaultContentHeight && (this.elementViewChild.nativeElement.style.height = "");
              const [width, height] = [getWidth(this.elementViewChild.nativeElement), getHeight(this.elementViewChild.nativeElement)];
              (this.both || this.horizontal) && (this.elementViewChild.nativeElement.style.width = width < this.defaultWidth ? width + "px" : this._scrollWidth || this.defaultWidth + "px");
              (this.both || this.vertical) && (this.elementViewChild.nativeElement.style.height = height < this.defaultHeight ? height + "px" : this._scrollHeight || this.defaultHeight + "px");
              this.contentEl.style.minHeight = this.contentEl.style.minWidth = "";
              this.contentEl.style.position = "";
              this.elementViewChild.nativeElement.style.contain = "";
            }
          });
        }
      }
      getLast(last = 0, isCols = false) {
        return this._items ? Math.min(isCols ? (this._columns || this._items[0]).length : this._items.length, last) : 0;
      }
      getContentPosition() {
        if (this.contentEl) {
          const style2 = getComputedStyle(this.contentEl);
          const left = parseFloat(style2.paddingLeft) + Math.max(parseFloat(style2.left) || 0, 0);
          const right = parseFloat(style2.paddingRight) + Math.max(parseFloat(style2.right) || 0, 0);
          const top = parseFloat(style2.paddingTop) + Math.max(parseFloat(style2.top) || 0, 0);
          const bottom = parseFloat(style2.paddingBottom) + Math.max(parseFloat(style2.bottom) || 0, 0);
          return {
            left,
            right,
            top,
            bottom,
            x: left + right,
            y: top + bottom
          };
        }
        return {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0,
          x: 0,
          y: 0
        };
      }
      setSize() {
        if (this.elementViewChild?.nativeElement) {
          const parentElement = this.elementViewChild.nativeElement.parentElement.parentElement;
          const width = this._scrollWidth || `${this.elementViewChild.nativeElement.offsetWidth || parentElement.offsetWidth}px`;
          const height = this._scrollHeight || `${this.elementViewChild.nativeElement.offsetHeight || parentElement.offsetHeight}px`;
          const setProp = (_name, _value) => this.elementViewChild.nativeElement.style[_name] = _value;
          if (this.both || this.horizontal) {
            setProp("height", height);
            setProp("width", width);
          } else {
            setProp("height", height);
          }
        }
      }
      setSpacerSize() {
        if (this._items) {
          const contentPos = this.getContentPosition();
          const setProp = (_name, _value, _size, _cpos = 0) => this.spacerStyle = __spreadValues(__spreadValues({}, this.spacerStyle), {
            [`${_name}`]: (_value || []).length * _size + _cpos + "px"
          });
          if (this.both) {
            setProp("height", this._items, this._itemSize[0], contentPos.y);
            setProp("width", this._columns || this._items[1], this._itemSize[1], contentPos.x);
          } else {
            this.horizontal ? setProp("width", this._columns || this._items, this._itemSize, contentPos.x) : setProp("height", this._items, this._itemSize, contentPos.y);
          }
        }
      }
      setContentPosition(pos) {
        if (this.contentEl && !this._appendOnly) {
          const first = pos ? pos.first : this.first;
          const calculateTranslateVal = (_first, _size) => _first * _size;
          const setTransform = (_x = 0, _y = 0) => this.contentStyle = __spreadValues(__spreadValues({}, this.contentStyle), {
            transform: `translate3d(${_x}px, ${_y}px, 0)`
          });
          if (this.both) {
            setTransform(calculateTranslateVal(first.cols, this._itemSize[1]), calculateTranslateVal(first.rows, this._itemSize[0]));
          } else {
            const translateVal = calculateTranslateVal(first, this._itemSize);
            this.horizontal ? setTransform(translateVal, 0) : setTransform(0, translateVal);
          }
        }
      }
      onScrollPositionChange(event2) {
        const target = event2.target;
        const contentPos = this.getContentPosition();
        const calculateScrollPos = (_pos, _cpos) => _pos ? _pos > _cpos ? _pos - _cpos : _pos : 0;
        const calculateCurrentIndex = (_pos, _size) => _size || _pos ? Math.floor(_pos / (_size || _pos)) : 0;
        const calculateTriggerIndex = (_currentIndex, _first, _last, _num, _numT, _isScrollDownOrRight) => {
          return _currentIndex <= _numT ? _numT : _isScrollDownOrRight ? _last - _num - _numT : _first + _numT - 1;
        };
        const calculateFirst = (_currentIndex, _triggerIndex, _first, _last, _num, _numT, _isScrollDownOrRight) => {
          if (_currentIndex <= _numT) return 0;
          else return Math.max(0, _isScrollDownOrRight ? _currentIndex < _triggerIndex ? _first : _currentIndex - _numT : _currentIndex > _triggerIndex ? _first : _currentIndex - 2 * _numT);
        };
        const calculateLast = (_currentIndex, _first, _last, _num, _numT, _isCols = false) => {
          let lastValue = _first + _num + 2 * _numT;
          if (_currentIndex >= _numT) {
            lastValue += _numT + 1;
          }
          return this.getLast(lastValue, _isCols);
        };
        const scrollTop = calculateScrollPos(target.scrollTop, contentPos.top);
        const scrollLeft = calculateScrollPos(target.scrollLeft, contentPos.left);
        let newFirst = this.both ? {
          rows: 0,
          cols: 0
        } : 0;
        let newLast = this.last;
        let isRangeChanged = false;
        let newScrollPos = this.lastScrollPos;
        if (this.both) {
          const isScrollDown = this.lastScrollPos.top <= scrollTop;
          const isScrollRight = this.lastScrollPos.left <= scrollLeft;
          if (!this._appendOnly || this._appendOnly && (isScrollDown || isScrollRight)) {
            const currentIndex = {
              rows: calculateCurrentIndex(scrollTop, this._itemSize[0]),
              cols: calculateCurrentIndex(scrollLeft, this._itemSize[1])
            };
            const triggerIndex = {
              rows: calculateTriggerIndex(currentIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),
              cols: calculateTriggerIndex(currentIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight)
            };
            newFirst = {
              rows: calculateFirst(currentIndex.rows, triggerIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),
              cols: calculateFirst(currentIndex.cols, triggerIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight)
            };
            newLast = {
              rows: calculateLast(currentIndex.rows, newFirst.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0]),
              cols: calculateLast(currentIndex.cols, newFirst.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], true)
            };
            isRangeChanged = newFirst.rows !== this.first.rows || newLast.rows !== this.last.rows || newFirst.cols !== this.first.cols || newLast.cols !== this.last.cols || this.isRangeChanged;
            newScrollPos = {
              top: scrollTop,
              left: scrollLeft
            };
          }
        } else {
          const scrollPos = this.horizontal ? scrollLeft : scrollTop;
          const isScrollDownOrRight = this.lastScrollPos <= scrollPos;
          if (!this._appendOnly || this._appendOnly && isScrollDownOrRight) {
            const currentIndex = calculateCurrentIndex(scrollPos, this._itemSize);
            const triggerIndex = calculateTriggerIndex(currentIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);
            newFirst = calculateFirst(currentIndex, triggerIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);
            newLast = calculateLast(currentIndex, newFirst, this.last, this.numItemsInViewport, this.d_numToleratedItems);
            isRangeChanged = newFirst !== this.first || newLast !== this.last || this.isRangeChanged;
            newScrollPos = scrollPos;
          }
        }
        return {
          first: newFirst,
          last: newLast,
          isRangeChanged,
          scrollPos: newScrollPos
        };
      }
      onScrollChange(event2) {
        const {
          first,
          last,
          isRangeChanged,
          scrollPos
        } = this.onScrollPositionChange(event2);
        if (isRangeChanged) {
          const newState = {
            first,
            last
          };
          this.setContentPosition(newState);
          this.first = first;
          this.last = last;
          this.lastScrollPos = scrollPos;
          this.handleEvents("onScrollIndexChange", newState);
          if (this._lazy && this.isPageChanged(first)) {
            const lazyLoadState = {
              first: this._step ? Math.min(this.getPageByFirst(first) * this._step, this.items.length - this._step) : first,
              last: Math.min(this._step ? (this.getPageByFirst(first) + 1) * this._step : last, this.items.length)
            };
            const isLazyStateChanged = this.lazyLoadState.first !== lazyLoadState.first || this.lazyLoadState.last !== lazyLoadState.last;
            isLazyStateChanged && this.handleEvents("onLazyLoad", lazyLoadState);
            this.lazyLoadState = lazyLoadState;
          }
        }
      }
      onContainerScroll(event2) {
        this.handleEvents("onScroll", {
          originalEvent: event2
        });
        if (this._delay && this.isPageChanged()) {
          if (this.scrollTimeout) {
            clearTimeout(this.scrollTimeout);
          }
          if (!this.d_loading && this.showLoader) {
            const {
              isRangeChanged
            } = this.onScrollPositionChange(event2);
            const changed = isRangeChanged || (this._step ? this.isPageChanged() : false);
            if (changed) {
              this.d_loading = true;
              this.cd.detectChanges();
            }
          }
          this.scrollTimeout = setTimeout(() => {
            this.onScrollChange(event2);
            if (this.d_loading && this.showLoader && (!this._lazy || this._loading === void 0)) {
              this.d_loading = false;
              this.page = this.getPageByFirst();
            }
            this.cd.detectChanges();
          }, this._delay);
        } else {
          !this.d_loading && this.onScrollChange(event2);
        }
      }
      bindResizeListener() {
        if (isPlatformBrowser(this.platformId)) {
          if (!this.windowResizeListener) {
            this.zone.runOutsideAngular(() => {
              const window2 = this.document.defaultView;
              const event2 = isTouchDevice() ? "orientationchange" : "resize";
              this.windowResizeListener = this.renderer.listen(window2, event2, this.onWindowResize.bind(this));
            });
          }
        }
      }
      unbindResizeListener() {
        if (this.windowResizeListener) {
          this.windowResizeListener();
          this.windowResizeListener = null;
        }
      }
      onWindowResize() {
        if (this.resizeTimeout) {
          clearTimeout(this.resizeTimeout);
        }
        this.resizeTimeout = setTimeout(() => {
          if (isVisible(this.elementViewChild?.nativeElement)) {
            const [width, height] = [getWidth(this.elementViewChild?.nativeElement), getHeight(this.elementViewChild?.nativeElement)];
            const [isDiffWidth, isDiffHeight] = [width !== this.defaultWidth, height !== this.defaultHeight];
            const reinit = this.both ? isDiffWidth || isDiffHeight : this.horizontal ? isDiffWidth : this.vertical ? isDiffHeight : false;
            reinit && this.zone.run(() => {
              this.d_numToleratedItems = this._numToleratedItems;
              this.defaultWidth = width;
              this.defaultHeight = height;
              this.defaultContentWidth = getWidth(this.contentEl);
              this.defaultContentHeight = getHeight(this.contentEl);
              this.init();
            });
          }
        }, this._resizeDelay);
      }
      handleEvents(name, params) {
        return this.options && this.options[name] ? this.options[name](params) : this[name].emit(params);
      }
      getContentOptions() {
        return {
          contentStyleClass: `p-virtualscroller-content ${this.d_loading ? "p-virtualscroller-loading" : ""}`,
          items: this.loadedItems,
          getItemOptions: (index) => this.getOptions(index),
          loading: this.d_loading,
          getLoaderOptions: (index, options) => this.getLoaderOptions(index, options),
          itemSize: this._itemSize,
          rows: this.loadedRows,
          columns: this.loadedColumns,
          spacerStyle: this.spacerStyle,
          contentStyle: this.contentStyle,
          vertical: this.vertical,
          horizontal: this.horizontal,
          both: this.both
        };
      }
      getOptions(renderedIndex) {
        const count = (this._items || []).length;
        const index = this.both ? this.first.rows + renderedIndex : this.first + renderedIndex;
        return {
          index,
          count,
          first: index === 0,
          last: index === count - 1,
          even: index % 2 === 0,
          odd: index % 2 !== 0
        };
      }
      getLoaderOptions(index, extOptions) {
        const count = this.loaderArr.length;
        return __spreadValues({
          index,
          count,
          first: index === 0,
          last: index === count - 1,
          even: index % 2 === 0,
          odd: index % 2 !== 0
        }, extOptions);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Scroller,
        deps: [{
          token: NgZone
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _Scroller,
        isStandalone: true,
        selector: "p-scroller, p-virtualscroller, p-virtual-scroller, p-virtualScroller",
        inputs: {
          id: "id",
          style: "style",
          styleClass: "styleClass",
          tabindex: "tabindex",
          items: "items",
          itemSize: "itemSize",
          scrollHeight: "scrollHeight",
          scrollWidth: "scrollWidth",
          orientation: "orientation",
          step: "step",
          delay: "delay",
          resizeDelay: "resizeDelay",
          appendOnly: "appendOnly",
          inline: "inline",
          lazy: "lazy",
          disabled: "disabled",
          loaderDisabled: "loaderDisabled",
          columns: "columns",
          showSpacer: "showSpacer",
          showLoader: "showLoader",
          numToleratedItems: "numToleratedItems",
          loading: "loading",
          autoSize: "autoSize",
          trackBy: "trackBy",
          options: "options"
        },
        outputs: {
          onLazyLoad: "onLazyLoad",
          onScroll: "onScroll",
          onScrollIndexChange: "onScrollIndexChange"
        },
        host: {
          properties: {
            "style.height": "this.height"
          }
        },
        providers: [ScrollerStyle],
        queries: [{
          propertyName: "contentTemplate",
          first: true,
          predicate: ["content"]
        }, {
          propertyName: "itemTemplate",
          first: true,
          predicate: ["item"]
        }, {
          propertyName: "loaderTemplate",
          first: true,
          predicate: ["loader"]
        }, {
          propertyName: "loaderIconTemplate",
          first: true,
          predicate: ["loadericon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "elementViewChild",
          first: true,
          predicate: ["element"],
          descendants: true
        }, {
          propertyName: "contentViewChild",
          first: true,
          predicate: ["content"],
          descendants: true
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports,
        template: `
        <ng-container *ngIf="!_disabled; else disabledContainer">
            <div
                #element
                [attr.id]="_id"
                [attr.tabindex]="tabindex"
                [ngStyle]="_style"
                [class]="_styleClass"
                [ngClass]="{
                    'p-virtualscroller': true,
                    'p-virtualscroller-inline': inline,
                    'p-virtualscroller-both p-both-scroll': both,
                    'p-virtualscroller-horizontal p-horizontal-scroll': horizontal
                }"
                (scroll)="onContainerScroll($event)"
                [attr.data-pc-name]="'scroller'"
                [attr.data-pc-section]="'root'"
            >
                <ng-container *ngIf="contentTemplate || _contentTemplate; else buildInContent">
                    <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: loadedItems, options: getContentOptions() }"></ng-container>
                </ng-container>
                <ng-template #buildInContent>
                    <div #content [class]="contentStyleClass" [ngClass]="{ 'p-virtualscroller-content': true, 'p-virtualscroller-loading ': d_loading }" [style]="contentStyle" [attr.data-pc-section]="'content'">
                        <ng-container *ngFor="let item of loadedItems; let index = index; trackBy: _trackBy">
                            <ng-container *ngTemplateOutlet="itemTemplate || _itemTemplate; context: { $implicit: item, options: getOptions(index) }"></ng-container>
                        </ng-container>
                    </div>
                </ng-template>
                <div *ngIf="_showSpacer" class="p-virtualscroller-spacer" [ngStyle]="spacerStyle" [attr.data-pc-section]="'spacer'"></div>
                <div *ngIf="!loaderDisabled && _showLoader && d_loading" class="p-virtualscroller-loader" [ngClass]="{ 'p-virtualscroller-loader-mask': !loaderTemplate }" [attr.data-pc-section]="'loader'">
                    <ng-container *ngIf="loaderTemplate || _loaderTemplate; else buildInLoader">
                        <ng-container *ngFor="let item of loaderArr; let index = index">
                            <ng-container
                                *ngTemplateOutlet="
                                    loaderTemplate || _loaderTemplate;
                                    context: {
                                        options: getLoaderOptions(index, both && { numCols: numItemsInViewport.cols })
                                    }
                                "
                            ></ng-container>
                        </ng-container>
                    </ng-container>
                    <ng-template #buildInLoader>
                        <ng-container *ngIf="loaderIconTemplate || _loaderIconTemplate; else buildInLoaderIcon">
                            <ng-container *ngTemplateOutlet="loaderIconTemplate || _loaderIconTemplate; context: { options: { styleClass: 'p-virtualscroller-loading-icon' } }"></ng-container>
                        </ng-container>
                        <ng-template #buildInLoaderIcon>
                            <SpinnerIcon [styleClass]="'p-virtualscroller-loading-icon pi-spin'" [attr.data-pc-section]="'loadingIcon'" />
                        </ng-template>
                    </ng-template>
                </div>
            </div>
        </ng-container>
        <ng-template #disabledContainer>
            <ng-content></ng-content>
            <ng-container *ngIf="contentTemplate || _contentTemplate">
                <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: items, options: { rows: _items, columns: loadedColumns } }"></ng-container>
            </ng-container>
        </ng-template>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgForOf,
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: SpinnerIcon,
          selector: "SpinnerIcon"
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.Default,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Scroller,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-scroller, p-virtualscroller, p-virtual-scroller, p-virtualScroller",
          imports: [CommonModule, SpinnerIcon, SharedModule],
          standalone: true,
          template: `
        <ng-container *ngIf="!_disabled; else disabledContainer">
            <div
                #element
                [attr.id]="_id"
                [attr.tabindex]="tabindex"
                [ngStyle]="_style"
                [class]="_styleClass"
                [ngClass]="{
                    'p-virtualscroller': true,
                    'p-virtualscroller-inline': inline,
                    'p-virtualscroller-both p-both-scroll': both,
                    'p-virtualscroller-horizontal p-horizontal-scroll': horizontal
                }"
                (scroll)="onContainerScroll($event)"
                [attr.data-pc-name]="'scroller'"
                [attr.data-pc-section]="'root'"
            >
                <ng-container *ngIf="contentTemplate || _contentTemplate; else buildInContent">
                    <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: loadedItems, options: getContentOptions() }"></ng-container>
                </ng-container>
                <ng-template #buildInContent>
                    <div #content [class]="contentStyleClass" [ngClass]="{ 'p-virtualscroller-content': true, 'p-virtualscroller-loading ': d_loading }" [style]="contentStyle" [attr.data-pc-section]="'content'">
                        <ng-container *ngFor="let item of loadedItems; let index = index; trackBy: _trackBy">
                            <ng-container *ngTemplateOutlet="itemTemplate || _itemTemplate; context: { $implicit: item, options: getOptions(index) }"></ng-container>
                        </ng-container>
                    </div>
                </ng-template>
                <div *ngIf="_showSpacer" class="p-virtualscroller-spacer" [ngStyle]="spacerStyle" [attr.data-pc-section]="'spacer'"></div>
                <div *ngIf="!loaderDisabled && _showLoader && d_loading" class="p-virtualscroller-loader" [ngClass]="{ 'p-virtualscroller-loader-mask': !loaderTemplate }" [attr.data-pc-section]="'loader'">
                    <ng-container *ngIf="loaderTemplate || _loaderTemplate; else buildInLoader">
                        <ng-container *ngFor="let item of loaderArr; let index = index">
                            <ng-container
                                *ngTemplateOutlet="
                                    loaderTemplate || _loaderTemplate;
                                    context: {
                                        options: getLoaderOptions(index, both && { numCols: numItemsInViewport.cols })
                                    }
                                "
                            ></ng-container>
                        </ng-container>
                    </ng-container>
                    <ng-template #buildInLoader>
                        <ng-container *ngIf="loaderIconTemplate || _loaderIconTemplate; else buildInLoaderIcon">
                            <ng-container *ngTemplateOutlet="loaderIconTemplate || _loaderIconTemplate; context: { options: { styleClass: 'p-virtualscroller-loading-icon' } }"></ng-container>
                        </ng-container>
                        <ng-template #buildInLoaderIcon>
                            <SpinnerIcon [styleClass]="'p-virtualscroller-loading-icon pi-spin'" [attr.data-pc-section]="'loadingIcon'" />
                        </ng-template>
                    </ng-template>
                </div>
            </div>
        </ng-container>
        <ng-template #disabledContainer>
            <ng-content></ng-content>
            <ng-container *ngIf="contentTemplate || _contentTemplate">
                <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: items, options: { rows: _items, columns: loadedColumns } }"></ng-container>
            </ng-container>
        </ng-template>
    `,
          changeDetection: ChangeDetectionStrategy.Default,
          encapsulation: ViewEncapsulation.None,
          providers: [ScrollerStyle]
        }]
      }],
      ctorParameters: () => [{
        type: NgZone
      }],
      propDecorators: {
        id: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        tabindex: [{
          type: Input
        }],
        items: [{
          type: Input
        }],
        itemSize: [{
          type: Input
        }],
        scrollHeight: [{
          type: Input
        }],
        scrollWidth: [{
          type: Input
        }],
        orientation: [{
          type: Input
        }],
        step: [{
          type: Input
        }],
        delay: [{
          type: Input
        }],
        resizeDelay: [{
          type: Input
        }],
        appendOnly: [{
          type: Input
        }],
        inline: [{
          type: Input
        }],
        lazy: [{
          type: Input
        }],
        disabled: [{
          type: Input
        }],
        loaderDisabled: [{
          type: Input
        }],
        columns: [{
          type: Input
        }],
        showSpacer: [{
          type: Input
        }],
        showLoader: [{
          type: Input
        }],
        numToleratedItems: [{
          type: Input
        }],
        loading: [{
          type: Input
        }],
        autoSize: [{
          type: Input
        }],
        trackBy: [{
          type: Input
        }],
        options: [{
          type: Input
        }],
        onLazyLoad: [{
          type: Output
        }],
        onScroll: [{
          type: Output
        }],
        onScrollIndexChange: [{
          type: Output
        }],
        elementViewChild: [{
          type: ViewChild,
          args: ["element"]
        }],
        contentViewChild: [{
          type: ViewChild,
          args: ["content"]
        }],
        height: [{
          type: HostBinding,
          args: ["style.height"]
        }],
        contentTemplate: [{
          type: ContentChild,
          args: ["content", {
            descendants: false
          }]
        }],
        itemTemplate: [{
          type: ContentChild,
          args: ["item", {
            descendants: false
          }]
        }],
        loaderTemplate: [{
          type: ContentChild,
          args: ["loader", {
            descendants: false
          }]
        }],
        loaderIconTemplate: [{
          type: ContentChild,
          args: ["loadericon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    ScrollerModule = class _ScrollerModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ScrollerModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ScrollerModule,
        imports: [Scroller, SharedModule],
        exports: [Scroller, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ScrollerModule,
        imports: [Scroller, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ScrollerModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Scroller, SharedModule],
          exports: [Scroller, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-tooltip.mjs
var theme11, classes10, TooltipStyle, TooltipClasses, Tooltip, TooltipModule;
var init_primeng_tooltip = __esm({
  "node_modules/primeng/fesm2022/primeng-tooltip.mjs"() {
    "use strict";
    init_common();
    init_core();
    init_core();
    init_utils();
    init_primeng_basecomponent();
    init_primeng_dom();
    init_primeng_utils();
    init_primeng_base();
    theme11 = ({
      dt
    }) => `
.p-tooltip {
    position: absolute;
    display: none;
    max-width: ${dt("tooltip.max.width")};
}

.p-tooltip-right,
.p-tooltip-left {
    padding: 0 ${dt("tooltip.gutter")};
}

.p-tooltip-top,
.p-tooltip-bottom {
    padding: ${dt("tooltip.gutter")} 0;
}

.p-tooltip-text {
    white-space: pre-line;
    word-break: break-word;
    background: ${dt("tooltip.background")};
    color: ${dt("tooltip.color")};
    padding: ${dt("tooltip.padding")};
    box-shadow: ${dt("tooltip.shadow")};
    border-radius: ${dt("tooltip.border.radius")};
}

.p-tooltip-arrow {
    position: absolute;
    width: 0;
    height: 0;
    border-color: transparent;
    border-style: solid;
    scale: 2;
}

.p-tooltip-right .p-tooltip-arrow {
    top: 50%;
    left: 0;
    margin-top: calc(-1 * ${dt("tooltip.gutter")});
    border-width: ${dt("tooltip.gutter")} ${dt("tooltip.gutter")} ${dt("tooltip.gutter")} 0;
    border-right-color: ${dt("tooltip.background")};
}

.p-tooltip-left .p-tooltip-arrow {
    top: 50%;
    right: 0;
    margin-top: calc(-1 * ${dt("tooltip.gutter")});
    border-width: ${dt("tooltip.gutter")} 0 ${dt("tooltip.gutter")} ${dt("tooltip.gutter")};
    border-left-color: ${dt("tooltip.background")};
}

.p-tooltip-top .p-tooltip-arrow {
    bottom: 0;
    left: 50%;
    margin-left: calc(-1 * ${dt("tooltip.gutter")});
    border-width: ${dt("tooltip.gutter")} ${dt("tooltip.gutter")} 0 ${dt("tooltip.gutter")};
    border-top-color: ${dt("tooltip.background")};
    border-bottom-color: ${dt("tooltip.background")};
}

.p-tooltip-bottom .p-tooltip-arrow {
    top: 0;
    left: 50%;
    margin-left: calc(-1 * ${dt("tooltip.gutter")});
    border-width: 0 ${dt("tooltip.gutter")} ${dt("tooltip.gutter")} ${dt("tooltip.gutter")};
    border-top-color: ${dt("tooltip.background")};
    border-bottom-color: ${dt("tooltip.background")};
}
`;
    classes10 = {
      root: "p-tooltip p-component",
      arrow: "p-tooltip-arrow",
      text: "p-tooltip-text"
    };
    TooltipStyle = class _TooltipStyle extends BaseStyle {
      name = "tooltip";
      theme = theme11;
      classes = classes10;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TooltipStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TooltipStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TooltipStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(TooltipClasses2) {
      TooltipClasses2["root"] = "p-tooltip";
      TooltipClasses2["arrow"] = "p-tooltip-arrow";
      TooltipClasses2["text"] = "p-tooltip-text";
    })(TooltipClasses || (TooltipClasses = {}));
    Tooltip = class _Tooltip extends BaseComponent {
      zone;
      viewContainer;
      /**
       * Position of the tooltip.
       * @group Props
       */
      tooltipPosition;
      /**
       * Event to show the tooltip.
       * @group Props
       */
      tooltipEvent = "hover";
      /**
       *  Target element to attach the overlay, valid values are "body", "target" or a local ng-F variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
       * @group Props
       */
      appendTo;
      /**
       * Type of CSS position.
       * @group Props
       */
      positionStyle;
      /**
       * Style class of the tooltip.
       * @group Props
       */
      tooltipStyleClass;
      /**
       * Whether the z-index should be managed automatically to always go on top or have a fixed value.
       * @group Props
       */
      tooltipZIndex;
      /**
       * By default the tooltip contents are rendered as text. Set to false to support html tags in the content.
       * @group Props
       */
      escape = true;
      /**
       * Delay to show the tooltip in milliseconds.
       * @group Props
       */
      showDelay;
      /**
       * Delay to hide the tooltip in milliseconds.
       * @group Props
       */
      hideDelay;
      /**
       * Time to wait in milliseconds to hide the tooltip even it is active.
       * @group Props
       */
      life;
      /**
       * Specifies the additional vertical offset of the tooltip from its default position.
       * @group Props
       */
      positionTop;
      /**
       * Specifies the additional horizontal offset of the tooltip from its default position.
       * @group Props
       */
      positionLeft;
      /**
       * Whether to hide tooltip when hovering over tooltip content.
       * @group Props
       */
      autoHide = true;
      /**
       * Automatically adjusts the element position when there is not enough space on the selected position.
       * @group Props
       */
      fitContent = true;
      /**
       * Whether to hide tooltip on escape key press.
       * @group Props
       */
      hideOnEscape = true;
      /**
       * Content of the tooltip.
       * @group Props
       */
      content;
      /**
       * When present, it specifies that the component should be disabled.
       * @defaultValue false
       * @group Props
       */
      get disabled() {
        return this._disabled;
      }
      set disabled(val) {
        this._disabled = val;
        this.deactivate();
      }
      /**
       * Specifies the tooltip configuration options for the component.
       * @group Props
       */
      tooltipOptions;
      _tooltipOptions = {
        tooltipLabel: null,
        tooltipPosition: "right",
        tooltipEvent: "hover",
        appendTo: "body",
        positionStyle: null,
        tooltipStyleClass: null,
        tooltipZIndex: "auto",
        escape: true,
        disabled: null,
        showDelay: null,
        hideDelay: null,
        positionTop: null,
        positionLeft: null,
        life: null,
        autoHide: true,
        hideOnEscape: true,
        id: uuid("pn_id_") + "_tooltip"
      };
      _disabled;
      container;
      styleClass;
      tooltipText;
      showTimeout;
      hideTimeout;
      active;
      mouseEnterListener;
      mouseLeaveListener;
      containerMouseleaveListener;
      clickListener;
      focusListener;
      blurListener;
      documentEscapeListener;
      scrollHandler;
      resizeListener;
      _componentStyle = inject(TooltipStyle);
      interactionInProgress = false;
      constructor(zone, viewContainer) {
        super();
        this.zone = zone;
        this.viewContainer = viewContainer;
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        if (isPlatformBrowser(this.platformId)) {
          this.zone.runOutsideAngular(() => {
            const tooltipEvent = this.getOption("tooltipEvent");
            if (tooltipEvent === "hover" || tooltipEvent === "both") {
              this.mouseEnterListener = this.onMouseEnter.bind(this);
              this.mouseLeaveListener = this.onMouseLeave.bind(this);
              this.clickListener = this.onInputClick.bind(this);
              this.el.nativeElement.addEventListener("mouseenter", this.mouseEnterListener);
              this.el.nativeElement.addEventListener("click", this.clickListener);
              this.el.nativeElement.addEventListener("mouseleave", this.mouseLeaveListener);
            }
            if (tooltipEvent === "focus" || tooltipEvent === "both") {
              this.focusListener = this.onFocus.bind(this);
              this.blurListener = this.onBlur.bind(this);
              let target = this.el.nativeElement.querySelector(".p-component");
              if (!target) {
                target = this.getTarget(this.el.nativeElement);
              }
              target.addEventListener("focus", this.focusListener);
              target.addEventListener("blur", this.blurListener);
            }
          });
        }
      }
      ngOnChanges(simpleChange) {
        super.ngOnChanges(simpleChange);
        if (simpleChange.tooltipPosition) {
          this.setOption({
            tooltipPosition: simpleChange.tooltipPosition.currentValue
          });
        }
        if (simpleChange.tooltipEvent) {
          this.setOption({
            tooltipEvent: simpleChange.tooltipEvent.currentValue
          });
        }
        if (simpleChange.appendTo) {
          this.setOption({
            appendTo: simpleChange.appendTo.currentValue
          });
        }
        if (simpleChange.positionStyle) {
          this.setOption({
            positionStyle: simpleChange.positionStyle.currentValue
          });
        }
        if (simpleChange.tooltipStyleClass) {
          this.setOption({
            tooltipStyleClass: simpleChange.tooltipStyleClass.currentValue
          });
        }
        if (simpleChange.tooltipZIndex) {
          this.setOption({
            tooltipZIndex: simpleChange.tooltipZIndex.currentValue
          });
        }
        if (simpleChange.escape) {
          this.setOption({
            escape: simpleChange.escape.currentValue
          });
        }
        if (simpleChange.showDelay) {
          this.setOption({
            showDelay: simpleChange.showDelay.currentValue
          });
        }
        if (simpleChange.hideDelay) {
          this.setOption({
            hideDelay: simpleChange.hideDelay.currentValue
          });
        }
        if (simpleChange.life) {
          this.setOption({
            life: simpleChange.life.currentValue
          });
        }
        if (simpleChange.positionTop) {
          this.setOption({
            positionTop: simpleChange.positionTop.currentValue
          });
        }
        if (simpleChange.positionLeft) {
          this.setOption({
            positionLeft: simpleChange.positionLeft.currentValue
          });
        }
        if (simpleChange.disabled) {
          this.setOption({
            disabled: simpleChange.disabled.currentValue
          });
        }
        if (simpleChange.content) {
          this.setOption({
            tooltipLabel: simpleChange.content.currentValue
          });
          if (this.active) {
            if (simpleChange.content.currentValue) {
              if (this.container && this.container.offsetParent) {
                this.updateText();
                this.align();
              } else {
                this.show();
              }
            } else {
              this.hide();
            }
          }
        }
        if (simpleChange.autoHide) {
          this.setOption({
            autoHide: simpleChange.autoHide.currentValue
          });
        }
        if (simpleChange.id) {
          this.setOption({
            id: simpleChange.id.currentValue
          });
        }
        if (simpleChange.tooltipOptions) {
          this._tooltipOptions = __spreadValues(__spreadValues({}, this._tooltipOptions), simpleChange.tooltipOptions.currentValue);
          this.deactivate();
          if (this.active) {
            if (this.getOption("tooltipLabel")) {
              if (this.container && this.container.offsetParent) {
                this.updateText();
                this.align();
              } else {
                this.show();
              }
            } else {
              this.hide();
            }
          }
        }
      }
      isAutoHide() {
        return this.getOption("autoHide");
      }
      onMouseEnter(e) {
        if (!this.container && !this.showTimeout) {
          this.activate();
        }
      }
      onMouseLeave(e) {
        if (!this.isAutoHide()) {
          const valid = hasClass(e.relatedTarget, "p-tooltip") || hasClass(e.relatedTarget, "p-tooltip-text") || hasClass(e.relatedTarget, "p-tooltip-arrow");
          !valid && this.deactivate();
        } else {
          this.deactivate();
        }
      }
      onFocus(e) {
        this.activate();
      }
      onBlur(e) {
        this.deactivate();
      }
      onInputClick(e) {
        this.deactivate();
      }
      activate() {
        if (!this.interactionInProgress) {
          this.active = true;
          this.clearHideTimeout();
          if (this.getOption("showDelay")) this.showTimeout = setTimeout(() => {
            this.show();
          }, this.getOption("showDelay"));
          else this.show();
          if (this.getOption("life")) {
            let duration = this.getOption("showDelay") ? this.getOption("life") + this.getOption("showDelay") : this.getOption("life");
            this.hideTimeout = setTimeout(() => {
              this.hide();
            }, duration);
          }
          if (this.getOption("hideOnEscape")) {
            this.documentEscapeListener = this.renderer.listen("document", "keydown.escape", () => {
              this.deactivate();
              this.documentEscapeListener();
            });
          }
          this.interactionInProgress = true;
        }
      }
      deactivate() {
        this.interactionInProgress = false;
        this.active = false;
        this.clearShowTimeout();
        if (this.getOption("hideDelay")) {
          this.clearHideTimeout();
          this.hideTimeout = setTimeout(() => {
            this.hide();
          }, this.getOption("hideDelay"));
        } else {
          this.hide();
        }
        if (this.documentEscapeListener) {
          this.documentEscapeListener();
        }
      }
      create() {
        if (this.container) {
          this.clearHideTimeout();
          this.remove();
        }
        this.container = document.createElement("div");
        this.container.setAttribute("id", this.getOption("id"));
        this.container.setAttribute("role", "tooltip");
        let tooltipArrow = document.createElement("div");
        tooltipArrow.className = "p-tooltip-arrow";
        this.container.appendChild(tooltipArrow);
        this.tooltipText = document.createElement("div");
        this.tooltipText.className = "p-tooltip-text";
        this.updateText();
        if (this.getOption("positionStyle")) {
          this.container.style.position = this.getOption("positionStyle");
        }
        this.container.appendChild(this.tooltipText);
        if (this.getOption("appendTo") === "body") document.body.appendChild(this.container);
        else if (this.getOption("appendTo") === "target") appendChild(this.container, this.el.nativeElement);
        else appendChild(this.getOption("appendTo"), this.container);
        this.container.style.display = "none";
        if (this.fitContent) {
          this.container.style.width = "fit-content";
        }
        if (this.isAutoHide()) {
          this.container.style.pointerEvents = "none";
        } else {
          this.container.style.pointerEvents = "unset";
          this.bindContainerMouseleaveListener();
        }
      }
      bindContainerMouseleaveListener() {
        if (!this.containerMouseleaveListener) {
          const targetEl = this.container ?? this.container.nativeElement;
          this.containerMouseleaveListener = this.renderer.listen(targetEl, "mouseleave", (e) => {
            this.deactivate();
          });
        }
      }
      unbindContainerMouseleaveListener() {
        if (this.containerMouseleaveListener) {
          this.bindContainerMouseleaveListener();
          this.containerMouseleaveListener = null;
        }
      }
      show() {
        if (!this.getOption("tooltipLabel") || this.getOption("disabled")) {
          return;
        }
        this.create();
        const nativeElement = this.el.nativeElement;
        const pDialogWrapper = nativeElement.closest("p-dialog");
        if (pDialogWrapper) {
          setTimeout(() => {
            this.container && (this.container.style.display = "inline-block");
            this.container && this.align();
          }, 100);
        } else {
          this.container.style.display = "inline-block";
          this.align();
        }
        fadeIn(this.container, 250);
        if (this.getOption("tooltipZIndex") === "auto") zindexutils.set("tooltip", this.container, this.config.zIndex.tooltip);
        else this.container.style.zIndex = this.getOption("tooltipZIndex");
        this.bindDocumentResizeListener();
        this.bindScrollListener();
      }
      hide() {
        if (this.getOption("tooltipZIndex") === "auto") {
          zindexutils.clear(this.container);
        }
        this.remove();
      }
      updateText() {
        const content = this.getOption("tooltipLabel");
        if (content instanceof TemplateRef) {
          const embeddedViewRef = this.viewContainer.createEmbeddedView(content);
          embeddedViewRef.detectChanges();
          embeddedViewRef.rootNodes.forEach((node) => this.tooltipText.appendChild(node));
        } else if (this.getOption("escape")) {
          this.tooltipText.innerHTML = "";
          this.tooltipText.appendChild(document.createTextNode(content));
        } else {
          this.tooltipText.innerHTML = content;
        }
      }
      align() {
        let position = this.getOption("tooltipPosition");
        const positionPriority = {
          top: [this.alignTop, this.alignBottom, this.alignRight, this.alignLeft],
          bottom: [this.alignBottom, this.alignTop, this.alignRight, this.alignLeft],
          left: [this.alignLeft, this.alignRight, this.alignTop, this.alignBottom],
          right: [this.alignRight, this.alignLeft, this.alignTop, this.alignBottom]
        };
        for (let [index, alignmentFn] of positionPriority[position].entries()) {
          if (index === 0) alignmentFn.call(this);
          else if (this.isOutOfBounds()) alignmentFn.call(this);
          else break;
        }
      }
      getHostOffset() {
        if (this.getOption("appendTo") === "body" || this.getOption("appendTo") === "target") {
          let offset = this.el.nativeElement.getBoundingClientRect();
          let targetLeft = offset.left + getWindowScrollLeft();
          let targetTop = offset.top + getWindowScrollTop();
          return {
            left: targetLeft,
            top: targetTop
          };
        } else {
          return {
            left: 0,
            top: 0
          };
        }
      }
      get activeElement() {
        return this.el.nativeElement.nodeName.startsWith("P-") ? findSingle(this.el.nativeElement, ".p-component") : this.el.nativeElement;
      }
      alignRight() {
        this.preAlign("right");
        const el = this.activeElement;
        const offsetLeft = getOuterWidth(el);
        const offsetTop = (getOuterHeight(el) - getOuterHeight(this.container)) / 2;
        this.alignTooltip(offsetLeft, offsetTop);
      }
      alignLeft() {
        this.preAlign("left");
        let offsetLeft = getOuterWidth(this.container);
        let offsetTop = (getOuterHeight(this.el.nativeElement) - getOuterHeight(this.container)) / 2;
        this.alignTooltip(-offsetLeft, offsetTop);
      }
      alignTop() {
        this.preAlign("top");
        let offsetLeft = (getOuterWidth(this.el.nativeElement) - getOuterWidth(this.container)) / 2;
        let offsetTop = getOuterHeight(this.container);
        this.alignTooltip(offsetLeft, -offsetTop);
      }
      alignBottom() {
        this.preAlign("bottom");
        let offsetLeft = (getOuterWidth(this.el.nativeElement) - getOuterWidth(this.container)) / 2;
        let offsetTop = getOuterHeight(this.el.nativeElement);
        this.alignTooltip(offsetLeft, offsetTop);
      }
      alignTooltip(offsetLeft, offsetTop) {
        let hostOffset = this.getHostOffset();
        let left = hostOffset.left + offsetLeft;
        let top = hostOffset.top + offsetTop;
        this.container.style.left = left + this.getOption("positionLeft") + "px";
        this.container.style.top = top + this.getOption("positionTop") + "px";
      }
      setOption(option) {
        this._tooltipOptions = __spreadValues(__spreadValues({}, this._tooltipOptions), option);
      }
      getOption(option) {
        return this._tooltipOptions[option];
      }
      getTarget(el) {
        return hasClass(el, "p-inputwrapper") ? findSingle(el, "input") : el;
      }
      preAlign(position) {
        this.container.style.left = "-999px";
        this.container.style.top = "-999px";
        let defaultClassName = "p-tooltip p-component p-tooltip-" + position;
        this.container.className = this.getOption("tooltipStyleClass") ? defaultClassName + " " + this.getOption("tooltipStyleClass") : defaultClassName;
      }
      isOutOfBounds() {
        let offset = this.container.getBoundingClientRect();
        let targetTop = offset.top;
        let targetLeft = offset.left;
        let width = getOuterWidth(this.container);
        let height = getOuterHeight(this.container);
        let viewport = getViewport();
        return targetLeft + width > viewport.width || targetLeft < 0 || targetTop < 0 || targetTop + height > viewport.height;
      }
      onWindowResize(e) {
        this.hide();
      }
      bindDocumentResizeListener() {
        this.zone.runOutsideAngular(() => {
          this.resizeListener = this.onWindowResize.bind(this);
          window.addEventListener("resize", this.resizeListener);
        });
      }
      unbindDocumentResizeListener() {
        if (this.resizeListener) {
          window.removeEventListener("resize", this.resizeListener);
          this.resizeListener = null;
        }
      }
      bindScrollListener() {
        if (!this.scrollHandler) {
          this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, () => {
            if (this.container) {
              this.hide();
            }
          });
        }
        this.scrollHandler.bindScrollListener();
      }
      unbindScrollListener() {
        if (this.scrollHandler) {
          this.scrollHandler.unbindScrollListener();
        }
      }
      unbindEvents() {
        const tooltipEvent = this.getOption("tooltipEvent");
        if (tooltipEvent === "hover" || tooltipEvent === "both") {
          this.el.nativeElement.removeEventListener("mouseenter", this.mouseEnterListener);
          this.el.nativeElement.removeEventListener("mouseleave", this.mouseLeaveListener);
          this.el.nativeElement.removeEventListener("click", this.clickListener);
        }
        if (tooltipEvent === "focus" || tooltipEvent === "both") {
          let target = this.el.nativeElement.querySelector(".p-component");
          if (!target) {
            target = this.getTarget(this.el.nativeElement);
          }
          target.removeEventListener("focus", this.focusListener);
          target.removeEventListener("blur", this.blurListener);
        }
        this.unbindDocumentResizeListener();
      }
      remove() {
        if (this.container && this.container.parentElement) {
          if (this.getOption("appendTo") === "body") document.body.removeChild(this.container);
          else if (this.getOption("appendTo") === "target") this.el.nativeElement.removeChild(this.container);
          else removeChild(this.getOption("appendTo"), this.container);
        }
        this.unbindDocumentResizeListener();
        this.unbindScrollListener();
        this.unbindContainerMouseleaveListener();
        this.clearTimeouts();
        this.container = null;
        this.scrollHandler = null;
      }
      clearShowTimeout() {
        if (this.showTimeout) {
          clearTimeout(this.showTimeout);
          this.showTimeout = null;
        }
      }
      clearHideTimeout() {
        if (this.hideTimeout) {
          clearTimeout(this.hideTimeout);
          this.hideTimeout = null;
        }
      }
      clearTimeouts() {
        this.clearShowTimeout();
        this.clearHideTimeout();
      }
      ngOnDestroy() {
        this.unbindEvents();
        super.ngOnDestroy();
        if (this.container) {
          zindexutils.clear(this.container);
        }
        this.remove();
        if (this.scrollHandler) {
          this.scrollHandler.destroy();
          this.scrollHandler = null;
        }
        if (this.documentEscapeListener) {
          this.documentEscapeListener();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Tooltip,
        deps: [{
          token: NgZone
        }, {
          token: ViewContainerRef
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _Tooltip,
        isStandalone: true,
        selector: "[pTooltip]",
        inputs: {
          tooltipPosition: "tooltipPosition",
          tooltipEvent: "tooltipEvent",
          appendTo: "appendTo",
          positionStyle: "positionStyle",
          tooltipStyleClass: "tooltipStyleClass",
          tooltipZIndex: "tooltipZIndex",
          escape: ["escape", "escape", booleanAttribute],
          showDelay: ["showDelay", "showDelay", numberAttribute],
          hideDelay: ["hideDelay", "hideDelay", numberAttribute],
          life: ["life", "life", numberAttribute],
          positionTop: ["positionTop", "positionTop", numberAttribute],
          positionLeft: ["positionLeft", "positionLeft", numberAttribute],
          autoHide: ["autoHide", "autoHide", booleanAttribute],
          fitContent: ["fitContent", "fitContent", booleanAttribute],
          hideOnEscape: ["hideOnEscape", "hideOnEscape", booleanAttribute],
          content: ["pTooltip", "content"],
          disabled: ["tooltipDisabled", "disabled"],
          tooltipOptions: "tooltipOptions"
        },
        providers: [TooltipStyle],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Tooltip,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pTooltip]",
          standalone: true,
          providers: [TooltipStyle]
        }]
      }],
      ctorParameters: () => [{
        type: NgZone
      }, {
        type: ViewContainerRef
      }],
      propDecorators: {
        tooltipPosition: [{
          type: Input
        }],
        tooltipEvent: [{
          type: Input
        }],
        appendTo: [{
          type: Input
        }],
        positionStyle: [{
          type: Input
        }],
        tooltipStyleClass: [{
          type: Input
        }],
        tooltipZIndex: [{
          type: Input
        }],
        escape: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showDelay: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        hideDelay: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        life: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        positionTop: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        positionLeft: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        autoHide: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        fitContent: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        hideOnEscape: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        content: [{
          type: Input,
          args: ["pTooltip"]
        }],
        disabled: [{
          type: Input,
          args: ["tooltipDisabled"]
        }],
        tooltipOptions: [{
          type: Input
        }]
      }
    });
    TooltipModule = class _TooltipModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TooltipModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TooltipModule,
        imports: [Tooltip],
        exports: [Tooltip]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TooltipModule
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TooltipModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Tooltip],
          exports: [Tooltip]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-select.mjs
var theme12, classes11, SelectStyle, SelectClasses, SELECT_VALUE_ACCESSOR2, SelectItem, Select, SelectModule;
var init_primeng_select = __esm({
  "node_modules/primeng/fesm2022/primeng-select.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_utils();
    init_primeng_api();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_basecomponent();
    init_primeng_iconfield();
    init_primeng_icons();
    init_primeng_inputicon();
    init_primeng_inputtext();
    init_primeng_overlay();
    init_primeng_ripple();
    init_primeng_scroller();
    init_primeng_tooltip();
    init_primeng_base();
    theme12 = ({
      dt
    }) => `
.p-select {
    display: inline-flex;
    cursor: pointer;
    position: relative;
    user-select: none;
    background: ${dt("select.background")};
    border: 1px solid ${dt("select.border.color")};
    transition: background ${dt("select.transition.duration")}, color ${dt("select.transition.duration")}, border-color ${dt("select.transition.duration")},
        outline-color ${dt("select.transition.duration")}, box-shadow ${dt("select.transition.duration")};
    border-radius: ${dt("select.border.radius")};
    outline-color: transparent;
    box-shadow: ${dt("select.shadow")};
}

.p-select.ng-invalid.ng-dirty {
    border-color: ${dt("select.invalid.border.color")};
}

.p-select:not(.p-disabled):hover {
    border-color: ${dt("select.hover.border.color")};
}

.p-select:not(.p-disabled).p-focus {
    border-color: ${dt("select.focus.border.color")};
    box-shadow: ${dt("select.focus.ring.shadow")};
    outline: ${dt("select.focus.ring.width")} ${dt("select.focus.ring.style")} ${dt("select.focus.ring.color")};
    outline-offset: ${dt("select.focus.ring.offset")};
}

.p-select.p-variant-filled {
    background: ${dt("select.filled.background")};
}

.p-select.p-variant-filled:not(.p-disabled):hover {
    background: ${dt("select.filled.hover.background")};
}

.p-select.p-variant-filled.p-focus {
    background: ${dt("select.filled.focus.background")};
}

.p-select.p-disabled {
    opacity: 1;
    background: ${dt("select.disabled.background")};
}

.p-select-clear-icon {
    position: absolute;
    top: 50%;
    margin-top: -0.5rem;
    color: ${dt("select.clear.icon.color")};
    inset-inline-end: ${dt("select.dropdown.width")};
}

.p-select-dropdown {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    background: transparent;
    color: ${dt("select.dropdown.color")};
    width: ${dt("select.dropdown.width")};
    border-start-end-radius: ${dt("select.border.radius")};
    border-end-end-radius: ${dt("select.border.radius")};
}

.p-select-label {
    display: block;
    white-space: nowrap;
    overflow: hidden;
    flex: 1 1 auto;
    width: 1%;
    padding: ${dt("select.padding.y")} ${dt("select.padding.x")};
    text-overflow: ellipsis;
    cursor: pointer;
    color: ${dt("select.color")};
    background: transparent;
    border: 0 none;
    outline: 0 none;
}

.p-select-label.p-placeholder {
    color: ${dt("select.placeholder.color")};
}

.p-select.ng-invalid.ng-dirty .p-select-label.p-placeholder {
    color: ${dt("select.invalid.placeholder.color")};
}

.p-select:has(.p-select-clear-icon) .p-select-label {
    padding-inline-end: calc(1rem + ${dt("select.padding.x")});
}

.p-select.p-disabled .p-select-label {
    color: ${dt("select.disabled.color")};
}

.p-select-label-empty {
    overflow: hidden;
    opacity: 0;
}

input.p-select-label {
    cursor: default;
}

.p-select .p-select-overlay {
    min-width: 100%;
}

.p-select-overlay {
    cursor: default;
    background: ${dt("select.overlay.background")};
    color: ${dt("select.overlay.color")};
    border: 1px solid ${dt("select.overlay.border.color")};
    border-radius: ${dt("select.overlay.border.radius")};
    box-shadow: ${dt("select.overlay.shadow")};
}

.p-select-header {
    padding: ${dt("select.list.header.padding")};
}

.p-select-filter {
    width: 100%;
}

.p-select-list-container {
    overflow: auto;
}

.p-select-option-group {
    cursor: auto;
    margin: 0;
    padding: ${dt("select.option.group.padding")};
    background: ${dt("select.option.group.background")};
    color: ${dt("select.option.group.color")};
    font-weight: ${dt("select.option.group.font.weight")};
}

.p-select-list {
    margin: 0;
    padding: 0;
    list-style-type: none;
    padding: ${dt("select.list.padding")};
    gap: ${dt("select.list.gap")};
    display: flex;
    flex-direction: column;
}

.p-select-option {
    cursor: pointer;
    font-weight: normal;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    padding: ${dt("select.option.padding")};
    border: 0 none;
    color: ${dt("select.option.color")};
    background: transparent;
    transition: background ${dt("select.transition.duration")}, color ${dt("select.transition.duration")}, border-color ${dt("select.transition.duration")},
            box-shadow ${dt("select.transition.duration")}, outline-color ${dt("select.transition.duration")};
    border-radius: ${dt("select.option.border.radius")};
}

.p-select-option:not(.p-select-option-selected):not(.p-disabled).p-focus {
    background: ${dt("select.option.focus.background")};
    color: ${dt("select.option.focus.color")};
}

.p-select-option.p-select-option-selected {
    background: ${dt("select.option.selected.background")};
    color: ${dt("select.option.selected.color")};
}

.p-select-option.p-select-option-selected.p-focus {
    background: ${dt("select.option.selected.focus.background")};
    color: ${dt("select.option.selected.focus.color")};
}

.p-select-option-check-icon {
    position: relative;
    margin-inline-start: ${dt("select.checkmark.gutter.start")};
    margin-inline-end: ${dt("select.checkmark.gutter.end")};
    color: ${dt("select.checkmark.color")};
}

.p-select-empty-message {
    padding: ${dt("select.empty.message.padding")};
}

.p-select-fluid {
    display: flex;
}

.p-select-sm .p-select-label {
    font-size: ${dt("select.sm.font.size")};
    padding-block: ${dt("select.sm.padding.y")};
    padding-inline: ${dt("select.sm.padding.x")};
}

.p-select-sm .p-select-dropdown .p-icon {
    font-size: ${dt("select.sm.font.size")};
    width: ${dt("select.sm.font.size")};
    height: ${dt("select.sm.font.size")};
}

.p-select-lg .p-select-label {
    font-size: ${dt("select.lg.font.size")};
    padding-block: ${dt("select.lg.padding.y")};
    padding-inline: ${dt("select.lg.padding.x")};
}

.p-select-lg .p-select-dropdown .p-icon {
    font-size: ${dt("select.lg.font.size")};
    width: ${dt("select.lg.font.size")};
    height: ${dt("select.lg.font.size")};
}
`;
    classes11 = {
      root: ({
        instance
      }) => ["p-select p-component p-inputwrapper", {
        "p-disabled": instance.disabled,
        "p-variant-filled": instance.variant === "filled" || instance.config.inputVariant() === "filled" || instance.config.inputStyle() === "filled",
        "p-focus": instance.focused,
        "p-inputwrapper-filled": instance.modelValue() !== void 0 && instance.modelValue() !== null,
        "p-inputwrapper-focus": instance.focused || instance.overlayVisible,
        "p-select-open": instance.overlayVisible,
        "p-select-fluid": instance.hasFluid,
        "p-select-sm p-inputfield-sm": instance.size === "small",
        "p-select-lg p-inputfield-lg": instance.size === "large"
      }],
      label: ({
        instance,
        props
      }) => ["p-select-label", {
        "p-placeholder": !props.editable && instance.label === props.placeholder,
        "p-select-label-empty": !props.editable && !instance.$slots["value"] && (instance.label === "p-emptylabel" || instance.label.length === 0)
      }],
      clearIcon: "p-select-clear-icon",
      dropdown: "p-select-dropdown",
      loadingicon: "p-select-loading-icon",
      dropdownIcon: "p-select-dropdown-icon",
      overlay: "p-select-overlay p-component",
      header: "p-select-header",
      pcFilter: "p-select-filter",
      listContainer: "p-select-list-container",
      list: "p-select-list",
      optionGroup: "p-select-option-group",
      optionGroupLabel: "p-select-option-group-label",
      option: ({
        instance,
        props,
        state: state2,
        option,
        focusedOption
      }) => ["p-select-option", {
        "p-select-option-selected": instance.isSelected(option) && props.highlightOnSelect,
        "p-focus": state2.focusedOptionIndex === focusedOption,
        "p-disabled": instance.isOptionDisabled(option)
      }],
      optionLabel: "p-select-option-label",
      optionCheckIcon: "p-select-option-check-icon",
      optionBlankIcon: "p-select-option-blank-icon",
      emptyMessage: "p-select-empty-message"
    };
    SelectStyle = class _SelectStyle extends BaseStyle {
      name = "select";
      theme = theme12;
      classes = classes11;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(SelectClasses2) {
      SelectClasses2["root"] = "p-select";
      SelectClasses2["label"] = "p-select-label";
      SelectClasses2["clearIcon"] = "p-select-clear-icon";
      SelectClasses2["dropdown"] = "p-select-dropdown";
      SelectClasses2["loadingicon"] = "p-select-loading-icon";
      SelectClasses2["dropdownIcon"] = "p-select-dropdown-icon";
      SelectClasses2["overlay"] = "p-select-overlay";
      SelectClasses2["header"] = "p-select-header";
      SelectClasses2["pcFilter"] = "p-select-filter";
      SelectClasses2["listContainer"] = "p-select-list-container";
      SelectClasses2["list"] = "p-select-list";
      SelectClasses2["optionGroup"] = "p-select-option-group";
      SelectClasses2["optionGroupLabel"] = "p-select-option-group-label";
      SelectClasses2["option"] = "p-select-option";
      SelectClasses2["optionLabel"] = "p-select-option-label";
      SelectClasses2["optionCheckIcon"] = "p-select-option-check-icon";
      SelectClasses2["optionBlankIcon"] = "p-select-option-blank-icon";
      SelectClasses2["emptyMessage"] = "p-select-empty-message";
    })(SelectClasses || (SelectClasses = {}));
    SELECT_VALUE_ACCESSOR2 = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => Select),
      multi: true
    };
    SelectItem = class _SelectItem extends BaseComponent {
      id;
      option;
      selected;
      focused;
      label;
      disabled;
      visible;
      itemSize;
      ariaPosInset;
      ariaSetSize;
      template;
      checkmark;
      onClick = new EventEmitter();
      onMouseEnter = new EventEmitter();
      onOptionClick(event2) {
        this.onClick.emit(event2);
      }
      onOptionMouseEnter(event2) {
        this.onMouseEnter.emit(event2);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectItem,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _SelectItem,
        isStandalone: true,
        selector: "p-selectItem",
        inputs: {
          id: "id",
          option: "option",
          selected: ["selected", "selected", booleanAttribute],
          focused: ["focused", "focused", booleanAttribute],
          label: "label",
          disabled: ["disabled", "disabled", booleanAttribute],
          visible: ["visible", "visible", booleanAttribute],
          itemSize: ["itemSize", "itemSize", numberAttribute],
          ariaPosInset: "ariaPosInset",
          ariaSetSize: "ariaSetSize",
          template: "template",
          checkmark: ["checkmark", "checkmark", booleanAttribute]
        },
        outputs: {
          onClick: "onClick",
          onMouseEnter: "onMouseEnter"
        },
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <li
            [id]="id"
            (click)="onOptionClick($event)"
            (mouseenter)="onOptionMouseEnter($event)"
            role="option"
            pRipple
            [attr.aria-label]="label"
            [attr.aria-setsize]="ariaSetSize"
            [attr.aria-posinset]="ariaPosInset"
            [attr.aria-selected]="selected"
            [attr.data-p-focused]="focused"
            [attr.data-p-highlight]="selected"
            [attr.data-p-disabled]="disabled"
            [ngStyle]="{ height: itemSize + 'px' }"
            [ngClass]="{
                'p-select-option': true,
                'p-select-option-selected': selected && !checkmark,
                'p-disabled': disabled,
                'p-focus': focused
            }"
        >
            <ng-container *ngIf="checkmark">
                <CheckIcon *ngIf="selected" styleClass="p-select-option-check-icon" />
                <BlankIcon *ngIf="!selected" styleClass="p-select-option-blank-icon" />
            </ng-container>
            <span *ngIf="!template">{{ label ?? 'empty' }}</span>
            <ng-container *ngTemplateOutlet="template; context: { $implicit: option }"></ng-container>
        </li>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }, {
          kind: "directive",
          type: Ripple,
          selector: "[pRipple]"
        }, {
          kind: "component",
          type: CheckIcon,
          selector: "CheckIcon"
        }, {
          kind: "component",
          type: BlankIcon,
          selector: "BlankIcon"
        }]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectItem,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-selectItem",
          standalone: true,
          imports: [CommonModule, SharedModule, Ripple, CheckIcon, BlankIcon],
          template: `
        <li
            [id]="id"
            (click)="onOptionClick($event)"
            (mouseenter)="onOptionMouseEnter($event)"
            role="option"
            pRipple
            [attr.aria-label]="label"
            [attr.aria-setsize]="ariaSetSize"
            [attr.aria-posinset]="ariaPosInset"
            [attr.aria-selected]="selected"
            [attr.data-p-focused]="focused"
            [attr.data-p-highlight]="selected"
            [attr.data-p-disabled]="disabled"
            [ngStyle]="{ height: itemSize + 'px' }"
            [ngClass]="{
                'p-select-option': true,
                'p-select-option-selected': selected && !checkmark,
                'p-disabled': disabled,
                'p-focus': focused
            }"
        >
            <ng-container *ngIf="checkmark">
                <CheckIcon *ngIf="selected" styleClass="p-select-option-check-icon" />
                <BlankIcon *ngIf="!selected" styleClass="p-select-option-blank-icon" />
            </ng-container>
            <span *ngIf="!template">{{ label ?? 'empty' }}</span>
            <ng-container *ngTemplateOutlet="template; context: { $implicit: option }"></ng-container>
        </li>
    `
        }]
      }],
      propDecorators: {
        id: [{
          type: Input
        }],
        option: [{
          type: Input
        }],
        selected: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        focused: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        label: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        visible: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        itemSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        ariaPosInset: [{
          type: Input
        }],
        ariaSetSize: [{
          type: Input
        }],
        template: [{
          type: Input
        }],
        checkmark: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: Output
        }],
        onMouseEnter: [{
          type: Output
        }]
      }
    });
    Select = class _Select extends BaseComponent {
      zone;
      filterService;
      /**
       * Unique identifier of the component
       * @group Props
       */
      id;
      /**
       * Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.
       * @group Props
       */
      scrollHeight = "200px";
      /**
       * When specified, displays an input field to filter the items on keyup.
       * @group Props
       */
      filter;
      /**
       * Name of the input element.
       * @group Props
       */
      name;
      /**
       * Inline style of the element.
       * @group Props
       */
      style;
      /**
       * Inline style of the overlay panel element.
       * @group Props
       */
      panelStyle;
      /**
       * Style class of the element.
       * @group Props
       */
      styleClass;
      /**
       * Style class of the overlay panel element.
       * @group Props
       */
      panelStyleClass;
      /**
       * When present, it specifies that the component cannot be edited.
       * @group Props
       */
      readonly;
      /**
       * When present, it specifies that an input field must be filled out before submitting the form.
       * @group Props
       */
      required;
      /**
       * When present, custom value instead of predefined options can be entered using the editable input field.
       * @group Props
       */
      editable;
      /**
       * Target element to attach the overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
       * @group Props
       */
      appendTo;
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex = 0;
      /**
       * Default text to display when no option is selected.
       * @group Props
       */
      set placeholder(val) {
        this._placeholder.set(val);
      }
      get placeholder() {
        return this._placeholder.asReadonly();
      }
      /**
       * Icon to display in loading state.
       * @group Props
       */
      loadingIcon;
      /**
       * Placeholder text to show when filter input is empty.
       * @group Props
       */
      filterPlaceholder;
      /**
       * Locale to use in filtering. The default locale is the host environment's current locale.
       * @group Props
       */
      filterLocale;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * Identifier of the accessible input element.
       * @group Props
       */
      inputId;
      /**
       * A property to uniquely identify a value in options.
       * @group Props
       */
      dataKey;
      /**
       * When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
       * @group Props
       */
      filterBy;
      /**
       * Fields used when filtering the options, defaults to optionLabel.
       * @group Props
       */
      filterFields;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Clears the filter value when hiding the select.
       * @group Props
       */
      resetFilterOnHide = false;
      /**
       * Whether the selected option will be shown with a check mark.
       * @group Props
       */
      checkmark = false;
      /**
       * Icon class of the select icon.
       * @group Props
       */
      dropdownIcon;
      /**
       * Whether the select is in loading state.
       * @group Props
       */
      loading = false;
      /**
       * Name of the label field of an option.
       * @group Props
       */
      optionLabel;
      /**
       * Name of the value field of an option.
       * @group Props
       */
      optionValue;
      /**
       * Name of the disabled field of an option.
       * @group Props
       */
      optionDisabled;
      /**
       * Name of the label field of an option group.
       * @group Props
       */
      optionGroupLabel = "label";
      /**
       * Name of the options field of an option group.
       * @group Props
       */
      optionGroupChildren = "items";
      /**
       * Whether to display the first item as the label if no placeholder is defined and value is null.
       * @deprecated since v17.3.0, set initial value by model instead.
       * @group Props
       */
      autoDisplayFirst = true;
      /**
       * Whether to display options as grouped when nested options are provided.
       * @group Props
       */
      group;
      /**
       * When enabled, a clear icon is displayed to clear the value.
       * @group Props
       */
      showClear;
      /**
       * Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration.
       * @group Props
       */
      emptyFilterMessage = "";
      /**
       * Text to display when there is no data. Defaults to global value in i18n translation configuration.
       * @group Props
       */
      emptyMessage = "";
      /**
       * Defines if data is loaded and interacted with in lazy manner.
       * @group Props
       */
      lazy = false;
      /**
       * Whether the data should be loaded on demand during scroll.
       * @group Props
       */
      virtualScroll;
      /**
       * Height of an item in the list for VirtualScrolling.
       * @group Props
       */
      virtualScrollItemSize;
      /**
       * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.
       * @group Props
       */
      virtualScrollOptions;
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * Whether to use overlay API feature. The properties of overlay API can be used like an object in it.
       * @group Props
       */
      overlayOptions;
      /**
       * Defines a string that labels the filter input.
       * @group Props
       */
      ariaFilterLabel;
      /**
       * Used to define a aria label attribute the current element.
       * @group Props
       */
      ariaLabel;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Defines how the items are filtered.
       * @group Props
       */
      filterMatchMode = "contains";
      /**
       * Maximum number of character allows in the editable input field.
       * @group Props
       */
      maxlength;
      /**
       * Advisory information to display in a tooltip on hover.
       * @group Props
       */
      tooltip = "";
      /**
       * Position of the tooltip.
       * @group Props
       */
      tooltipPosition = "right";
      /**
       * Type of CSS position.
       * @group Props
       */
      tooltipPositionStyle = "absolute";
      /**
       * Style class of the tooltip.
       * @group Props
       */
      tooltipStyleClass;
      /**
       * Fields used when filtering the options, defaults to optionLabel.
       * @group Props
       */
      focusOnHover = true;
      /**
       * Determines if the option will be selected on focus.
       * @group Props
       */
      selectOnFocus = false;
      /**
       * Whether to focus on the first visible or selected element when the overlay panel is shown.
       * @group Props
       */
      autoOptionFocus = false;
      /**
       * Applies focus to the filter element when the overlay is shown.
       * @group Props
       */
      autofocusFilter = true;
      /**
       * Whether the component should span the full width of its parent.
       * @group Props
       */
      fluid;
      /**
       * When present, it specifies that the component should be disabled.
       * @group Props
       */
      get disabled() {
        return this._disabled;
      }
      set disabled(_disabled) {
        if (_disabled) {
          this.focused = false;
          if (this.overlayVisible) this.hide();
        }
        this._disabled = _disabled;
        if (!this.cd.destroyed) {
          this.cd.detectChanges();
        }
      }
      /**
       * Item size of item to be virtual scrolled.
       * @group Props
       * @deprecated use virtualScrollItemSize property instead.
       */
      get itemSize() {
        return this._itemSize;
      }
      set itemSize(val) {
        this._itemSize = val;
        console.log("The itemSize property is deprecated, use virtualScrollItemSize property instead.");
      }
      _itemSize;
      /**
       * Whether to automatically manage layering.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get autoZIndex() {
        return this._autoZIndex;
      }
      set autoZIndex(val) {
        this._autoZIndex = val;
        console.log("The autoZIndex property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _autoZIndex;
      /**
       * Base zIndex value to use in layering.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get baseZIndex() {
        return this._baseZIndex;
      }
      set baseZIndex(val) {
        this._baseZIndex = val;
        console.log("The baseZIndex property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _baseZIndex;
      /**
       * Transition options of the show animation.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get showTransitionOptions() {
        return this._showTransitionOptions;
      }
      set showTransitionOptions(val) {
        this._showTransitionOptions = val;
        console.log("The showTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _showTransitionOptions;
      /**
       * Transition options of the hide animation.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get hideTransitionOptions() {
        return this._hideTransitionOptions;
      }
      set hideTransitionOptions(val) {
        this._hideTransitionOptions = val;
        console.log("The hideTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _hideTransitionOptions;
      /**
       * When specified, filter displays with this value.
       * @group Props
       */
      get filterValue() {
        return this._filterValue();
      }
      set filterValue(val) {
        setTimeout(() => {
          this._filterValue.set(val);
        });
      }
      /**
       * An array of objects to display as the available options.
       * @group Props
       */
      get options() {
        const options = this._options();
        return options;
      }
      set options(val) {
        if (!deepEquals(val, this._options())) {
          this._options.set(val);
        }
      }
      /**
       * Callback to invoke when value of select changes.
       * @param {SelectChangeEvent} event - custom change event.
       * @group Emits
       */
      onChange = new EventEmitter();
      /**
       * Callback to invoke when data is filtered.
       * @param {SelectFilterEvent} event - custom filter event.
       * @group Emits
       */
      onFilter = new EventEmitter();
      /**
       * Callback to invoke when select gets focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to invoke when select loses focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      /**
       * Callback to invoke when component is clicked.
       * @param {MouseEvent} event - Mouse event.
       * @group Emits
       */
      onClick = new EventEmitter();
      /**
       * Callback to invoke when select overlay gets visible.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onShow = new EventEmitter();
      /**
       * Callback to invoke when select overlay gets hidden.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onHide = new EventEmitter();
      /**
       * Callback to invoke when select clears the value.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onClear = new EventEmitter();
      /**
       * Callback to invoke in lazy mode to load new data.
       * @param {SelectLazyLoadEvent} event - Lazy load event.
       * @group Emits
       */
      onLazyLoad = new EventEmitter();
      _componentStyle = inject(SelectStyle);
      filterViewChild;
      focusInputViewChild;
      editableInputViewChild;
      itemsViewChild;
      scroller;
      overlayViewChild;
      firstHiddenFocusableElementOnOverlay;
      lastHiddenFocusableElementOnOverlay;
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return this.fluid || !!fluidComponent;
      }
      // @todo to be refactored
      get hostClass() {
        const classes21 = this._componentStyle.classes.root({
          instance: this
        }).map((cls) => {
          if (typeof cls === "string") {
            return cls;
          } else {
            return Object.keys(cls).filter((key) => cls[key]).join(" ");
          }
        }).join(" ");
        return classes21 + " " + this.styleClass;
      }
      get hostStyle() {
        return this.style;
      }
      _disabled;
      itemsWrapper;
      /**
       * Custom item template.
       * @group Templates
       */
      itemTemplate;
      /**
       * Custom group template.
       * @group Templates
       */
      groupTemplate;
      /**
       * Custom loader template.
       * @group Templates
       */
      loaderTemplate;
      /**
       * Custom selected item template.
       * @group Templates
       */
      selectedItemTemplate;
      /**
       * Custom header template.
       * @group Templates
       */
      headerTemplate;
      /**
       * Custom filter template.
       * @group Templates
       */
      filterTemplate;
      /**
       * Custom footer template.
       * @group Templates
       */
      footerTemplate;
      /**
       * Custom empty filter template.
       * @group Templates
       */
      emptyFilterTemplate;
      /**
       * Custom empty template.
       * @group Templates
       */
      emptyTemplate;
      /**
       * Custom dropdown icon template.
       * @group Templates
       */
      dropdownIconTemplate;
      /**
       * Custom loading icon template.
       * @group Templates
       */
      loadingIconTemplate;
      /**
       * Custom clear icon template.
       * @group Templates
       */
      clearIconTemplate;
      /**
       * Custom filter icon template.
       * @group Templates
       */
      filterIconTemplate;
      /**
       * Custom on icon template.
       * @group Templates
       */
      onIconTemplate;
      /**
       * Custom off icon template.
       * @group Templates
       */
      offIconTemplate;
      /**
       * Custom cancel icon template.
       * @group Templates
       */
      cancelIconTemplate;
      templates;
      _itemTemplate;
      _selectedItemTemplate;
      _headerTemplate;
      _filterTemplate;
      _footerTemplate;
      _emptyFilterTemplate;
      _emptyTemplate;
      _groupTemplate;
      _loaderTemplate;
      _dropdownIconTemplate;
      _loadingIconTemplate;
      _clearIconTemplate;
      _filterIconTemplate;
      _cancelIconTemplate;
      _onIconTemplate;
      _offIconTemplate;
      filterOptions;
      _options = signal(null);
      _placeholder = signal(void 0);
      modelValue = signal(null);
      value;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      hover;
      focused;
      overlayVisible;
      optionsChanged;
      panel;
      dimensionsUpdated;
      hoveredItem;
      selectedOptionUpdated;
      _filterValue = signal(null);
      searchValue;
      searchIndex;
      searchTimeout;
      previousSearchChar;
      currentSearchChar;
      preventModelTouched;
      focusedOptionIndex = signal(-1);
      labelId;
      listId;
      clicked = signal(false);
      get emptyMessageLabel() {
        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);
      }
      get emptyFilterMessageLabel() {
        return this.emptyFilterMessage || this.config.getTranslation(TranslationKeys.EMPTY_FILTER_MESSAGE);
      }
      get isVisibleClearIcon() {
        return this.modelValue() != null && this.hasSelectedOption() && this.showClear && !this.disabled;
      }
      get listLabel() {
        return this.config.getTranslation(TranslationKeys.ARIA)["listLabel"];
      }
      get rootClass() {
        return this._componentStyle.classes.root({
          instance: this
        });
      }
      get inputClass() {
        const label = this.label();
        return {
          "p-select-label": true,
          "p-placeholder": this.placeholder() && label === this.placeholder(),
          "p-select-label-empty": !this.editable && !this.selectedItemTemplate && (label === void 0 || label === null || label === "p-emptylabel" || label.length === 0)
        };
      }
      get panelClass() {
        return {
          "p-dropdown-panel p-component": true,
          "p-input-filled": this.config.inputStyle() === "filled" || this.config.inputVariant() === "filled",
          "p-ripple-disabled": this.config.ripple() === false
        };
      }
      get focusedOptionId() {
        return this.focusedOptionIndex() !== -1 ? `${this.id}_${this.focusedOptionIndex()}` : null;
      }
      visibleOptions = computed(() => {
        const options = this.getAllVisibleAndNonVisibleOptions();
        if (this._filterValue()) {
          const _filterBy = this.filterBy || this.optionLabel;
          const filteredOptions = !_filterBy && !this.filterFields && !this.optionValue ? this.options.filter((option) => {
            if (option.label) {
              return option.label.toString().toLowerCase().indexOf(this._filterValue().toLowerCase().trim()) !== -1;
            }
            return option.toString().toLowerCase().indexOf(this._filterValue().toLowerCase().trim()) !== -1;
          }) : this.filterService.filter(options, this.searchFields(), this._filterValue().trim(), this.filterMatchMode, this.filterLocale);
          if (this.group) {
            const optionGroups = this.options || [];
            const filtered = [];
            optionGroups.forEach((group) => {
              const groupChildren = this.getOptionGroupChildren(group);
              const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));
              if (filteredItems.length > 0) filtered.push(__spreadProps(__spreadValues({}, group), {
                [typeof this.optionGroupChildren === "string" ? this.optionGroupChildren : "items"]: [...filteredItems]
              }));
            });
            return this.flatOptions(filtered);
          }
          return filteredOptions;
        }
        return options;
      });
      label = computed(() => {
        const options = this.getAllVisibleAndNonVisibleOptions();
        const selectedOptionIndex = options.findIndex((option) => this.isOptionValueEqualsModelValue(option));
        return selectedOptionIndex !== -1 ? this.getOptionLabel(options[selectedOptionIndex]) : this.placeholder() || "p-emptylabel";
      });
      filled = computed(() => {
        if (typeof this.modelValue() === "string") return !!this.modelValue();
        return this.label() !== "p-emptylabel" && this.modelValue() !== void 0 && this.modelValue() !== null;
      });
      selectedOption;
      editableInputValue = computed(() => this.getOptionLabel(this.selectedOption) || this.modelValue() || "");
      constructor(zone, filterService) {
        super();
        this.zone = zone;
        this.filterService = filterService;
        effect(() => {
          const modelValue = this.modelValue();
          const visibleOptions = this.visibleOptions();
          if (visibleOptions && isNotEmpty(visibleOptions)) {
            const selectedOptionIndex = this.findSelectedOptionIndex();
            if (selectedOptionIndex !== -1 || modelValue === void 0 || typeof modelValue === "string" && modelValue.length === 0 || this.isModelValueNotSet() || this.editable) {
              this.selectedOption = visibleOptions[selectedOptionIndex];
            }
          }
          if (isEmpty(visibleOptions) && (modelValue === void 0 || this.isModelValueNotSet()) && isNotEmpty(this.selectedOption)) {
            this.selectedOption = null;
          }
          if (modelValue !== void 0 && this.editable) {
            this.updateEditableLabel();
          }
          this.cd.markForCheck();
        });
      }
      isModelValueNotSet() {
        return this.modelValue() === null && !this.isOptionValueEqualsModelValue(this.selectedOption);
      }
      getAllVisibleAndNonVisibleOptions() {
        return this.group ? this.flatOptions(this.options) : this.options || [];
      }
      ngOnInit() {
        super.ngOnInit();
        this.id = this.id || uuid("pn_id_");
        this.autoUpdateModel();
        if (this.filterBy) {
          this.filterOptions = {
            filter: (value) => this.onFilterInputChange(value),
            reset: () => this.resetFilter()
          };
        }
      }
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "item":
              this._itemTemplate = item.template;
              break;
            case "selectedItem":
              this._selectedItemTemplate = item.template;
              break;
            case "header":
              this._headerTemplate = item.template;
              break;
            case "filter":
              this._filterTemplate = item.template;
              break;
            case "footer":
              this._footerTemplate = item.template;
              break;
            case "emptyfilter":
              this._emptyFilterTemplate = item.template;
              break;
            case "empty":
              this._emptyTemplate = item.template;
              break;
            case "group":
              this._groupTemplate = item.template;
              break;
            case "loader":
              this._loaderTemplate = item.template;
              break;
            case "dropdownicon":
              this._dropdownIconTemplate = item.template;
              break;
            case "loadingicon":
              this._loadingIconTemplate = item.template;
              break;
            case "clearicon":
              this._clearIconTemplate = item.template;
              break;
            case "filtericon":
              this._filterIconTemplate = item.template;
              break;
            case "cancelicon":
              this._cancelIconTemplate = item.template;
              break;
            case "onicon":
              this._onIconTemplate = item.template;
              break;
            case "officon":
              this._offIconTemplate = item.template;
              break;
            default:
              this._itemTemplate = item.template;
              break;
          }
        });
      }
      ngAfterViewChecked() {
        if (this.optionsChanged && this.overlayVisible) {
          this.optionsChanged = false;
          this.zone.runOutsideAngular(() => {
            setTimeout(() => {
              if (this.overlayViewChild) {
                this.overlayViewChild.alignOverlay();
              }
            }, 1);
          });
        }
        if (this.selectedOptionUpdated && this.itemsWrapper) {
          let selectedItem = findSingle(this.overlayViewChild?.overlayViewChild?.nativeElement, "li.p-select-option-selected");
          if (selectedItem) {
            scrollInView(this.itemsWrapper, selectedItem);
          }
          this.selectedOptionUpdated = false;
        }
      }
      flatOptions(options) {
        return (options || []).reduce((result, option, index) => {
          result.push({
            optionGroup: option,
            group: true,
            index
          });
          const optionGroupChildren = this.getOptionGroupChildren(option);
          optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));
          return result;
        }, []);
      }
      autoUpdateModel() {
        if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption()) {
          this.focusedOptionIndex.set(this.findFirstFocusedOptionIndex());
          this.onOptionSelect(null, this.visibleOptions()[this.focusedOptionIndex()], false);
        }
        if (this.autoDisplayFirst && (this.modelValue() === null || this.modelValue() === void 0)) {
          if (!this.placeholder()) {
            const ind = this.findFirstOptionIndex();
            this.onOptionSelect(null, this.visibleOptions()[ind], false, true);
          }
        }
      }
      onOptionSelect(event2, option, isHide = true, preventChange = false) {
        if (!this.isSelected(option)) {
          const value = this.getOptionValue(option);
          this.updateModel(value, event2);
          this.focusedOptionIndex.set(this.findSelectedOptionIndex());
          preventChange === false && this.onChange.emit({
            originalEvent: event2,
            value
          });
        }
        if (isHide) {
          this.hide(true);
        }
      }
      onOptionMouseEnter(event2, index) {
        if (this.focusOnHover) {
          this.changeFocusedOptionIndex(event2, index);
        }
      }
      updateModel(value, event2) {
        this.value = value;
        this.onModelChange(value);
        this.modelValue.set(value);
        this.selectedOptionUpdated = true;
      }
      writeValue(value) {
        if (this.filter) {
          this.resetFilter();
        }
        this.value = value;
        this.allowModelChange() && this.onModelChange(value);
        this.modelValue.set(this.value);
        this.updateEditableLabel();
        this.cd.markForCheck();
      }
      allowModelChange() {
        return !!this.modelValue() && !this.placeholder() && (this.modelValue() === void 0 || this.modelValue() === null) && !this.editable && this.options && this.options.length;
      }
      isSelected(option) {
        return this.isOptionValueEqualsModelValue(option);
      }
      isOptionValueEqualsModelValue(option) {
        return this.isValidOption(option) && equals(this.modelValue(), this.getOptionValue(option), this.equalityKey());
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.editable) {
          this.updateEditableLabel();
        }
        this.updatePlaceHolderForFloatingLabel();
      }
      updatePlaceHolderForFloatingLabel() {
        const parentElement = this.el.nativeElement.parentElement;
        const isInFloatingLabel = parentElement?.classList.contains("p-float-label");
        if (parentElement && isInFloatingLabel && !this.selectedOption) {
          const label = parentElement.querySelector("label");
          if (label) {
            this._placeholder.set(label.textContent);
          }
        }
      }
      updateEditableLabel() {
        if (this.editableInputViewChild) {
          this.editableInputViewChild.nativeElement.value = this.getOptionLabel(this.selectedOption) || this.modelValue() || "";
        }
      }
      clearEditableLabel() {
        if (this.editableInputViewChild) {
          this.editableInputViewChild.nativeElement.value = "";
        }
      }
      getOptionIndex(index, scrollerOptions) {
        return this.virtualScrollerDisabled ? index : scrollerOptions && scrollerOptions.getItemOptions(index)["index"];
      }
      getOptionLabel(option) {
        return this.optionLabel !== void 0 && this.optionLabel !== null ? resolveFieldData(option, this.optionLabel) : option && option.label !== void 0 ? option.label : option;
      }
      getOptionValue(option) {
        return this.optionValue && this.optionValue !== null ? resolveFieldData(option, this.optionValue) : !this.optionLabel && option && option.value !== void 0 ? option.value : option;
      }
      isSelectedOptionEmpty() {
        return isEmpty(this.selectedOption);
      }
      isOptionDisabled(option) {
        if (this.getOptionValue(this.modelValue()) === this.getOptionValue(option) || this.getOptionLabel(this.modelValue() === this.getOptionLabel(option)) && option.disabled === false) {
          return false;
        } else {
          return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : option && option.disabled !== void 0 ? option.disabled : false;
        }
      }
      getOptionGroupLabel(optionGroup) {
        return this.optionGroupLabel !== void 0 && this.optionGroupLabel !== null ? resolveFieldData(optionGroup, this.optionGroupLabel) : optionGroup && optionGroup.label !== void 0 ? optionGroup.label : optionGroup;
      }
      getOptionGroupChildren(optionGroup) {
        return this.optionGroupChildren !== void 0 && this.optionGroupChildren !== null ? resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;
      }
      getAriaPosInset(index) {
        return (this.optionGroupLabel ? index - this.visibleOptions().slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;
      }
      get ariaSetSize() {
        return this.visibleOptions().filter((option) => !this.isOptionGroup(option)).length;
      }
      /**
       * Callback to invoke on filter reset.
       * @group Method
       */
      resetFilter() {
        this._filterValue.set(null);
        if (this.filterViewChild && this.filterViewChild.nativeElement) {
          this.filterViewChild.nativeElement.value = "";
        }
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      onContainerClick(event2) {
        if (this.disabled || this.readonly || this.loading) {
          return;
        }
        this.focusInputViewChild?.nativeElement.focus({
          preventScroll: true
        });
        if (event2.target.tagName === "INPUT" || event2.target.getAttribute("data-pc-section") === "clearicon" || event2.target.closest('[data-pc-section="clearicon"]')) {
          return;
        } else if (!this.overlayViewChild || !this.overlayViewChild.el.nativeElement.contains(event2.target)) {
          this.overlayVisible ? this.hide(true) : this.show(true);
        }
        this.onClick.emit(event2);
        this.clicked.set(true);
        this.cd.detectChanges();
      }
      isEmpty() {
        return !this._options() || this.visibleOptions() && this.visibleOptions().length === 0;
      }
      onEditableInput(event2) {
        const value = event2.target.value;
        this.searchValue = "";
        const matched = this.searchOptions(event2, value);
        !matched && this.focusedOptionIndex.set(-1);
        this.onModelChange(value);
        this.updateModel(value || null, event2);
        setTimeout(() => {
          this.onChange.emit({
            originalEvent: event2,
            value
          });
        }, 1);
        !this.overlayVisible && isNotEmpty(value) && this.show();
      }
      /**
       * Displays the panel.
       * @group Method
       */
      show(isFocus) {
        this.overlayVisible = true;
        this.focusedOptionIndex.set(this.focusedOptionIndex() !== -1 ? this.focusedOptionIndex() : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex());
        if (isFocus) {
          focus(this.focusInputViewChild?.nativeElement);
        }
        this.cd.markForCheck();
      }
      onOverlayAnimationStart(event2) {
        if (event2.toState === "visible") {
          this.itemsWrapper = findSingle(this.overlayViewChild?.overlayViewChild?.nativeElement, this.virtualScroll ? ".p-scroller" : ".p-select-list-container");
          this.virtualScroll && this.scroller?.setContentEl(this.itemsViewChild?.nativeElement);
          if (this.options && this.options.length) {
            if (this.virtualScroll) {
              const selectedIndex = this.modelValue() ? this.focusedOptionIndex() : -1;
              if (selectedIndex !== -1) {
                this.scroller?.scrollToIndex(selectedIndex);
              }
            } else {
              let selectedListItem = findSingle(this.itemsWrapper, ".p-select-option.p-select-option-selected");
              if (selectedListItem) {
                selectedListItem.scrollIntoView({
                  block: "nearest",
                  inline: "nearest"
                });
              }
            }
          }
          if (this.filterViewChild && this.filterViewChild.nativeElement) {
            this.preventModelTouched = true;
            if (this.autofocusFilter && !this.editable) {
              this.filterViewChild.nativeElement.focus();
            }
          }
          this.onShow.emit(event2);
        }
        if (event2.toState === "void") {
          this.itemsWrapper = null;
          this.onModelTouched();
          this.onHide.emit(event2);
        }
      }
      /**
       * Hides the panel.
       * @group Method
       */
      hide(isFocus) {
        this.overlayVisible = false;
        this.focusedOptionIndex.set(-1);
        this.clicked.set(false);
        this.searchValue = "";
        if (this.overlayOptions?.mode === "modal") {
          unblockBodyScroll();
        }
        if (this.filter && this.resetFilterOnHide) {
          this.resetFilter();
        }
        if (isFocus) {
          if (this.focusInputViewChild) {
            focus(this.focusInputViewChild?.nativeElement);
          }
          if (this.editable && this.editableInputViewChild) {
            focus(this.editableInputViewChild?.nativeElement);
          }
        }
        this.cd.markForCheck();
      }
      onInputFocus(event2) {
        if (this.disabled) {
          return;
        }
        this.focused = true;
        const focusedOptionIndex = this.focusedOptionIndex() !== -1 ? this.focusedOptionIndex() : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;
        this.focusedOptionIndex.set(focusedOptionIndex);
        this.overlayVisible && this.scrollInView(this.focusedOptionIndex());
        this.onFocus.emit(event2);
      }
      onInputBlur(event2) {
        this.focused = false;
        this.onBlur.emit(event2);
        if (!this.preventModelTouched) {
          this.onModelTouched();
        }
        this.preventModelTouched = false;
      }
      onKeyDown(event2, search = false) {
        if (this.disabled || this.readonly || this.loading) {
          return;
        }
        switch (event2.code) {
          //down
          case "ArrowDown":
            this.onArrowDownKey(event2);
            break;
          //up
          case "ArrowUp":
            this.onArrowUpKey(event2, this.editable);
            break;
          case "ArrowLeft":
          case "ArrowRight":
            this.onArrowLeftKey(event2, this.editable);
            break;
          case "Delete":
            this.onDeleteKey(event2);
            break;
          case "Home":
            this.onHomeKey(event2, this.editable);
            break;
          case "End":
            this.onEndKey(event2, this.editable);
            break;
          case "PageDown":
            this.onPageDownKey(event2);
            break;
          case "PageUp":
            this.onPageUpKey(event2);
            break;
          //space
          case "Space":
            this.onSpaceKey(event2, search);
            break;
          //enter
          case "Enter":
          case "NumpadEnter":
            this.onEnterKey(event2);
            break;
          //escape and tab
          case "Escape":
            this.onEscapeKey(event2);
            break;
          case "Tab":
            this.onTabKey(event2);
            break;
          case "Backspace":
            this.onBackspaceKey(event2, this.editable);
            break;
          case "ShiftLeft":
          case "ShiftRight":
            break;
          default:
            if (!event2.metaKey && isPrintableCharacter(event2.key)) {
              !this.overlayVisible && this.show();
              !this.editable && this.searchOptions(event2, event2.key);
            }
            break;
        }
        this.clicked.set(false);
      }
      onFilterKeyDown(event2) {
        switch (event2.code) {
          case "ArrowDown":
            this.onArrowDownKey(event2);
            break;
          case "ArrowUp":
            this.onArrowUpKey(event2, true);
            break;
          case "ArrowLeft":
          case "ArrowRight":
            this.onArrowLeftKey(event2, true);
            break;
          case "Home":
            this.onHomeKey(event2, true);
            break;
          case "End":
            this.onEndKey(event2, true);
            break;
          case "Enter":
          case "NumpadEnter":
            this.onEnterKey(event2, true);
            break;
          case "Escape":
            this.onEscapeKey(event2);
            break;
          case "Tab":
            this.onTabKey(event2, true);
            break;
          default:
            break;
        }
      }
      onFilterBlur(event2) {
        this.focusedOptionIndex.set(-1);
      }
      onArrowDownKey(event2) {
        if (!this.overlayVisible) {
          this.show();
          this.editable && this.changeFocusedOptionIndex(event2, this.findSelectedOptionIndex());
        } else {
          const optionIndex = this.focusedOptionIndex() !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex()) : this.clicked() ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();
          this.changeFocusedOptionIndex(event2, optionIndex);
        }
        event2.preventDefault();
        event2.stopPropagation();
      }
      changeFocusedOptionIndex(event2, index) {
        if (this.focusedOptionIndex() !== index) {
          this.focusedOptionIndex.set(index);
          this.scrollInView();
          if (this.selectOnFocus) {
            const option = this.visibleOptions()[index];
            this.onOptionSelect(event2, option, false);
          }
        }
      }
      get virtualScrollerDisabled() {
        return !this.virtualScroll;
      }
      scrollInView(index = -1) {
        const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;
        if (this.itemsViewChild && this.itemsViewChild.nativeElement) {
          const element = findSingle(this.itemsViewChild.nativeElement, `li[id="${id}"]`);
          if (element) {
            element.scrollIntoView && element.scrollIntoView({
              block: "nearest",
              inline: "nearest"
            });
          } else if (!this.virtualScrollerDisabled) {
            setTimeout(() => {
              this.virtualScroll && this.scroller?.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex());
            }, 0);
          }
        }
      }
      hasSelectedOption() {
        return this.modelValue() !== void 0;
      }
      isValidSelectedOption(option) {
        return this.isValidOption(option) && this.isSelected(option);
      }
      equalityKey() {
        return this.optionValue ? null : this.dataKey;
      }
      findFirstFocusedOptionIndex() {
        const selectedIndex = this.findSelectedOptionIndex();
        return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;
      }
      findFirstOptionIndex() {
        return this.visibleOptions().findIndex((option) => this.isValidOption(option));
      }
      findSelectedOptionIndex() {
        return this.hasSelectedOption() ? this.visibleOptions().findIndex((option) => this.isValidSelectedOption(option)) : -1;
      }
      findNextOptionIndex(index) {
        const matchedOptionIndex = index < this.visibleOptions().length - 1 ? this.visibleOptions().slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;
      }
      findPrevOptionIndex(index) {
        const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions().slice(0, index), (option) => this.isValidOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex : index;
      }
      findLastOptionIndex() {
        return findLastIndex(this.visibleOptions(), (option) => this.isValidOption(option));
      }
      findLastFocusedOptionIndex() {
        const selectedIndex = this.findSelectedOptionIndex();
        return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;
      }
      isValidOption(option) {
        return option !== void 0 && option !== null && !(this.isOptionDisabled(option) || this.isOptionGroup(option));
      }
      isOptionGroup(option) {
        return this.optionGroupLabel !== void 0 && this.optionGroupLabel !== null && option.optionGroup !== void 0 && option.optionGroup !== null && option.group;
      }
      onArrowUpKey(event2, pressedInInputText = false) {
        if (event2.altKey && !pressedInInputText) {
          if (this.focusedOptionIndex() !== -1) {
            const option = this.visibleOptions()[this.focusedOptionIndex()];
            this.onOptionSelect(event2, option);
          }
          this.overlayVisible && this.hide();
        } else {
          const optionIndex = this.focusedOptionIndex() !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex()) : this.clicked() ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();
          this.changeFocusedOptionIndex(event2, optionIndex);
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
        event2.stopPropagation();
      }
      onArrowLeftKey(event2, pressedInInputText = false) {
        pressedInInputText && this.focusedOptionIndex.set(-1);
      }
      onDeleteKey(event2) {
        if (this.showClear) {
          this.clear(event2);
          event2.preventDefault();
        }
      }
      onHomeKey(event2, pressedInInputText = false) {
        if (pressedInInputText) {
          const target = event2.currentTarget;
          if (event2.shiftKey) {
            target.setSelectionRange(0, target.value.length);
          } else {
            target.setSelectionRange(0, 0);
            this.focusedOptionIndex.set(-1);
          }
        } else {
          this.changeFocusedOptionIndex(event2, this.findFirstOptionIndex());
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
      }
      onEndKey(event2, pressedInInputText = false) {
        if (pressedInInputText) {
          const target = event2.currentTarget;
          if (event2.shiftKey) {
            target.setSelectionRange(0, target.value.length);
          } else {
            const len = target.value.length;
            target.setSelectionRange(len, len);
            this.focusedOptionIndex.set(-1);
          }
        } else {
          this.changeFocusedOptionIndex(event2, this.findLastOptionIndex());
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
      }
      onPageDownKey(event2) {
        this.scrollInView(this.visibleOptions().length - 1);
        event2.preventDefault();
      }
      onPageUpKey(event2) {
        this.scrollInView(0);
        event2.preventDefault();
      }
      onSpaceKey(event2, pressedInInputText = false) {
        !this.editable && !pressedInInputText && this.onEnterKey(event2);
      }
      onEnterKey(event2, pressedInInput = false) {
        if (!this.overlayVisible) {
          this.focusedOptionIndex.set(-1);
          this.onArrowDownKey(event2);
        } else {
          if (this.focusedOptionIndex() !== -1) {
            const option = this.visibleOptions()[this.focusedOptionIndex()];
            this.onOptionSelect(event2, option);
          }
          !pressedInInput && this.hide();
        }
        event2.preventDefault();
      }
      onEscapeKey(event2) {
        this.overlayVisible && this.hide(true);
        event2.preventDefault();
        event2.stopPropagation();
      }
      onTabKey(event2, pressedInInputText = false) {
        if (!pressedInInputText) {
          if (this.overlayVisible && this.hasFocusableElements()) {
            focus(event2.shiftKey ? this.lastHiddenFocusableElementOnOverlay.nativeElement : this.firstHiddenFocusableElementOnOverlay.nativeElement);
            event2.preventDefault();
          } else {
            if (this.focusedOptionIndex() !== -1 && this.overlayVisible) {
              const option = this.visibleOptions()[this.focusedOptionIndex()];
              this.onOptionSelect(event2, option);
            }
            this.overlayVisible && this.hide(this.filter);
          }
        }
        event2.stopPropagation();
      }
      onFirstHiddenFocus(event2) {
        const focusableEl = event2.relatedTarget === this.focusInputViewChild?.nativeElement ? getFirstFocusableElement(this.overlayViewChild.el?.nativeElement, ":not(.p-hidden-focusable)") : this.focusInputViewChild?.nativeElement;
        focus(focusableEl);
      }
      onLastHiddenFocus(event2) {
        const focusableEl = event2.relatedTarget === this.focusInputViewChild?.nativeElement ? getLastFocusableElement(this.overlayViewChild?.overlayViewChild?.nativeElement, ':not([data-p-hidden-focusable="true"])') : this.focusInputViewChild?.nativeElement;
        focus(focusableEl);
      }
      hasFocusableElements() {
        return getFocusableElements(this.overlayViewChild.overlayViewChild.nativeElement, ':not([data-p-hidden-focusable="true"])').length > 0;
      }
      onBackspaceKey(event2, pressedInInputText = false) {
        if (pressedInInputText) {
          !this.overlayVisible && this.show();
        }
      }
      searchFields() {
        return this.filterBy?.split(",") || this.filterFields || [this.optionLabel];
      }
      searchOptions(event2, char) {
        this.searchValue = (this.searchValue || "") + char;
        let optionIndex = -1;
        let matched = false;
        optionIndex = this.visibleOptions().findIndex((option) => this.isOptionMatched(option));
        if (optionIndex !== -1) {
          matched = true;
        }
        if (optionIndex === -1 && this.focusedOptionIndex() === -1) {
          optionIndex = this.findFirstFocusedOptionIndex();
        }
        if (optionIndex !== -1) {
          setTimeout(() => {
            this.changeFocusedOptionIndex(event2, optionIndex);
          });
        }
        if (this.searchTimeout) {
          clearTimeout(this.searchTimeout);
        }
        this.searchTimeout = setTimeout(() => {
          this.searchValue = "";
          this.searchTimeout = null;
        }, 500);
        return matched;
      }
      isOptionMatched(option) {
        return this.isValidOption(option) && this.getOptionLabel(option).toString().toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));
      }
      onFilterInputChange(event2) {
        let value = event2.target.value;
        this._filterValue.set(value);
        this.focusedOptionIndex.set(-1);
        this.onFilter.emit({
          originalEvent: event2,
          filter: this._filterValue()
        });
        !this.virtualScrollerDisabled && this.scroller.scrollToIndex(0);
        setTimeout(() => {
          this.overlayViewChild.alignOverlay();
        });
        this.cd.markForCheck();
      }
      applyFocus() {
        if (this.editable) findSingle(this.el.nativeElement, ".p-dropdown-label.p-inputtext").focus();
        else focus(this.focusInputViewChild?.nativeElement);
      }
      /**
       * Applies focus.
       * @group Method
       */
      focus() {
        this.applyFocus();
      }
      /**
       * Clears the model.
       * @group Method
       */
      clear(event2) {
        this.updateModel(null, event2);
        this.clearEditableLabel();
        this.onModelTouched();
        this.onChange.emit({
          originalEvent: event2,
          value: this.value
        });
        this.onClear.emit(event2);
        this.resetFilter();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Select,
        deps: [{
          token: NgZone
        }, {
          token: FilterService
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.0.0",
        version: "19.2.10",
        type: _Select,
        isStandalone: true,
        selector: "p-select",
        inputs: {
          id: "id",
          scrollHeight: "scrollHeight",
          filter: ["filter", "filter", booleanAttribute],
          name: "name",
          style: "style",
          panelStyle: "panelStyle",
          styleClass: "styleClass",
          panelStyleClass: "panelStyleClass",
          readonly: ["readonly", "readonly", booleanAttribute],
          required: ["required", "required", booleanAttribute],
          editable: ["editable", "editable", booleanAttribute],
          appendTo: "appendTo",
          tabindex: ["tabindex", "tabindex", numberAttribute],
          placeholder: "placeholder",
          loadingIcon: "loadingIcon",
          filterPlaceholder: "filterPlaceholder",
          filterLocale: "filterLocale",
          variant: "variant",
          inputId: "inputId",
          dataKey: "dataKey",
          filterBy: "filterBy",
          filterFields: "filterFields",
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          resetFilterOnHide: ["resetFilterOnHide", "resetFilterOnHide", booleanAttribute],
          checkmark: ["checkmark", "checkmark", booleanAttribute],
          dropdownIcon: "dropdownIcon",
          loading: ["loading", "loading", booleanAttribute],
          optionLabel: "optionLabel",
          optionValue: "optionValue",
          optionDisabled: "optionDisabled",
          optionGroupLabel: "optionGroupLabel",
          optionGroupChildren: "optionGroupChildren",
          autoDisplayFirst: ["autoDisplayFirst", "autoDisplayFirst", booleanAttribute],
          group: ["group", "group", booleanAttribute],
          showClear: ["showClear", "showClear", booleanAttribute],
          emptyFilterMessage: "emptyFilterMessage",
          emptyMessage: "emptyMessage",
          lazy: ["lazy", "lazy", booleanAttribute],
          virtualScroll: ["virtualScroll", "virtualScroll", booleanAttribute],
          virtualScrollItemSize: ["virtualScrollItemSize", "virtualScrollItemSize", numberAttribute],
          virtualScrollOptions: "virtualScrollOptions",
          size: "size",
          overlayOptions: "overlayOptions",
          ariaFilterLabel: "ariaFilterLabel",
          ariaLabel: "ariaLabel",
          ariaLabelledBy: "ariaLabelledBy",
          filterMatchMode: "filterMatchMode",
          maxlength: ["maxlength", "maxlength", numberAttribute],
          tooltip: "tooltip",
          tooltipPosition: "tooltipPosition",
          tooltipPositionStyle: "tooltipPositionStyle",
          tooltipStyleClass: "tooltipStyleClass",
          focusOnHover: ["focusOnHover", "focusOnHover", booleanAttribute],
          selectOnFocus: ["selectOnFocus", "selectOnFocus", booleanAttribute],
          autoOptionFocus: ["autoOptionFocus", "autoOptionFocus", booleanAttribute],
          autofocusFilter: ["autofocusFilter", "autofocusFilter", booleanAttribute],
          fluid: ["fluid", "fluid", booleanAttribute],
          disabled: "disabled",
          itemSize: "itemSize",
          autoZIndex: "autoZIndex",
          baseZIndex: "baseZIndex",
          showTransitionOptions: "showTransitionOptions",
          hideTransitionOptions: "hideTransitionOptions",
          filterValue: "filterValue",
          options: "options"
        },
        outputs: {
          onChange: "onChange",
          onFilter: "onFilter",
          onFocus: "onFocus",
          onBlur: "onBlur",
          onClick: "onClick",
          onShow: "onShow",
          onHide: "onHide",
          onClear: "onClear",
          onLazyLoad: "onLazyLoad"
        },
        host: {
          listeners: {
            "click": "onContainerClick($event)"
          },
          properties: {
            "attr.id": "id",
            "class": "this.hostClass",
            "style": "this.hostStyle"
          }
        },
        providers: [SELECT_VALUE_ACCESSOR2, SelectStyle],
        queries: [{
          propertyName: "itemTemplate",
          first: true,
          predicate: ["item"]
        }, {
          propertyName: "groupTemplate",
          first: true,
          predicate: ["group"]
        }, {
          propertyName: "loaderTemplate",
          first: true,
          predicate: ["loader"]
        }, {
          propertyName: "selectedItemTemplate",
          first: true,
          predicate: ["selectedItem"]
        }, {
          propertyName: "headerTemplate",
          first: true,
          predicate: ["header"]
        }, {
          propertyName: "filterTemplate",
          first: true,
          predicate: ["filter"]
        }, {
          propertyName: "footerTemplate",
          first: true,
          predicate: ["footer"]
        }, {
          propertyName: "emptyFilterTemplate",
          first: true,
          predicate: ["emptyfilter"]
        }, {
          propertyName: "emptyTemplate",
          first: true,
          predicate: ["empty"]
        }, {
          propertyName: "dropdownIconTemplate",
          first: true,
          predicate: ["dropdownicon"]
        }, {
          propertyName: "loadingIconTemplate",
          first: true,
          predicate: ["loadingicon"]
        }, {
          propertyName: "clearIconTemplate",
          first: true,
          predicate: ["clearicon"]
        }, {
          propertyName: "filterIconTemplate",
          first: true,
          predicate: ["filtericon"]
        }, {
          propertyName: "onIconTemplate",
          first: true,
          predicate: ["onicon"]
        }, {
          propertyName: "offIconTemplate",
          first: true,
          predicate: ["officon"]
        }, {
          propertyName: "cancelIconTemplate",
          first: true,
          predicate: ["cancelicon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "filterViewChild",
          first: true,
          predicate: ["filter"],
          descendants: true
        }, {
          propertyName: "focusInputViewChild",
          first: true,
          predicate: ["focusInput"],
          descendants: true
        }, {
          propertyName: "editableInputViewChild",
          first: true,
          predicate: ["editableInput"],
          descendants: true
        }, {
          propertyName: "itemsViewChild",
          first: true,
          predicate: ["items"],
          descendants: true
        }, {
          propertyName: "scroller",
          first: true,
          predicate: ["scroller"],
          descendants: true
        }, {
          propertyName: "overlayViewChild",
          first: true,
          predicate: ["overlay"],
          descendants: true
        }, {
          propertyName: "firstHiddenFocusableElementOnOverlay",
          first: true,
          predicate: ["firstHiddenFocusableEl"],
          descendants: true
        }, {
          propertyName: "lastHiddenFocusableElementOnOverlay",
          first: true,
          predicate: ["lastHiddenFocusableEl"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <span
            #focusInput
            [ngClass]="inputClass"
            *ngIf="!editable"
            [pTooltip]="tooltip"
            [tooltipPosition]="tooltipPosition"
            [positionStyle]="tooltipPositionStyle"
            [tooltipStyleClass]="tooltipStyleClass"
            [attr.aria-disabled]="disabled"
            [attr.id]="inputId"
            role="combobox"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            [attr.aria-labelledby]="ariaLabelledBy"
            [attr.aria-haspopup]="'listbox'"
            [attr.aria-expanded]="overlayVisible ?? false"
            [attr.aria-controls]="overlayVisible ? id + '_list' : null"
            [attr.tabindex]="!disabled ? tabindex : -1"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
            (keydown)="onKeyDown($event)"
            [attr.aria-required]="required"
            [attr.required]="required"
        >
            <ng-container *ngIf="!selectedItemTemplate && !_selectedItemTemplate; else defaultPlaceholder">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</ng-container>
            <ng-container *ngIf="(selectedItemTemplate || _selectedItemTemplate) && !isSelectedOptionEmpty()" [ngTemplateOutlet]="selectedItemTemplate || _selectedItemTemplate" [ngTemplateOutletContext]="{ $implicit: selectedOption }"></ng-container>
            <ng-template #defaultPlaceholder>
                <span *ngIf="isSelectedOptionEmpty()">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</span>
            </ng-template>
        </span>
        <input
            *ngIf="editable"
            #editableInput
            type="text"
            [attr.id]="inputId"
            [attr.maxlength]="maxlength"
            [ngClass]="inputClass"
            [disabled]="disabled"
            aria-haspopup="listbox"
            [attr.placeholder]="modelValue() === undefined || modelValue() === null ? placeholder() : undefined"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            (input)="onEditableInput($event)"
            (keydown)="onKeyDown($event)"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
        />
        <ng-container *ngIf="isVisibleClearIcon">
            <TimesIcon class="p-select-clear-icon" (click)="clear($event)" *ngIf="!clearIconTemplate && !_clearIconTemplate" [attr.data-pc-section]="'clearicon'" />
            <span class="p-select-clear-icon" (click)="clear($event)" *ngIf="clearIconTemplate || _clearIconTemplate" [attr.data-pc-section]="'clearicon'">
                <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate; context: { class: 'p-select-clear-icon' }"></ng-template>
            </span>
        </ng-container>

        <div class="p-select-dropdown" role="button" aria-label="dropdown trigger" aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible ?? false" [attr.data-pc-section]="'trigger'">
            <ng-container *ngIf="loading; else elseBlock">
                <ng-container *ngIf="loadingIconTemplate || _loadingIconTemplate">
                    <ng-container *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate"></ng-container>
                </ng-container>
                <ng-container *ngIf="!loadingIconTemplate && !_loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="'p-select-loading-icon pi-spin ' + loadingIcon" aria-hidden="true"></span>
                    <span *ngIf="!loadingIcon" [class]="'p-select-loading-icon pi pi-spinner pi-spin'" aria-hidden="true"></span>
                </ng-container>
            </ng-container>

            <ng-template #elseBlock>
                <ng-container *ngIf="!dropdownIconTemplate && !_dropdownIconTemplate">
                    <span class="p-select-dropdown-icon" *ngIf="dropdownIcon" [ngClass]="dropdownIcon"></span>
                    <ChevronDownIcon *ngIf="!dropdownIcon" [styleClass]="'p-select-dropdown-icon'" />
                </ng-container>
                <span *ngIf="dropdownIconTemplate || _dropdownIconTemplate" class="p-select-dropdown-icon">
                    <ng-template *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate; context: { class: 'p-select-dropdown-icon' }"></ng-template>
                </span>
            </ng-template>
        </div>

        <p-overlay
            #overlay
            [(visible)]="overlayVisible"
            [options]="overlayOptions"
            [target]="'@parent'"
            [appendTo]="appendTo"
            [autoZIndex]="autoZIndex"
            [baseZIndex]="baseZIndex"
            [showTransitionOptions]="showTransitionOptions"
            [hideTransitionOptions]="hideTransitionOptions"
            (onAnimationStart)="onOverlayAnimationStart($event)"
            (onHide)="hide()"
        >
            <ng-template #content>
                <div [ngClass]="'p-select-overlay p-component'" [ngStyle]="panelStyle" [class]="panelStyleClass">
                    <span
                        #firstHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onFirstHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    >
                    </span>
                    <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate"></ng-container>
                    <div class="p-select-header" *ngIf="filter" (click)="$event.stopPropagation()">
                        <ng-container *ngIf="filterTemplate || _filterTemplate; else builtInFilterElement">
                            <ng-container *ngTemplateOutlet="filterTemplate || _filterTemplate; context: { options: filterOptions }"></ng-container>
                        </ng-container>
                        <ng-template #builtInFilterElement>
                            <p-iconfield>
                                <input
                                    #filter
                                    pInputText
                                    [pSize]="size"
                                    type="text"
                                    role="searchbox"
                                    autocomplete="off"
                                    [value]="_filterValue() || ''"
                                    class="p-select-filter"
                                    [variant]="variant"
                                    [attr.placeholder]="filterPlaceholder"
                                    [attr.aria-owns]="id + '_list'"
                                    (input)="onFilterInputChange($event)"
                                    [attr.aria-label]="ariaFilterLabel"
                                    [attr.aria-activedescendant]="focusedOptionId"
                                    (keydown)="onFilterKeyDown($event)"
                                    (blur)="onFilterBlur($event)"
                                />
                                <p-inputicon>
                                    <SearchIcon *ngIf="!filterIconTemplate && !_filterIconTemplate" />
                                    <span *ngIf="filterIconTemplate || _filterIconTemplate">
                                        <ng-template *ngTemplateOutlet="filterIconTemplate || _filterIconTemplate"></ng-template>
                                    </span>
                                </p-inputicon>
                            </p-iconfield>
                        </ng-template>
                    </div>
                    <div class="p-select-list-container" [style.max-height]="virtualScroll ? 'auto' : scrollHeight || 'auto'">
                        <p-scroller
                            *ngIf="virtualScroll"
                            #scroller
                            [items]="visibleOptions()"
                            [style]="{ height: scrollHeight }"
                            [itemSize]="virtualScrollItemSize || _itemSize"
                            [autoSize]="true"
                            [lazy]="lazy"
                            (onLazyLoad)="onLazyLoad.emit($event)"
                            [options]="virtualScrollOptions"
                        >
                            <ng-template #content let-items let-scrollerOptions="options">
                                <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: items, options: scrollerOptions }"></ng-container>
                            </ng-template>
                            <ng-container *ngIf="loaderTemplate || _loaderTemplate">
                                <ng-template #loader let-scrollerOptions="options">
                                    <ng-container *ngTemplateOutlet="loaderTemplate || _loaderTemplate; context: { options: scrollerOptions }"></ng-container>
                                </ng-template>
                            </ng-container>
                        </p-scroller>
                        <ng-container *ngIf="!virtualScroll">
                            <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: visibleOptions(), options: {} }"></ng-container>
                        </ng-container>

                        <ng-template #buildInItems let-items let-scrollerOptions="options">
                            <ul #items [attr.id]="id + '_list'" [attr.aria-label]="listLabel" class="p-select-list" [ngClass]="scrollerOptions.contentStyleClass" [style]="scrollerOptions.contentStyle" role="listbox">
                                <ng-template ngFor let-option [ngForOf]="items" let-i="index">
                                    <ng-container *ngIf="isOptionGroup(option)">
                                        <li class="p-select-option-group" [attr.id]="id + '_' + getOptionIndex(i, scrollerOptions)" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                            <span *ngIf="!groupTemplate && !_groupTemplate">{{ getOptionGroupLabel(option.optionGroup) }}</span>
                                            <ng-container *ngTemplateOutlet="groupTemplate || _groupTemplate; context: { $implicit: option.optionGroup }"></ng-container>
                                        </li>
                                    </ng-container>
                                    <ng-container *ngIf="!isOptionGroup(option)">
                                        <p-selectItem
                                            [id]="id + '_' + getOptionIndex(i, scrollerOptions)"
                                            [option]="option"
                                            [checkmark]="checkmark"
                                            [selected]="isSelected(option)"
                                            [label]="getOptionLabel(option)"
                                            [disabled]="isOptionDisabled(option)"
                                            [template]="itemTemplate || _itemTemplate"
                                            [focused]="focusedOptionIndex() === getOptionIndex(i, scrollerOptions)"
                                            [ariaPosInset]="getAriaPosInset(getOptionIndex(i, scrollerOptions))"
                                            [ariaSetSize]="ariaSetSize"
                                            (onClick)="onOptionSelect($event, option)"
                                            (onMouseEnter)="onOptionMouseEnter($event, getOptionIndex(i, scrollerOptions))"
                                        ></p-selectItem>
                                    </ng-container>
                                </ng-template>
                                <li *ngIf="filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyFilterTemplate && !_emptyFilterTemplate && !emptyTemplate) {
                                        {{ emptyFilterMessageLabel }}
                                    } @else {
                                        <ng-container #emptyFilter *ngTemplateOutlet="emptyFilterTemplate || _emptyFilterTemplate || emptyTemplate || _emptyTemplate"></ng-container>
                                    }
                                </li>
                                <li *ngIf="!filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyTemplate && !_emptyTemplate) {
                                        {{ emptyMessageLabel }}
                                    } @else {
                                        <ng-container #empty *ngTemplateOutlet="emptyTemplate || _emptyTemplate"></ng-container>
                                    }
                                </li>
                            </ul>
                        </ng-template>
                    </div>
                    <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate"></ng-container>
                    <span
                        #lastHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onLastHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    ></span>
                </div>
            </ng-template>
        </p-overlay>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgForOf,
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: SelectItem,
          selector: "p-selectItem",
          inputs: ["id", "option", "selected", "focused", "label", "disabled", "visible", "itemSize", "ariaPosInset", "ariaSetSize", "template", "checkmark"],
          outputs: ["onClick", "onMouseEnter"]
        }, {
          kind: "component",
          type: Overlay,
          selector: "p-overlay",
          inputs: ["visible", "mode", "style", "styleClass", "contentStyle", "contentStyleClass", "target", "appendTo", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "listener", "responsive", "options"],
          outputs: ["visibleChange", "onBeforeShow", "onShow", "onBeforeHide", "onHide", "onAnimationStart", "onAnimationDone"]
        }, {
          kind: "directive",
          type: Tooltip,
          selector: "[pTooltip]",
          inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"]
        }, {
          kind: "directive",
          type: AutoFocus,
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "component",
          type: TimesIcon,
          selector: "TimesIcon"
        }, {
          kind: "component",
          type: ChevronDownIcon,
          selector: "ChevronDownIcon"
        }, {
          kind: "component",
          type: SearchIcon,
          selector: "SearchIcon"
        }, {
          kind: "directive",
          type: InputText,
          selector: "[pInputText]",
          inputs: ["variant", "fluid", "pSize"]
        }, {
          kind: "component",
          type: IconField,
          selector: "p-iconfield, p-iconField, p-icon-field",
          inputs: ["iconPosition", "styleClass"]
        }, {
          kind: "component",
          type: InputIcon,
          selector: "p-inputicon, p-inputIcon",
          inputs: ["styleClass"]
        }, {
          kind: "component",
          type: Scroller,
          selector: "p-scroller, p-virtualscroller, p-virtual-scroller, p-virtualScroller",
          inputs: ["id", "style", "styleClass", "tabindex", "items", "itemSize", "scrollHeight", "scrollWidth", "orientation", "step", "delay", "resizeDelay", "appendOnly", "inline", "lazy", "disabled", "loaderDisabled", "columns", "showSpacer", "showLoader", "numToleratedItems", "loading", "autoSize", "trackBy", "options"],
          outputs: ["onLazyLoad", "onScroll", "onScrollIndexChange"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Select,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-select",
          standalone: true,
          imports: [CommonModule, SelectItem, Overlay, Tooltip, AutoFocus, TimesIcon, ChevronDownIcon, SearchIcon, InputText, IconField, InputIcon, Scroller, SharedModule],
          template: `
        <span
            #focusInput
            [ngClass]="inputClass"
            *ngIf="!editable"
            [pTooltip]="tooltip"
            [tooltipPosition]="tooltipPosition"
            [positionStyle]="tooltipPositionStyle"
            [tooltipStyleClass]="tooltipStyleClass"
            [attr.aria-disabled]="disabled"
            [attr.id]="inputId"
            role="combobox"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            [attr.aria-labelledby]="ariaLabelledBy"
            [attr.aria-haspopup]="'listbox'"
            [attr.aria-expanded]="overlayVisible ?? false"
            [attr.aria-controls]="overlayVisible ? id + '_list' : null"
            [attr.tabindex]="!disabled ? tabindex : -1"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
            (keydown)="onKeyDown($event)"
            [attr.aria-required]="required"
            [attr.required]="required"
        >
            <ng-container *ngIf="!selectedItemTemplate && !_selectedItemTemplate; else defaultPlaceholder">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</ng-container>
            <ng-container *ngIf="(selectedItemTemplate || _selectedItemTemplate) && !isSelectedOptionEmpty()" [ngTemplateOutlet]="selectedItemTemplate || _selectedItemTemplate" [ngTemplateOutletContext]="{ $implicit: selectedOption }"></ng-container>
            <ng-template #defaultPlaceholder>
                <span *ngIf="isSelectedOptionEmpty()">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</span>
            </ng-template>
        </span>
        <input
            *ngIf="editable"
            #editableInput
            type="text"
            [attr.id]="inputId"
            [attr.maxlength]="maxlength"
            [ngClass]="inputClass"
            [disabled]="disabled"
            aria-haspopup="listbox"
            [attr.placeholder]="modelValue() === undefined || modelValue() === null ? placeholder() : undefined"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            (input)="onEditableInput($event)"
            (keydown)="onKeyDown($event)"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
        />
        <ng-container *ngIf="isVisibleClearIcon">
            <TimesIcon class="p-select-clear-icon" (click)="clear($event)" *ngIf="!clearIconTemplate && !_clearIconTemplate" [attr.data-pc-section]="'clearicon'" />
            <span class="p-select-clear-icon" (click)="clear($event)" *ngIf="clearIconTemplate || _clearIconTemplate" [attr.data-pc-section]="'clearicon'">
                <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate; context: { class: 'p-select-clear-icon' }"></ng-template>
            </span>
        </ng-container>

        <div class="p-select-dropdown" role="button" aria-label="dropdown trigger" aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible ?? false" [attr.data-pc-section]="'trigger'">
            <ng-container *ngIf="loading; else elseBlock">
                <ng-container *ngIf="loadingIconTemplate || _loadingIconTemplate">
                    <ng-container *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate"></ng-container>
                </ng-container>
                <ng-container *ngIf="!loadingIconTemplate && !_loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="'p-select-loading-icon pi-spin ' + loadingIcon" aria-hidden="true"></span>
                    <span *ngIf="!loadingIcon" [class]="'p-select-loading-icon pi pi-spinner pi-spin'" aria-hidden="true"></span>
                </ng-container>
            </ng-container>

            <ng-template #elseBlock>
                <ng-container *ngIf="!dropdownIconTemplate && !_dropdownIconTemplate">
                    <span class="p-select-dropdown-icon" *ngIf="dropdownIcon" [ngClass]="dropdownIcon"></span>
                    <ChevronDownIcon *ngIf="!dropdownIcon" [styleClass]="'p-select-dropdown-icon'" />
                </ng-container>
                <span *ngIf="dropdownIconTemplate || _dropdownIconTemplate" class="p-select-dropdown-icon">
                    <ng-template *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate; context: { class: 'p-select-dropdown-icon' }"></ng-template>
                </span>
            </ng-template>
        </div>

        <p-overlay
            #overlay
            [(visible)]="overlayVisible"
            [options]="overlayOptions"
            [target]="'@parent'"
            [appendTo]="appendTo"
            [autoZIndex]="autoZIndex"
            [baseZIndex]="baseZIndex"
            [showTransitionOptions]="showTransitionOptions"
            [hideTransitionOptions]="hideTransitionOptions"
            (onAnimationStart)="onOverlayAnimationStart($event)"
            (onHide)="hide()"
        >
            <ng-template #content>
                <div [ngClass]="'p-select-overlay p-component'" [ngStyle]="panelStyle" [class]="panelStyleClass">
                    <span
                        #firstHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onFirstHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    >
                    </span>
                    <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate"></ng-container>
                    <div class="p-select-header" *ngIf="filter" (click)="$event.stopPropagation()">
                        <ng-container *ngIf="filterTemplate || _filterTemplate; else builtInFilterElement">
                            <ng-container *ngTemplateOutlet="filterTemplate || _filterTemplate; context: { options: filterOptions }"></ng-container>
                        </ng-container>
                        <ng-template #builtInFilterElement>
                            <p-iconfield>
                                <input
                                    #filter
                                    pInputText
                                    [pSize]="size"
                                    type="text"
                                    role="searchbox"
                                    autocomplete="off"
                                    [value]="_filterValue() || ''"
                                    class="p-select-filter"
                                    [variant]="variant"
                                    [attr.placeholder]="filterPlaceholder"
                                    [attr.aria-owns]="id + '_list'"
                                    (input)="onFilterInputChange($event)"
                                    [attr.aria-label]="ariaFilterLabel"
                                    [attr.aria-activedescendant]="focusedOptionId"
                                    (keydown)="onFilterKeyDown($event)"
                                    (blur)="onFilterBlur($event)"
                                />
                                <p-inputicon>
                                    <SearchIcon *ngIf="!filterIconTemplate && !_filterIconTemplate" />
                                    <span *ngIf="filterIconTemplate || _filterIconTemplate">
                                        <ng-template *ngTemplateOutlet="filterIconTemplate || _filterIconTemplate"></ng-template>
                                    </span>
                                </p-inputicon>
                            </p-iconfield>
                        </ng-template>
                    </div>
                    <div class="p-select-list-container" [style.max-height]="virtualScroll ? 'auto' : scrollHeight || 'auto'">
                        <p-scroller
                            *ngIf="virtualScroll"
                            #scroller
                            [items]="visibleOptions()"
                            [style]="{ height: scrollHeight }"
                            [itemSize]="virtualScrollItemSize || _itemSize"
                            [autoSize]="true"
                            [lazy]="lazy"
                            (onLazyLoad)="onLazyLoad.emit($event)"
                            [options]="virtualScrollOptions"
                        >
                            <ng-template #content let-items let-scrollerOptions="options">
                                <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: items, options: scrollerOptions }"></ng-container>
                            </ng-template>
                            <ng-container *ngIf="loaderTemplate || _loaderTemplate">
                                <ng-template #loader let-scrollerOptions="options">
                                    <ng-container *ngTemplateOutlet="loaderTemplate || _loaderTemplate; context: { options: scrollerOptions }"></ng-container>
                                </ng-template>
                            </ng-container>
                        </p-scroller>
                        <ng-container *ngIf="!virtualScroll">
                            <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: visibleOptions(), options: {} }"></ng-container>
                        </ng-container>

                        <ng-template #buildInItems let-items let-scrollerOptions="options">
                            <ul #items [attr.id]="id + '_list'" [attr.aria-label]="listLabel" class="p-select-list" [ngClass]="scrollerOptions.contentStyleClass" [style]="scrollerOptions.contentStyle" role="listbox">
                                <ng-template ngFor let-option [ngForOf]="items" let-i="index">
                                    <ng-container *ngIf="isOptionGroup(option)">
                                        <li class="p-select-option-group" [attr.id]="id + '_' + getOptionIndex(i, scrollerOptions)" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                            <span *ngIf="!groupTemplate && !_groupTemplate">{{ getOptionGroupLabel(option.optionGroup) }}</span>
                                            <ng-container *ngTemplateOutlet="groupTemplate || _groupTemplate; context: { $implicit: option.optionGroup }"></ng-container>
                                        </li>
                                    </ng-container>
                                    <ng-container *ngIf="!isOptionGroup(option)">
                                        <p-selectItem
                                            [id]="id + '_' + getOptionIndex(i, scrollerOptions)"
                                            [option]="option"
                                            [checkmark]="checkmark"
                                            [selected]="isSelected(option)"
                                            [label]="getOptionLabel(option)"
                                            [disabled]="isOptionDisabled(option)"
                                            [template]="itemTemplate || _itemTemplate"
                                            [focused]="focusedOptionIndex() === getOptionIndex(i, scrollerOptions)"
                                            [ariaPosInset]="getAriaPosInset(getOptionIndex(i, scrollerOptions))"
                                            [ariaSetSize]="ariaSetSize"
                                            (onClick)="onOptionSelect($event, option)"
                                            (onMouseEnter)="onOptionMouseEnter($event, getOptionIndex(i, scrollerOptions))"
                                        ></p-selectItem>
                                    </ng-container>
                                </ng-template>
                                <li *ngIf="filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyFilterTemplate && !_emptyFilterTemplate && !emptyTemplate) {
                                        {{ emptyFilterMessageLabel }}
                                    } @else {
                                        <ng-container #emptyFilter *ngTemplateOutlet="emptyFilterTemplate || _emptyFilterTemplate || emptyTemplate || _emptyTemplate"></ng-container>
                                    }
                                </li>
                                <li *ngIf="!filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyTemplate && !_emptyTemplate) {
                                        {{ emptyMessageLabel }}
                                    } @else {
                                        <ng-container #empty *ngTemplateOutlet="emptyTemplate || _emptyTemplate"></ng-container>
                                    }
                                </li>
                            </ul>
                        </ng-template>
                    </div>
                    <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate"></ng-container>
                    <span
                        #lastHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onLastHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    ></span>
                </div>
            </ng-template>
        </p-overlay>
    `,
          host: {
            "[attr.id]": "id",
            "(click)": "onContainerClick($event)"
          },
          providers: [SELECT_VALUE_ACCESSOR2, SelectStyle],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: NgZone
      }, {
        type: FilterService
      }],
      propDecorators: {
        id: [{
          type: Input
        }],
        scrollHeight: [{
          type: Input
        }],
        filter: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        name: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        panelStyle: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        panelStyleClass: [{
          type: Input
        }],
        readonly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        required: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        editable: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        appendTo: [{
          type: Input
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        placeholder: [{
          type: Input
        }],
        loadingIcon: [{
          type: Input
        }],
        filterPlaceholder: [{
          type: Input
        }],
        filterLocale: [{
          type: Input
        }],
        variant: [{
          type: Input
        }],
        inputId: [{
          type: Input
        }],
        dataKey: [{
          type: Input
        }],
        filterBy: [{
          type: Input
        }],
        filterFields: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        resetFilterOnHide: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        checkmark: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        dropdownIcon: [{
          type: Input
        }],
        loading: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        optionLabel: [{
          type: Input
        }],
        optionValue: [{
          type: Input
        }],
        optionDisabled: [{
          type: Input
        }],
        optionGroupLabel: [{
          type: Input
        }],
        optionGroupChildren: [{
          type: Input
        }],
        autoDisplayFirst: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        group: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showClear: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        emptyFilterMessage: [{
          type: Input
        }],
        emptyMessage: [{
          type: Input
        }],
        lazy: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        virtualScroll: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        virtualScrollItemSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        virtualScrollOptions: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        overlayOptions: [{
          type: Input
        }],
        ariaFilterLabel: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        filterMatchMode: [{
          type: Input
        }],
        maxlength: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        tooltip: [{
          type: Input
        }],
        tooltipPosition: [{
          type: Input
        }],
        tooltipPositionStyle: [{
          type: Input
        }],
        tooltipStyleClass: [{
          type: Input
        }],
        focusOnHover: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        selectOnFocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autoOptionFocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autofocusFilter: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        disabled: [{
          type: Input
        }],
        itemSize: [{
          type: Input
        }],
        autoZIndex: [{
          type: Input
        }],
        baseZIndex: [{
          type: Input
        }],
        showTransitionOptions: [{
          type: Input
        }],
        hideTransitionOptions: [{
          type: Input
        }],
        filterValue: [{
          type: Input
        }],
        options: [{
          type: Input
        }],
        onChange: [{
          type: Output
        }],
        onFilter: [{
          type: Output
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        onClick: [{
          type: Output
        }],
        onShow: [{
          type: Output
        }],
        onHide: [{
          type: Output
        }],
        onClear: [{
          type: Output
        }],
        onLazyLoad: [{
          type: Output
        }],
        filterViewChild: [{
          type: ViewChild,
          args: ["filter"]
        }],
        focusInputViewChild: [{
          type: ViewChild,
          args: ["focusInput"]
        }],
        editableInputViewChild: [{
          type: ViewChild,
          args: ["editableInput"]
        }],
        itemsViewChild: [{
          type: ViewChild,
          args: ["items"]
        }],
        scroller: [{
          type: ViewChild,
          args: ["scroller"]
        }],
        overlayViewChild: [{
          type: ViewChild,
          args: ["overlay"]
        }],
        firstHiddenFocusableElementOnOverlay: [{
          type: ViewChild,
          args: ["firstHiddenFocusableEl"]
        }],
        lastHiddenFocusableElementOnOverlay: [{
          type: ViewChild,
          args: ["lastHiddenFocusableEl"]
        }],
        hostClass: [{
          type: HostBinding,
          args: ["class"]
        }],
        hostStyle: [{
          type: HostBinding,
          args: ["style"]
        }],
        itemTemplate: [{
          type: ContentChild,
          args: ["item", {
            descendants: false
          }]
        }],
        groupTemplate: [{
          type: ContentChild,
          args: ["group", {
            descendants: false
          }]
        }],
        loaderTemplate: [{
          type: ContentChild,
          args: ["loader", {
            descendants: false
          }]
        }],
        selectedItemTemplate: [{
          type: ContentChild,
          args: ["selectedItem", {
            descendants: false
          }]
        }],
        headerTemplate: [{
          type: ContentChild,
          args: ["header", {
            descendants: false
          }]
        }],
        filterTemplate: [{
          type: ContentChild,
          args: ["filter", {
            descendants: false
          }]
        }],
        footerTemplate: [{
          type: ContentChild,
          args: ["footer", {
            descendants: false
          }]
        }],
        emptyFilterTemplate: [{
          type: ContentChild,
          args: ["emptyfilter", {
            descendants: false
          }]
        }],
        emptyTemplate: [{
          type: ContentChild,
          args: ["empty", {
            descendants: false
          }]
        }],
        dropdownIconTemplate: [{
          type: ContentChild,
          args: ["dropdownicon", {
            descendants: false
          }]
        }],
        loadingIconTemplate: [{
          type: ContentChild,
          args: ["loadingicon", {
            descendants: false
          }]
        }],
        clearIconTemplate: [{
          type: ContentChild,
          args: ["clearicon", {
            descendants: false
          }]
        }],
        filterIconTemplate: [{
          type: ContentChild,
          args: ["filtericon", {
            descendants: false
          }]
        }],
        onIconTemplate: [{
          type: ContentChild,
          args: ["onicon", {
            descendants: false
          }]
        }],
        offIconTemplate: [{
          type: ContentChild,
          args: ["officon", {
            descendants: false
          }]
        }],
        cancelIconTemplate: [{
          type: ContentChild,
          args: ["cancelicon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    SelectModule = class _SelectModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectModule,
        imports: [Select, SharedModule],
        exports: [Select, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectModule,
        imports: [Select, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Select, SharedModule],
          exports: [Select, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-paginator.mjs
var theme13, classes12, PaginatorStyle, PaginatorClasses, Paginator, PaginatorModule;
var init_primeng_paginator = __esm({
  "node_modules/primeng/fesm2022/primeng-paginator.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_forms();
    init_primeng_api();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_icons();
    init_primeng_inputnumber();
    init_primeng_ripple();
    init_primeng_select();
    init_primeng_base();
    theme13 = ({
      dt
    }) => `
.p-paginator {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    background: ${dt("paginator.background")};
    color: ${dt("paginator.color")};
    padding: ${dt("paginator.padding")};
    border-radius: ${dt("paginator.border.radius")};
    gap: ${dt("paginator.gap")};
}

.p-paginator-content {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    gap: ${dt("paginator.gap")};
}

.p-paginator-content-start {
    margin-inline-end: auto;
}

.p-paginator-content-end {
    margin-inline-start: auto;
}

.p-paginator-page,
.p-paginator-next,
.p-paginator-last,
.p-paginator-first,
.p-paginator-prev {
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
    user-select: none;
    overflow: hidden;
    position: relative;
    background: ${dt("paginator.nav.button.background")};
    border: 0 none;
    color: ${dt("paginator.nav.button.color")};
    min-width: ${dt("paginator.nav.button.width")};
    height: ${dt("paginator.nav.button.height")};
    transition: background ${dt("paginator.transition.duration")}, color ${dt("paginator.transition.duration")}, outline-color ${dt("paginator.transition.duration")}, box-shadow ${dt("paginator.transition.duration")};
    border-radius: ${dt("paginator.nav.button.border.radius")};
    padding: 0;
    margin: 0;
}

.p-paginator-page:focus-visible,
.p-paginator-next:focus-visible,
.p-paginator-last:focus-visible,
.p-paginator-first:focus-visible,
.p-paginator-prev:focus-visible {
    box-shadow: ${dt("paginator.nav.button.focus.ring.shadow")};
    outline: ${dt("paginator.nav.button.focus.ring.width")} ${dt("paginator.nav.button.focus.ring.style")} ${dt("paginator.nav.button.focus.ring.color")};
    outline-offset: ${dt("paginator.nav.button.focus.ring.offset")};
}

.p-paginator-page:not(.p-disabled):not(.p-paginator-page-selected):hover,
.p-paginator-first:not(.p-disabled):hover,
.p-paginator-prev:not(.p-disabled):hover,
.p-paginator-next:not(.p-disabled):hover,
.p-paginator-last:not(.p-disabled):hover {
    background: ${dt("paginator.nav.button.hover.background")};
    color: ${dt("paginator.nav.button.hover.color")};
}

.p-paginator-first:dir(rtl),
.p-paginator-prev:dir(rtl),
.p-paginator-next:dir(rtl),
.p-paginator-last:dir(rtl) {
    transform: rotate(180deg);
}

.p-paginator-page.p-paginator-page-selected {
    background: ${dt("paginator.nav.button.selected.background")};
    color: ${dt("paginator.nav.button.selected.color")};
}

.p-paginator-current {
    color: ${dt("paginator.current.page.report.color")};
}

.p-paginator-pages {
    display: flex;
    align-items: center;
    gap: ${dt("paginator.gap")};
}

.p-paginator-jtp-input .p-inputtext {
    max-width: ${dt("paginator.jump.to.page.input.max.width")};
}
`;
    classes12 = {
      paginator: ({
        instance,
        key
      }) => ["p-paginator p-component", {
        "p-paginator-default": !instance.hasBreakpoints(),
        [`p-paginator-${key}`]: instance.hasBreakpoints()
      }],
      content: "p-paginator-content",
      contentStart: "p-paginator-content-start",
      contentEnd: "p-paginator-content-end",
      first: ({
        instance
      }) => ["p-paginator-first", {
        "p-disabled": instance.$attrs.disabled
      }],
      firstIcon: "p-paginator-first-icon",
      prev: ({
        instance
      }) => ["p-paginator-prev", {
        "p-disabled": instance.$attrs.disabled
      }],
      prevIcon: "p-paginator-prev-icon",
      next: ({
        instance
      }) => ["p-paginator-next", {
        "p-disabled": instance.$attrs.disabled
      }],
      nextIcon: "p-paginator-next-icon",
      last: ({
        instance
      }) => ["p-paginator-last", {
        "p-disabled": instance.$attrs.disabled
      }],
      lastIcon: "p-paginator-last-icon",
      pages: "p-paginator-pages",
      page: ({
        props,
        pageLink
      }) => ["p-paginator-page", {
        "p-paginator-page-selected": pageLink - 1 === props.page
      }],
      current: "p-paginator-current",
      pcRowPerPageDropdown: "p-paginator-rpp-dropdown",
      pcJumpToPageDropdown: "p-paginator-jtp-dropdown",
      pcJumpToPageInput: "p-paginator-jtp-input"
    };
    PaginatorStyle = class _PaginatorStyle extends BaseStyle {
      name = "paginator";
      theme = theme13;
      classes = classes12;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _PaginatorStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _PaginatorStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: PaginatorStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(PaginatorClasses2) {
      PaginatorClasses2["paginator"] = "p-paginator";
      PaginatorClasses2["contentStart"] = "p-paginator-content-start";
      PaginatorClasses2["contentEnd"] = "p-paginator-content-end";
      PaginatorClasses2["first"] = "p-paginator-first";
      PaginatorClasses2["firstIcon"] = "p-paginator-first-icon";
      PaginatorClasses2["prev"] = "p-paginator-prev";
      PaginatorClasses2["prevIcon"] = "p-paginator-prev-icon";
      PaginatorClasses2["next"] = "p-paginator-next";
      PaginatorClasses2["nextIcon"] = "p-paginator-next-icon";
      PaginatorClasses2["last"] = "p-paginator-last";
      PaginatorClasses2["lastIcon"] = "p-paginator-last-icon";
      PaginatorClasses2["pages"] = "p-paginator-pages";
      PaginatorClasses2["page"] = "p-paginator-page";
      PaginatorClasses2["current"] = "p-paginator-current";
      PaginatorClasses2["pcRowPerPageDropdown"] = "p-paginator-rpp-dropdown";
      PaginatorClasses2["pcJumpToPageDropdown"] = "p-paginator-jtp-dropdown";
      PaginatorClasses2["pcJumpToPageInput"] = "p-paginator-jtp-input";
    })(PaginatorClasses || (PaginatorClasses = {}));
    Paginator = class _Paginator extends BaseComponent {
      /**
       * Number of page links to display.
       * @group Props
       */
      pageLinkSize = 5;
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * Whether to show it even there is only one page.
       * @group Props
       */
      alwaysShow = true;
      /**
       * Target element to attach the dropdown overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
       * @group Props
       */
      dropdownAppendTo;
      /**
       * Template instance to inject into the left side of the paginator.
       * @param {PaginatorState} context - Paginator state.
       * @group Props
       */
      templateLeft;
      /**
       * Template instance to inject into the right side of the paginator.
       * @param {PaginatorState} context - Paginator state.
       * @group Props
       */
      templateRight;
      /**
       * Target element to attach the dropdown overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
       * @group Props
       */
      appendTo;
      /**
       * Dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.
       * @group Props
       */
      dropdownScrollHeight = "200px";
      /**
       * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}
       * @group Props
       */
      currentPageReportTemplate = "{currentPage} of {totalPages}";
      /**
       * Whether to display current page report.
       * @group Props
       */
      showCurrentPageReport;
      /**
       * When enabled, icons are displayed on paginator to go first and last page.
       * @group Props
       */
      showFirstLastIcon = true;
      /**
       * Number of total records.
       * @group Props
       */
      totalRecords = 0;
      /**
       * Data count to display per page.
       * @group Props
       */
      rows = 0;
      /**
       * Array of integer/object values to display inside rows per page dropdown. A object that have 'showAll' key can be added to it to show all data. Exp; [10,20,30,{showAll:'All'}]
       * @group Props
       */
      rowsPerPageOptions;
      /**
       * Whether to display a dropdown to navigate to any page.
       * @group Props
       */
      showJumpToPageDropdown;
      /**
       * Whether to display a input to navigate to any page.
       * @group Props
       */
      showJumpToPageInput;
      /**
       * Template instance to inject into the jump to page dropdown item inside in the paginator.
       * @param {Object} context - item instance.
       * @group Props
       */
      jumpToPageItemTemplate;
      /**
       * Whether to show page links.
       * @group Props
       */
      showPageLinks = true;
      /**
       * Locale to be used in formatting.
       * @group Props
       */
      locale;
      /**
       * Template instance to inject into the rows per page dropdown item inside in the paginator.
       * @param {Object} context - item instance.
       * @group Props
       */
      dropdownItemTemplate;
      /**
       * Zero-relative number of the first row to be displayed.
       * @group Props
       */
      get first() {
        return this._first;
      }
      set first(val) {
        this._first = val;
      }
      /**
       * Callback to invoke when page changes, the event object contains information about the new state.
       * @param {PaginatorState} event - Paginator state.
       * @group Emits
       */
      onPageChange = new EventEmitter();
      /**
       * Template for the dropdown icon.
       * @group Templates
       */
      dropdownIconTemplate;
      /**
       * Template for the first page link icon.
       * @group Templates
       */
      firstPageLinkIconTemplate;
      /**
       * Template for the previous page link icon.
       * @group Templates
       */
      previousPageLinkIconTemplate;
      /**
       * Template for the last page link icon.
       * @group Templates
       */
      lastPageLinkIconTemplate;
      /**
       * Template for the next page link icon.
       * @group Templates
       */
      nextPageLinkIconTemplate;
      templates;
      _dropdownIconTemplate;
      _firstPageLinkIconTemplate;
      _previousPageLinkIconTemplate;
      _lastPageLinkIconTemplate;
      _nextPageLinkIconTemplate;
      pageLinks;
      pageItems;
      rowsPerPageItems;
      paginatorState;
      _first = 0;
      _page = 0;
      _componentStyle = inject(PaginatorStyle);
      constructor() {
        super();
      }
      ngOnInit() {
        super.ngOnInit();
        this.updatePaginatorState();
      }
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "dropdownicon":
              this._dropdownIconTemplate = item.template;
              break;
            case "firstpagelinkicon":
              this._firstPageLinkIconTemplate = item.template;
              break;
            case "previouspagelinkicon":
              this._previousPageLinkIconTemplate = item.template;
              break;
            case "lastpagelinkicon":
              this._lastPageLinkIconTemplate = item.template;
              break;
            case "nextpagelinkicon":
              this._nextPageLinkIconTemplate = item.template;
              break;
          }
        });
      }
      getAriaLabel(labelType) {
        return this.config.translation.aria ? this.config.translation.aria[labelType] : void 0;
      }
      getPageAriaLabel(value) {
        return this.config.translation.aria ? this.config.translation.aria.pageLabel.replace(/{page}/g, `${value}`) : void 0;
      }
      getLocalization(digit) {
        const numerals = [...new Intl.NumberFormat(this.locale, {
          useGrouping: false
        }).format(9876543210)].reverse();
        const index = new Map(numerals.map((d, i) => [i, d]));
        if (digit > 9) {
          const numbers = String(digit).split("");
          return numbers.map((number) => index.get(Number(number))).join("");
        } else {
          return index.get(digit);
        }
      }
      ngOnChanges(simpleChange) {
        super.ngOnChanges(simpleChange);
        if (simpleChange.totalRecords) {
          this.updatePageLinks();
          this.updatePaginatorState();
          this.updateFirst();
          this.updateRowsPerPageOptions();
        }
        if (simpleChange.first) {
          this._first = simpleChange.first.currentValue;
          this.updatePageLinks();
          this.updatePaginatorState();
        }
        if (simpleChange.rows) {
          this.updatePageLinks();
          this.updatePaginatorState();
        }
        if (simpleChange.rowsPerPageOptions) {
          this.updateRowsPerPageOptions();
        }
        if (simpleChange.pageLinkSize) {
          this.updatePageLinks();
        }
      }
      updateRowsPerPageOptions() {
        if (this.rowsPerPageOptions) {
          this.rowsPerPageItems = [];
          let showAllItem = null;
          for (let opt of this.rowsPerPageOptions) {
            if (typeof opt == "object" && opt["showAll"]) {
              showAllItem = {
                label: opt["showAll"],
                value: this.totalRecords
              };
            } else {
              this.rowsPerPageItems.push({
                label: String(this.getLocalization(opt)),
                value: opt
              });
            }
          }
          if (showAllItem) {
            this.rowsPerPageItems.push(showAllItem);
          }
        }
      }
      isFirstPage() {
        return this.getPage() === 0;
      }
      isLastPage() {
        return this.getPage() === this.getPageCount() - 1;
      }
      getPageCount() {
        return Math.ceil(this.totalRecords / this.rows);
      }
      calculatePageLinkBoundaries() {
        let numberOfPages = this.getPageCount(), visiblePages = Math.min(this.pageLinkSize, numberOfPages);
        let start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2)), end = Math.min(numberOfPages - 1, start + visiblePages - 1);
        var delta = this.pageLinkSize - (end - start + 1);
        start = Math.max(0, start - delta);
        return [start, end];
      }
      updatePageLinks() {
        this.pageLinks = [];
        let boundaries = this.calculatePageLinkBoundaries(), start = boundaries[0], end = boundaries[1];
        for (let i = start; i <= end; i++) {
          this.pageLinks.push(i + 1);
        }
        if (this.showJumpToPageDropdown) {
          this.pageItems = [];
          for (let i = 0; i < this.getPageCount(); i++) {
            this.pageItems.push({
              label: String(i + 1),
              value: i
            });
          }
        }
      }
      changePage(p) {
        var pc = this.getPageCount();
        if (p >= 0 && p < pc) {
          this._first = this.rows * p;
          var state2 = {
            page: p,
            first: this.first,
            rows: this.rows,
            pageCount: pc
          };
          this.updatePageLinks();
          this.onPageChange.emit(state2);
          this.updatePaginatorState();
        }
      }
      updateFirst() {
        const page = this.getPage();
        if (page > 0 && this.totalRecords && this.first >= this.totalRecords) {
          Promise.resolve(null).then(() => this.changePage(page - 1));
        }
      }
      getPage() {
        return Math.floor(this.first / this.rows);
      }
      changePageToFirst(event2) {
        if (!this.isFirstPage()) {
          this.changePage(0);
        }
        event2.preventDefault();
      }
      changePageToPrev(event2) {
        this.changePage(this.getPage() - 1);
        event2.preventDefault();
      }
      changePageToNext(event2) {
        this.changePage(this.getPage() + 1);
        event2.preventDefault();
      }
      changePageToLast(event2) {
        if (!this.isLastPage()) {
          this.changePage(this.getPageCount() - 1);
        }
        event2.preventDefault();
      }
      onPageLinkClick(event2, page) {
        this.changePage(page);
        event2.preventDefault();
      }
      onRppChange(event2) {
        this.changePage(this.getPage());
      }
      onPageDropdownChange(event2) {
        this.changePage(event2.value);
      }
      updatePaginatorState() {
        this.paginatorState = {
          page: this.getPage(),
          pageCount: this.getPageCount(),
          rows: this.rows,
          first: this.first,
          totalRecords: this.totalRecords
        };
      }
      empty() {
        return this.getPageCount() === 0;
      }
      currentPage() {
        return this.getPageCount() > 0 ? this.getPage() + 1 : 0;
      }
      get currentPageReport() {
        return this.currentPageReportTemplate.replace("{currentPage}", String(this.currentPage())).replace("{totalPages}", String(this.getPageCount())).replace("{first}", String(this.totalRecords > 0 ? this._first + 1 : 0)).replace("{last}", String(Math.min(this._first + this.rows, this.totalRecords))).replace("{rows}", String(this.rows)).replace("{totalRecords}", String(this.totalRecords));
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Paginator,
        deps: [],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _Paginator,
        isStandalone: true,
        selector: "p-paginator",
        inputs: {
          pageLinkSize: ["pageLinkSize", "pageLinkSize", numberAttribute],
          style: "style",
          styleClass: "styleClass",
          alwaysShow: ["alwaysShow", "alwaysShow", booleanAttribute],
          dropdownAppendTo: "dropdownAppendTo",
          templateLeft: "templateLeft",
          templateRight: "templateRight",
          appendTo: "appendTo",
          dropdownScrollHeight: "dropdownScrollHeight",
          currentPageReportTemplate: "currentPageReportTemplate",
          showCurrentPageReport: ["showCurrentPageReport", "showCurrentPageReport", booleanAttribute],
          showFirstLastIcon: ["showFirstLastIcon", "showFirstLastIcon", booleanAttribute],
          totalRecords: ["totalRecords", "totalRecords", numberAttribute],
          rows: ["rows", "rows", numberAttribute],
          rowsPerPageOptions: "rowsPerPageOptions",
          showJumpToPageDropdown: ["showJumpToPageDropdown", "showJumpToPageDropdown", booleanAttribute],
          showJumpToPageInput: ["showJumpToPageInput", "showJumpToPageInput", booleanAttribute],
          jumpToPageItemTemplate: "jumpToPageItemTemplate",
          showPageLinks: ["showPageLinks", "showPageLinks", booleanAttribute],
          locale: "locale",
          dropdownItemTemplate: "dropdownItemTemplate",
          first: "first"
        },
        outputs: {
          onPageChange: "onPageChange"
        },
        providers: [PaginatorStyle],
        queries: [{
          propertyName: "dropdownIconTemplate",
          first: true,
          predicate: ["dropdownicon"]
        }, {
          propertyName: "firstPageLinkIconTemplate",
          first: true,
          predicate: ["firstpagelinkicon"]
        }, {
          propertyName: "previousPageLinkIconTemplate",
          first: true,
          predicate: ["previouspagelinkicon"]
        }, {
          propertyName: "lastPageLinkIconTemplate",
          first: true,
          predicate: ["lastpagelinkicon"]
        }, {
          propertyName: "nextPageLinkIconTemplate",
          first: true,
          predicate: ["nextpagelinkicon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports,
        template: `
        <div [class]="styleClass" [ngStyle]="style" [ngClass]="'p-paginator p-component'" *ngIf="alwaysShow ? true : pageLinks && pageLinks.length > 1" [attr.data-pc-section]="'paginator'" [attr.data-pc-section]="'root'">
            <div class="p-paginator-content-start" *ngIf="templateLeft" [attr.data-pc-section]="'start'">
                <ng-container *ngTemplateOutlet="templateLeft; context: { $implicit: paginatorState }"></ng-container>
            </div>
            <span class="p-paginator-current" *ngIf="showCurrentPageReport">{{ currentPageReport }}</span>
            <button
                *ngIf="showFirstLastIcon"
                type="button"
                [disabled]="isFirstPage() || empty()"
                (click)="changePageToFirst($event)"
                pRipple
                class="p-paginator-first"
                [ngClass]="{ 'p-disabled': isFirstPage() || empty() }"
                [attr.aria-label]="getAriaLabel('firstPageLabel')"
            >
                <AngleDoubleLeftIcon *ngIf="!firstPageLinkIconTemplate && !_firstPageLinkIconTemplate" [styleClass]="'p-paginator-first-icon'" />
                <span class="p-paginator-first-icon" *ngIf="firstPageLinkIconTemplate || _firstPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="firstPageLinkIconTemplate || _firstPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <button type="button" [disabled]="isFirstPage() || empty()" (click)="changePageToPrev($event)" pRipple class="p-paginator-prev" [ngClass]="{ 'p-disabled': isFirstPage() || empty() }" [attr.aria-label]="getAriaLabel('prevPageLabel')">
                <AngleLeftIcon *ngIf="!previousPageLinkIconTemplate && !_previousPageLinkIconTemplate" [styleClass]="'p-paginator-prev-icon'" />
                <span class="p-paginator-prev-icon" *ngIf="previousPageLinkIconTemplate || _previousPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="previousPageLinkIconTemplate || _previousPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <span class="p-paginator-pages" *ngIf="showPageLinks">
                <button
                    type="button"
                    *ngFor="let pageLink of pageLinks"
                    class="p-paginator-page"
                    [ngClass]="{ 'p-paginator-page-selected': pageLink - 1 == getPage() }"
                    [attr.aria-label]="getPageAriaLabel(pageLink)"
                    [attr.aria-current]="pageLink - 1 == getPage() ? 'page' : undefined"
                    (click)="onPageLinkClick($event, pageLink - 1)"
                    pRipple
                >
                    {{ getLocalization(pageLink) }}
                </button>
            </span>
            <p-select
                [options]="pageItems"
                [ngModel]="getPage()"
                *ngIf="showJumpToPageDropdown"
                [disabled]="empty()"
                [attr.aria-label]="getAriaLabel('jumpToPageDropdownLabel')"
                styleClass="p-paginator-jtp-dropdown"
                (onChange)="onPageDropdownChange($event)"
                [appendTo]="dropdownAppendTo"
                [scrollHeight]="dropdownScrollHeight"
            >
                <ng-template pTemplate="selectedItem">{{ currentPageReport }}</ng-template>
                <ng-container *ngIf="jumpToPageItemTemplate">
                    <ng-template let-item pTemplate="item">
                        <ng-container *ngTemplateOutlet="jumpToPageItemTemplate; context: { $implicit: item }"></ng-container>
                    </ng-template>
                </ng-container>
                <ng-template pTemplate="dropdownicon" *ngIf="dropdownIconTemplate || _dropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate"></ng-container>
                </ng-template>
            </p-select>
            <button type="button" [disabled]="isLastPage() || empty()" (click)="changePageToNext($event)" pRipple class="p-paginator-next" [ngClass]="{ 'p-disabled': isLastPage() || empty() }" [attr.aria-label]="getAriaLabel('nextPageLabel')">
                <AngleRightIcon *ngIf="!nextPageLinkIconTemplate && !_nextPageLinkIconTemplate" [styleClass]="'p-paginator-next-icon'" />
                <span class="p-paginator-next-icon" *ngIf="nextPageLinkIconTemplate || _nextPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="nextPageLinkIconTemplate || _nextPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <button
                *ngIf="showFirstLastIcon"
                type="button"
                [disabled]="isLastPage() || empty()"
                (click)="changePageToLast($event)"
                pRipple
                class="p-paginator-last"
                [ngClass]="{ 'p-disabled': isLastPage() || empty() }"
                [attr.aria-label]="getAriaLabel('lastPageLabel')"
            >
                <AngleDoubleRightIcon *ngIf="!lastPageLinkIconTemplate && !_lastPageLinkIconTemplate" [styleClass]="'p-paginator-last-icon'" />
                <span class="p-paginator-last-icon" *ngIf="lastPageLinkIconTemplate || _lastPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="lastPageLinkIconTemplate || _lastPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <p-inputnumber *ngIf="showJumpToPageInput" [ngModel]="currentPage()" class="p-paginator-jtp-input" [disabled]="empty()" (ngModelChange)="changePage($event - 1)"></p-inputnumber>
            <p-select
                [options]="rowsPerPageItems"
                [(ngModel)]="rows"
                *ngIf="rowsPerPageOptions"
                styleClass="p-paginator-rpp-dropdown"
                [disabled]="empty()"
                (onChange)="onRppChange($event)"
                [appendTo]="dropdownAppendTo"
                [scrollHeight]="dropdownScrollHeight"
                [ariaLabel]="getAriaLabel('rowsPerPageLabel')"
            >
                <ng-container *ngIf="dropdownItemTemplate">
                    <ng-template let-item pTemplate="item">
                        <ng-container *ngTemplateOutlet="dropdownItemTemplate; context: { $implicit: item }"></ng-container>
                    </ng-template>
                </ng-container>
                <ng-template pTemplate="dropdownicon" *ngIf="dropdownIconTemplate || _dropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate"></ng-container>
                </ng-template>
            </p-select>
            <div class="p-paginator-content-end" *ngIf="templateRight" [attr.data-pc-section]="'end'">
                <ng-container *ngTemplateOutlet="templateRight; context: { $implicit: paginatorState }"></ng-container>
            </div>
        </div>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgForOf,
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: Select,
          selector: "p-select",
          inputs: ["id", "scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "loadingIcon", "filterPlaceholder", "filterLocale", "variant", "inputId", "dataKey", "filterBy", "filterFields", "autofocus", "resetFilterOnHide", "checkmark", "dropdownIcon", "loading", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "size", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "focusOnHover", "selectOnFocus", "autoOptionFocus", "autofocusFilter", "fluid", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"],
          outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"]
        }, {
          kind: "component",
          type: InputNumber,
          selector: "p-inputNumber, p-inputnumber, p-input-number",
          inputs: ["showButtons", "format", "buttonLayout", "inputId", "styleClass", "style", "placeholder", "size", "maxlength", "tabindex", "title", "ariaLabelledBy", "ariaDescribedBy", "ariaLabel", "ariaRequired", "name", "required", "autocomplete", "min", "max", "incrementButtonClass", "decrementButtonClass", "incrementButtonIcon", "decrementButtonIcon", "readonly", "step", "allowEmpty", "locale", "localeMatcher", "mode", "currency", "currencyDisplay", "useGrouping", "variant", "minFractionDigits", "maxFractionDigits", "prefix", "suffix", "inputStyle", "inputStyleClass", "showClear", "autofocus", "disabled", "fluid"],
          outputs: ["onInput", "onFocus", "onBlur", "onKeyDown", "onClear"]
        }, {
          kind: "ngmodule",
          type: FormsModule
        }, {
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "directive",
          type: Ripple,
          selector: "[pRipple]"
        }, {
          kind: "component",
          type: AngleDoubleLeftIcon,
          selector: "AngleDoubleLeftIcon"
        }, {
          kind: "component",
          type: AngleDoubleRightIcon,
          selector: "AngleDoubleRightIcon"
        }, {
          kind: "component",
          type: AngleLeftIcon,
          selector: "AngleLeftIcon"
        }, {
          kind: "component",
          type: AngleRightIcon,
          selector: "AngleRightIcon"
        }, {
          kind: "ngmodule",
          type: SharedModule
        }, {
          kind: "directive",
          type: PrimeTemplate,
          selector: "[pTemplate]",
          inputs: ["type", "pTemplate"]
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Paginator,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-paginator",
          standalone: true,
          imports: [CommonModule, Select, InputNumber, FormsModule, Ripple, AngleDoubleLeftIcon, AngleDoubleRightIcon, AngleLeftIcon, AngleRightIcon, SharedModule],
          template: `
        <div [class]="styleClass" [ngStyle]="style" [ngClass]="'p-paginator p-component'" *ngIf="alwaysShow ? true : pageLinks && pageLinks.length > 1" [attr.data-pc-section]="'paginator'" [attr.data-pc-section]="'root'">
            <div class="p-paginator-content-start" *ngIf="templateLeft" [attr.data-pc-section]="'start'">
                <ng-container *ngTemplateOutlet="templateLeft; context: { $implicit: paginatorState }"></ng-container>
            </div>
            <span class="p-paginator-current" *ngIf="showCurrentPageReport">{{ currentPageReport }}</span>
            <button
                *ngIf="showFirstLastIcon"
                type="button"
                [disabled]="isFirstPage() || empty()"
                (click)="changePageToFirst($event)"
                pRipple
                class="p-paginator-first"
                [ngClass]="{ 'p-disabled': isFirstPage() || empty() }"
                [attr.aria-label]="getAriaLabel('firstPageLabel')"
            >
                <AngleDoubleLeftIcon *ngIf="!firstPageLinkIconTemplate && !_firstPageLinkIconTemplate" [styleClass]="'p-paginator-first-icon'" />
                <span class="p-paginator-first-icon" *ngIf="firstPageLinkIconTemplate || _firstPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="firstPageLinkIconTemplate || _firstPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <button type="button" [disabled]="isFirstPage() || empty()" (click)="changePageToPrev($event)" pRipple class="p-paginator-prev" [ngClass]="{ 'p-disabled': isFirstPage() || empty() }" [attr.aria-label]="getAriaLabel('prevPageLabel')">
                <AngleLeftIcon *ngIf="!previousPageLinkIconTemplate && !_previousPageLinkIconTemplate" [styleClass]="'p-paginator-prev-icon'" />
                <span class="p-paginator-prev-icon" *ngIf="previousPageLinkIconTemplate || _previousPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="previousPageLinkIconTemplate || _previousPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <span class="p-paginator-pages" *ngIf="showPageLinks">
                <button
                    type="button"
                    *ngFor="let pageLink of pageLinks"
                    class="p-paginator-page"
                    [ngClass]="{ 'p-paginator-page-selected': pageLink - 1 == getPage() }"
                    [attr.aria-label]="getPageAriaLabel(pageLink)"
                    [attr.aria-current]="pageLink - 1 == getPage() ? 'page' : undefined"
                    (click)="onPageLinkClick($event, pageLink - 1)"
                    pRipple
                >
                    {{ getLocalization(pageLink) }}
                </button>
            </span>
            <p-select
                [options]="pageItems"
                [ngModel]="getPage()"
                *ngIf="showJumpToPageDropdown"
                [disabled]="empty()"
                [attr.aria-label]="getAriaLabel('jumpToPageDropdownLabel')"
                styleClass="p-paginator-jtp-dropdown"
                (onChange)="onPageDropdownChange($event)"
                [appendTo]="dropdownAppendTo"
                [scrollHeight]="dropdownScrollHeight"
            >
                <ng-template pTemplate="selectedItem">{{ currentPageReport }}</ng-template>
                <ng-container *ngIf="jumpToPageItemTemplate">
                    <ng-template let-item pTemplate="item">
                        <ng-container *ngTemplateOutlet="jumpToPageItemTemplate; context: { $implicit: item }"></ng-container>
                    </ng-template>
                </ng-container>
                <ng-template pTemplate="dropdownicon" *ngIf="dropdownIconTemplate || _dropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate"></ng-container>
                </ng-template>
            </p-select>
            <button type="button" [disabled]="isLastPage() || empty()" (click)="changePageToNext($event)" pRipple class="p-paginator-next" [ngClass]="{ 'p-disabled': isLastPage() || empty() }" [attr.aria-label]="getAriaLabel('nextPageLabel')">
                <AngleRightIcon *ngIf="!nextPageLinkIconTemplate && !_nextPageLinkIconTemplate" [styleClass]="'p-paginator-next-icon'" />
                <span class="p-paginator-next-icon" *ngIf="nextPageLinkIconTemplate || _nextPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="nextPageLinkIconTemplate || _nextPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <button
                *ngIf="showFirstLastIcon"
                type="button"
                [disabled]="isLastPage() || empty()"
                (click)="changePageToLast($event)"
                pRipple
                class="p-paginator-last"
                [ngClass]="{ 'p-disabled': isLastPage() || empty() }"
                [attr.aria-label]="getAriaLabel('lastPageLabel')"
            >
                <AngleDoubleRightIcon *ngIf="!lastPageLinkIconTemplate && !_lastPageLinkIconTemplate" [styleClass]="'p-paginator-last-icon'" />
                <span class="p-paginator-last-icon" *ngIf="lastPageLinkIconTemplate || _lastPageLinkIconTemplate">
                    <ng-template *ngTemplateOutlet="lastPageLinkIconTemplate || _lastPageLinkIconTemplate"></ng-template>
                </span>
            </button>
            <p-inputnumber *ngIf="showJumpToPageInput" [ngModel]="currentPage()" class="p-paginator-jtp-input" [disabled]="empty()" (ngModelChange)="changePage($event - 1)"></p-inputnumber>
            <p-select
                [options]="rowsPerPageItems"
                [(ngModel)]="rows"
                *ngIf="rowsPerPageOptions"
                styleClass="p-paginator-rpp-dropdown"
                [disabled]="empty()"
                (onChange)="onRppChange($event)"
                [appendTo]="dropdownAppendTo"
                [scrollHeight]="dropdownScrollHeight"
                [ariaLabel]="getAriaLabel('rowsPerPageLabel')"
            >
                <ng-container *ngIf="dropdownItemTemplate">
                    <ng-template let-item pTemplate="item">
                        <ng-container *ngTemplateOutlet="dropdownItemTemplate; context: { $implicit: item }"></ng-container>
                    </ng-template>
                </ng-container>
                <ng-template pTemplate="dropdownicon" *ngIf="dropdownIconTemplate || _dropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate"></ng-container>
                </ng-template>
            </p-select>
            <div class="p-paginator-content-end" *ngIf="templateRight" [attr.data-pc-section]="'end'">
                <ng-container *ngTemplateOutlet="templateRight; context: { $implicit: paginatorState }"></ng-container>
            </div>
        </div>
    `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None,
          providers: [PaginatorStyle]
        }]
      }],
      ctorParameters: () => [],
      propDecorators: {
        pageLinkSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        alwaysShow: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        dropdownAppendTo: [{
          type: Input
        }],
        templateLeft: [{
          type: Input
        }],
        templateRight: [{
          type: Input
        }],
        appendTo: [{
          type: Input
        }],
        dropdownScrollHeight: [{
          type: Input
        }],
        currentPageReportTemplate: [{
          type: Input
        }],
        showCurrentPageReport: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showFirstLastIcon: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        totalRecords: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        rows: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        rowsPerPageOptions: [{
          type: Input
        }],
        showJumpToPageDropdown: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showJumpToPageInput: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        jumpToPageItemTemplate: [{
          type: Input
        }],
        showPageLinks: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        locale: [{
          type: Input
        }],
        dropdownItemTemplate: [{
          type: Input
        }],
        first: [{
          type: Input
        }],
        onPageChange: [{
          type: Output
        }],
        dropdownIconTemplate: [{
          type: ContentChild,
          args: ["dropdownicon", {
            descendants: false
          }]
        }],
        firstPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["firstpagelinkicon", {
            descendants: false
          }]
        }],
        previousPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["previouspagelinkicon", {
            descendants: false
          }]
        }],
        lastPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["lastpagelinkicon", {
            descendants: false
          }]
        }],
        nextPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["nextpagelinkicon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    PaginatorModule = class _PaginatorModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _PaginatorModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _PaginatorModule,
        imports: [Paginator, SharedModule],
        exports: [Paginator, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _PaginatorModule,
        imports: [Paginator, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: PaginatorModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Paginator, SharedModule],
          exports: [Paginator, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-radiobutton.mjs
var theme14, classes13, RadioButtonStyle, RadioButtonClasses, RADIO_VALUE_ACCESSOR2, RadioControlRegistry2, RadioButton, RadioButtonModule;
var init_primeng_radiobutton = __esm({
  "node_modules/primeng/fesm2022/primeng-radiobutton.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_basecomponent();
    init_primeng_base();
    theme14 = ({
      dt
    }) => `
.p-radiobutton {
    position: relative;
    display: inline-flex;
    user-select: none;
    vertical-align: bottom;
    width: ${dt("radiobutton.width")};
    height: ${dt("radiobutton.height")};
}

.p-radiobutton-input {
    cursor: pointer;
    appearance: none;
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    opacity: 0;
    z-index: 1;
    outline: 0 none;
    border: 1px solid transparent;
    border-radius: 50%;
}

.p-radiobutton-box {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    border: 1px solid ${dt("radiobutton.border.color")};
    background: ${dt("radiobutton.background")};
    width: ${dt("radiobutton.width")};
    height: ${dt("radiobutton.height")};
    transition: background ${dt("radiobutton.transition.duration")}, color ${dt("radiobutton.transition.duration")}, border-color ${dt("radiobutton.transition.duration")}, box-shadow ${dt("radiobutton.transition.duration")}, outline-color ${dt("radiobutton.transition.duration")};
    outline-color: transparent;
    box-shadow: ${dt("radiobutton.shadow")};
}

.p-radiobutton-icon {
    transition-duration: ${dt("radiobutton.transition.duration")};
    background: transparent;
    font-size: ${dt("radiobutton.icon.size")};
    width: ${dt("radiobutton.icon.size")};
    height: ${dt("radiobutton.icon.size")};
    border-radius: 50%;
    backface-visibility: hidden;
    transform: translateZ(0) scale(0.1);
}

.p-radiobutton:not(.p-disabled):has(.p-radiobutton-input:hover) .p-radiobutton-box {
    border-color: ${dt("radiobutton.hover.border.color")};
}

.p-radiobutton-checked .p-radiobutton-box {
    border-color: ${dt("radiobutton.checked.border.color")};
    background: ${dt("radiobutton.checked.background")};
}

.p-radiobutton-checked .p-radiobutton-box .p-radiobutton-icon {
    background: ${dt("radiobutton.icon.checked.color")};
    transform: translateZ(0) scale(1, 1);
    visibility: visible;
}

.p-radiobutton-checked:not(.p-disabled):has(.p-radiobutton-input:hover) .p-radiobutton-box {
    border-color: ${dt("radiobutton.checked.hover.border.color")};
    background: ${dt("radiobutton.checked.hover.background")};
}

.p-radiobutton:not(.p-disabled):has(.p-radiobutton-input:hover).p-radiobutton-checked .p-radiobutton-box .p-radiobutton-icon {
    background: ${dt("radiobutton.icon.checked.hover.color")};
}

.p-radiobutton:not(.p-disabled):has(.p-radiobutton-input:focus-visible) .p-radiobutton-box {
    border-color: ${dt("radiobutton.focus.border.color")};
    box-shadow: ${dt("radiobutton.focus.ring.shadow")};
    outline: ${dt("radiobutton.focus.ring.width")} ${dt("radiobutton.focus.ring.style")} ${dt("radiobutton.focus.ring.color")};
    outline-offset: ${dt("radiobutton.focus.ring.offset")};
}

.p-radiobutton-checked:not(.p-disabled):has(.p-radiobutton-input:focus-visible) .p-radiobutton-box {
    border-color: ${dt("radiobutton.checked.focus.border.color")};
}

p-radioButton.ng-invalid.ng-dirty .p-radiobutton-box,
p-radio-button.ng-invalid.ng-dirty .p-radiobutton-box,
p-radiobutton.ng-invalid.ng-dirty .p-radiobutton-box {
    border-color: ${dt("radiobutton.invalid.border.color")};
}

.p-radiobutton.p-variant-filled .p-radiobutton-box {
    background: ${dt("radiobutton.filled.background")};
}

.p-radiobutton.p-variant-filled.p-radiobutton-checked .p-radiobutton-box {
    background: ${dt("radiobutton.checked.background")};
}

.p-radiobutton.p-variant-filled:not(.p-disabled):has(.p-radiobutton-input:hover).p-radiobutton-checked .p-radiobutton-box {
    background: ${dt("radiobutton.checked.hover.background")};
}

.p-radiobutton.p-disabled {
    opacity: 1;
}

.p-radiobutton.p-disabled .p-radiobutton-box {
    background: ${dt("radiobutton.disabled.background")};
    border-color: ${dt("radiobutton.checked.disabled.border.color")};
}

.p-radiobutton-checked.p-disabled .p-radiobutton-box .p-radiobutton-icon {
    background: ${dt("radiobutton.icon.disabled.color")};
}

.p-radiobutton-sm,
.p-radiobutton-sm .p-radiobutton-box {
    width: ${dt("radiobutton.sm.width")};
    height: ${dt("radiobutton.sm.height")};
}

.p-radiobutton-sm .p-radiobutton-icon {
    font-size: ${dt("radiobutton.icon.sm.size")};
    width: ${dt("radiobutton.icon.sm.size")};
    height: ${dt("radiobutton.icon.sm.size")};
}

.p-radiobutton-lg,
.p-radiobutton-lg .p-radiobutton-box {
    width: ${dt("radiobutton.lg.width")};
    height: ${dt("radiobutton.lg.height")};
}

.p-radiobutton-lg .p-radiobutton-icon {
    font-size: ${dt("radiobutton.icon.lg.size")};
    width: ${dt("radiobutton.icon.lg.size")};
    height: ${dt("radiobutton.icon.lg.size")};
}
`;
    classes13 = {
      root: ({
        instance,
        props
      }) => ["p-radiobutton p-component", {
        "p-radiobutton-checked": instance.checked,
        "p-disabled": props.disabled,
        "p-invalid": props.invalid,
        "p-variant-filled": props.variant ? props.variant === "filled" : instance.config.inputStyle === "filled" || instance.config.inputVariant === "filled"
      }],
      box: "p-radiobutton-box",
      input: "p-radiobutton-input",
      icon: "p-radiobutton-icon"
    };
    RadioButtonStyle = class _RadioButtonStyle extends BaseStyle {
      name = "radiobutton";
      theme = theme14;
      classes = classes13;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioButtonStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioButtonStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RadioButtonStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(RadioButtonClasses2) {
      RadioButtonClasses2["root"] = "p-radiobutton";
      RadioButtonClasses2["box"] = "p-radiobutton-box";
      RadioButtonClasses2["input"] = "p-radiobutton-input";
      RadioButtonClasses2["icon"] = "p-radiobutton-icon";
    })(RadioButtonClasses || (RadioButtonClasses = {}));
    RADIO_VALUE_ACCESSOR2 = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => RadioButton),
      multi: true
    };
    RadioControlRegistry2 = class _RadioControlRegistry {
      accessors = [];
      add(control, accessor) {
        this.accessors.push([control, accessor]);
      }
      remove(accessor) {
        this.accessors = this.accessors.filter((c) => {
          return c[1] !== accessor;
        });
      }
      select(accessor) {
        this.accessors.forEach((c) => {
          if (this.isSameGroup(c, accessor) && c[1] !== accessor) {
            c[1].writeValue(accessor.value);
          }
        });
      }
      isSameGroup(controlPair, accessor) {
        if (!controlPair[0].control) {
          return false;
        }
        return controlPair[0].control.root === accessor.control.control.root && controlPair[1].name === accessor.name;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioControlRegistry,
        deps: [],
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioControlRegistry,
        providedIn: "root"
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RadioControlRegistry2,
      decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }]
    });
    RadioButton = class _RadioButton extends BaseComponent {
      /**
       * Value of the radiobutton.
       * @group Props
       */
      value;
      /**
       * The name of the form control.
       * @group Props
       */
      formControlName;
      /**
       * Name of the radiobutton group.
       * @group Props
       */
      name;
      /**
       * When present, it specifies that the element should be disabled.
       * @group Props
       */
      disabled;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex;
      /**
       * Identifier of the focus input to match a label defined for the component.
       * @group Props
       */
      inputId;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Used to define a string that labels the input element.
       * @group Props
       */
      ariaLabel;
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Allows to select a boolean value.
       * @group Props
       */
      binary;
      /**
       * Callback to invoke on radio button click.
       * @param {RadioButtonClickEvent} event - Custom click event.
       * @group Emits
       */
      onClick = new EventEmitter();
      /**
       * Callback to invoke when the receives focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to invoke when the loses focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      inputViewChild;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      checked;
      focused;
      control;
      _componentStyle = inject(RadioButtonStyle);
      injector = inject(Injector);
      registry = inject(RadioControlRegistry2);
      ngOnInit() {
        super.ngOnInit();
        this.control = this.injector.get(NgControl);
        this.checkName();
        this.registry.add(this.control, this);
      }
      onChange(event2) {
        if (!this.disabled) {
          this.select(event2);
        }
      }
      select(event2) {
        if (!this.disabled) {
          this.checked = true;
          this.onModelChange(this.value);
          this.registry.select(this);
          this.onClick.emit({
            originalEvent: event2,
            value: this.value
          });
        }
      }
      writeValue(value) {
        if (!this.binary) {
          this.checked = value == this.value;
        } else {
          this.checked = !!value;
        }
        if (this.inputViewChild && this.inputViewChild.nativeElement) {
          this.inputViewChild.nativeElement.checked = this.checked;
        }
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      onInputFocus(event2) {
        this.focused = true;
        this.onFocus.emit(event2);
      }
      onInputBlur(event2) {
        this.focused = false;
        this.onModelTouched();
        this.onBlur.emit(event2);
      }
      /**
       * Applies focus to input field.
       * @group Method
       */
      focus() {
        this.inputViewChild.nativeElement.focus();
      }
      ngOnDestroy() {
        this.registry.remove(this);
        super.ngOnDestroy();
      }
      checkName() {
        if (this.name && this.formControlName && this.name !== this.formControlName) {
          this.throwNameError();
        }
        if (!this.name && this.formControlName) {
          this.name = this.formControlName;
        }
      }
      throwNameError() {
        throw new Error(`
          If you define both a name and a formControlName attribute on your radio button, their values
          must match. Ex: <p-radioButton formControlName="food" name="food"></p-radioButton>
        `);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioButton,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _RadioButton,
        isStandalone: true,
        selector: "p-radioButton, p-radiobutton, p-radio-button",
        inputs: {
          value: "value",
          formControlName: "formControlName",
          name: "name",
          disabled: ["disabled", "disabled", booleanAttribute],
          variant: "variant",
          size: "size",
          tabindex: ["tabindex", "tabindex", numberAttribute],
          inputId: "inputId",
          ariaLabelledBy: "ariaLabelledBy",
          ariaLabel: "ariaLabel",
          style: "style",
          styleClass: "styleClass",
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          binary: ["binary", "binary", booleanAttribute]
        },
        outputs: {
          onClick: "onClick",
          onFocus: "onFocus",
          onBlur: "onBlur"
        },
        providers: [RADIO_VALUE_ACCESSOR2, RadioButtonStyle],
        viewQueries: [{
          propertyName: "inputViewChild",
          first: true,
          predicate: ["input"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <div
            [ngStyle]="style"
            [ngClass]="{
                'p-radiobutton p-component': true,
                'p-radiobutton-checked': checked,
                'p-disabled': disabled,
                'p-variant-filled': variant === 'filled' || config.inputStyle() === 'filled' || config.inputVariant() === 'filled',
                'p-radiobutton-sm p-inputfield-sm': size === 'small',
                'p-radiobutton-lg p-inputfield-lg': size === 'large'
            }"
            [class]="styleClass"
            [attr.data-pc-name]="'radiobutton'"
            [attr.data-pc-section]="'root'"
        >
            <input
                #input
                [attr.id]="inputId"
                type="radio"
                class="p-radiobutton-input"
                [attr.name]="name"
                [checked]="checked"
                [disabled]="disabled"
                [value]="value"
                [attr.aria-labelledby]="ariaLabelledBy"
                [attr.aria-label]="ariaLabel"
                [attr.tabindex]="tabindex"
                [attr.aria-checked]="checked"
                (focus)="onInputFocus($event)"
                (blur)="onInputBlur($event)"
                (change)="onChange($event)"
                [pAutoFocus]="autofocus"
            />
            <div class="p-radiobutton-box" [attr.data-pc-section]="'input'">
                <div class="p-radiobutton-icon" [attr.data-pc-section]="'icon'"></div>
            </div>
        </div>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "directive",
          type: AutoFocus,
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RadioButton,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-radioButton, p-radiobutton, p-radio-button",
          standalone: true,
          imports: [CommonModule, AutoFocus, SharedModule],
          template: `
        <div
            [ngStyle]="style"
            [ngClass]="{
                'p-radiobutton p-component': true,
                'p-radiobutton-checked': checked,
                'p-disabled': disabled,
                'p-variant-filled': variant === 'filled' || config.inputStyle() === 'filled' || config.inputVariant() === 'filled',
                'p-radiobutton-sm p-inputfield-sm': size === 'small',
                'p-radiobutton-lg p-inputfield-lg': size === 'large'
            }"
            [class]="styleClass"
            [attr.data-pc-name]="'radiobutton'"
            [attr.data-pc-section]="'root'"
        >
            <input
                #input
                [attr.id]="inputId"
                type="radio"
                class="p-radiobutton-input"
                [attr.name]="name"
                [checked]="checked"
                [disabled]="disabled"
                [value]="value"
                [attr.aria-labelledby]="ariaLabelledBy"
                [attr.aria-label]="ariaLabel"
                [attr.tabindex]="tabindex"
                [attr.aria-checked]="checked"
                (focus)="onInputFocus($event)"
                (blur)="onInputBlur($event)"
                (change)="onChange($event)"
                [pAutoFocus]="autofocus"
            />
            <div class="p-radiobutton-box" [attr.data-pc-section]="'input'">
                <div class="p-radiobutton-icon" [attr.data-pc-section]="'icon'"></div>
            </div>
        </div>
    `,
          providers: [RADIO_VALUE_ACCESSOR2, RadioButtonStyle],
          changeDetection: ChangeDetectionStrategy.OnPush
        }]
      }],
      propDecorators: {
        value: [{
          type: Input
        }],
        formControlName: [{
          type: Input
        }],
        name: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        variant: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        inputId: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        binary: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: Output
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        inputViewChild: [{
          type: ViewChild,
          args: ["input"]
        }]
      }
    });
    RadioButtonModule = class _RadioButtonModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioButtonModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioButtonModule,
        imports: [RadioButton, SharedModule],
        exports: [RadioButton, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RadioButtonModule,
        imports: [RadioButton, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RadioButtonModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [RadioButton, SharedModule],
          exports: [RadioButton, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-togglebutton.mjs
var theme15, classes14, ToggleButtonStyle, ToggleButtonClasses, TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButton, ToggleButtonModule;
var init_primeng_togglebutton = __esm({
  "node_modules/primeng/fesm2022/primeng-togglebutton.mjs"() {
    "use strict";
    init_core();
    init_core();
    init_primeng_base();
    init_common();
    init_common();
    init_forms();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_ripple();
    init_primeng_ripple();
    theme15 = ({
      dt
    }) => `
.p-togglebutton {
    display: inline-flex;
    cursor: pointer;
    user-select: none;
    overflow: hidden;
    position: relative;
    color: ${dt("togglebutton.color")};
    background: ${dt("togglebutton.background")};
    border: 1px solid ${dt("togglebutton.border.color")};
    padding: ${dt("togglebutton.padding")};
    font-size: 1rem;
    font-family: inherit;
    font-feature-settings: inherit;
    transition: background ${dt("togglebutton.transition.duration")}, color ${dt("togglebutton.transition.duration")}, border-color ${dt("togglebutton.transition.duration")},
        outline-color ${dt("togglebutton.transition.duration")}, box-shadow ${dt("togglebutton.transition.duration")};
    border-radius: ${dt("togglebutton.border.radius")};
    outline-color: transparent;
    font-weight: ${dt("togglebutton.font.weight")};
}

.p-togglebutton-content {
    display: inline-flex;
    flex: 1 1 auto;
    align-items: center;
    justify-content: center;
    gap: ${dt("togglebutton.gap")};
    padding: ${dt("togglebutton.content.padding")};
    background: transparent;
    border-radius: ${dt("togglebutton.content.border.radius")};
    transition: background ${dt("togglebutton.transition.duration")}, color ${dt("togglebutton.transition.duration")}, border-color ${dt("togglebutton.transition.duration")},
            outline-color ${dt("togglebutton.transition.duration")}, box-shadow ${dt("togglebutton.transition.duration")};
}

.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover {
    background: ${dt("togglebutton.hover.background")};
    color: ${dt("togglebutton.hover.color")};
}

.p-togglebutton.p-togglebutton-checked {
    background: ${dt("togglebutton.checked.background")};
    border-color: ${dt("togglebutton.checked.border.color")};
    color: ${dt("togglebutton.checked.color")};
}

.p-togglebutton-checked .p-togglebutton-content {
    background: ${dt("togglebutton.content.checked.background")};
    box-shadow: ${dt("togglebutton.content.checked.shadow")};
}

.p-togglebutton:focus-visible {
    box-shadow: ${dt("togglebutton.focus.ring.shadow")};
    outline: ${dt("togglebutton.focus.ring.width")} ${dt("togglebutton.focus.ring.style")} ${dt("togglebutton.focus.ring.color")};
    outline-offset: ${dt("togglebutton.focus.ring.offset")};
}

.p-togglebutton.p-invalid {
    border-color: ${dt("togglebutton.invalid.border.color")};
}

.p-togglebutton:disabled:not(.p-togglebutton-checked) {
    opacity: 1;
    cursor: default;
    background: ${dt("togglebutton.disabled.background")};
    border-color: ${dt("togglebutton.disabled.border.color")};
    color: ${dt("togglebutton.disabled.color")};
}

.p-togglebutton-label,
.p-togglebutton-icon {
    position: relative;
    transition: none;
}

.p-togglebutton-icon {
    color: ${dt("togglebutton.icon.color")};
}

.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover .p-togglebutton-icon {
    color: ${dt("togglebutton.icon.hover.color")};
}

.p-togglebutton.p-togglebutton-checked .p-togglebutton-icon {
    color: ${dt("togglebutton.icon.checked.color")};
}

.p-togglebutton:disabled .p-togglebutton-icon {
    color: ${dt("togglebutton.icon.disabled.color")};
}

.p-togglebutton-sm {
    padding: ${dt("togglebutton.sm.padding")};
    font-size: ${dt("togglebutton.sm.font.size")};
}

.p-togglebutton-sm .p-togglebutton-content {
    padding: ${dt("togglebutton.content.sm.padding")};
}

.p-togglebutton-lg {
    padding: ${dt("togglebutton.lg.padding")};
    font-size: ${dt("togglebutton.lg.font.size")};
}

.p-togglebutton-lg .p-togglebutton-content {
    padding: ${dt("togglebutton.content.lg.padding")};
}

/* For PrimeNG (iconPos) */
.p-togglebutton-icon-right {
    order: 1;
}

.p-togglebutton.ng-invalid.ng-dirty {
    border-color: ${dt("togglebutton.invalid.border.color")};
}
`;
    classes14 = {
      root: ({
        instance
      }) => ({
        "p-togglebutton p-component": true,
        "p-togglebutton-checked": instance.checked,
        "p-disabled": instance.disabled,
        "p-togglebutton-sm p-inputfield-sm": instance.size === "small",
        "p-togglebutton-lg p-inputfield-lg": instance.size === "large"
      }),
      content: "p-togglebutton-content",
      icon: "p-togglebutton-icon",
      label: "p-togglebutton-label"
    };
    ToggleButtonStyle = class _ToggleButtonStyle extends BaseStyle {
      name = "togglebutton";
      theme = theme15;
      classes = classes14;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ToggleButtonStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ToggleButtonStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ToggleButtonStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(ToggleButtonClasses2) {
      ToggleButtonClasses2["root"] = "p-togglebutton";
      ToggleButtonClasses2["icon"] = "p-togglebutton-icon";
      ToggleButtonClasses2["label"] = "p-togglebutton-label";
    })(ToggleButtonClasses || (ToggleButtonClasses = {}));
    TOGGLEBUTTON_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => ToggleButton),
      multi: true
    };
    ToggleButton = class _ToggleButton extends BaseComponent {
      get hostClass() {
        return this.styleClass || "";
      }
      onKeyDown(event2) {
        switch (event2.code) {
          case "Enter":
            this.toggle(event2);
            event2.preventDefault();
            break;
          case "Space":
            this.toggle(event2);
            event2.preventDefault();
            break;
        }
      }
      toggle(event2) {
        if (!this.disabled && !(this.allowEmpty === false && this.checked)) {
          this.checked = !this.checked;
          this.onModelChange(this.checked);
          this.onModelTouched();
          this.onChange.emit({
            originalEvent: event2,
            checked: this.checked
          });
          this.cd.markForCheck();
        }
      }
      /**
       * Label for the on state.
       * @group Props
       */
      onLabel = "Yes";
      /**
       * Label for the off state.
       * @group Props
       */
      offLabel = "No";
      /**
       * Icon for the on state.
       * @group Props
       */
      onIcon;
      /**
       * Icon for the off state.
       * @group Props
       */
      offIcon;
      /**
       * Defines a string that labels the input for accessibility.
       * @group Props
       */
      ariaLabel;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * When present, it specifies that the element should be disabled.
       * @group Props
       */
      disabled;
      /**
       * Inline style of the element.
       * @group Props
       */
      style;
      /**
       * Style class of the element.
       * @group Props
       */
      styleClass;
      /**
       * Identifier of the focus input to match a label defined for the component.
       * @group Props
       */
      inputId;
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex = 0;
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * Position of the icon.
       * @group Props
       */
      iconPos = "left";
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Whether selection can not be cleared.
       * @group Props
       */
      allowEmpty;
      /**
       * Callback to invoke on value change.
       * @param {ToggleButtonChangeEvent} event - Custom change event.
       * @group Emits
       */
      onChange = new EventEmitter();
      /**
       * Custom icon template.
       * @group Templates
       */
      iconTemplate;
      /**
       * Custom content template.
       * @group Templates
       */
      contentTemplate;
      templates;
      checked = false;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      _componentStyle = inject(ToggleButtonStyle);
      onBlur() {
        this.onModelTouched();
      }
      writeValue(value) {
        this.checked = value;
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      get hasOnLabel() {
        return this.onLabel && this.onLabel.length > 0;
      }
      get hasOffLabel() {
        return this.onLabel && this.onLabel.length > 0;
      }
      get active() {
        return this.checked === true;
      }
      _iconTemplate;
      _contentTemplate;
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "icon":
              this._iconTemplate = item.template;
              break;
            case "content":
              this._contentTemplate = item.template;
              break;
            default:
              this._contentTemplate = item.template;
              break;
          }
        });
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ToggleButton,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.0.0",
        version: "19.2.10",
        type: _ToggleButton,
        isStandalone: true,
        selector: "p-toggleButton, p-togglebutton, p-toggle-button",
        inputs: {
          onLabel: "onLabel",
          offLabel: "offLabel",
          onIcon: "onIcon",
          offIcon: "offIcon",
          ariaLabel: "ariaLabel",
          ariaLabelledBy: "ariaLabelledBy",
          disabled: ["disabled", "disabled", booleanAttribute],
          style: "style",
          styleClass: "styleClass",
          inputId: "inputId",
          tabindex: ["tabindex", "tabindex", numberAttribute],
          size: "size",
          iconPos: "iconPos",
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          allowEmpty: "allowEmpty"
        },
        outputs: {
          onChange: "onChange"
        },
        host: {
          listeners: {
            "keydown": "onKeyDown($event)",
            "click": "toggle($event)"
          },
          properties: {
            "tabindex": "tabindex",
            "attr.disabled": "disabled",
            "attr.aria-labelledby": "ariaLabelledBy",
            "attr.aria-pressed": "checked",
            "attr.data-p-checked": "active",
            "attr.data-p-disabled": "disabled",
            "attr.type": '"button"',
            "class.p-togglebutton": "true",
            "class.p-togglebutton-checked": "checked",
            "class.p-disabled": "disabled",
            "class.p-togglebutton-sm": 'size === "small"',
            "class.p-inputfield-sm": 'size === "small"',
            "class.p-togglebutton-lg": 'size === "large"',
            "class.p-inputfield-lg": 'size === "large"',
            "class": "this.hostClass"
          }
        },
        providers: [TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButtonStyle],
        queries: [{
          propertyName: "iconTemplate",
          first: true,
          predicate: ["icon"]
        }, {
          propertyName: "contentTemplate",
          first: true,
          predicate: ["content"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        usesInheritance: true,
        hostDirectives: [{
          directive: Ripple
        }],
        ngImport: core_exports,
        template: `<span [ngClass]="cx('content')">
        <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: checked }"></ng-container>
        @if (!contentTemplate) {
            @if (!iconTemplate) {
                @if (onIcon || offIcon) {
                    <span
                        [class]="checked ? this.onIcon : this.offIcon"
                        [ngClass]="{
                            'p-togglebutton-icon': true,
                            'p-togglebutton-icon-left': iconPos === 'left',
                            'p-togglebutton-icon-right': iconPos === 'right'
                        }"
                        [attr.data-pc-section]="'icon'"
                    ></span>
                }
            } @else {
                <ng-container *ngTemplateOutlet="iconTemplate || _iconTemplate; context: { $implicit: checked }"></ng-container>
            }
            <span [ngClass]="cx('label')" [attr.data-pc-section]="'label'">{{ checked ? (hasOnLabel ? onLabel : '\xA0') : hasOffLabel ? offLabel : '\xA0' }}</span>
        }
    </span>`,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ToggleButton,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-toggleButton, p-togglebutton, p-toggle-button",
          standalone: true,
          imports: [CommonModule, SharedModule],
          hostDirectives: [{
            directive: Ripple
          }],
          host: {
            "[tabindex]": "tabindex",
            "[attr.disabled]": "disabled",
            "[attr.aria-labelledby]": "ariaLabelledBy",
            "[attr.aria-pressed]": "checked",
            "[attr.data-p-checked]": "active",
            "[attr.data-p-disabled]": "disabled",
            "[attr.type]": '"button"',
            "[class.p-togglebutton]": "true",
            "[class.p-togglebutton-checked]": "checked",
            "[class.p-disabled]": "disabled",
            "[class.p-togglebutton-sm]": 'size === "small"',
            "[class.p-inputfield-sm]": 'size === "small"',
            "[class.p-togglebutton-lg]": 'size === "large"',
            "[class.p-inputfield-lg]": 'size === "large"'
          },
          template: `<span [ngClass]="cx('content')">
        <ng-container *ngTemplateOutlet="contentTemplate || _contentTemplate; context: { $implicit: checked }"></ng-container>
        @if (!contentTemplate) {
            @if (!iconTemplate) {
                @if (onIcon || offIcon) {
                    <span
                        [class]="checked ? this.onIcon : this.offIcon"
                        [ngClass]="{
                            'p-togglebutton-icon': true,
                            'p-togglebutton-icon-left': iconPos === 'left',
                            'p-togglebutton-icon-right': iconPos === 'right'
                        }"
                        [attr.data-pc-section]="'icon'"
                    ></span>
                }
            } @else {
                <ng-container *ngTemplateOutlet="iconTemplate || _iconTemplate; context: { $implicit: checked }"></ng-container>
            }
            <span [ngClass]="cx('label')" [attr.data-pc-section]="'label'">{{ checked ? (hasOnLabel ? onLabel : '\xA0') : hasOffLabel ? offLabel : '\xA0' }}</span>
        }
    </span>`,
          providers: [TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButtonStyle],
          changeDetection: ChangeDetectionStrategy.OnPush
        }]
      }],
      propDecorators: {
        hostClass: [{
          type: HostBinding,
          args: ["class"]
        }],
        onKeyDown: [{
          type: HostListener,
          args: ["keydown", ["$event"]]
        }],
        toggle: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }],
        onLabel: [{
          type: Input
        }],
        offLabel: [{
          type: Input
        }],
        onIcon: [{
          type: Input
        }],
        offIcon: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        inputId: [{
          type: Input
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        size: [{
          type: Input
        }],
        iconPos: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        allowEmpty: [{
          type: Input
        }],
        onChange: [{
          type: Output
        }],
        iconTemplate: [{
          type: ContentChild,
          args: ["icon", {
            descendants: false
          }]
        }],
        contentTemplate: [{
          type: ContentChild,
          args: ["content", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    ToggleButtonModule = class _ToggleButtonModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ToggleButtonModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ToggleButtonModule,
        imports: [ToggleButton, SharedModule],
        exports: [ToggleButton, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ToggleButtonModule,
        imports: [ToggleButton, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ToggleButtonModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [ToggleButton, SharedModule],
          exports: [ToggleButton, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-selectbutton.mjs
var theme16, classes15, SelectButtonStyle, SelectButtonClasses, SELECTBUTTON_VALUE_ACCESSOR, SelectButton, SelectButtonModule;
var init_primeng_selectbutton = __esm({
  "node_modules/primeng/fesm2022/primeng-selectbutton.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_forms();
    init_utils();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_togglebutton();
    init_primeng_base();
    theme16 = ({
      dt
    }) => `
.p-selectbutton {
    display: inline-flex;
    user-select: none;
    vertical-align: bottom;
    outline-color: transparent;
    border-radius: ${dt("selectbutton.border.radius")};
}

.p-selectbutton .p-togglebutton {
    border-radius: 0;
    border-width: 1px 1px 1px 0;
}

.p-selectbutton .p-togglebutton:focus-visible {
    position: relative;
    z-index: 1;
}

.p-selectbutton .p-togglebutton:first-child {
    border-inline-start-width: 1px;
    border-start-start-radius: ${dt("selectbutton.border.radius")};
    border-end-start-radius: ${dt("selectbutton.border.radius")};
}

.p-selectbutton .p-togglebutton:last-child {
    border-start-end-radius: ${dt("selectbutton.border.radius")};
    border-end-end-radius: ${dt("selectbutton.border.radius")};
}

.p-selectbutton.ng-invalid.ng-dirty {
    outline: 1px solid ${dt("selectbutton.invalid.border.color")};
    outline-offset: 0;
}
`;
    classes15 = {
      root: ({
        props
      }) => ["p-selectbutton p-component", {
        "p-invalid": props.invalid
      }]
    };
    SelectButtonStyle = class _SelectButtonStyle extends BaseStyle {
      name = "selectbutton";
      theme = theme16;
      classes = classes15;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectButtonStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectButtonStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectButtonStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(SelectButtonClasses2) {
      SelectButtonClasses2["root"] = "p-selectbutton";
    })(SelectButtonClasses || (SelectButtonClasses = {}));
    SELECTBUTTON_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => SelectButton),
      multi: true
    };
    SelectButton = class _SelectButton extends BaseComponent {
      /**
       * An array of selectitems to display as the available options.
       * @group Props
       */
      options;
      /**
       * Name of the label field of an option.
       * @group Props
       */
      optionLabel;
      /**
       * Name of the value field of an option.
       * @group Props
       */
      optionValue;
      /**
       * Name of the disabled field of an option.
       * @group Props
       */
      optionDisabled;
      /**
       * Whether selection can be cleared.
       * @group Props
       */
      get unselectable() {
        return this._unselectable;
      }
      _unselectable = false;
      set unselectable(value) {
        this._unselectable = value;
        this.allowEmpty = !value;
      }
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex = 0;
      /**
       * When specified, allows selecting multiple values.
       * @group Props
       */
      multiple;
      /**
       * Whether selection can not be cleared.
       * @group Props
       */
      allowEmpty = true;
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * When present, it specifies that the element should be disabled.
       * @group Props
       */
      disabled;
      /**
       * A property to uniquely identify a value in options.
       * @group Props
       */
      dataKey;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Callback to invoke on input click.
       * @param {SelectButtonOptionClickEvent} event - Custom click event.
       * @group Emits
       */
      onOptionClick = new EventEmitter();
      /**
       * Callback to invoke on selection change.
       * @param {SelectButtonChangeEvent} event - Custom change event.
       * @group Emits
       */
      onChange = new EventEmitter();
      /**
       * Template of an item in the list.
       * @group Templates
       */
      itemTemplate;
      _itemTemplate;
      get equalityKey() {
        return this.optionValue ? null : this.dataKey;
      }
      value;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      focusedIndex = 0;
      _componentStyle = inject(SelectButtonStyle);
      getAllowEmpty() {
        if (this.multiple) {
          return this.allowEmpty || this.value?.length !== 1;
        }
        return this.allowEmpty;
      }
      getOptionLabel(option) {
        return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option.label != void 0 ? option.label : option;
      }
      getOptionValue(option) {
        return this.optionValue ? resolveFieldData(option, this.optionValue) : this.optionLabel || option.value === void 0 ? option : option.value;
      }
      isOptionDisabled(option) {
        return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : option.disabled !== void 0 ? option.disabled : false;
      }
      writeValue(value) {
        this.value = value;
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      onOptionSelect(event2, option, index) {
        if (this.disabled || this.isOptionDisabled(option)) {
          return;
        }
        let selected = this.isSelected(option);
        if (selected && this.unselectable) {
          return;
        }
        let optionValue = this.getOptionValue(option);
        let newValue;
        if (this.multiple) {
          if (selected) newValue = this.value.filter((val) => !equals(val, optionValue, this.equalityKey));
          else newValue = this.value ? [...this.value, optionValue] : [optionValue];
        } else {
          if (selected && !this.allowEmpty) {
            return;
          }
          newValue = selected ? null : optionValue;
        }
        this.focusedIndex = index;
        this.value = newValue;
        this.onModelChange(this.value);
        this.onChange.emit({
          originalEvent: event2,
          value: this.value
        });
        this.onOptionClick.emit({
          originalEvent: event2,
          option,
          index
        });
      }
      changeTabIndexes(event2, direction) {
        let firstTabableChild, index;
        for (let i = 0; i <= this.el.nativeElement.children.length - 1; i++) {
          if (this.el.nativeElement.children[i].getAttribute("tabindex") === "0") firstTabableChild = {
            elem: this.el.nativeElement.children[i],
            index: i
          };
        }
        if (direction === "prev") {
          if (firstTabableChild.index === 0) index = this.el.nativeElement.children.length - 1;
          else index = firstTabableChild.index - 1;
        } else {
          if (firstTabableChild.index === this.el.nativeElement.children.length - 1) index = 0;
          else index = firstTabableChild.index + 1;
        }
        this.focusedIndex = index;
        this.el.nativeElement.children[index].focus();
      }
      onFocus(event2, index) {
        this.focusedIndex = index;
      }
      onBlur() {
        this.onModelTouched();
      }
      removeOption(option) {
        this.value = this.value.filter((val) => !equals(val, this.getOptionValue(option), this.dataKey));
      }
      isSelected(option) {
        let selected = false;
        const optionValue = this.getOptionValue(option);
        if (this.multiple) {
          if (this.value && Array.isArray(this.value)) {
            for (let val of this.value) {
              if (equals(val, optionValue, this.dataKey)) {
                selected = true;
                break;
              }
            }
          }
        } else {
          selected = equals(this.getOptionValue(option), this.value, this.equalityKey);
        }
        return selected;
      }
      templates;
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "item":
              this._itemTemplate = item.template;
              break;
          }
        });
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectButton,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.0.0",
        version: "19.2.10",
        type: _SelectButton,
        isStandalone: true,
        selector: "p-selectButton, p-selectbutton, p-select-button",
        inputs: {
          options: "options",
          optionLabel: "optionLabel",
          optionValue: "optionValue",
          optionDisabled: "optionDisabled",
          unselectable: ["unselectable", "unselectable", booleanAttribute],
          tabindex: ["tabindex", "tabindex", numberAttribute],
          multiple: ["multiple", "multiple", booleanAttribute],
          allowEmpty: ["allowEmpty", "allowEmpty", booleanAttribute],
          style: "style",
          styleClass: "styleClass",
          ariaLabelledBy: "ariaLabelledBy",
          size: "size",
          disabled: ["disabled", "disabled", booleanAttribute],
          dataKey: "dataKey",
          autofocus: ["autofocus", "autofocus", booleanAttribute]
        },
        outputs: {
          onOptionClick: "onOptionClick",
          onChange: "onChange"
        },
        host: {
          properties: {
            "class.p-selectbutton": "true",
            "class.p-component": "true",
            "style": "style",
            "attr.role": '"group"',
            "attr.aria-labelledby": "ariaLabelledBy",
            "attr.data-pc-section": "'root'",
            "attr.data-pc-name": "'selectbutton'"
          }
        },
        providers: [SELECTBUTTON_VALUE_ACCESSOR, SelectButtonStyle],
        queries: [{
          propertyName: "itemTemplate",
          first: true,
          predicate: ["item"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        @for (option of options; track getOptionLabel(option); let i = $index) {
            <p-toggleButton
                [autofocus]="autofocus"
                [styleClass]="styleClass"
                [ngModel]="isSelected(option)"
                [onLabel]="this.getOptionLabel(option)"
                [offLabel]="this.getOptionLabel(option)"
                [disabled]="disabled || isOptionDisabled(option)"
                (onChange)="onOptionSelect($event, option, i)"
                [allowEmpty]="getAllowEmpty()"
                [size]="size"
            >
                @if (itemTemplate || _itemTemplate) {
                    <ng-template #content>
                        <ng-container *ngTemplateOutlet="itemTemplate || _itemTemplate; context: { $implicit: option, index: i }"></ng-container>
                    </ng-template>
                }
            </p-toggleButton>
        }
    `,
        isInline: true,
        dependencies: [{
          kind: "component",
          type: ToggleButton,
          selector: "p-toggleButton, p-togglebutton, p-toggle-button",
          inputs: ["onLabel", "offLabel", "onIcon", "offIcon", "ariaLabel", "ariaLabelledBy", "disabled", "style", "styleClass", "inputId", "tabindex", "size", "iconPos", "autofocus", "allowEmpty"],
          outputs: ["onChange"]
        }, {
          kind: "ngmodule",
          type: FormsModule
        }, {
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectButton,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-selectButton, p-selectbutton, p-select-button",
          standalone: true,
          imports: [ToggleButton, FormsModule, CommonModule, SharedModule],
          template: `
        @for (option of options; track getOptionLabel(option); let i = $index) {
            <p-toggleButton
                [autofocus]="autofocus"
                [styleClass]="styleClass"
                [ngModel]="isSelected(option)"
                [onLabel]="this.getOptionLabel(option)"
                [offLabel]="this.getOptionLabel(option)"
                [disabled]="disabled || isOptionDisabled(option)"
                (onChange)="onOptionSelect($event, option, i)"
                [allowEmpty]="getAllowEmpty()"
                [size]="size"
            >
                @if (itemTemplate || _itemTemplate) {
                    <ng-template #content>
                        <ng-container *ngTemplateOutlet="itemTemplate || _itemTemplate; context: { $implicit: option, index: i }"></ng-container>
                    </ng-template>
                }
            </p-toggleButton>
        }
    `,
          providers: [SELECTBUTTON_VALUE_ACCESSOR, SelectButtonStyle],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None,
          host: {
            "[class.p-selectbutton]": "true",
            "[class.p-component]": "true",
            "[style]": "style",
            "[attr.role]": '"group"',
            "[attr.aria-labelledby]": "ariaLabelledBy",
            "[attr.data-pc-section]": "'root'",
            "[attr.data-pc-name]": "'selectbutton'"
          }
        }]
      }],
      propDecorators: {
        options: [{
          type: Input
        }],
        optionLabel: [{
          type: Input
        }],
        optionValue: [{
          type: Input
        }],
        optionDisabled: [{
          type: Input
        }],
        unselectable: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        multiple: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        allowEmpty: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        dataKey: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onOptionClick: [{
          type: Output
        }],
        onChange: [{
          type: Output
        }],
        itemTemplate: [{
          type: ContentChild,
          args: ["item", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    SelectButtonModule = class _SelectButtonModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectButtonModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectButtonModule,
        imports: [SelectButton, SharedModule],
        exports: [SelectButton, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectButtonModule,
        imports: [SelectButton, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectButtonModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [SelectButton, SharedModule],
          exports: [SelectButton, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-table.mjs
var theme17, classes16, inlineStyles2, TableStyle, TableClasses, TableService, Table, TableBody, RowGroupHeader, FrozenColumn, SortableColumn, SortIcon, SelectableRow, SelectableRowDblClick, ContextMenuRow, RowToggler, ResizableColumn, ReorderableColumn, EditableColumn, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, CellEditor, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, ColumnFilter, ColumnFilterFormElement, TableModule;
var init_primeng_table = __esm({
  "node_modules/primeng/fesm2022/primeng-table.mjs"() {
    "use strict";
    init_animations();
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_forms();
    init_primeng_api();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_button();
    init_primeng_button();
    init_primeng_checkbox();
    init_primeng_checkbox();
    init_primeng_datepicker();
    init_primeng_datepicker();
    init_primeng_dom();
    init_primeng_icons_arrowdown();
    init_primeng_icons_arrowup();
    init_primeng_icons_check();
    init_primeng_icons_filter();
    init_primeng_icons_filterslash();
    init_primeng_icons_plus();
    init_primeng_icons_sortalt();
    init_primeng_icons_sortamountdown();
    init_primeng_icons_sortamountupalt();
    init_primeng_icons_spinner();
    init_primeng_icons_trash();
    init_primeng_inputnumber();
    init_primeng_inputnumber();
    init_primeng_inputtext();
    init_primeng_inputtext();
    init_primeng_paginator();
    init_primeng_paginator();
    init_primeng_radiobutton();
    init_primeng_radiobutton();
    init_primeng_scroller();
    init_primeng_scroller();
    init_primeng_select();
    init_primeng_select();
    init_primeng_selectbutton();
    init_primeng_utils();
    init_esm();
    init_primeng_base();
    theme17 = ({
      dt
    }) => `
.p-datatable {
    position: relative;
}

.p-datatable-table {
    border-spacing: 0;
    border-collapse: separate;
    width: 100%;
}

.p-datatable-scrollable > .p-datatable-table-container {
    position: relative;
}
/* For PrimeNG */
.p-datatable-scrollable-table > .p-datatable-thead {
    top: 0;
    z-index: 2;
}
/* For PrimeNG */
.p-datatable-scrollable-table > .p-datatable-frozen-tbody {
    position: sticky;
    z-index: 2;
}
/* For PrimeNG */
.p-datatable-scrollable-table > .p-datatable-frozen-tbody + .p-datatable-frozen-tbody {
    z-index: 1;
}

.p-datatable-scrollable-table > .p-datatable-tfoot {
    bottom: 0;
    z-index: 1;
}

.p-datatable-scrollable > tr:not(:has(.p-datatable-selectable-row)) >.p-datatable-frozen-column {
    position: sticky;
    background: ${dt("datatable.header.cell.background")};
}

.p-datatable-scrollable th.p-datatable-frozen-column {
    z-index: 1;
    position: sticky;
    background: ${dt("datatable.header.cell.background")};
}
.p-datatable-scrollable td.p-datatable-frozen-column {
    z-index: 1;
    position: sticky;
    background: ${dt("datatable.header.cell.background")};
}

.p-datatable-scrollable > .p-datatable-table-container > .p-datatable-table > .p-datatable-thead,
.p-datatable-scrollable > .p-datatable-table-container > .p-virtualscroller > .p-datatable-table > .p-datatable-thead {
    background: ${dt("datatable.header.cell.background")};
}

.p-datatable-scrollable > .p-datatable-table-container > .p-datatable-table > .p-datatable-tfoot,
.p-datatable-scrollable > .p-datatable-table-container > .p-virtualscroller > .p-datatable-table > .p-datatable-tfoot {
    background: ${dt("datatable.footer.cell.background")};
}

.p-datatable-flex-scrollable {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.p-datatable-flex-scrollable > .p-datatable-table-container {
    display: flex;
    flex-direction: column;
    flex: 1;
    height: 100%;
}

.p-datatable-scrollable-table > .p-datatable-tbody > .p-datatable-row-group-header {
    position: sticky;
    z-index: 1;
}

.p-datatable-resizable-table > .p-datatable-thead > tr > th,
.p-datatable-resizable-table > .p-datatable-tfoot > tr > td,
.p-datatable-resizable-table > .p-datatable-tbody > tr > td {
    overflow: hidden;
    white-space: nowrap;
}

.p-datatable-resizable-table > .p-datatable-thead > tr > th.p-datatable-resizable-column:not(.p-datatable-frozen-column) {
    background-clip: padding-box;
    position: relative;
}

.p-datatable-resizable-table-fit > .p-datatable-thead > tr > th.p-datatable-resizable-column:last-child .p-datatable-column-resizer {
    display: none;
}

.p-datatable-column-resizer {
    display: block;
    position: absolute;
    top: 0;
    inset-inline-end: 0;
    margin: 0;
    width: ${dt("datatable.column.resizer.width")};
    height: 100%;
    padding: 0px;
    cursor: col-resize;
    border: 1px solid transparent;
}

/*
.p-datatable-column-header-content {
    display: flex;
    align-items: center;
    gap: ${dt("datatable.header.cell.gap")};
}
.p-datatable-thead > tr > th {
    display: flex;
    align-items: center;
    gap: ${dt("datatable.header.cell.gap")};
}
*/

.p-datatable-column-resize-indicator {
    width: ${dt("datatable.resize.indicator.width")};
    position: absolute;
    z-index: 10;
    display: none;
    background: ${dt("datatable.resize.indicator.color")};
}

.p-datatable-row-reorder-indicator-up,
.p-datatable-row-reorder-indicator-down {
    position: absolute;
    display: none;
}

.p-datatable-reorderable-column,
.p-datatable-reorderable-row-handle {
    cursor: move;
}

.p-datatable-mask {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3;
}

.p-datatable-inline-filter {
    display: flex;
    align-items: center;
    width: 100%;
    gap: ${dt("datatable.filter.inline.gap")};
}

.p-datatable-inline-filter .p-datatable-filter-element-container {
    flex: 1 1 auto;
    width: 1%;
}

.p-datatable-filter-overlay {
    position: absolute;
    background: ${dt("datatable.filter.overlay.select.background")};
    color: ${dt("datatable.filter.overlay.select.color")};
    border: 1px solid ${dt("datatable.filter.overlay.select.border.color")};
    border-radius: ${dt("datatable.filter.overlay.select.border.radius")};
    box-shadow: ${dt("datatable.filter.overlay.select.shadow")};
    min-width: 12.5rem;
}

.p-datatable-filter-constraint-list {
    margin: 0;
    list-style: none;
    display: flex;
    flex-direction: column;
    padding: ${dt("datatable.filter.constraint.list.padding")};
    gap: ${dt("datatable.filter.constraint.list.gap")};
}

.p-datatable-filter-constraint {
    padding: ${dt("datatable.filter.constraint.padding")};
    color: ${dt("datatable.filter.constraint.color")};
    border-radius: ${dt("datatable.filter.constraint.border.radius")};
    cursor: pointer;
    transition: background ${dt("datatable.transition.duration")}, color ${dt("datatable.transition.duration")}, border-color ${dt("datatable.transition.duration")},
        box-shadow ${dt("datatable.transition.duration")};
}

.p-datatable-filter-constraint-selected {
    background: ${dt("datatable.filter.constraint.selected.background")};
    color: ${dt("datatable.filter.constraint.selected.color")};
}

.p-datatable-filter-constraint:not(.p-datatable-filter-constraint-selected):not(.p-disabled):hover {
    background: ${dt("datatable.filter.constraint.focus.background")};
    color: ${dt("datatable.filter.constraint.focus.color")};
}

.p-datatable-filter-constraint:focus-visible {
    outline: 0 none;
    background: ${dt("datatable.filter.constraint.focus.background")};
    color: ${dt("datatable.filter.constraint.focus.color")};
}

.p-datatable-filter-constraint-selected:focus-visible {
    outline: 0 none;
    background: ${dt("datatable.filter.constraint.selected.focus.background")};
    color: ${dt("datatable.filter.constraint.selected.focus.color")};
}

.p-datatable-filter-constraint-separator {
    border-top: 1px solid ${dt("datatable.filter.constraint.separator.border.color")};
}

.p-datatable-popover-filter {
    display: inline-flex;
    margin-inline-start: auto;
}

.p-datatable-filter-overlay-popover {
    background: ${dt("datatable.filter.overlay.popover.background")};
    color: ${dt("datatable.filter.overlay.popover.color")};
    border: 1px solid ${dt("datatable.filter.overlay.popover.border.color")};
    border-radius: ${dt("datatable.filter.overlay.popover.border.radius")};
    box-shadow: ${dt("datatable.filter.overlay.popover.shadow")};
    min-width: 12.5rem;
    padding: ${dt("datatable.filter.overlay.popover.padding")};
    display: flex;
    flex-direction: column;
    gap: ${dt("datatable.filter.overlay.popover.gap")};
}

.p-datatable-filter-operator-dropdown, .p-datatable-filter-constraint-dropdown {
    width: 100%;
}

.p-datatable-filter-rule-list,
.p-datatable-filter-rule {
    display: flex;
    flex-direction: column;
    gap: ${dt("datatable.filter.overlay.popover.gap")};
}

.p-datatable-filter-rule {
    border-bottom: 1px solid ${dt("datatable.filter.rule.border.color")};
}

.p-datatable-filter-rule:last-child {
    border-bottom: 0 none;
}

.p-datatable-filter-add-rule-button, .p-datatable-filter-remove-rule-button {
    width: 100%;
}

.p-datatable-filter-remove-button {
    width: 100%;
}

.p-datatable-filter-buttonbar {
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.p-datatable-virtualscroller-spacer {
    display: flex;
}

.p-datatable .p-virtualscroller .p-virtualscroller-loading {
    transform: none !important;
    min-height: 0;
    position: sticky;
    top: 0;
    inset-inline-start: 0;
}

.p-datatable-paginator-top {
    border-color: ${dt("datatable.paginator.top.border.color")};
    border-style: solid;
    border-width: ${dt("datatable.paginator.top.border.width")};
}

.p-datatable-paginator-bottom {
    border-color: ${dt("datatable.paginator.bottom.border.color")};
    border-style: solid;
    border-width: ${dt("datatable.paginator.bottom.border.width")};
}

.p-datatable-header {
    background: ${dt("datatable.header.background")};
    color: ${dt("datatable.header.color")};
    border-color: ${dt("datatable.header.border.color")};
    border-style: solid;
    border-width: ${dt("datatable.header.border.width")};
    padding: ${dt("datatable.header.padding")};
}

.p-datatable-footer {
    background: ${dt("datatable.footer.background")};
    color: ${dt("datatable.footer.color")};
    border-color: ${dt("datatable.footer.border.color")};
    border-style: solid;
    border-width: ${dt("datatable.footer.border.width")};
    padding: ${dt("datatable.footer.padding")};
}

.p-datatable-thead > tr > th {
    padding: ${dt("datatable.header.cell.padding")};
    background: ${dt("datatable.header.cell.background")};
    border-color: ${dt("datatable.header.cell.border.color")};
    border-style: solid;
    border-width: 0 0 1px 0;
    color: ${dt("datatable.header.cell.color")};
    font-weight: ${dt("datatable.column.title.font.weight")};
    text-align: start;
    transition: background ${dt("datatable.transition.duration")}, color ${dt("datatable.transition.duration")}, border-color ${dt("datatable.transition.duration")},
            outline-color ${dt("datatable.transition.duration")}, box-shadow ${dt("datatable.transition.duration")};
}

/** For PrimeNG **/
.p-datatable-thead > tr > th p-columnfilter {
    font-weight: normal;
}
/** For PrimeNG End **/

/*
.p-datatable-column-title {
    font-weight: ${dt("datatable.column.title.font.weight")};
}
*/

.p-datatable-tbody > tr {
    outline-color: transparent;
    background: ${dt("datatable.row.background")};
    color: ${dt("datatable.row.color")};
    transition: background ${dt("datatable.transition.duration")}, color ${dt("datatable.transition.duration")}, border-color ${dt("datatable.transition.duration")},
            outline-color ${dt("datatable.transition.duration")}, box-shadow ${dt("datatable.transition.duration")};
}

.p-datatable-tbody > tr > td {
    text-align: start;
    border-color: ${dt("datatable.body.cell.border.color")};
    border-style: solid;
    border-width: 0 0 1px 0;
    padding: ${dt("datatable.body.cell.padding")};
}

.p-datatable-hoverable .p-datatable-tbody > tr:not(.p-datatable-row-selected):hover {
    background: ${dt("datatable.row.hover.background")};
    color: ${dt("datatable.row.hover.color")};
}

.p-datatable-tbody > tr.p-datatable-row-selected {
    background: ${dt("datatable.row.selected.background")};
    color: ${dt("datatable.row.selected.color")};
}

.p-datatable-tbody > tr:has(+ .p-datatable-row-selected) > td {
    border-bottom-color: ${dt("datatable.body.cell.selected.border.color")};
}

.p-datatable-tbody > tr.p-datatable-row-selected > td {
    border-bottom-color: ${dt("datatable.body.cell.selected.border.color")};
}

.p-datatable-tbody > tr:focus-visible,
.p-datatable-tbody > tr.p-datatable-contextmenu-row-selected {
    box-shadow: ${dt("datatable.row.focus.ring.shadow")};
    outline: ${dt("datatable.row.focus.ring.width")} ${dt("datatable.row.focus.ring.style")} ${dt("datatable.row.focus.ring.color")};
    outline-offset: ${dt("datatable.row.focus.ring.offset")};
}

.p-datatable-tbody:has(+ .p-datatable-tfoot) > tr:last-child > td {
    border-width: 0;
}

.p-datatable-tfoot > tr > td {
    text-align: start;
    padding: ${dt("datatable.footer.cell.padding")};
    border-color: ${dt("datatable.footer.cell.border.color")};
    border-style: solid;
    border-width: 1px 0 1px 0;
    color: ${dt("datatable.footer.cell.color")};
    background: ${dt("datatable.footer.cell.background")};
}

.p-datatable-column-footer {
    font-weight: ${dt("datatable.column.footer.font.weight")};
}

.p-datatable-sortable-column {
    cursor: pointer;
    user-select: none;
    outline-color: transparent;
}

.p-datatable-thead > tr > th,
.p-datatable-sort-icon,
.p-datatable-sort-badge {
    vertical-align: middle;
}

.p-datatable-sort-icon {
    color: ${dt("datatable.sort.icon.color")};
    transition: color ${dt("datatable.transition.duration")};
}

.p-datatable-sortable-column:not(.p-datatable-column-sorted):hover {
    background: ${dt("datatable.header.cell.hover.background")};
    color: ${dt("datatable.header.cell.hover.color")};
}

.p-datatable-sortable-column:not(.p-datatable-column-sorted):hover .p-datatable-sort-icon {
    color: ${dt("datatable.sort.icon.hover.color")};
}

.p-datatable-thead > tr > th.p-datatable-column-sorted {
    background: ${dt("datatable.header.cell.selected.background")};
    color: ${dt("datatable.header.cell.selected.color")};
}

.p-datatable-thead > tr > th.p-datatable-column-sorted .p-datatable-sort-icon {
    color: ${dt("datatable.header.cell.selected.color")};
}

.p-datatable-sortable-column:focus-visible {
    box-shadow: ${dt("datatable.header.cell.focus.ring.shadow")};
    outline: ${dt("datatable.header.cell.focus.ring.width")} ${dt("datatable.header.cell.focus.ring.style")} ${dt("datatable.header.cell.focus.ring.color")};
    outline-offset: ${dt("datatable.header.cell.focus.ring.offset")};
}

.p-datatable-hoverable .p-datatable-selectable-row {
    cursor: pointer;
}

.p-datatable-tbody > tr.p-datatable-dragpoint-top > td {
    box-shadow: inset 0 2px 0 0 ${dt("datatable.drop.point.color")};
}

.p-datatable-tbody > tr.p-datatable-dragpoint-bottom > td {
    box-shadow: inset 0 -2px 0 0 ${dt("datatable.drop.point.color")};
}

.p-datatable-loading-icon {
    font-size: ${dt("datatable.loading.icon.size")};
    width: ${dt("datatable.loading.icon.size")};
    height: ${dt("datatable.loading.icon.size")};
}

.p-datatable-gridlines .p-datatable-header {
    border-width: 1px 1px 0 1px;
}

.p-datatable-gridlines .p-datatable-footer {
    border-width: 0 1px 1px 1px;
}

.p-datatable-gridlines .p-datatable-paginator-top {
    border-width: 1px 1px 0 1px;
}

.p-datatable-gridlines .p-datatable-paginator-bottom {
    border-width: 0 1px 1px 1px;
}

.p-datatable-gridlines .p-datatable-thead > tr > th {
    border-width: 1px 0 1px 1px;
}

.p-datatable-gridlines .p-datatable-thead > tr > th:last-child {
    border-width: 1px;
}

.p-datatable-gridlines .p-datatable-tbody > tr > td {
    border-width: 1px 0 0 1px;
}

.p-datatable-gridlines .p-datatable-tbody > tr > td:last-child {
    border-width: 1px 1px 0 1px;
}

p-datatable-gridlines .p-datatable-tbody > tr:last-child > td {
    border-width: 1px 0 1px 1px;
}

.p-datatable-gridlines .p-datatable-tbody > tr:last-child > td:last-child {
    border-width: 1px;
}

.p-datatable-gridlines .p-datatable-tfoot > tr > td {
    border-width: 1px 0 1px 1px;
}

.p-datatable-gridlines .p-datatable-tfoot > tr > td:last-child {
    border-width: 1px 1px 1px 1px;
}

.p-datatable.p-datatable-gridlines .p-datatable-thead + .p-datatable-tfoot > tr > td {
    border-width: 0 0 1px 1px;
}

.p-datatable.p-datatable-gridlines .p-datatable-thead + .p-datatable-tfoot > tr > td:last-child {
    border-width: 0 1px 1px 1px;
}

.p-datatable.p-datatable-gridlines:has(.p-datatable-thead):has(.p-datatable-tbody) .p-datatable-tbody > tr > td {
    border-width: 0 0 1px 1px;
}

.p-datatable.p-datatable-gridlines:has(.p-datatable-thead):has(.p-datatable-tbody) .p-datatable-tbody > tr > td:last-child {
    border-width: 0 1px 1px 1px;
}

.p-datatable.p-datatable-gridlines:has(.p-datatable-tbody):has(.p-datatable-tfoot) .p-datatable-tbody > tr:last-child > td {
    border-width: 0 0 0 1px;
}

.p-datatable.p-datatable-gridlines:has(.p-datatable-tbody):has(.p-datatable-tfoot) .p-datatable-tbody > tr:last-child > td:last-child {
    border-width: 0 1px 0 1px;
}

.p-datatable.p-datatable-striped .p-datatable-tbody > tr:nth-child(odd) {
    background: ${dt("datatable.row.striped.background")};
}

.p-datatable.p-datatable-striped .p-datatable-tbody > tr:nth-child(odd).p-datatable-row-selected {
    background: ${dt("datatable.row.selected.background")};
    color: ${dt("datatable.row.selected.color")};
}

.p-datatable-striped.p-datatable-hoverable .p-datatable-tbody > tr:not(.p-datatable-row-selected):hover {
    background: ${dt("datatable.row.hover.background")};
    color: ${dt("datatable.row.hover.color")};
}

.p-datatable.p-datatable-sm .p-datatable-header {
    padding: ${dt("datatable.header.sm.padding")};
}

.p-datatable.p-datatable-sm .p-datatable-thead > tr > th {
    padding: ${dt("datatable.header.cell.sm.padding")};
}

.p-datatable.p-datatable-sm .p-datatable-tbody > tr > td {
    padding: ${dt("datatable.body.cell.sm.padding")};
}

.p-datatable.p-datatable-sm .p-datatable-tfoot > tr > td {
    padding: ${dt("datatable.footer.cell.sm.padding")};
}

.p-datatable.p-datatable-sm .p-datatable-footer {
    padding: ${dt("datatable.footer.sm.padding")};
}

.p-datatable.p-datatable-lg .p-datatable-header {
    padding: ${dt("datatable.header.lg.padding")};
}

.p-datatable.p-datatable-lg .p-datatable-thead > tr > th {
    padding: ${dt("datatable.header.cell.lg.padding")};
}

.p-datatable.p-datatable-lg .p-datatable-tbody > tr > td {
    padding: ${dt("datatable.body.cell.lg.padding")};
}

.p-datatable.p-datatable-lg .p-datatable-tfoot > tr > td {
    padding: ${dt("datatable.footer.cell.lg.padding")};
}

.p-datatable.p-datatable-lg .p-datatable-footer {
    padding: ${dt("datatable.footer.lg.padding")};
}

.p-datatable-row-toggle-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    position: relative;
    width: ${dt("datatable.row.toggle.button.size")};
    height: ${dt("datatable.row.toggle.button.size")};
    color: ${dt("datatable.row.toggle.button.color")};
    border: 0 none;
    background: transparent;
    cursor: pointer;
    border-radius: ${dt("datatable.row.toggle.button.border.radius")};
    transition: background ${dt("datatable.transition.duration")}, color ${dt("datatable.transition.duration")}, border-color ${dt("datatable.transition.duration")},
            outline-color ${dt("datatable.transition.duration")}, box-shadow ${dt("datatable.transition.duration")};
    outline-color: transparent;
    user-select: none;
}

.p-datatable-row-toggle-button:enabled:hover {
    color: ${dt("datatable.row.toggle.button.hover.color")};
    background: ${dt("datatable.row.toggle.button.hover.background")};
}

.p-datatable-tbody > tr.p-datatable-row-selected .p-datatable-row-toggle-button:hover {
    background: ${dt("datatable.row.toggle.button.selected.hover.background")};
    color: ${dt("datatable.row.toggle.button.selected.hover.color")};
}

.p-datatable-row-toggle-button:focus-visible {
    box-shadow: ${dt("datatable.row.toggle.button.focus.ring.shadow")};
    outline: ${dt("datatable.row.toggle.button.focus.ring.width")} ${dt("datatable.row.toggle.button.focus.ring.style")} ${dt("datatable.row.toggle.button.focus.ring.color")};
    outline-offset: ${dt("datatable.row.toggle.button.focus.ring.offset")};
}
`;
    classes16 = {
      root: ({
        instance
      }) => ({
        "p-datatable p-component": true,
        "p-datatable-hoverable": instance.rowHover || instance.selectionMode,
        "p-datatable-resizable": instance.resizableColumns,
        "p-datatable-resizable-fit": instance.resizableColumns && instance.columnResizeMode === "fit",
        "p-datatable-scrollable": instance.scrollable,
        "p-datatable-flex-scrollable": instance.scrollable && instance.scrollHeight === "flex",
        "p-datatable-striped": instance.stripedRows,
        "p-datatable-gridlines": instance.showGridlines,
        "p-datatable-sm": instance.size === "small",
        "p-datatable-lg": instance.size === "large"
      }),
      mask: "p-datatable-mask p-overlay-mask",
      loadingIcon: "p-datatable-loading-icon",
      header: "p-datatable-header",
      pcPaginator: ({
        instance
      }) => "p-datatable-paginator-" + instance.paginatorPosition,
      tableContainer: "p-datatable-table-container",
      table: ({
        instance
      }) => ({
        "p-datatable-table": true,
        "p-datatable-scrollable-table": instance.scrollable,
        "p-datatable-resizable-table": instance.resizableColumns,
        "p-datatable-resizable-table-fit": instance.resizableColumns && instance.columnResizeMode === "fit"
      }),
      thead: "p-datatable-thead",
      columnResizer: "p-datatable-column-resizer",
      columnHeaderContent: "p-datatable-column-header-content",
      columnTitle: "p-datatable-column-title",
      columnFooter: "p-datatable-column-footer",
      sortIcon: "p-datatable-sort-icon",
      pcSortBadge: "p-datatable-sort-badge",
      filter: ({
        instance
      }) => ({
        "p-datatable-filter": true,
        "p-datatable-inline-filter": instance.display === "row",
        "p-datatable-popover-filter": instance.display === "menu"
      }),
      filterElementContainer: "p-datatable-filter-element-container",
      pcColumnFilterButton: "p-datatable-column-filter-button",
      pcColumnFilterClearButton: "p-datatable-column-filter-clear-button",
      filterOverlay: ({
        instance
      }) => ({
        "p-datatable-filter-overlay p-component": true,
        "p-datatable-filter-overlay-popover": instance.display === "menu"
      }),
      filterConstraintList: "p-datatable-filter-constraint-list",
      filterConstraint: "p-datatable-filter-constraint",
      filterConstraintSeparator: "p-datatable-filter-constraint-separator",
      filterOperator: "p-datatable-filter-operator",
      pcFilterOperatorDropdown: "p-datatable-filter-operator-dropdown",
      filterRuleList: "p-datatable-filter-rule-list",
      filterRule: "p-datatable-filter-rule",
      pcFilterConstraintDropdown: "p-datatable-filter-constraint-dropdown",
      pcFilterRemoveRuleButton: "p-datatable-filter-remove-rule-button",
      pcFilterAddRuleButton: "p-datatable-filter-add-rule-button",
      filterButtonbar: "p-datatable-filter-buttonbar",
      pcFilterClearButton: "p-datatable-filter-clear-button",
      pcFilterApplyButton: "p-datatable-filter-apply-button",
      tbody: ({
        instance
      }) => ({
        "p-datatable-tbody": true,
        "p-datatable-frozen-tbody": instance.frozenValue || instance.frozenBodyTemplate,
        "p-virtualscroller-content": instance.virtualScroll
      }),
      rowGroupHeader: "p-datatable-row-group-header",
      rowToggleButton: "p-datatable-row-toggle-button",
      rowToggleIcon: "p-datatable-row-toggle-icon",
      rowExpansion: "p-datatable-row-expansion",
      rowGroupFooter: "p-datatable-row-group-footer",
      emptyMessage: "p-datatable-empty-message",
      bodyCell: ({
        instance
      }) => ({
        "p-datatable-frozen-column": instance.columnProp("frozen")
      }),
      reorderableRowHandle: "p-datatable-reorderable-row-handle",
      pcRowEditorInit: "p-datatable-row-editor-init",
      pcRowEditorSave: "p-datatable-row-editor-save",
      pcRowEditorCancel: "p-datatable-row-editor-cancel",
      tfoot: "p-datatable-tfoot",
      footerCell: ({
        instance
      }) => ({
        "p-datatable-frozen-column": instance.columnProp("frozen")
      }),
      virtualScrollerSpacer: "p-datatable-virtualscroller-spacer",
      footer: "p-datatable-tfoot",
      columnResizeIndicator: "p-datatable-column-resize-indicator",
      rowReorderIndicatorUp: "p-datatable-row-reorder-indicator-up",
      rowReorderIndicatorDown: "p-datatable-row-reorder-indicator-down"
    };
    inlineStyles2 = {
      tableContainer: ({
        instance
      }) => ({
        "max-height": instance.virtualScroll ? "" : instance.scrollHeight,
        overflow: "auto"
      }),
      thead: {
        position: "sticky"
      },
      tfoot: {
        position: "sticky"
      }
    };
    TableStyle = class _TableStyle extends BaseStyle {
      name = "datatable";
      theme = theme17;
      classes = classes16;
      inlineStyles = inlineStyles2;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TableStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(TableClasses2) {
      TableClasses2["root"] = "p-datatable";
      TableClasses2["mask"] = "p-datatable-mask";
      TableClasses2["loadingIcon"] = "p-datatable-loading-icon";
      TableClasses2["header"] = "p-datatable-header";
      TableClasses2["pcPaginator"] = "p-datatable-paginator-[position]";
      TableClasses2["tableContainer"] = "p-datatable-table-container";
      TableClasses2["table"] = "p-datatable-table";
      TableClasses2["thead"] = "p-datatable-thead";
      TableClasses2["columnResizer"] = "p-datatable-column-resizer";
      TableClasses2["columnHeaderContent"] = "p-datatable-column-header-content";
      TableClasses2["columnTitle"] = "p-datatable-column-title";
      TableClasses2["sortIcon"] = "p-datatable-sort-icon";
      TableClasses2["pcSortBadge"] = "p-datatable-sort-badge";
      TableClasses2["filter"] = "p-datatable-filter";
      TableClasses2["filterElementContainer"] = "p-datatable-filter-element-container";
      TableClasses2["pcColumnFilterButton"] = "p-datatable-column-filter-button";
      TableClasses2["pcColumnFilterClearButton"] = "p-datatable-column-filter-clear-button";
      TableClasses2["filterOverlay"] = "p-datatable-filter-overlay";
      TableClasses2["filterConstraintList"] = "p-datatable-filter-constraint-list";
      TableClasses2["filterConstraint"] = "p-datatable-filter-constraint";
      TableClasses2["filterConstraintSeparator"] = "p-datatable-filter-constraint-separator";
      TableClasses2["filterOperator"] = "p-datatable-filter-operator";
      TableClasses2["pcFilterOperatorDropdown"] = "p-datatable-filter-operator-dropdown";
      TableClasses2["filterRuleList"] = "p-datatable-filter-rule-list";
      TableClasses2["filterRule"] = "p-datatable-filter-rule";
      TableClasses2["pcFilterConstraintDropdown"] = "p-datatable-filter-constraint-dropdown";
      TableClasses2["pcFilterRemoveRuleButton"] = "p-datatable-filter-remove-rule-button";
      TableClasses2["pcFilterAddRuleButton"] = "p-datatable-filter-add-rule-button";
      TableClasses2["filterButtonbar"] = "p-datatable-filter-buttonbar";
      TableClasses2["pcFilterClearButton"] = "p-datatable-filter-clear-button";
      TableClasses2["pcFilterApplyButton"] = "p-datatable-filter-apply-button";
      TableClasses2["tbody"] = "p-datatable-tbody";
      TableClasses2["rowGroupHeader"] = "p-datatable-row-group-header";
      TableClasses2["rowToggleButton"] = "p-datatable-row-toggle-button";
      TableClasses2["rowToggleIcon"] = "p-datatable-row-toggle-icon";
      TableClasses2["rowExpansion"] = "p-datatable-row-expansion";
      TableClasses2["rowGroupFooter"] = "p-datatable-row-group-footer";
      TableClasses2["emptyMessage"] = "p-datatable-empty-message";
      TableClasses2["reorderableRowHandle"] = "p-datatable-reorderable-row-handle";
      TableClasses2["pcRowEditorInit"] = "p-datatable-row-editor-init";
      TableClasses2["pcRowEditorSave"] = "p-datatable-row-editor-save";
      TableClasses2["pcRowEditorCancel"] = "p-datatable-row-editor-cancel";
      TableClasses2["tfoot"] = "p-datatable-tfoot";
      TableClasses2["virtualScrollerSpacer"] = "p-datatable-virtualscroller-spacer";
      TableClasses2["footer"] = "p-datatable-footer";
      TableClasses2["columnResizeIndicator"] = "p-datatable-column-resize-indicator";
      TableClasses2["rowReorderIndicatorUp"] = "p-datatable-row-reorder-indicator-up";
      TableClasses2["rowReorderIndicatorDown"] = "p-datatable-row-reorder-indicator-down";
    })(TableClasses || (TableClasses = {}));
    TableService = class _TableService {
      sortSource = new Subject();
      selectionSource = new Subject();
      contextMenuSource = new Subject();
      valueSource = new Subject();
      totalRecordsSource = new Subject();
      columnsSource = new Subject();
      sortSource$ = this.sortSource.asObservable();
      selectionSource$ = this.selectionSource.asObservable();
      contextMenuSource$ = this.contextMenuSource.asObservable();
      valueSource$ = this.valueSource.asObservable();
      totalRecordsSource$ = this.totalRecordsSource.asObservable();
      columnsSource$ = this.columnsSource.asObservable();
      onSort(sortMeta) {
        this.sortSource.next(sortMeta);
      }
      onSelectionChange() {
        this.selectionSource.next(null);
      }
      onContextMenu(data) {
        this.contextMenuSource.next(data);
      }
      onValueChange(value) {
        this.valueSource.next(value);
      }
      onTotalRecordsChange(value) {
        this.totalRecordsSource.next(value);
      }
      onColumnsChange(columns) {
        this.columnsSource.next(columns);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableService,
        deps: [],
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableService
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TableService,
      decorators: [{
        type: Injectable
      }]
    });
    Table = class _Table extends BaseComponent {
      /**
       * An array of objects to represent dynamic columns that are frozen.
       * @group Props
       */
      frozenColumns;
      /**
       * An array of objects to display as frozen.
       * @group Props
       */
      frozenValue;
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * Inline style of the table.
       * @group Props
       */
      tableStyle;
      /**
       * Style class of the table.
       * @group Props
       */
      tableStyleClass;
      /**
       * When specified as true, enables the pagination.
       * @group Props
       */
      paginator;
      /**
       * Number of page links to display in paginator.
       * @group Props
       */
      pageLinks = 5;
      /**
       * Array of integer/object values to display inside rows per page dropdown of paginator
       * @group Props
       */
      rowsPerPageOptions;
      /**
       * Whether to show it even there is only one page.
       * @group Props
       */
      alwaysShowPaginator = true;
      /**
       * Position of the paginator, options are "top", "bottom" or "both".
       * @group Props
       */
      paginatorPosition = "bottom";
      /**
       * Custom style class for paginator
       * @group Props
       */
      paginatorStyleClass;
      /**
       * Target element to attach the paginator dropdown overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
       * @group Props
       */
      paginatorDropdownAppendTo;
      /**
       * Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.
       * @group Props
       */
      paginatorDropdownScrollHeight = "200px";
      /**
       * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}
       * @group Props
       */
      currentPageReportTemplate = "{currentPage} of {totalPages}";
      /**
       * Whether to display current page report.
       * @group Props
       */
      showCurrentPageReport;
      /**
       * Whether to display a dropdown to navigate to any page.
       * @group Props
       */
      showJumpToPageDropdown;
      /**
       * Whether to display a input to navigate to any page.
       * @group Props
       */
      showJumpToPageInput;
      /**
       * When enabled, icons are displayed on paginator to go first and last page.
       * @group Props
       */
      showFirstLastIcon = true;
      /**
       * Whether to show page links.
       * @group Props
       */
      showPageLinks = true;
      /**
       * Sort order to use when an unsorted column gets sorted by user interaction.
       * @group Props
       */
      defaultSortOrder = 1;
      /**
       * Defines whether sorting works on single column or on multiple columns.
       * @group Props
       */
      sortMode = "single";
      /**
       * When true, resets paginator to first page after sorting. Available only when sortMode is set to single.
       * @group Props
       */
      resetPageOnSort = true;
      /**
       * Specifies the selection mode, valid values are "single" and "multiple".
       * @group Props
       */
      selectionMode;
      /**
       * When enabled with paginator and checkbox selection mode, the select all checkbox in the header will select all rows on the current page.
       * @group Props
       */
      selectionPageOnly;
      /**
       * Selected row with a context menu.
       * @group Props
       */
      contextMenuSelection;
      /**
       * Callback to invoke on context menu selection change.
       * @param {*} object - row data.
       * @group Emits
       */
      contextMenuSelectionChange = new EventEmitter();
      /**
       *  Defines the behavior of context menu selection, in "separate" mode context menu updates contextMenuSelection property whereas in joint mode selection property is used instead so that when row selection is enabled, both row selection and context menu selection use the same property.
       * @group Props
       */
      contextMenuSelectionMode = "separate";
      /**
       * A property to uniquely identify a record in data.
       * @group Props
       */
      dataKey;
      /**
       * Defines whether metaKey should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.
       * @group Props
       */
      metaKeySelection = false;
      /**
       * Defines if the row is selectable.
       * @group Props
       */
      rowSelectable;
      /**
       * Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity.
       * @group Props
       */
      rowTrackBy = (index, item) => item;
      /**
       * Defines if data is loaded and interacted with in lazy manner.
       * @group Props
       */
      lazy = false;
      /**
       * Whether to call lazy loading on initialization.
       * @group Props
       */
      lazyLoadOnInit = true;
      /**
       * Algorithm to define if a row is selected, valid values are "equals" that compares by reference and "deepEquals" that compares all fields.
       * @group Props
       */
      compareSelectionBy = "deepEquals";
      /**
       * Character to use as the csv separator.
       * @group Props
       */
      csvSeparator = ",";
      /**
       * Name of the exported file.
       * @group Props
       */
      exportFilename = "download";
      /**
       * An array of FilterMetadata objects to provide external filters.
       * @group Props
       */
      filters = {};
      /**
       * An array of fields as string to use in global filtering.
       * @group Props
       */
      globalFilterFields;
      /**
       * Delay in milliseconds before filtering the data.
       * @group Props
       */
      filterDelay = 300;
      /**
       * Locale to use in filtering. The default locale is the host environment's current locale.
       * @group Props
       */
      filterLocale;
      /**
       * Map instance to keep the expanded rows where key of the map is the data key of the row.
       * @group Props
       */
      expandedRowKeys = {};
      /**
       * Map instance to keep the rows being edited where key of the map is the data key of the row.
       * @group Props
       */
      editingRowKeys = {};
      /**
       * Whether multiple rows can be expanded at any time. Valid values are "multiple" and "single".
       * @group Props
       */
      rowExpandMode = "multiple";
      /**
       * Enables scrollable tables.
       * @group Props
       */
      scrollable;
      /**
       * Orientation of the scrolling, options are "vertical", "horizontal" and "both".
       * @group Props
       * @deprecated Property is obselete since v14.2.0.
       */
      scrollDirection = "vertical";
      /**
       * Type of the row grouping, valid values are "subheader" and "rowspan".
       * @group Props
       */
      rowGroupMode;
      /**
       * Height of the scroll viewport in fixed pixels or the "flex" keyword for a dynamic size.
       * @group Props
       */
      scrollHeight;
      /**
       * Whether the data should be loaded on demand during scroll.
       * @group Props
       */
      virtualScroll;
      /**
       * Height of a row to use in calculations of virtual scrolling.
       * @group Props
       */
      virtualScrollItemSize;
      /**
       * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.
       * @group Props
       */
      virtualScrollOptions;
      /**
       * Threshold in milliseconds to delay lazy loading during scrolling.
       * @group Props
       */
      virtualScrollDelay = 250;
      /**
       * Width of the frozen columns container.
       * @group Props
       */
      frozenWidth;
      /**
       * Defines if the table is responsive.
       * @group Props
       * @deprecated table is always responsive with scrollable behavior.
       */
      get responsive() {
        return this._responsive;
      }
      set responsive(val) {
        this._responsive = val;
        console.log("responsive property is deprecated as table is always responsive with scrollable behavior.");
      }
      _responsive;
      /**
       * Local ng-template varilable of a ContextMenu.
       * @group Props
       */
      contextMenu;
      /**
       * When enabled, columns can be resized using drag and drop.
       * @group Props
       */
      resizableColumns;
      /**
       * Defines whether the overall table width should change on column resize, valid values are "fit" and "expand".
       * @group Props
       */
      columnResizeMode = "fit";
      /**
       * When enabled, columns can be reordered using drag and drop.
       * @group Props
       */
      reorderableColumns;
      /**
       * Displays a loader to indicate data load is in progress.
       * @group Props
       */
      loading;
      /**
       * The icon to show while indicating data load is in progress.
       * @group Props
       */
      loadingIcon;
      /**
       * Whether to show the loading mask when loading property is true.
       * @group Props
       */
      showLoader = true;
      /**
       * Adds hover effect to rows without the need for selectionMode. Note that tr elements that can be hovered need to have "p-selectable-row" class for rowHover to work.
       * @group Props
       */
      rowHover;
      /**
       * Whether to use the default sorting or a custom one using sortFunction.
       * @group Props
       */
      customSort;
      /**
       * Whether to use the initial sort badge or not.
       * @group Props
       */
      showInitialSortBadge = true;
      /**
       * Whether the cell widths scale according to their content or not.  Deprecated:  Table layout is always "auto".
       * @group Props
       */
      autoLayout;
      /**
       * Export function.
       * @group Props
       */
      exportFunction;
      /**
       * Custom export header of the column to be exported as CSV.
       * @group Props
       */
      exportHeader;
      /**
       * Unique identifier of a stateful table to use in state storage.
       * @group Props
       */
      stateKey;
      /**
       * Defines where a stateful table keeps its state, valid values are "session" for sessionStorage and "local" for localStorage.
       * @group Props
       */
      stateStorage = "session";
      /**
       * Defines the editing mode, valid values are "cell" and "row".
       * @group Props
       */
      editMode = "cell";
      /**
       * Field name to use in row grouping.
       * @group Props
       */
      groupRowsBy;
      /**
       * Defines the size of the table.
       * @group Props
       */
      size;
      /**
       * Whether to show grid lines between cells.
       * @group Props
       */
      showGridlines;
      /**
       * Whether to display rows with alternating colors.
       * @group Props
       */
      stripedRows;
      /**
       * Order to sort when default row grouping is enabled.
       * @group Props
       */
      groupRowsByOrder = 1;
      /**
       * Defines the responsive mode, valid options are "stack" and "scroll".
       * @group Props
       */
      responsiveLayout = "scroll";
      /**
       * The breakpoint to define the maximum width boundary when using stack responsive layout.
       * @group Props
       */
      breakpoint = "960px";
      /**
       * Locale to be used in paginator formatting.
       * @group Props
       */
      paginatorLocale;
      /**
       * An array of objects to display.
       * @group Props
       */
      get value() {
        return this._value;
      }
      set value(val) {
        this._value = val;
      }
      /**
       * An array of objects to represent dynamic columns.
       * @group Props
       */
      get columns() {
        return this._columns;
      }
      set columns(cols) {
        this._columns = cols;
      }
      /**
       * Index of the first row to be displayed.
       * @group Props
       */
      get first() {
        return this._first;
      }
      set first(val) {
        this._first = val;
      }
      /**
       * Number of rows to display per page.
       * @group Props
       */
      get rows() {
        return this._rows;
      }
      set rows(val) {
        this._rows = val;
      }
      /**
       * Number of total records, defaults to length of value when not defined.
       * @group Props
       */
      get totalRecords() {
        return this._totalRecords;
      }
      set totalRecords(val) {
        this._totalRecords = val;
        this.tableService.onTotalRecordsChange(this._totalRecords);
      }
      /**
       * Name of the field to sort data by default.
       * @group Props
       */
      get sortField() {
        return this._sortField;
      }
      set sortField(val) {
        this._sortField = val;
      }
      /**
       * Order to sort when default sorting is enabled.
       * @group Props
       */
      get sortOrder() {
        return this._sortOrder;
      }
      set sortOrder(val) {
        this._sortOrder = val;
      }
      /**
       * An array of SortMeta objects to sort the data by default in multiple sort mode.
       * @group Props
       */
      get multiSortMeta() {
        return this._multiSortMeta;
      }
      set multiSortMeta(val) {
        this._multiSortMeta = val;
      }
      /**
       * Selected row in single mode or an array of values in multiple mode.
       * @group Props
       */
      get selection() {
        return this._selection;
      }
      set selection(val) {
        this._selection = val;
      }
      /**
       * Indicates the height of rows to be scrolled.
       * @group Props
       * @deprecated use virtualScrollItemSize property instead.
       */
      get virtualRowHeight() {
        return this._virtualRowHeight;
      }
      set virtualRowHeight(val) {
        this._virtualRowHeight = val;
        console.log("The virtualRowHeight property is deprecated.");
      }
      /**
       * Whether all data is selected.
       * @group Props
       */
      get selectAll() {
        return this._selection;
      }
      set selectAll(val) {
        this._selection = val;
      }
      /**
       * Emits when the all of the items selected or unselected.
       * @param {TableSelectAllChangeEvent} event - custom  all selection change event.
       * @group Emits
       */
      selectAllChange = new EventEmitter();
      /**
       * Callback to invoke on selection changed.
       * @param {any | null} value - selected data.
       * @group Emits
       */
      selectionChange = new EventEmitter();
      /**
       * Callback to invoke when a row is selected.
       * @param {TableRowSelectEvent} event - custom select event.
       * @group Emits
       */
      onRowSelect = new EventEmitter();
      /**
       * Callback to invoke when a row is unselected.
       * @param {TableRowUnSelectEvent} event - custom unselect event.
       * @group Emits
       */
      onRowUnselect = new EventEmitter();
      /**
       * Callback to invoke when pagination occurs.
       * @param {TablePageEvent} event - custom pagination event.
       * @group Emits
       */
      onPage = new EventEmitter();
      /**
       * Callback to invoke when a column gets sorted.
       * @param {Object} object - sort meta.
       * @group Emits
       */
      onSort = new EventEmitter();
      /**
       * Callback to invoke when data is filtered.
       * @param {TableFilterEvent} event - custom filtering event.
       * @group Emits
       */
      onFilter = new EventEmitter();
      /**
       * Callback to invoke when paging, sorting or filtering happens in lazy mode.
       * @param {TableLazyLoadEvent} event - custom lazy loading event.
       * @group Emits
       */
      onLazyLoad = new EventEmitter();
      /**
       * Callback to invoke when a row is expanded.
       * @param {TableRowExpandEvent} event - custom row expand event.
       * @group Emits
       */
      onRowExpand = new EventEmitter();
      /**
       * Callback to invoke when a row is collapsed.
       * @param {TableRowCollapseEvent} event - custom row collapse event.
       * @group Emits
       */
      onRowCollapse = new EventEmitter();
      /**
       * Callback to invoke when a row is selected with right click.
       * @param {TableContextMenuSelectEvent} event - custom context menu select event.
       * @group Emits
       */
      onContextMenuSelect = new EventEmitter();
      /**
       * Callback to invoke when a column is resized.
       * @param {TableColResizeEvent} event - custom column resize event.
       * @group Emits
       */
      onColResize = new EventEmitter();
      /**
       * Callback to invoke when a column is reordered.
       * @param {TableColumnReorderEvent} event - custom column reorder event.
       * @group Emits
       */
      onColReorder = new EventEmitter();
      /**
       * Callback to invoke when a row is reordered.
       * @param {TableRowReorderEvent} event - custom row reorder event.
       * @group Emits
       */
      onRowReorder = new EventEmitter();
      /**
       * Callback to invoke when a cell switches to edit mode.
       * @param {TableEditInitEvent} event - custom edit init event.
       * @group Emits
       */
      onEditInit = new EventEmitter();
      /**
       * Callback to invoke when cell edit is completed.
       * @param {TableEditCompleteEvent} event - custom edit complete event.
       * @group Emits
       */
      onEditComplete = new EventEmitter();
      /**
       * Callback to invoke when cell edit is cancelled with escape key.
       * @param {TableEditCancelEvent} event - custom edit cancel event.
       * @group Emits
       */
      onEditCancel = new EventEmitter();
      /**
       * Callback to invoke when state of header checkbox changes.
       * @param {TableHeaderCheckboxToggleEvent} event - custom header checkbox event.
       * @group Emits
       */
      onHeaderCheckboxToggle = new EventEmitter();
      /**
       * A function to implement custom sorting, refer to sorting section for details.
       * @param {any} any - sort meta.
       * @group Emits
       */
      sortFunction = new EventEmitter();
      /**
       * Callback to invoke on pagination.
       * @param {number} number - first element.
       * @group Emits
       */
      firstChange = new EventEmitter();
      /**
       * Callback to invoke on rows change.
       * @param {number} number - Row count.
       * @group Emits
       */
      rowsChange = new EventEmitter();
      /**
       * Callback to invoke table state is saved.
       * @param {TableState} object - table state.
       * @group Emits
       */
      onStateSave = new EventEmitter();
      /**
       * Callback to invoke table state is restored.
       * @param {TableState} object - table state.
       * @group Emits
       */
      onStateRestore = new EventEmitter();
      containerViewChild;
      resizeHelperViewChild;
      reorderIndicatorUpViewChild;
      reorderIndicatorDownViewChild;
      wrapperViewChild;
      tableViewChild;
      tableHeaderViewChild;
      tableFooterViewChild;
      scroller;
      _templates;
      _virtualRowHeight = 28;
      _value = [];
      _columns;
      _totalRecords = 0;
      _first = 0;
      _rows;
      filteredValue;
      // @todo will be refactored later
      _headerTemplate;
      headerTemplate;
      _headerGroupedTemplate;
      headerGroupedTemplate;
      _bodyTemplate;
      bodyTemplate;
      _loadingBodyTemplate;
      loadingBodyTemplate;
      _captionTemplate;
      captionTemplate;
      _footerTemplate;
      footerTemplate;
      _footerGroupedTemplate;
      footerGroupedTemplate;
      _summaryTemplate;
      summaryTemplate;
      _colGroupTemplate;
      colGroupTemplate;
      _expandedRowTemplate;
      expandedRowTemplate;
      _groupHeaderTemplate;
      groupHeaderTemplate;
      _groupFooterTemplate;
      groupFooterTemplate;
      _frozenExpandedRowTemplate;
      frozenExpandedRowTemplate;
      _frozenHeaderTemplate;
      frozenHeaderTemplate;
      _frozenBodyTemplate;
      frozenBodyTemplate;
      _frozenFooterTemplate;
      frozenFooterTemplate;
      _frozenColGroupTemplate;
      frozenColGroupTemplate;
      _emptyMessageTemplate;
      emptyMessageTemplate;
      _paginatorLeftTemplate;
      paginatorLeftTemplate;
      _paginatorRightTemplate;
      paginatorRightTemplate;
      _paginatorDropdownItemTemplate;
      paginatorDropdownItemTemplate;
      _loadingIconTemplate;
      loadingIconTemplate;
      _reorderIndicatorUpIconTemplate;
      reorderIndicatorUpIconTemplate;
      _reorderIndicatorDownIconTemplate;
      reorderIndicatorDownIconTemplate;
      _sortIconTemplate;
      sortIconTemplate;
      _checkboxIconTemplate;
      checkboxIconTemplate;
      _headerCheckboxIconTemplate;
      headerCheckboxIconTemplate;
      _paginatorDropdownIconTemplate;
      paginatorDropdownIconTemplate;
      _paginatorFirstPageLinkIconTemplate;
      paginatorFirstPageLinkIconTemplate;
      _paginatorLastPageLinkIconTemplate;
      paginatorLastPageLinkIconTemplate;
      _paginatorPreviousPageLinkIconTemplate;
      paginatorPreviousPageLinkIconTemplate;
      _paginatorNextPageLinkIconTemplate;
      paginatorNextPageLinkIconTemplate;
      selectionKeys = {};
      lastResizerHelperX;
      reorderIconWidth;
      reorderIconHeight;
      draggedColumn;
      draggedRowIndex;
      droppedRowIndex;
      rowDragging;
      dropPosition;
      editingCell;
      editingCellData;
      editingCellField;
      editingCellRowIndex;
      selfClick;
      documentEditListener;
      _multiSortMeta;
      _sortField;
      _sortOrder = 1;
      preventSelectionSetterPropagation;
      _selection;
      _selectAll = null;
      anchorRowIndex;
      rangeRowIndex;
      filterTimeout;
      initialized;
      rowTouched;
      restoringSort;
      restoringFilter;
      stateRestored;
      columnOrderStateRestored;
      columnWidthsState;
      tableWidthState;
      overlaySubscription;
      resizeColumnElement;
      columnResizing = false;
      rowGroupHeaderStyleObject = {};
      id = UniqueComponentId();
      styleElement;
      responsiveStyleElement;
      overlayService = inject(OverlayService);
      filterService = inject(FilterService);
      tableService = inject(TableService);
      zone = inject(NgZone);
      _componentStyle = inject(TableStyle);
      ngOnInit() {
        super.ngOnInit();
        if (this.lazy && this.lazyLoadOnInit) {
          if (!this.virtualScroll) {
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
          }
          if (this.restoringFilter) {
            this.restoringFilter = false;
          }
        }
        if (this.responsiveLayout === "stack") {
          this.createResponsiveStyle();
        }
        this.initialized = true;
      }
      ngAfterContentInit() {
        this._templates.forEach((item) => {
          switch (item.getType()) {
            case "caption":
              this.captionTemplate = item.template;
              break;
            case "header":
              this.headerTemplate = item.template;
              break;
            case "headergrouped":
              this.headerGroupedTemplate = item.template;
              break;
            case "body":
              this.bodyTemplate = item.template;
              break;
            case "loadingbody":
              this.loadingBodyTemplate = item.template;
              break;
            case "footer":
              this.footerTemplate = item.template;
              break;
            case "footergrouped":
              this.footerGroupedTemplate = item.template;
              break;
            case "summary":
              this.summaryTemplate = item.template;
              break;
            case "colgroup":
              this.colGroupTemplate = item.template;
              break;
            case "expandedrow":
              this.expandedRowTemplate = item.template;
              break;
            case "groupheader":
              this.groupHeaderTemplate = item.template;
              break;
            case "groupfooter":
              this.groupFooterTemplate = item.template;
              break;
            case "frozenheader":
              this.frozenHeaderTemplate = item.template;
              break;
            case "frozenbody":
              this.frozenBodyTemplate = item.template;
              break;
            case "frozenfooter":
              this.frozenFooterTemplate = item.template;
              break;
            case "frozencolgroup":
              this.frozenColGroupTemplate = item.template;
              break;
            case "frozenexpandedrow":
              this.frozenExpandedRowTemplate = item.template;
              break;
            case "emptymessage":
              this.emptyMessageTemplate = item.template;
              break;
            case "paginatorleft":
              this.paginatorLeftTemplate = item.template;
              break;
            case "paginatorright":
              this.paginatorRightTemplate = item.template;
              break;
            case "paginatordropdownicon":
              this.paginatorDropdownIconTemplate = item.template;
              break;
            case "paginatordropdownitem":
              this.paginatorDropdownItemTemplate = item.template;
              break;
            case "paginatorfirstpagelinkicon":
              this.paginatorFirstPageLinkIconTemplate = item.template;
              break;
            case "paginatorlastpagelinkicon":
              this.paginatorLastPageLinkIconTemplate = item.template;
              break;
            case "paginatorpreviouspagelinkicon":
              this.paginatorPreviousPageLinkIconTemplate = item.template;
              break;
            case "paginatornextpagelinkicon":
              this.paginatorNextPageLinkIconTemplate = item.template;
              break;
            case "loadingicon":
              this.loadingIconTemplate = item.template;
              break;
            case "reorderindicatorupicon":
              this.reorderIndicatorUpIconTemplate = item.template;
              break;
            case "reorderindicatordownicon":
              this.reorderIndicatorDownIconTemplate = item.template;
              break;
            case "sorticon":
              this.sortIconTemplate = item.template;
              break;
            case "checkboxicon":
              this.checkboxIconTemplate = item.template;
              break;
            case "headercheckboxicon":
              this.headerCheckboxIconTemplate = item.template;
              break;
          }
        });
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        if (isPlatformBrowser(this.platformId)) {
          if (this.isStateful() && this.resizableColumns) {
            this.restoreColumnWidths();
          }
        }
      }
      ngOnChanges(simpleChange) {
        super.ngOnChanges(simpleChange);
        if (simpleChange.value) {
          if (this.isStateful() && !this.stateRestored && isPlatformBrowser(this.platformId)) {
            this.restoreState();
          }
          this._value = simpleChange.value.currentValue;
          if (!this.lazy) {
            this.totalRecords = this._value ? this._value.length : 0;
            if (this.sortMode == "single" && (this.sortField || this.groupRowsBy)) this.sortSingle();
            else if (this.sortMode == "multiple" && (this.multiSortMeta || this.groupRowsBy)) this.sortMultiple();
            else if (this.hasFilter())
              this._filter();
          }
          this.tableService.onValueChange(simpleChange.value.currentValue);
        }
        if (simpleChange.columns) {
          if (!this.isStateful()) {
            this._columns = simpleChange.columns.currentValue;
            this.tableService.onColumnsChange(simpleChange.columns.currentValue);
          }
          if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored) {
            this.restoreColumnOrder();
            this.tableService.onColumnsChange(this._columns);
          }
        }
        if (simpleChange.sortField) {
          this._sortField = simpleChange.sortField.currentValue;
          if (!this.lazy || this.initialized) {
            if (this.sortMode === "single") {
              this.sortSingle();
            }
          }
        }
        if (simpleChange.groupRowsBy) {
          if (!this.lazy || this.initialized) {
            if (this.sortMode === "single") {
              this.sortSingle();
            }
          }
        }
        if (simpleChange.sortOrder) {
          this._sortOrder = simpleChange.sortOrder.currentValue;
          if (!this.lazy || this.initialized) {
            if (this.sortMode === "single") {
              this.sortSingle();
            }
          }
        }
        if (simpleChange.groupRowsByOrder) {
          if (!this.lazy || this.initialized) {
            if (this.sortMode === "single") {
              this.sortSingle();
            }
          }
        }
        if (simpleChange.multiSortMeta) {
          this._multiSortMeta = simpleChange.multiSortMeta.currentValue;
          if (this.sortMode === "multiple" && (this.initialized || !this.lazy && !this.virtualScroll)) {
            this.sortMultiple();
          }
        }
        if (simpleChange.selection) {
          this._selection = simpleChange.selection.currentValue;
          if (!this.preventSelectionSetterPropagation) {
            this.updateSelectionKeys();
            this.tableService.onSelectionChange();
          }
          this.preventSelectionSetterPropagation = false;
        }
        if (simpleChange.selectAll) {
          this._selectAll = simpleChange.selectAll.currentValue;
          if (!this.preventSelectionSetterPropagation) {
            this.updateSelectionKeys();
            this.tableService.onSelectionChange();
            if (this.isStateful()) {
              this.saveState();
            }
          }
          this.preventSelectionSetterPropagation = false;
        }
      }
      get processedData() {
        return this.filteredValue || this.value || [];
      }
      _initialColWidths;
      dataToRender(data) {
        const _data = data || this.processedData;
        if (_data && this.paginator) {
          const first = this.lazy ? 0 : this.first;
          return _data.slice(first, first + this.rows);
        }
        return _data;
      }
      updateSelectionKeys() {
        if (this.dataKey && this._selection) {
          this.selectionKeys = {};
          if (Array.isArray(this._selection)) {
            for (let data of this._selection) {
              this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;
            }
          } else {
            this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;
          }
        }
      }
      onPageChange(event2) {
        this.first = event2.first;
        this.rows = event2.rows;
        this.onPage.emit({
          first: this.first,
          rows: this.rows
        });
        if (this.lazy) {
          this.onLazyLoad.emit(this.createLazyLoadMetadata());
        }
        this.firstChange.emit(this.first);
        this.rowsChange.emit(this.rows);
        this.tableService.onValueChange(this.value);
        if (this.isStateful()) {
          this.saveState();
        }
        this.anchorRowIndex = null;
        if (this.scrollable) {
          this.resetScrollTop();
        }
      }
      sort(event2) {
        let originalEvent = event2.originalEvent;
        if (this.sortMode === "single") {
          this._sortOrder = this.sortField === event2.field ? this.sortOrder * -1 : this.defaultSortOrder;
          this._sortField = event2.field;
          if (this.resetPageOnSort) {
            this._first = 0;
            this.firstChange.emit(this._first);
            if (this.scrollable) {
              this.resetScrollTop();
            }
          }
          this.sortSingle();
        }
        if (this.sortMode === "multiple") {
          let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;
          let sortMeta = this.getSortMeta(event2.field);
          if (sortMeta) {
            if (!metaKey) {
              this._multiSortMeta = [{
                field: event2.field,
                order: sortMeta.order * -1
              }];
              if (this.resetPageOnSort) {
                this._first = 0;
                this.firstChange.emit(this._first);
                if (this.scrollable) {
                  this.resetScrollTop();
                }
              }
            } else {
              sortMeta.order = sortMeta.order * -1;
            }
          } else {
            if (!metaKey || !this.multiSortMeta) {
              this._multiSortMeta = [];
              if (this.resetPageOnSort) {
                this._first = 0;
                this.firstChange.emit(this._first);
              }
            }
            this._multiSortMeta.push({
              field: event2.field,
              order: this.defaultSortOrder
            });
          }
          this.sortMultiple();
        }
        if (this.isStateful()) {
          this.saveState();
        }
        this.anchorRowIndex = null;
      }
      sortSingle() {
        let field = this.sortField || this.groupRowsBy;
        let order = this.sortField ? this.sortOrder : this.groupRowsByOrder;
        if (this.groupRowsBy && this.sortField && this.groupRowsBy !== this.sortField) {
          this._multiSortMeta = [this.getGroupRowsMeta(), {
            field: this.sortField,
            order: this.sortOrder
          }];
          this.sortMultiple();
          return;
        }
        if (field && order) {
          if (this.restoringSort) {
            this.restoringSort = false;
          }
          if (this.lazy) {
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
          } else if (this.value) {
            if (this.customSort) {
              this.sortFunction.emit({
                data: this.value,
                mode: this.sortMode,
                field,
                order
              });
            } else {
              this.value.sort((data1, data2) => {
                let value1 = ObjectUtils.resolveFieldData(data1, field);
                let value2 = ObjectUtils.resolveFieldData(data2, field);
                let result = null;
                if (value1 == null && value2 != null) result = -1;
                else if (value1 != null && value2 == null) result = 1;
                else if (value1 == null && value2 == null) result = 0;
                else if (typeof value1 === "string" && typeof value2 === "string") result = value1.localeCompare(value2);
                else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;
                return order * result;
              });
              this._value = [...this.value];
            }
            if (this.hasFilter()) {
              this._filter();
            }
          }
          let sortMeta = {
            field,
            order
          };
          this.onSort.emit(sortMeta);
          this.tableService.onSort(sortMeta);
        }
      }
      sortMultiple() {
        if (this.groupRowsBy) {
          if (!this._multiSortMeta) this._multiSortMeta = [this.getGroupRowsMeta()];
          else if (this.multiSortMeta[0].field !== this.groupRowsBy) this._multiSortMeta = [this.getGroupRowsMeta(), ...this._multiSortMeta];
        }
        if (this.multiSortMeta) {
          if (this.lazy) {
            this.onLazyLoad.emit(this.createLazyLoadMetadata());
          } else if (this.value) {
            if (this.customSort) {
              this.sortFunction.emit({
                data: this.value,
                mode: this.sortMode,
                multiSortMeta: this.multiSortMeta
              });
            } else {
              this.value.sort((data1, data2) => {
                return this.multisortField(data1, data2, this.multiSortMeta, 0);
              });
              this._value = [...this.value];
            }
            if (this.hasFilter()) {
              this._filter();
            }
          }
          this.onSort.emit({
            multisortmeta: this.multiSortMeta
          });
          this.tableService.onSort(this.multiSortMeta);
        }
      }
      multisortField(data1, data2, multiSortMeta, index) {
        const value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);
        const value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);
        if (ObjectUtils.compare(value1, value2, this.filterLocale) === 0) {
          return multiSortMeta.length - 1 > index ? this.multisortField(data1, data2, multiSortMeta, index + 1) : 0;
        }
        return this.compareValuesOnSort(value1, value2, multiSortMeta[index].order);
      }
      compareValuesOnSort(value1, value2, order) {
        return ObjectUtils.sort(value1, value2, order, this.filterLocale, this.sortOrder);
      }
      getSortMeta(field) {
        if (this.multiSortMeta && this.multiSortMeta.length) {
          for (let i = 0; i < this.multiSortMeta.length; i++) {
            if (this.multiSortMeta[i].field === field) {
              return this.multiSortMeta[i];
            }
          }
        }
        return null;
      }
      isSorted(field) {
        if (this.sortMode === "single") {
          return this.sortField && this.sortField === field;
        } else if (this.sortMode === "multiple") {
          let sorted = false;
          if (this.multiSortMeta) {
            for (let i = 0; i < this.multiSortMeta.length; i++) {
              if (this.multiSortMeta[i].field == field) {
                sorted = true;
                break;
              }
            }
          }
          return sorted;
        }
      }
      handleRowClick(event2) {
        let target = event2.originalEvent.target;
        let targetNode = target.nodeName;
        let parentNode = target.parentElement && target.parentElement.nodeName;
        if (targetNode == "INPUT" || targetNode == "BUTTON" || targetNode == "A" || parentNode == "INPUT" || parentNode == "BUTTON" || parentNode == "A" || DomHandler.hasClass(event2.originalEvent.target, "p-clickable")) {
          return;
        }
        if (this.selectionMode) {
          let rowData = event2.rowData;
          let rowIndex = event2.rowIndex;
          this.preventSelectionSetterPropagation = true;
          if (this.isMultipleSelectionMode() && event2.originalEvent.shiftKey && this.anchorRowIndex != null) {
            DomHandler.clearSelection();
            if (this.rangeRowIndex != null) {
              this.clearSelectionRange(event2.originalEvent);
            }
            this.rangeRowIndex = rowIndex;
            this.selectRange(event2.originalEvent, rowIndex);
          } else {
            let selected = this.isSelected(rowData);
            if (!selected && !this.isRowSelectable(rowData, rowIndex)) {
              return;
            }
            let metaSelection = this.rowTouched ? false : this.metaKeySelection;
            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;
            this.anchorRowIndex = rowIndex;
            this.rangeRowIndex = rowIndex;
            if (metaSelection) {
              let metaKey = event2.originalEvent.metaKey || event2.originalEvent.ctrlKey;
              if (selected && metaKey) {
                if (this.isSingleSelectionMode()) {
                  this._selection = null;
                  this.selectionKeys = {};
                  this.selectionChange.emit(null);
                } else {
                  let selectionIndex = this.findIndexInSelection(rowData);
                  this._selection = this.selection.filter((val, i) => i != selectionIndex);
                  this.selectionChange.emit(this.selection);
                  if (dataKeyValue) {
                    delete this.selectionKeys[dataKeyValue];
                  }
                }
                this.onRowUnselect.emit({
                  originalEvent: event2.originalEvent,
                  data: rowData,
                  type: "row"
                });
              } else {
                if (this.isSingleSelectionMode()) {
                  this._selection = rowData;
                  this.selectionChange.emit(rowData);
                  if (dataKeyValue) {
                    this.selectionKeys = {};
                    this.selectionKeys[dataKeyValue] = 1;
                  }
                } else if (this.isMultipleSelectionMode()) {
                  if (metaKey) {
                    this._selection = this.selection || [];
                  } else {
                    this._selection = [];
                    this.selectionKeys = {};
                  }
                  this._selection = [...this.selection, rowData];
                  this.selectionChange.emit(this.selection);
                  if (dataKeyValue) {
                    this.selectionKeys[dataKeyValue] = 1;
                  }
                }
                this.onRowSelect.emit({
                  originalEvent: event2.originalEvent,
                  data: rowData,
                  type: "row",
                  index: rowIndex
                });
              }
            } else {
              if (this.selectionMode === "single") {
                if (selected) {
                  this._selection = null;
                  this.selectionKeys = {};
                  this.selectionChange.emit(this.selection);
                  this.onRowUnselect.emit({
                    originalEvent: event2.originalEvent,
                    data: rowData,
                    type: "row",
                    index: rowIndex
                  });
                } else {
                  this._selection = rowData;
                  this.selectionChange.emit(this.selection);
                  this.onRowSelect.emit({
                    originalEvent: event2.originalEvent,
                    data: rowData,
                    type: "row",
                    index: rowIndex
                  });
                  if (dataKeyValue) {
                    this.selectionKeys = {};
                    this.selectionKeys[dataKeyValue] = 1;
                  }
                }
              } else if (this.selectionMode === "multiple") {
                if (selected) {
                  let selectionIndex = this.findIndexInSelection(rowData);
                  this._selection = this.selection.filter((val, i) => i != selectionIndex);
                  this.selectionChange.emit(this.selection);
                  this.onRowUnselect.emit({
                    originalEvent: event2.originalEvent,
                    data: rowData,
                    type: "row",
                    index: rowIndex
                  });
                  if (dataKeyValue) {
                    delete this.selectionKeys[dataKeyValue];
                  }
                } else {
                  this._selection = this.selection ? [...this.selection, rowData] : [rowData];
                  this.selectionChange.emit(this.selection);
                  this.onRowSelect.emit({
                    originalEvent: event2.originalEvent,
                    data: rowData,
                    type: "row",
                    index: rowIndex
                  });
                  if (dataKeyValue) {
                    this.selectionKeys[dataKeyValue] = 1;
                  }
                }
              }
            }
          }
          this.tableService.onSelectionChange();
          if (this.isStateful()) {
            this.saveState();
          }
        }
        this.rowTouched = false;
      }
      handleRowTouchEnd(event2) {
        this.rowTouched = true;
      }
      handleRowRightClick(event2) {
        if (this.contextMenu) {
          const rowData = event2.rowData;
          const rowIndex = event2.rowIndex;
          if (this.contextMenuSelectionMode === "separate") {
            this.contextMenuSelection = rowData;
            this.contextMenuSelectionChange.emit(rowData);
            this.onContextMenuSelect.emit({
              originalEvent: event2.originalEvent,
              data: rowData,
              index: event2.rowIndex
            });
            this.contextMenu.show(event2.originalEvent);
            this.tableService.onContextMenu(rowData);
          } else if (this.contextMenuSelectionMode === "joint") {
            this.preventSelectionSetterPropagation = true;
            let selected = this.isSelected(rowData);
            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;
            if (!selected) {
              if (!this.isRowSelectable(rowData, rowIndex)) {
                return;
              }
              if (this.isSingleSelectionMode()) {
                this.selection = rowData;
                this.selectionChange.emit(rowData);
                if (dataKeyValue) {
                  this.selectionKeys = {};
                  this.selectionKeys[dataKeyValue] = 1;
                }
              } else if (this.isMultipleSelectionMode()) {
                this._selection = this.selection ? [...this.selection, rowData] : [rowData];
                this.selectionChange.emit(this.selection);
                if (dataKeyValue) {
                  this.selectionKeys[dataKeyValue] = 1;
                }
              }
            }
            this.tableService.onSelectionChange();
            this.contextMenu.show(event2.originalEvent);
            this.onContextMenuSelect.emit({
              originalEvent: event2,
              data: rowData,
              index: event2.rowIndex
            });
          }
        }
      }
      selectRange(event2, rowIndex, isMetaKeySelection) {
        let rangeStart, rangeEnd;
        if (this.anchorRowIndex > rowIndex) {
          rangeStart = rowIndex;
          rangeEnd = this.anchorRowIndex;
        } else if (this.anchorRowIndex < rowIndex) {
          rangeStart = this.anchorRowIndex;
          rangeEnd = rowIndex;
        } else {
          rangeStart = rowIndex;
          rangeEnd = rowIndex;
        }
        if (this.lazy && this.paginator) {
          rangeStart -= this.first;
          rangeEnd -= this.first;
        }
        let rangeRowsData = [];
        for (let i = rangeStart; i <= rangeEnd; i++) {
          let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];
          if (!this.isSelected(rangeRowData) && !isMetaKeySelection) {
            if (!this.isRowSelectable(rangeRowData, rowIndex)) {
              continue;
            }
            rangeRowsData.push(rangeRowData);
            this._selection = [...this.selection, rangeRowData];
            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;
            if (dataKeyValue) {
              this.selectionKeys[dataKeyValue] = 1;
            }
          }
        }
        this.selectionChange.emit(this.selection);
        this.onRowSelect.emit({
          originalEvent: event2,
          data: rangeRowsData,
          type: "row"
        });
      }
      clearSelectionRange(event2) {
        let rangeStart, rangeEnd;
        let rangeRowIndex = this.rangeRowIndex;
        let anchorRowIndex = this.anchorRowIndex;
        if (rangeRowIndex > anchorRowIndex) {
          rangeStart = this.anchorRowIndex;
          rangeEnd = this.rangeRowIndex;
        } else if (rangeRowIndex < anchorRowIndex) {
          rangeStart = this.rangeRowIndex;
          rangeEnd = this.anchorRowIndex;
        } else {
          rangeStart = this.rangeRowIndex;
          rangeEnd = this.rangeRowIndex;
        }
        for (let i = rangeStart; i <= rangeEnd; i++) {
          let rangeRowData = this.value[i];
          let selectionIndex = this.findIndexInSelection(rangeRowData);
          this._selection = this.selection.filter((val, i2) => i2 != selectionIndex);
          let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;
          if (dataKeyValue) {
            delete this.selectionKeys[dataKeyValue];
          }
          this.onRowUnselect.emit({
            originalEvent: event2,
            data: rangeRowData,
            type: "row"
          });
        }
      }
      isSelected(rowData) {
        if (rowData && this.selection) {
          if (this.dataKey) {
            return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== void 0;
          } else {
            if (Array.isArray(this.selection)) return this.findIndexInSelection(rowData) > -1;
            else return this.equals(rowData, this.selection);
          }
        }
        return false;
      }
      findIndexInSelection(rowData) {
        let index = -1;
        if (this.selection && this.selection.length) {
          for (let i = 0; i < this.selection.length; i++) {
            if (this.equals(rowData, this.selection[i])) {
              index = i;
              break;
            }
          }
        }
        return index;
      }
      isRowSelectable(data, index) {
        if (this.rowSelectable && !this.rowSelectable({
          data,
          index
        })) {
          return false;
        }
        return true;
      }
      toggleRowWithRadio(event2, rowData) {
        this.preventSelectionSetterPropagation = true;
        if (this.selection != rowData) {
          if (!this.isRowSelectable(rowData, event2.rowIndex)) {
            return;
          }
          this._selection = rowData;
          this.selectionChange.emit(this.selection);
          this.onRowSelect.emit({
            originalEvent: event2.originalEvent,
            index: event2.rowIndex,
            data: rowData,
            type: "radiobutton"
          });
          if (this.dataKey) {
            this.selectionKeys = {};
            this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;
          }
        } else {
          this._selection = null;
          this.selectionChange.emit(this.selection);
          this.onRowUnselect.emit({
            originalEvent: event2.originalEvent,
            index: event2.rowIndex,
            data: rowData,
            type: "radiobutton"
          });
        }
        this.tableService.onSelectionChange();
        if (this.isStateful()) {
          this.saveState();
        }
      }
      toggleRowWithCheckbox(event2, rowData) {
        this.selection = this.selection || [];
        let selected = this.isSelected(rowData);
        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;
        this.preventSelectionSetterPropagation = true;
        if (selected) {
          let selectionIndex = this.findIndexInSelection(rowData);
          this._selection = this.selection.filter((val, i) => i != selectionIndex);
          this.selectionChange.emit(this.selection);
          this.onRowUnselect.emit({
            originalEvent: event2.originalEvent,
            index: event2.rowIndex,
            data: rowData,
            type: "checkbox"
          });
          if (dataKeyValue) {
            delete this.selectionKeys[dataKeyValue];
          }
        } else {
          if (!this.isRowSelectable(rowData, event2.rowIndex)) {
            return;
          }
          this._selection = this.selection ? [...this.selection, rowData] : [rowData];
          this.selectionChange.emit(this.selection);
          this.onRowSelect.emit({
            originalEvent: event2.originalEvent,
            index: event2.rowIndex,
            data: rowData,
            type: "checkbox"
          });
          if (dataKeyValue) {
            this.selectionKeys[dataKeyValue] = 1;
          }
        }
        this.tableService.onSelectionChange();
        if (this.isStateful()) {
          this.saveState();
        }
      }
      toggleRowsWithCheckbox({
        originalEvent
      }, check) {
        if (this._selectAll !== null) {
          this.selectAllChange.emit({
            originalEvent,
            checked: check
          });
        } else {
          const data = this.selectionPageOnly ? this.dataToRender(this.processedData) : this.processedData;
          let selection = this.selectionPageOnly && this._selection ? this._selection.filter((s) => !data.some((d) => this.equals(s, d))) : [];
          if (check) {
            selection = this.frozenValue ? [...selection, ...this.frozenValue, ...data] : [...selection, ...data];
            selection = this.rowSelectable ? selection.filter((data2, index) => this.rowSelectable({
              data: data2,
              index
            })) : selection;
          }
          this._selection = selection;
          this.preventSelectionSetterPropagation = true;
          this.updateSelectionKeys();
          this.selectionChange.emit(this._selection);
          this.tableService.onSelectionChange();
          this.onHeaderCheckboxToggle.emit({
            originalEvent,
            checked: check
          });
          if (this.isStateful()) {
            this.saveState();
          }
        }
      }
      equals(data1, data2) {
        return this.compareSelectionBy === "equals" ? data1 === data2 : ObjectUtils.equals(data1, data2, this.dataKey);
      }
      /* Legacy Filtering for custom elements */
      filter(value, field, matchMode) {
        if (this.filterTimeout) {
          clearTimeout(this.filterTimeout);
        }
        if (!this.isFilterBlank(value)) {
          this.filters[field] = {
            value,
            matchMode
          };
        } else if (this.filters[field]) {
          delete this.filters[field];
        }
        this.filterTimeout = setTimeout(() => {
          this._filter();
          this.filterTimeout = null;
        }, this.filterDelay);
        this.anchorRowIndex = null;
      }
      filterGlobal(value, matchMode) {
        this.filter(value, "global", matchMode);
      }
      isFilterBlank(filter) {
        if (filter !== null && filter !== void 0) {
          if (typeof filter === "string" && filter.trim().length == 0 || Array.isArray(filter) && filter.length == 0) return true;
          else return false;
        }
        return true;
      }
      _filter() {
        if (!this.restoringFilter) {
          this.first = 0;
          this.firstChange.emit(this.first);
        }
        if (this.lazy) {
          this.onLazyLoad.emit(this.createLazyLoadMetadata());
        } else {
          if (!this.value) {
            return;
          }
          if (!this.hasFilter()) {
            this.filteredValue = null;
            if (this.paginator) {
              this.totalRecords = this.value ? this.value.length : 0;
            }
          } else {
            let globalFilterFieldsArray;
            if (this.filters["global"]) {
              if (!this.columns && !this.globalFilterFields) throw new Error("Global filtering requires dynamic columns or globalFilterFields to be defined.");
              else globalFilterFieldsArray = this.globalFilterFields || this.columns;
            }
            this.filteredValue = [];
            for (let i = 0; i < this.value.length; i++) {
              let localMatch = true;
              let globalMatch = false;
              let localFiltered = false;
              for (let prop in this.filters) {
                if (this.filters.hasOwnProperty(prop) && prop !== "global") {
                  localFiltered = true;
                  let filterField = prop;
                  let filterMeta = this.filters[filterField];
                  if (Array.isArray(filterMeta)) {
                    for (let meta of filterMeta) {
                      localMatch = this.executeLocalFilter(filterField, this.value[i], meta);
                      if (meta.operator === FilterOperator.OR && localMatch || meta.operator === FilterOperator.AND && !localMatch) {
                        break;
                      }
                    }
                  } else {
                    localMatch = this.executeLocalFilter(filterField, this.value[i], filterMeta);
                  }
                  if (!localMatch) {
                    break;
                  }
                }
              }
              if (this.filters["global"] && !globalMatch && globalFilterFieldsArray) {
                for (let j = 0; j < globalFilterFieldsArray.length; j++) {
                  let globalFilterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];
                  globalMatch = this.filterService.filters[this.filters["global"].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters["global"].value, this.filterLocale);
                  if (globalMatch) {
                    break;
                  }
                }
              }
              let matches;
              if (this.filters["global"]) {
                matches = localFiltered ? localFiltered && localMatch && globalMatch : globalMatch;
              } else {
                matches = localFiltered && localMatch;
              }
              if (matches) {
                this.filteredValue.push(this.value[i]);
              }
            }
            if (this.filteredValue.length === this.value.length) {
              this.filteredValue = null;
            }
            if (this.paginator) {
              this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;
            }
          }
        }
        this.onFilter.emit({
          filters: this.filters,
          filteredValue: this.filteredValue || this.value
        });
        this.tableService.onValueChange(this.value);
        if (this.isStateful() && !this.restoringFilter) {
          this.saveState();
        }
        if (this.restoringFilter) {
          this.restoringFilter = false;
        }
        this.cd.markForCheck();
        if (this.scrollable) {
          this.resetScrollTop();
        }
      }
      executeLocalFilter(field, rowData, filterMeta) {
        let filterValue = filterMeta.value;
        let filterMatchMode = filterMeta.matchMode || FilterMatchMode.STARTS_WITH;
        let dataFieldValue = ObjectUtils.resolveFieldData(rowData, field);
        let filterConstraint = this.filterService.filters[filterMatchMode];
        return filterConstraint(dataFieldValue, filterValue, this.filterLocale);
      }
      hasFilter() {
        let empty = true;
        for (let prop in this.filters) {
          if (this.filters.hasOwnProperty(prop)) {
            empty = false;
            break;
          }
        }
        return !empty;
      }
      createLazyLoadMetadata() {
        return {
          first: this.first,
          rows: this.rows,
          sortField: this.sortField,
          sortOrder: this.sortOrder,
          filters: this.filters,
          globalFilter: this.filters && this.filters["global"] ? this.filters["global"].value : null,
          multiSortMeta: this.multiSortMeta,
          forceUpdate: () => this.cd.detectChanges()
        };
      }
      clear() {
        this._sortField = null;
        this._sortOrder = this.defaultSortOrder;
        this._multiSortMeta = null;
        this.tableService.onSort(null);
        this.clearFilterValues();
        this.filteredValue = null;
        this.first = 0;
        this.firstChange.emit(this.first);
        if (this.lazy) {
          this.onLazyLoad.emit(this.createLazyLoadMetadata());
        } else {
          this.totalRecords = this._value ? this._value.length : 0;
        }
      }
      clearFilterValues() {
        for (const [, filterMetadata] of Object.entries(this.filters)) {
          if (Array.isArray(filterMetadata)) {
            for (let filter of filterMetadata) {
              filter.value = null;
            }
          } else if (filterMetadata) {
            filterMetadata.value = null;
          }
        }
      }
      reset() {
        this.clear();
      }
      getExportHeader(column) {
        return column[this.exportHeader] || column.header || column.field;
      }
      /**
       * Data export method.
       * @param {ExportCSVOptions} object - Export options.
       * @group Method
       */
      exportCSV(options) {
        let data;
        let csv = "";
        let columns = this.columns;
        if (options && options.selectionOnly) {
          data = this.selection || [];
        } else if (options && options.allValues) {
          data = this.value || [];
        } else {
          data = this.filteredValue || this.value;
          if (this.frozenValue) {
            data = data ? [...this.frozenValue, ...data] : this.frozenValue;
          }
        }
        const exportableColumns = columns.filter((column) => column.exportable !== false && column.field);
        csv += exportableColumns.map((column) => '"' + this.getExportHeader(column) + '"').join(this.csvSeparator);
        const body = data.map((record) => exportableColumns.map((column) => {
          let cellData = ObjectUtils.resolveFieldData(record, column.field);
          if (cellData != null) {
            if (this.exportFunction) {
              cellData = this.exportFunction({
                data: cellData,
                field: column.field
              });
            } else cellData = String(cellData).replace(/"/g, '""');
          } else cellData = "";
          return '"' + cellData + '"';
        }).join(this.csvSeparator)).join("\n");
        if (body.length) {
          csv += "\n" + body;
        }
        let blob = new Blob([new Uint8Array([239, 187, 191]), csv], {
          type: "text/csv;charset=utf-8;"
        });
        let link = this.renderer.createElement("a");
        link.style.display = "none";
        this.renderer.appendChild(this.document.body, link);
        if (link.download !== void 0) {
          link.setAttribute("href", URL.createObjectURL(blob));
          link.setAttribute("download", this.exportFilename + ".csv");
          link.click();
        } else {
          csv = "data:text/csv;charset=utf-8," + csv;
          this.document.defaultView.open(encodeURI(csv));
        }
        this.renderer.removeChild(this.document.body, link);
      }
      onLazyItemLoad(event2) {
        this.onLazyLoad.emit(__spreadProps(__spreadValues(__spreadValues({}, this.createLazyLoadMetadata()), event2), {
          rows: event2.last - event2.first
        }));
      }
      /**
       * Resets scroll to top.
       * @group Method
       */
      resetScrollTop() {
        if (this.virtualScroll) this.scrollToVirtualIndex(0);
        else this.scrollTo({
          top: 0
        });
      }
      /**
       * Scrolls to given index when using virtual scroll.
       * @param {number} index - index of the element.
       * @group Method
       */
      scrollToVirtualIndex(index) {
        this.scroller && this.scroller.scrollToIndex(index);
      }
      /**
       * Scrolls to given index.
       * @param {ScrollToOptions} options - scroll options.
       * @group Method
       */
      scrollTo(options) {
        if (this.virtualScroll) {
          this.scroller?.scrollTo(options);
        } else if (this.wrapperViewChild && this.wrapperViewChild.nativeElement) {
          if (this.wrapperViewChild.nativeElement.scrollTo) {
            this.wrapperViewChild.nativeElement.scrollTo(options);
          } else {
            this.wrapperViewChild.nativeElement.scrollLeft = options.left;
            this.wrapperViewChild.nativeElement.scrollTop = options.top;
          }
        }
      }
      updateEditingCell(cell, data, field, index) {
        this.editingCell = cell;
        this.editingCellData = data;
        this.editingCellField = field;
        this.editingCellRowIndex = index;
        this.bindDocumentEditListener();
      }
      isEditingCellValid() {
        return this.editingCell && DomHandler.find(this.editingCell, ".ng-invalid.ng-dirty").length === 0;
      }
      bindDocumentEditListener() {
        if (!this.documentEditListener) {
          this.documentEditListener = this.renderer.listen(this.document, "click", (event2) => {
            if (this.editingCell && !this.selfClick && this.isEditingCellValid()) {
              DomHandler.removeClass(this.editingCell, "p-cell-editing");
              this.editingCell = null;
              this.onEditComplete.emit({
                field: this.editingCellField,
                data: this.editingCellData,
                originalEvent: event2,
                index: this.editingCellRowIndex
              });
              this.editingCellField = null;
              this.editingCellData = null;
              this.editingCellRowIndex = null;
              this.unbindDocumentEditListener();
              this.cd.markForCheck();
              if (this.overlaySubscription) {
                this.overlaySubscription.unsubscribe();
              }
            }
            this.selfClick = false;
          });
        }
      }
      unbindDocumentEditListener() {
        if (this.documentEditListener) {
          this.documentEditListener();
          this.documentEditListener = null;
        }
      }
      initRowEdit(rowData) {
        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));
        this.editingRowKeys[dataKeyValue] = true;
      }
      saveRowEdit(rowData, rowElement) {
        if (DomHandler.find(rowElement, ".ng-invalid.ng-dirty").length === 0) {
          let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));
          delete this.editingRowKeys[dataKeyValue];
        }
      }
      cancelRowEdit(rowData) {
        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));
        delete this.editingRowKeys[dataKeyValue];
      }
      toggleRow(rowData, event2) {
        if (!this.dataKey && !this.groupRowsBy) {
          throw new Error("dataKey or groupRowsBy must be defined to use row expansion");
        }
        let dataKeyValue = this.groupRowsBy ? String(ObjectUtils.resolveFieldData(rowData, this.groupRowsBy)) : String(ObjectUtils.resolveFieldData(rowData, this.dataKey));
        if (this.expandedRowKeys[dataKeyValue] != null) {
          delete this.expandedRowKeys[dataKeyValue];
          this.onRowCollapse.emit({
            originalEvent: event2,
            data: rowData
          });
        } else {
          if (this.rowExpandMode === "single") {
            this.expandedRowKeys = {};
          }
          this.expandedRowKeys[dataKeyValue] = true;
          this.onRowExpand.emit({
            originalEvent: event2,
            data: rowData
          });
        }
        if (event2) {
          event2.preventDefault();
        }
        if (this.isStateful()) {
          this.saveState();
        }
      }
      isRowExpanded(rowData) {
        return this.groupRowsBy ? this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.groupRowsBy))] === true : this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;
      }
      isRowEditing(rowData) {
        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;
      }
      isSingleSelectionMode() {
        return this.selectionMode === "single";
      }
      isMultipleSelectionMode() {
        return this.selectionMode === "multiple";
      }
      onColumnResizeBegin(event2) {
        let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;
        this.resizeColumnElement = event2.target.closest("th");
        this.columnResizing = true;
        if (event2.type == "touchstart") {
          this.lastResizerHelperX = event2.changedTouches[0].clientX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;
        } else {
          this.lastResizerHelperX = event2.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;
        }
        this.onColumnResize(event2);
        event2.preventDefault();
      }
      onColumnResize(event2) {
        let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;
        DomHandler.addClass(this.containerViewChild?.nativeElement, "p-unselectable-text");
        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild?.nativeElement.offsetHeight + "px";
        this.resizeHelperViewChild.nativeElement.style.top = "0px";
        if (event2.type == "touchmove") {
          this.resizeHelperViewChild.nativeElement.style.left = event2.changedTouches[0].clientX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + "px";
        } else {
          this.resizeHelperViewChild.nativeElement.style.left = event2.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + "px";
        }
        this.resizeHelperViewChild.nativeElement.style.display = "block";
      }
      onColumnResizeEnd() {
        const delta = this.resizeHelperViewChild?.nativeElement.offsetLeft - this.lastResizerHelperX;
        const columnWidth = this.resizeColumnElement.offsetWidth;
        const newColumnWidth = columnWidth + delta;
        const elementMinWidth = this.resizeColumnElement.style.minWidth.replace(/[^\d.]/g, "");
        const minWidth = elementMinWidth ? parseFloat(elementMinWidth) : 15;
        if (newColumnWidth >= minWidth) {
          if (this.columnResizeMode === "fit") {
            const nextColumn = this.resizeColumnElement.nextElementSibling;
            const nextColumnWidth = nextColumn.offsetWidth - delta;
            if (newColumnWidth > 15 && nextColumnWidth > 15) {
              this.resizeTableCells(newColumnWidth, nextColumnWidth);
            }
          } else if (this.columnResizeMode === "expand") {
            this._initialColWidths = this._totalTableWidth();
            const tableWidth = this.tableViewChild?.nativeElement.offsetWidth + delta;
            this.setResizeTableWidth(tableWidth + "px");
            this.resizeTableCells(newColumnWidth, null);
          }
          this.onColResize.emit({
            element: this.resizeColumnElement,
            delta
          });
          if (this.isStateful()) {
            this.saveState();
          }
        }
        this.resizeHelperViewChild.nativeElement.style.display = "none";
        DomHandler.removeClass(this.containerViewChild?.nativeElement, "p-unselectable-text");
      }
      _totalTableWidth() {
        let widths = [];
        const tableHead = DomHandler.findSingle(this.containerViewChild.nativeElement, ".p-datatable-thead");
        let headers = DomHandler.find(tableHead, "tr > th");
        headers.forEach((header) => widths.push(DomHandler.getOuterWidth(header)));
        return widths;
      }
      onColumnDragStart(event2, columnElement) {
        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild?.nativeElement);
        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild?.nativeElement);
        this.draggedColumn = columnElement;
        event2.dataTransfer.setData("text", "b");
      }
      onColumnDragEnter(event2, dropHeader) {
        if (this.reorderableColumns && this.draggedColumn && dropHeader) {
          event2.preventDefault();
          let containerOffset = DomHandler.getOffset(this.containerViewChild?.nativeElement);
          let dropHeaderOffset = DomHandler.getOffset(dropHeader);
          if (this.draggedColumn != dropHeader) {
            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, "preorderablecolumn");
            let dropIndex = DomHandler.indexWithinGroup(dropHeader, "preorderablecolumn");
            let targetLeft = dropHeaderOffset.left - containerOffset.left;
            let targetTop = containerOffset.top - dropHeaderOffset.top;
            let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;
            this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + "px";
            this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + "px";
            if (event2.pageX > columnCenter) {
              this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + "px";
              this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + "px";
              this.dropPosition = 1;
            } else {
              this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + "px";
              this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + "px";
              this.dropPosition = -1;
            }
            this.reorderIndicatorUpViewChild.nativeElement.style.display = "block";
            this.reorderIndicatorDownViewChild.nativeElement.style.display = "block";
          } else {
            event2.dataTransfer.dropEffect = "none";
          }
        }
      }
      onColumnDragLeave(event2) {
        if (this.reorderableColumns && this.draggedColumn) {
          event2.preventDefault();
        }
      }
      onColumnDrop(event2, dropColumn) {
        event2.preventDefault();
        if (this.draggedColumn) {
          let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, "preorderablecolumn");
          let dropIndex = DomHandler.indexWithinGroup(dropColumn, "preorderablecolumn");
          let allowDrop = dragIndex != dropIndex;
          if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {
            allowDrop = false;
          }
          if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {
            dropIndex = dropIndex + 1;
          }
          if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {
            dropIndex = dropIndex - 1;
          }
          if (allowDrop) {
            ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);
            this.onColReorder.emit({
              dragIndex,
              dropIndex,
              columns: this.columns
            });
            if (this.isStateful()) {
              this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                  this.saveState();
                });
              });
            }
          }
          if (this.resizableColumns && this.resizeColumnElement) {
            let width = this.columnResizeMode === "expand" ? this._initialColWidths : this._totalTableWidth();
            ObjectUtils.reorderArray(width, dragIndex + 1, dropIndex + 1);
            this.updateStyleElement(width, dragIndex, null, null);
          }
          this.reorderIndicatorUpViewChild.nativeElement.style.display = "none";
          this.reorderIndicatorDownViewChild.nativeElement.style.display = "none";
          this.draggedColumn.draggable = false;
          this.draggedColumn = null;
          this.dropPosition = null;
        }
      }
      resizeTableCells(newColumnWidth, nextColumnWidth) {
        let colIndex = DomHandler.index(this.resizeColumnElement);
        let width = this.columnResizeMode === "expand" ? this._initialColWidths : this._totalTableWidth();
        this.updateStyleElement(width, colIndex, newColumnWidth, nextColumnWidth);
      }
      updateStyleElement(width, colIndex, newColumnWidth, nextColumnWidth) {
        this.destroyStyleElement();
        this.createStyleElement();
        let innerHTML = "";
        width.forEach((width2, index) => {
          let colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width2;
          let style2 = `width: ${colWidth}px !important; max-width: ${colWidth}px !important;`;
          innerHTML += `
                #${this.id}-table > .p-datatable-thead > tr > th:nth-child(${index + 1}),
                #${this.id}-table > .p-datatable-tbody > tr > td:nth-child(${index + 1}),
                #${this.id}-table > .p-datatable-tfoot > tr > td:nth-child(${index + 1}) {
                    ${style2}
                }
            `;
        });
        this.renderer.setProperty(this.styleElement, "innerHTML", innerHTML);
      }
      onRowDragStart(event2, index) {
        this.rowDragging = true;
        this.draggedRowIndex = index;
        event2.dataTransfer.setData("text", "b");
      }
      onRowDragOver(event2, index, rowElement) {
        if (this.rowDragging && this.draggedRowIndex !== index) {
          let rowY = DomHandler.getOffset(rowElement).top;
          let pageY = event2.pageY;
          let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;
          let prevRowElement = rowElement.previousElementSibling;
          if (pageY < rowMidY) {
            DomHandler.removeClass(rowElement, "p-datatable-dragpoint-bottom");
            this.droppedRowIndex = index;
            if (prevRowElement) DomHandler.addClass(prevRowElement, "p-datatable-dragpoint-bottom");
            else DomHandler.addClass(rowElement, "p-datatable-dragpoint-top");
          } else {
            if (prevRowElement) DomHandler.removeClass(prevRowElement, "p-datatable-dragpoint-bottom");
            else DomHandler.addClass(rowElement, "p-datatable-dragpoint-top");
            this.droppedRowIndex = index + 1;
            DomHandler.addClass(rowElement, "p-datatable-dragpoint-bottom");
          }
        }
      }
      onRowDragLeave(event2, rowElement) {
        let prevRowElement = rowElement.previousElementSibling;
        if (prevRowElement) {
          DomHandler.removeClass(prevRowElement, "p-datatable-dragpoint-bottom");
        }
        DomHandler.removeClass(rowElement, "p-datatable-dragpoint-bottom");
        DomHandler.removeClass(rowElement, "p-datatable-dragpoint-top");
      }
      onRowDragEnd(event2) {
        this.rowDragging = false;
        this.draggedRowIndex = null;
        this.droppedRowIndex = null;
      }
      onRowDrop(event2, rowElement) {
        if (this.droppedRowIndex != null) {
          let dropIndex = this.draggedRowIndex > this.droppedRowIndex ? this.droppedRowIndex : this.droppedRowIndex === 0 ? 0 : this.droppedRowIndex - 1;
          ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);
          if (this.virtualScroll) {
            this._value = [...this._value];
          }
          this.onRowReorder.emit({
            dragIndex: this.draggedRowIndex,
            dropIndex
          });
        }
        this.onRowDragLeave(event2, rowElement);
        this.onRowDragEnd(event2);
      }
      isEmpty() {
        let data = this.filteredValue || this.value;
        return data == null || data.length == 0;
      }
      getBlockableElement() {
        return this.el.nativeElement.children[0];
      }
      getStorage() {
        if (isPlatformBrowser(this.platformId)) {
          switch (this.stateStorage) {
            case "local":
              return window.localStorage;
            case "session":
              return window.sessionStorage;
            default:
              throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are "local" and "session".');
          }
        } else {
          throw new Error("Browser storage is not available in the server side.");
        }
      }
      isStateful() {
        return this.stateKey != null;
      }
      saveState() {
        const storage = this.getStorage();
        let state2 = {};
        if (this.paginator) {
          state2.first = this.first;
          state2.rows = this.rows;
        }
        if (this.sortField) {
          state2.sortField = this.sortField;
          state2.sortOrder = this.sortOrder;
        }
        if (this.multiSortMeta) {
          state2.multiSortMeta = this.multiSortMeta;
        }
        if (this.hasFilter()) {
          state2.filters = this.filters;
        }
        if (this.resizableColumns) {
          this.saveColumnWidths(state2);
        }
        if (this.reorderableColumns) {
          this.saveColumnOrder(state2);
        }
        if (this.selection) {
          state2.selection = this.selection;
        }
        if (Object.keys(this.expandedRowKeys).length) {
          state2.expandedRowKeys = this.expandedRowKeys;
        }
        storage.setItem(this.stateKey, JSON.stringify(state2));
        this.onStateSave.emit(state2);
      }
      clearState() {
        const storage = this.getStorage();
        if (this.stateKey) {
          storage.removeItem(this.stateKey);
        }
      }
      restoreState() {
        const storage = this.getStorage();
        const stateString = storage.getItem(this.stateKey);
        const dateFormat = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/;
        const reviver = function(key, value) {
          if (typeof value === "string" && dateFormat.test(value)) {
            return new Date(value);
          }
          return value;
        };
        if (stateString) {
          let state2 = JSON.parse(stateString, reviver);
          if (this.paginator) {
            if (this.first !== void 0) {
              this.first = state2.first;
              this.firstChange.emit(this.first);
            }
            if (this.rows !== void 0) {
              this.rows = state2.rows;
              this.rowsChange.emit(this.rows);
            }
          }
          if (state2.sortField) {
            this.restoringSort = true;
            this._sortField = state2.sortField;
            this._sortOrder = state2.sortOrder;
          }
          if (state2.multiSortMeta) {
            this.restoringSort = true;
            this._multiSortMeta = state2.multiSortMeta;
          }
          if (state2.filters) {
            this.restoringFilter = true;
            this.filters = state2.filters;
          }
          if (this.resizableColumns) {
            this.columnWidthsState = state2.columnWidths;
            this.tableWidthState = state2.tableWidth;
          }
          if (state2.expandedRowKeys) {
            this.expandedRowKeys = state2.expandedRowKeys;
          }
          if (state2.selection) {
            Promise.resolve(null).then(() => this.selectionChange.emit(state2.selection));
          }
          this.stateRestored = true;
          this.onStateRestore.emit(state2);
        }
      }
      saveColumnWidths(state2) {
        let widths = [];
        let headers = [];
        const container = this.containerViewChild?.nativeElement;
        if (container) {
          headers = DomHandler.find(container, ".p-datatable-thead > tr > th");
        }
        headers.forEach((header) => widths.push(DomHandler.getOuterWidth(header)));
        state2.columnWidths = widths.join(",");
        if (this.columnResizeMode === "expand") {
          state2.tableWidth = DomHandler.getOuterWidth(this.tableViewChild?.nativeElement);
        }
      }
      setResizeTableWidth(width) {
        this.tableViewChild.nativeElement.style.width = width;
        this.tableViewChild.nativeElement.style.minWidth = width;
      }
      restoreColumnWidths() {
        if (this.columnWidthsState) {
          let widths = this.columnWidthsState.split(",");
          if (this.columnResizeMode === "expand" && this.tableWidthState) {
            this.setResizeTableWidth(this.tableWidthState + "px");
          }
          if (ObjectUtils.isNotEmpty(widths)) {
            this.createStyleElement();
            let innerHTML = "";
            widths.forEach((width, index) => {
              let style2 = `width: ${width}px !important; max-width: ${width}px !important`;
              innerHTML += `
                        #${this.id}-table > .p-datatable-thead > tr > th:nth-child(${index + 1}),
                        #${this.id}-table > .p-datatable-tbody > tr > td:nth-child(${index + 1}),
                        #${this.id}-table > .p-datatable-tfoot > tr > td:nth-child(${index + 1}) {
                            ${style2}
                        }
                    `;
            });
            this.styleElement.innerHTML = innerHTML;
          }
        }
      }
      saveColumnOrder(state2) {
        if (this.columns) {
          let columnOrder = [];
          this.columns.map((column) => {
            columnOrder.push(column.field || column.key);
          });
          state2.columnOrder = columnOrder;
        }
      }
      restoreColumnOrder() {
        const storage = this.getStorage();
        const stateString = storage.getItem(this.stateKey);
        if (stateString) {
          let state2 = JSON.parse(stateString);
          let columnOrder = state2.columnOrder;
          if (columnOrder) {
            let reorderedColumns = [];
            columnOrder.map((key) => {
              let col = this.findColumnByKey(key);
              if (col) {
                reorderedColumns.push(col);
              }
            });
            this.columnOrderStateRestored = true;
            this.columns = reorderedColumns;
          }
        }
      }
      findColumnByKey(key) {
        if (this.columns) {
          for (let col of this.columns) {
            if (col.key === key || col.field === key) return col;
            else continue;
          }
        } else {
          return null;
        }
      }
      createStyleElement() {
        this.styleElement = this.renderer.createElement("style");
        this.styleElement.type = "text/css";
        this.renderer.appendChild(this.document.head, this.styleElement);
        DomHandler.setAttribute(this.styleElement, "nonce", this.config?.csp()?.nonce);
      }
      getGroupRowsMeta() {
        return {
          field: this.groupRowsBy,
          order: this.groupRowsByOrder
        };
      }
      createResponsiveStyle() {
        if (isPlatformBrowser(this.platformId)) {
          if (!this.responsiveStyleElement) {
            this.responsiveStyleElement = this.renderer.createElement("style");
            this.responsiveStyleElement.type = "text/css";
            this.renderer.appendChild(this.document.head, this.responsiveStyleElement);
            let innerHTML = `
    @media screen and (max-width: ${this.breakpoint}) {
        #${this.id}-table > .p-datatable-thead > tr > th,
        #${this.id}-table > .p-datatable-tfoot > tr > td {
            display: none !important;
        }

        #${this.id}-table > .p-datatable-tbody > tr > td {
            display: flex;
            width: 100% !important;
            align-items: center;
            justify-content: space-between;
        }

        #${this.id}-table > .p-datatable-tbody > tr > td:not(:last-child) {
            border: 0 none;
        }

        #${this.id}.p-datatable-gridlines > .p-datatable-table-container > .p-datatable-table > .p-datatable-tbody > tr > td:last-child {
            border-top: 0;
            border-right: 0;
            border-left: 0;
        }

        #${this.id}-table > .p-datatable-tbody > tr > td > .p-datatable-column-title {
            display: block;
        }
    }
    `;
            this.renderer.setProperty(this.responsiveStyleElement, "innerHTML", innerHTML);
            DomHandler.setAttribute(this.responsiveStyleElement, "nonce", this.config?.csp()?.nonce);
          }
        }
      }
      destroyResponsiveStyle() {
        if (this.responsiveStyleElement) {
          this.renderer.removeChild(this.document.head, this.responsiveStyleElement);
          this.responsiveStyleElement = null;
        }
      }
      destroyStyleElement() {
        if (this.styleElement) {
          this.renderer.removeChild(this.document.head, this.styleElement);
          this.styleElement = null;
        }
      }
      ngOnDestroy() {
        this.unbindDocumentEditListener();
        this.editingCell = null;
        this.initialized = null;
        this.destroyStyleElement();
        this.destroyResponsiveStyle();
        super.ngOnDestroy();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Table,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _Table,
        isStandalone: false,
        selector: "p-table",
        inputs: {
          frozenColumns: "frozenColumns",
          frozenValue: "frozenValue",
          style: "style",
          styleClass: "styleClass",
          tableStyle: "tableStyle",
          tableStyleClass: "tableStyleClass",
          paginator: ["paginator", "paginator", booleanAttribute],
          pageLinks: ["pageLinks", "pageLinks", numberAttribute],
          rowsPerPageOptions: "rowsPerPageOptions",
          alwaysShowPaginator: ["alwaysShowPaginator", "alwaysShowPaginator", booleanAttribute],
          paginatorPosition: "paginatorPosition",
          paginatorStyleClass: "paginatorStyleClass",
          paginatorDropdownAppendTo: "paginatorDropdownAppendTo",
          paginatorDropdownScrollHeight: "paginatorDropdownScrollHeight",
          currentPageReportTemplate: "currentPageReportTemplate",
          showCurrentPageReport: ["showCurrentPageReport", "showCurrentPageReport", booleanAttribute],
          showJumpToPageDropdown: ["showJumpToPageDropdown", "showJumpToPageDropdown", booleanAttribute],
          showJumpToPageInput: ["showJumpToPageInput", "showJumpToPageInput", booleanAttribute],
          showFirstLastIcon: ["showFirstLastIcon", "showFirstLastIcon", booleanAttribute],
          showPageLinks: ["showPageLinks", "showPageLinks", booleanAttribute],
          defaultSortOrder: ["defaultSortOrder", "defaultSortOrder", numberAttribute],
          sortMode: "sortMode",
          resetPageOnSort: ["resetPageOnSort", "resetPageOnSort", booleanAttribute],
          selectionMode: "selectionMode",
          selectionPageOnly: ["selectionPageOnly", "selectionPageOnly", booleanAttribute],
          contextMenuSelection: "contextMenuSelection",
          contextMenuSelectionMode: "contextMenuSelectionMode",
          dataKey: "dataKey",
          metaKeySelection: ["metaKeySelection", "metaKeySelection", booleanAttribute],
          rowSelectable: "rowSelectable",
          rowTrackBy: "rowTrackBy",
          lazy: ["lazy", "lazy", booleanAttribute],
          lazyLoadOnInit: ["lazyLoadOnInit", "lazyLoadOnInit", booleanAttribute],
          compareSelectionBy: "compareSelectionBy",
          csvSeparator: "csvSeparator",
          exportFilename: "exportFilename",
          filters: "filters",
          globalFilterFields: "globalFilterFields",
          filterDelay: ["filterDelay", "filterDelay", numberAttribute],
          filterLocale: "filterLocale",
          expandedRowKeys: "expandedRowKeys",
          editingRowKeys: "editingRowKeys",
          rowExpandMode: "rowExpandMode",
          scrollable: ["scrollable", "scrollable", booleanAttribute],
          scrollDirection: "scrollDirection",
          rowGroupMode: "rowGroupMode",
          scrollHeight: "scrollHeight",
          virtualScroll: ["virtualScroll", "virtualScroll", booleanAttribute],
          virtualScrollItemSize: ["virtualScrollItemSize", "virtualScrollItemSize", numberAttribute],
          virtualScrollOptions: "virtualScrollOptions",
          virtualScrollDelay: ["virtualScrollDelay", "virtualScrollDelay", numberAttribute],
          frozenWidth: "frozenWidth",
          responsive: "responsive",
          contextMenu: "contextMenu",
          resizableColumns: ["resizableColumns", "resizableColumns", booleanAttribute],
          columnResizeMode: "columnResizeMode",
          reorderableColumns: ["reorderableColumns", "reorderableColumns", booleanAttribute],
          loading: ["loading", "loading", booleanAttribute],
          loadingIcon: "loadingIcon",
          showLoader: ["showLoader", "showLoader", booleanAttribute],
          rowHover: ["rowHover", "rowHover", booleanAttribute],
          customSort: ["customSort", "customSort", booleanAttribute],
          showInitialSortBadge: ["showInitialSortBadge", "showInitialSortBadge", booleanAttribute],
          autoLayout: ["autoLayout", "autoLayout", booleanAttribute],
          exportFunction: "exportFunction",
          exportHeader: "exportHeader",
          stateKey: "stateKey",
          stateStorage: "stateStorage",
          editMode: "editMode",
          groupRowsBy: "groupRowsBy",
          size: "size",
          showGridlines: ["showGridlines", "showGridlines", booleanAttribute],
          stripedRows: ["stripedRows", "stripedRows", booleanAttribute],
          groupRowsByOrder: ["groupRowsByOrder", "groupRowsByOrder", numberAttribute],
          responsiveLayout: "responsiveLayout",
          breakpoint: "breakpoint",
          paginatorLocale: "paginatorLocale",
          value: "value",
          columns: "columns",
          first: "first",
          rows: "rows",
          totalRecords: "totalRecords",
          sortField: "sortField",
          sortOrder: "sortOrder",
          multiSortMeta: "multiSortMeta",
          selection: "selection",
          virtualRowHeight: "virtualRowHeight",
          selectAll: "selectAll"
        },
        outputs: {
          contextMenuSelectionChange: "contextMenuSelectionChange",
          selectAllChange: "selectAllChange",
          selectionChange: "selectionChange",
          onRowSelect: "onRowSelect",
          onRowUnselect: "onRowUnselect",
          onPage: "onPage",
          onSort: "onSort",
          onFilter: "onFilter",
          onLazyLoad: "onLazyLoad",
          onRowExpand: "onRowExpand",
          onRowCollapse: "onRowCollapse",
          onContextMenuSelect: "onContextMenuSelect",
          onColResize: "onColResize",
          onColReorder: "onColReorder",
          onRowReorder: "onRowReorder",
          onEditInit: "onEditInit",
          onEditComplete: "onEditComplete",
          onEditCancel: "onEditCancel",
          onHeaderCheckboxToggle: "onHeaderCheckboxToggle",
          sortFunction: "sortFunction",
          firstChange: "firstChange",
          rowsChange: "rowsChange",
          onStateSave: "onStateSave",
          onStateRestore: "onStateRestore"
        },
        providers: [TableService, TableStyle],
        queries: [{
          propertyName: "_headerTemplate",
          first: true,
          predicate: ["header"]
        }, {
          propertyName: "_headerGroupedTemplate",
          first: true,
          predicate: ["headergrouped"]
        }, {
          propertyName: "_bodyTemplate",
          first: true,
          predicate: ["body"]
        }, {
          propertyName: "_loadingBodyTemplate",
          first: true,
          predicate: ["loadingbody"]
        }, {
          propertyName: "_captionTemplate",
          first: true,
          predicate: ["caption"]
        }, {
          propertyName: "_footerTemplate",
          first: true,
          predicate: ["footer"]
        }, {
          propertyName: "_footerGroupedTemplate",
          first: true,
          predicate: ["footergrouped"]
        }, {
          propertyName: "_summaryTemplate",
          first: true,
          predicate: ["summary"]
        }, {
          propertyName: "_colGroupTemplate",
          first: true,
          predicate: ["colgroup"]
        }, {
          propertyName: "_expandedRowTemplate",
          first: true,
          predicate: ["expandedrow"]
        }, {
          propertyName: "_groupHeaderTemplate",
          first: true,
          predicate: ["groupheader"]
        }, {
          propertyName: "_groupFooterTemplate",
          first: true,
          predicate: ["groupfooter"]
        }, {
          propertyName: "_frozenExpandedRowTemplate",
          first: true,
          predicate: ["frozenexpandedrow"]
        }, {
          propertyName: "_frozenHeaderTemplate",
          first: true,
          predicate: ["frozenheader"]
        }, {
          propertyName: "_frozenBodyTemplate",
          first: true,
          predicate: ["frozenbody"]
        }, {
          propertyName: "_frozenFooterTemplate",
          first: true,
          predicate: ["frozenfooter"]
        }, {
          propertyName: "_frozenColGroupTemplate",
          first: true,
          predicate: ["frozencolgroup"]
        }, {
          propertyName: "_emptyMessageTemplate",
          first: true,
          predicate: ["emptymessage"]
        }, {
          propertyName: "_paginatorLeftTemplate",
          first: true,
          predicate: ["paginatorleft"]
        }, {
          propertyName: "_paginatorRightTemplate",
          first: true,
          predicate: ["paginatorright"]
        }, {
          propertyName: "_paginatorDropdownItemTemplate",
          first: true,
          predicate: ["paginatordropdownitem"]
        }, {
          propertyName: "_loadingIconTemplate",
          first: true,
          predicate: ["loadingicon"]
        }, {
          propertyName: "_reorderIndicatorUpIconTemplate",
          first: true,
          predicate: ["reorderindicatorupicon"]
        }, {
          propertyName: "_reorderIndicatorDownIconTemplate",
          first: true,
          predicate: ["reorderindicatordownicon"]
        }, {
          propertyName: "_sortIconTemplate",
          first: true,
          predicate: ["sorticon"]
        }, {
          propertyName: "_checkboxIconTemplate",
          first: true,
          predicate: ["checkboxicon"]
        }, {
          propertyName: "_headerCheckboxIconTemplate",
          first: true,
          predicate: ["headercheckboxicon"]
        }, {
          propertyName: "_paginatorDropdownIconTemplate",
          first: true,
          predicate: ["paginatordropdownicon"]
        }, {
          propertyName: "_paginatorFirstPageLinkIconTemplate",
          first: true,
          predicate: ["paginatorfirstpagelinkicon"]
        }, {
          propertyName: "_paginatorLastPageLinkIconTemplate",
          first: true,
          predicate: ["paginatorlastpagelinkicon"]
        }, {
          propertyName: "_paginatorPreviousPageLinkIconTemplate",
          first: true,
          predicate: ["paginatorpreviouspagelinkicon"]
        }, {
          propertyName: "_paginatorNextPageLinkIconTemplate",
          first: true,
          predicate: ["paginatornextpagelinkicon"]
        }, {
          propertyName: "_templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "containerViewChild",
          first: true,
          predicate: ["container"],
          descendants: true
        }, {
          propertyName: "resizeHelperViewChild",
          first: true,
          predicate: ["resizeHelper"],
          descendants: true
        }, {
          propertyName: "reorderIndicatorUpViewChild",
          first: true,
          predicate: ["reorderIndicatorUp"],
          descendants: true
        }, {
          propertyName: "reorderIndicatorDownViewChild",
          first: true,
          predicate: ["reorderIndicatorDown"],
          descendants: true
        }, {
          propertyName: "wrapperViewChild",
          first: true,
          predicate: ["wrapper"],
          descendants: true
        }, {
          propertyName: "tableViewChild",
          first: true,
          predicate: ["table"],
          descendants: true
        }, {
          propertyName: "tableHeaderViewChild",
          first: true,
          predicate: ["thead"],
          descendants: true
        }, {
          propertyName: "tableFooterViewChild",
          first: true,
          predicate: ["tfoot"],
          descendants: true
        }, {
          propertyName: "scroller",
          first: true,
          predicate: ["scroller"],
          descendants: true
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports,
        template: `
        <div #container [ngStyle]="style" [class]="styleClass" [ngClass]="cx('root')" [attr.id]="id">
            <div [ngClass]="cx('mask')" *ngIf="loading && showLoader">
                <i *ngIf="loadingIcon" [class]="'p-datatable-loading-icon ' + loadingIcon"></i>
                <ng-container *ngIf="!loadingIcon">
                    <SpinnerIcon *ngIf="!loadingIconTemplate && !_loadingIconTemplate" [spin]="true" [styleClass]="cx('loadingIcon')" />
                    <span *ngIf="loadingIconTemplate || _loadingIconTemplate" [ngClass]="cx('loadingIcon')">
                        <ng-template *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate"></ng-template>
                    </span>
                </ng-container>
            </div>
            <div *ngIf="captionTemplate || _captionTemplate" [ngClass]="cx('header')">
                <ng-container *ngTemplateOutlet="captionTemplate || _captionTemplate"></ng-container>
            </div>
            <p-paginator
                [rows]="rows"
                [first]="first"
                [totalRecords]="totalRecords"
                [pageLinkSize]="pageLinks"
                [alwaysShow]="alwaysShowPaginator"
                (onPageChange)="onPageChange($event)"
                [rowsPerPageOptions]="rowsPerPageOptions"
                *ngIf="paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')"
                [templateLeft]="paginatorLeftTemplate || _paginatorLeftTemplate"
                [templateRight]="paginatorRightTemplate || _paginatorRightTemplate"
                [dropdownAppendTo]="paginatorDropdownAppendTo"
                [dropdownScrollHeight]="paginatorDropdownScrollHeight"
                [currentPageReportTemplate]="currentPageReportTemplate"
                [showFirstLastIcon]="showFirstLastIcon"
                [dropdownItemTemplate]="paginatorDropdownItemTemplate || _paginatorDropdownItemTemplate"
                [showCurrentPageReport]="showCurrentPageReport"
                [showJumpToPageDropdown]="showJumpToPageDropdown"
                [showJumpToPageInput]="showJumpToPageInput"
                [showPageLinks]="showPageLinks"
                [styleClass]="cx('pcPaginator') + ' ' + paginatorStyleClass && paginatorStyleClass"
                [locale]="paginatorLocale"
            >
                <ng-template pTemplate="dropdownicon" *ngIf="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="firstpagelinkicon" *ngIf="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="previouspagelinkicon" *ngIf="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="lastpagelinkicon" *ngIf="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="nextpagelinkicon" *ngIf="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate"></ng-container>
                </ng-template>
            </p-paginator>

            <div #wrapper [ngClass]="cx('tableContainer')" [ngStyle]="sx('tableContainer')">
                <p-scroller
                    #scroller
                    *ngIf="virtualScroll"
                    [items]="processedData"
                    [columns]="columns"
                    [style]="{
                        height: scrollHeight !== 'flex' ? scrollHeight : undefined
                    }"
                    [scrollHeight]="scrollHeight !== 'flex' ? undefined : '100%'"
                    [itemSize]="virtualScrollItemSize || _virtualRowHeight"
                    [step]="rows"
                    [delay]="lazy ? virtualScrollDelay : 0"
                    [inline]="true"
                    [lazy]="lazy"
                    (onLazyLoad)="onLazyItemLoad($event)"
                    [loaderDisabled]="true"
                    [showSpacer]="false"
                    [showLoader]="loadingBodyTemplate || _loadingBodyTemplate"
                    [options]="virtualScrollOptions"
                    [autoSize]="true"
                >
                    <ng-template #content let-items let-scrollerOptions="options">
                        <ng-container
                            *ngTemplateOutlet="
                                buildInTable;
                                context: {
                                    $implicit: items,
                                    options: scrollerOptions
                                }
                            "
                        ></ng-container>
                    </ng-template>
                </p-scroller>
                <ng-container *ngIf="!virtualScroll">
                    <ng-container
                        *ngTemplateOutlet="
                            buildInTable;
                            context: {
                                $implicit: processedData,
                                options: { columns }
                            }
                        "
                    ></ng-container>
                </ng-container>

                <ng-template #buildInTable let-items let-scrollerOptions="options">
                    <table #table [ngClass]="cx('table')" [class]="tableStyleClass" [style]="tableStyle" [attr.id]="id + '-table'">
                        <ng-container *ngTemplateOutlet="colGroupTemplate || _colGroupTemplate; context: { $implicit: scrollerOptions.columns }"></ng-container>
                        <thead #thead [ngClass]="cx('thead')" [ngStyle]="sx('thead')">
                            <ng-container
                                *ngTemplateOutlet="
                                    headerGroupedTemplate || headerTemplate || _headerTemplate;
                                    context: {
                                        $implicit: scrollerOptions.columns
                                    }
                                "
                            ></ng-container>
                        </thead>
                        <tbody
                            [ngClass]="cx('tbody')"
                            *ngIf="frozenValue || frozenBodyTemplate || _frozenBodyTemplate"
                            [value]="frozenValue"
                            [frozenRows]="true"
                            [pTableBody]="scrollerOptions.columns"
                            [pTableBodyTemplate]="frozenBodyTemplate || _frozenBodyTemplate"
                            [frozen]="true"
                        ></tbody>
                        <tbody
                            [ngClass]="cx('tbody', scrollerOptions.contentStyleClass)"
                            [style]="scrollerOptions.contentStyle"
                            [value]="dataToRender(scrollerOptions.rows)"
                            [pTableBody]="scrollerOptions.columns"
                            [pTableBodyTemplate]="bodyTemplate || _bodyTemplate"
                            [scrollerOptions]="scrollerOptions"
                        ></tbody>
                        <tbody
                            *ngIf="scrollerOptions.spacerStyle"
                            [style]="'height: calc(' + scrollerOptions.spacerStyle.height + ' - ' + scrollerOptions.rows.length * scrollerOptions.itemSize + 'px);'"
                            [ngClass]="cx('virtualScrollerSpacer')"
                        ></tbody>
                        <tfoot *ngIf="footerGroupedTemplate || footerTemplate || _footerTemplate || _footerGroupedTemplate" #tfoot [ngClass]="cx('footer')" [ngStyle]="sx('tfoot')">
                            <ng-container
                                *ngTemplateOutlet="
                                    footerGroupedTemplate || footerTemplate || _footerTemplate || _footerGroupedTemplate;
                                    context: {
                                        $implicit: scrollerOptions.columns
                                    }
                                "
                            ></ng-container>
                        </tfoot>
                    </table>
                </ng-template>
            </div>

            <p-paginator
                [rows]="rows"
                [first]="first"
                [totalRecords]="totalRecords"
                [pageLinkSize]="pageLinks"
                [alwaysShow]="alwaysShowPaginator"
                (onPageChange)="onPageChange($event)"
                [rowsPerPageOptions]="rowsPerPageOptions"
                *ngIf="paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')"
                [templateLeft]="paginatorLeftTemplate || _paginatorLeftTemplate"
                [templateRight]="paginatorRightTemplate || _paginatorRightTemplate"
                [dropdownAppendTo]="paginatorDropdownAppendTo"
                [dropdownScrollHeight]="paginatorDropdownScrollHeight"
                [currentPageReportTemplate]="currentPageReportTemplate"
                [showFirstLastIcon]="showFirstLastIcon"
                [dropdownItemTemplate]="paginatorDropdownItemTemplate || _paginatorDropdownItemTemplate"
                [showCurrentPageReport]="showCurrentPageReport"
                [showJumpToPageDropdown]="showJumpToPageDropdown"
                [showJumpToPageInput]="showJumpToPageInput"
                [showPageLinks]="showPageLinks"
                [styleClass]="cx('pcPaginator') + ' ' + paginatorStyleClass && paginatorStyleClass"
                [locale]="paginatorLocale"
            >
                <ng-template pTemplate="dropdownicon" *ngIf="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="firstpagelinkicon" *ngIf="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="previouspagelinkicon" *ngIf="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="lastpagelinkicon" *ngIf="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="nextpagelinkicon" *ngIf="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate"></ng-container>
                </ng-template>
            </p-paginator>

            <div *ngIf="summaryTemplate || _summaryTemplate" [ngClass]="cx('footer')">
                <ng-container *ngTemplateOutlet="summaryTemplate || _summaryTemplate"></ng-container>
            </div>

            <div #resizeHelper [ngClass]="cx('columnResizeIndicator')" style="display:none" *ngIf="resizableColumns"></div>
            <span #reorderIndicatorUp [ngClass]="cx('rowReorderIndicatorUp')" style="display: none;" *ngIf="reorderableColumns">
                <ArrowDownIcon *ngIf="!reorderIndicatorUpIconTemplate && !_reorderIndicatorUpIconTemplate" />
                <ng-template *ngTemplateOutlet="reorderIndicatorUpIconTemplate || _reorderIndicatorUpIconTemplate"></ng-template>
            </span>
            <span #reorderIndicatorDown [ngClass]="cx('rowReorderIndicatorDown')" style="display: none;" *ngIf="reorderableColumns">
                <ArrowUpIcon *ngIf="!reorderIndicatorDownIconTemplate && !_reorderIndicatorDownIconTemplate" />
                <ng-template *ngTemplateOutlet="reorderIndicatorDownIconTemplate || _reorderIndicatorDownIconTemplate"></ng-template>
            </span>
        </div>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: forwardRef(() => NgClass),
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgIf),
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgTemplateOutlet),
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgStyle),
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: forwardRef(() => Paginator),
          selector: "p-paginator",
          inputs: ["pageLinkSize", "style", "styleClass", "alwaysShow", "dropdownAppendTo", "templateLeft", "templateRight", "appendTo", "dropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showFirstLastIcon", "totalRecords", "rows", "rowsPerPageOptions", "showJumpToPageDropdown", "showJumpToPageInput", "jumpToPageItemTemplate", "showPageLinks", "locale", "dropdownItemTemplate", "first"],
          outputs: ["onPageChange"]
        }, {
          kind: "directive",
          type: forwardRef(() => PrimeTemplate),
          selector: "[pTemplate]",
          inputs: ["type", "pTemplate"]
        }, {
          kind: "component",
          type: forwardRef(() => Scroller),
          selector: "p-scroller, p-virtualscroller, p-virtual-scroller, p-virtualScroller",
          inputs: ["id", "style", "styleClass", "tabindex", "items", "itemSize", "scrollHeight", "scrollWidth", "orientation", "step", "delay", "resizeDelay", "appendOnly", "inline", "lazy", "disabled", "loaderDisabled", "columns", "showSpacer", "showLoader", "numToleratedItems", "loading", "autoSize", "trackBy", "options"],
          outputs: ["onLazyLoad", "onScroll", "onScrollIndexChange"]
        }, {
          kind: "component",
          type: forwardRef(() => ArrowDownIcon),
          selector: "ArrowDownIcon"
        }, {
          kind: "component",
          type: forwardRef(() => ArrowUpIcon),
          selector: "ArrowUpIcon"
        }, {
          kind: "component",
          type: forwardRef(() => SpinnerIcon),
          selector: "SpinnerIcon"
        }, {
          kind: "component",
          type: forwardRef(() => TableBody),
          selector: "[pTableBody]",
          inputs: ["pTableBody", "pTableBodyTemplate", "value", "frozen", "frozenRows", "scrollerOptions"]
        }],
        changeDetection: ChangeDetectionStrategy.Default,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Table,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-table",
          standalone: false,
          template: `
        <div #container [ngStyle]="style" [class]="styleClass" [ngClass]="cx('root')" [attr.id]="id">
            <div [ngClass]="cx('mask')" *ngIf="loading && showLoader">
                <i *ngIf="loadingIcon" [class]="'p-datatable-loading-icon ' + loadingIcon"></i>
                <ng-container *ngIf="!loadingIcon">
                    <SpinnerIcon *ngIf="!loadingIconTemplate && !_loadingIconTemplate" [spin]="true" [styleClass]="cx('loadingIcon')" />
                    <span *ngIf="loadingIconTemplate || _loadingIconTemplate" [ngClass]="cx('loadingIcon')">
                        <ng-template *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate"></ng-template>
                    </span>
                </ng-container>
            </div>
            <div *ngIf="captionTemplate || _captionTemplate" [ngClass]="cx('header')">
                <ng-container *ngTemplateOutlet="captionTemplate || _captionTemplate"></ng-container>
            </div>
            <p-paginator
                [rows]="rows"
                [first]="first"
                [totalRecords]="totalRecords"
                [pageLinkSize]="pageLinks"
                [alwaysShow]="alwaysShowPaginator"
                (onPageChange)="onPageChange($event)"
                [rowsPerPageOptions]="rowsPerPageOptions"
                *ngIf="paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')"
                [templateLeft]="paginatorLeftTemplate || _paginatorLeftTemplate"
                [templateRight]="paginatorRightTemplate || _paginatorRightTemplate"
                [dropdownAppendTo]="paginatorDropdownAppendTo"
                [dropdownScrollHeight]="paginatorDropdownScrollHeight"
                [currentPageReportTemplate]="currentPageReportTemplate"
                [showFirstLastIcon]="showFirstLastIcon"
                [dropdownItemTemplate]="paginatorDropdownItemTemplate || _paginatorDropdownItemTemplate"
                [showCurrentPageReport]="showCurrentPageReport"
                [showJumpToPageDropdown]="showJumpToPageDropdown"
                [showJumpToPageInput]="showJumpToPageInput"
                [showPageLinks]="showPageLinks"
                [styleClass]="cx('pcPaginator') + ' ' + paginatorStyleClass && paginatorStyleClass"
                [locale]="paginatorLocale"
            >
                <ng-template pTemplate="dropdownicon" *ngIf="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="firstpagelinkicon" *ngIf="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="previouspagelinkicon" *ngIf="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="lastpagelinkicon" *ngIf="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="nextpagelinkicon" *ngIf="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate"></ng-container>
                </ng-template>
            </p-paginator>

            <div #wrapper [ngClass]="cx('tableContainer')" [ngStyle]="sx('tableContainer')">
                <p-scroller
                    #scroller
                    *ngIf="virtualScroll"
                    [items]="processedData"
                    [columns]="columns"
                    [style]="{
                        height: scrollHeight !== 'flex' ? scrollHeight : undefined
                    }"
                    [scrollHeight]="scrollHeight !== 'flex' ? undefined : '100%'"
                    [itemSize]="virtualScrollItemSize || _virtualRowHeight"
                    [step]="rows"
                    [delay]="lazy ? virtualScrollDelay : 0"
                    [inline]="true"
                    [lazy]="lazy"
                    (onLazyLoad)="onLazyItemLoad($event)"
                    [loaderDisabled]="true"
                    [showSpacer]="false"
                    [showLoader]="loadingBodyTemplate || _loadingBodyTemplate"
                    [options]="virtualScrollOptions"
                    [autoSize]="true"
                >
                    <ng-template #content let-items let-scrollerOptions="options">
                        <ng-container
                            *ngTemplateOutlet="
                                buildInTable;
                                context: {
                                    $implicit: items,
                                    options: scrollerOptions
                                }
                            "
                        ></ng-container>
                    </ng-template>
                </p-scroller>
                <ng-container *ngIf="!virtualScroll">
                    <ng-container
                        *ngTemplateOutlet="
                            buildInTable;
                            context: {
                                $implicit: processedData,
                                options: { columns }
                            }
                        "
                    ></ng-container>
                </ng-container>

                <ng-template #buildInTable let-items let-scrollerOptions="options">
                    <table #table [ngClass]="cx('table')" [class]="tableStyleClass" [style]="tableStyle" [attr.id]="id + '-table'">
                        <ng-container *ngTemplateOutlet="colGroupTemplate || _colGroupTemplate; context: { $implicit: scrollerOptions.columns }"></ng-container>
                        <thead #thead [ngClass]="cx('thead')" [ngStyle]="sx('thead')">
                            <ng-container
                                *ngTemplateOutlet="
                                    headerGroupedTemplate || headerTemplate || _headerTemplate;
                                    context: {
                                        $implicit: scrollerOptions.columns
                                    }
                                "
                            ></ng-container>
                        </thead>
                        <tbody
                            [ngClass]="cx('tbody')"
                            *ngIf="frozenValue || frozenBodyTemplate || _frozenBodyTemplate"
                            [value]="frozenValue"
                            [frozenRows]="true"
                            [pTableBody]="scrollerOptions.columns"
                            [pTableBodyTemplate]="frozenBodyTemplate || _frozenBodyTemplate"
                            [frozen]="true"
                        ></tbody>
                        <tbody
                            [ngClass]="cx('tbody', scrollerOptions.contentStyleClass)"
                            [style]="scrollerOptions.contentStyle"
                            [value]="dataToRender(scrollerOptions.rows)"
                            [pTableBody]="scrollerOptions.columns"
                            [pTableBodyTemplate]="bodyTemplate || _bodyTemplate"
                            [scrollerOptions]="scrollerOptions"
                        ></tbody>
                        <tbody
                            *ngIf="scrollerOptions.spacerStyle"
                            [style]="'height: calc(' + scrollerOptions.spacerStyle.height + ' - ' + scrollerOptions.rows.length * scrollerOptions.itemSize + 'px);'"
                            [ngClass]="cx('virtualScrollerSpacer')"
                        ></tbody>
                        <tfoot *ngIf="footerGroupedTemplate || footerTemplate || _footerTemplate || _footerGroupedTemplate" #tfoot [ngClass]="cx('footer')" [ngStyle]="sx('tfoot')">
                            <ng-container
                                *ngTemplateOutlet="
                                    footerGroupedTemplate || footerTemplate || _footerTemplate || _footerGroupedTemplate;
                                    context: {
                                        $implicit: scrollerOptions.columns
                                    }
                                "
                            ></ng-container>
                        </tfoot>
                    </table>
                </ng-template>
            </div>

            <p-paginator
                [rows]="rows"
                [first]="first"
                [totalRecords]="totalRecords"
                [pageLinkSize]="pageLinks"
                [alwaysShow]="alwaysShowPaginator"
                (onPageChange)="onPageChange($event)"
                [rowsPerPageOptions]="rowsPerPageOptions"
                *ngIf="paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')"
                [templateLeft]="paginatorLeftTemplate || _paginatorLeftTemplate"
                [templateRight]="paginatorRightTemplate || _paginatorRightTemplate"
                [dropdownAppendTo]="paginatorDropdownAppendTo"
                [dropdownScrollHeight]="paginatorDropdownScrollHeight"
                [currentPageReportTemplate]="currentPageReportTemplate"
                [showFirstLastIcon]="showFirstLastIcon"
                [dropdownItemTemplate]="paginatorDropdownItemTemplate || _paginatorDropdownItemTemplate"
                [showCurrentPageReport]="showCurrentPageReport"
                [showJumpToPageDropdown]="showJumpToPageDropdown"
                [showJumpToPageInput]="showJumpToPageInput"
                [showPageLinks]="showPageLinks"
                [styleClass]="cx('pcPaginator') + ' ' + paginatorStyleClass && paginatorStyleClass"
                [locale]="paginatorLocale"
            >
                <ng-template pTemplate="dropdownicon" *ngIf="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="firstpagelinkicon" *ngIf="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="previouspagelinkicon" *ngIf="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="lastpagelinkicon" *ngIf="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate"></ng-container>
                </ng-template>

                <ng-template pTemplate="nextpagelinkicon" *ngIf="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate">
                    <ng-container *ngTemplateOutlet="paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate"></ng-container>
                </ng-template>
            </p-paginator>

            <div *ngIf="summaryTemplate || _summaryTemplate" [ngClass]="cx('footer')">
                <ng-container *ngTemplateOutlet="summaryTemplate || _summaryTemplate"></ng-container>
            </div>

            <div #resizeHelper [ngClass]="cx('columnResizeIndicator')" style="display:none" *ngIf="resizableColumns"></div>
            <span #reorderIndicatorUp [ngClass]="cx('rowReorderIndicatorUp')" style="display: none;" *ngIf="reorderableColumns">
                <ArrowDownIcon *ngIf="!reorderIndicatorUpIconTemplate && !_reorderIndicatorUpIconTemplate" />
                <ng-template *ngTemplateOutlet="reorderIndicatorUpIconTemplate || _reorderIndicatorUpIconTemplate"></ng-template>
            </span>
            <span #reorderIndicatorDown [ngClass]="cx('rowReorderIndicatorDown')" style="display: none;" *ngIf="reorderableColumns">
                <ArrowUpIcon *ngIf="!reorderIndicatorDownIconTemplate && !_reorderIndicatorDownIconTemplate" />
                <ng-template *ngTemplateOutlet="reorderIndicatorDownIconTemplate || _reorderIndicatorDownIconTemplate"></ng-template>
            </span>
        </div>
    `,
          providers: [TableService, TableStyle],
          changeDetection: ChangeDetectionStrategy.Default,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      propDecorators: {
        frozenColumns: [{
          type: Input
        }],
        frozenValue: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        tableStyle: [{
          type: Input
        }],
        tableStyleClass: [{
          type: Input
        }],
        paginator: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        pageLinks: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        rowsPerPageOptions: [{
          type: Input
        }],
        alwaysShowPaginator: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        paginatorPosition: [{
          type: Input
        }],
        paginatorStyleClass: [{
          type: Input
        }],
        paginatorDropdownAppendTo: [{
          type: Input
        }],
        paginatorDropdownScrollHeight: [{
          type: Input
        }],
        currentPageReportTemplate: [{
          type: Input
        }],
        showCurrentPageReport: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showJumpToPageDropdown: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showJumpToPageInput: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showFirstLastIcon: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showPageLinks: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        defaultSortOrder: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        sortMode: [{
          type: Input
        }],
        resetPageOnSort: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        selectionMode: [{
          type: Input
        }],
        selectionPageOnly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        contextMenuSelection: [{
          type: Input
        }],
        contextMenuSelectionChange: [{
          type: Output
        }],
        contextMenuSelectionMode: [{
          type: Input
        }],
        dataKey: [{
          type: Input
        }],
        metaKeySelection: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        rowSelectable: [{
          type: Input
        }],
        rowTrackBy: [{
          type: Input
        }],
        lazy: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        lazyLoadOnInit: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        compareSelectionBy: [{
          type: Input
        }],
        csvSeparator: [{
          type: Input
        }],
        exportFilename: [{
          type: Input
        }],
        filters: [{
          type: Input
        }],
        globalFilterFields: [{
          type: Input
        }],
        filterDelay: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        filterLocale: [{
          type: Input
        }],
        expandedRowKeys: [{
          type: Input
        }],
        editingRowKeys: [{
          type: Input
        }],
        rowExpandMode: [{
          type: Input
        }],
        scrollable: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        scrollDirection: [{
          type: Input
        }],
        rowGroupMode: [{
          type: Input
        }],
        scrollHeight: [{
          type: Input
        }],
        virtualScroll: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        virtualScrollItemSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        virtualScrollOptions: [{
          type: Input
        }],
        virtualScrollDelay: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        frozenWidth: [{
          type: Input
        }],
        responsive: [{
          type: Input
        }],
        contextMenu: [{
          type: Input
        }],
        resizableColumns: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        columnResizeMode: [{
          type: Input
        }],
        reorderableColumns: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        loading: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        loadingIcon: [{
          type: Input
        }],
        showLoader: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        rowHover: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        customSort: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showInitialSortBadge: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autoLayout: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        exportFunction: [{
          type: Input
        }],
        exportHeader: [{
          type: Input
        }],
        stateKey: [{
          type: Input
        }],
        stateStorage: [{
          type: Input
        }],
        editMode: [{
          type: Input
        }],
        groupRowsBy: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        showGridlines: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        stripedRows: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        groupRowsByOrder: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        responsiveLayout: [{
          type: Input
        }],
        breakpoint: [{
          type: Input
        }],
        paginatorLocale: [{
          type: Input
        }],
        value: [{
          type: Input
        }],
        columns: [{
          type: Input
        }],
        first: [{
          type: Input
        }],
        rows: [{
          type: Input
        }],
        totalRecords: [{
          type: Input
        }],
        sortField: [{
          type: Input
        }],
        sortOrder: [{
          type: Input
        }],
        multiSortMeta: [{
          type: Input
        }],
        selection: [{
          type: Input
        }],
        virtualRowHeight: [{
          type: Input
        }],
        selectAll: [{
          type: Input
        }],
        selectAllChange: [{
          type: Output
        }],
        selectionChange: [{
          type: Output
        }],
        onRowSelect: [{
          type: Output
        }],
        onRowUnselect: [{
          type: Output
        }],
        onPage: [{
          type: Output
        }],
        onSort: [{
          type: Output
        }],
        onFilter: [{
          type: Output
        }],
        onLazyLoad: [{
          type: Output
        }],
        onRowExpand: [{
          type: Output
        }],
        onRowCollapse: [{
          type: Output
        }],
        onContextMenuSelect: [{
          type: Output
        }],
        onColResize: [{
          type: Output
        }],
        onColReorder: [{
          type: Output
        }],
        onRowReorder: [{
          type: Output
        }],
        onEditInit: [{
          type: Output
        }],
        onEditComplete: [{
          type: Output
        }],
        onEditCancel: [{
          type: Output
        }],
        onHeaderCheckboxToggle: [{
          type: Output
        }],
        sortFunction: [{
          type: Output
        }],
        firstChange: [{
          type: Output
        }],
        rowsChange: [{
          type: Output
        }],
        onStateSave: [{
          type: Output
        }],
        onStateRestore: [{
          type: Output
        }],
        containerViewChild: [{
          type: ViewChild,
          args: ["container"]
        }],
        resizeHelperViewChild: [{
          type: ViewChild,
          args: ["resizeHelper"]
        }],
        reorderIndicatorUpViewChild: [{
          type: ViewChild,
          args: ["reorderIndicatorUp"]
        }],
        reorderIndicatorDownViewChild: [{
          type: ViewChild,
          args: ["reorderIndicatorDown"]
        }],
        wrapperViewChild: [{
          type: ViewChild,
          args: ["wrapper"]
        }],
        tableViewChild: [{
          type: ViewChild,
          args: ["table"]
        }],
        tableHeaderViewChild: [{
          type: ViewChild,
          args: ["thead"]
        }],
        tableFooterViewChild: [{
          type: ViewChild,
          args: ["tfoot"]
        }],
        scroller: [{
          type: ViewChild,
          args: ["scroller"]
        }],
        _templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }],
        _headerTemplate: [{
          type: ContentChild,
          args: ["header", {
            descendants: false
          }]
        }],
        _headerGroupedTemplate: [{
          type: ContentChild,
          args: ["headergrouped", {
            descendants: false
          }]
        }],
        _bodyTemplate: [{
          type: ContentChild,
          args: ["body", {
            descendants: false
          }]
        }],
        _loadingBodyTemplate: [{
          type: ContentChild,
          args: ["loadingbody", {
            descendants: false
          }]
        }],
        _captionTemplate: [{
          type: ContentChild,
          args: ["caption", {
            descendants: false
          }]
        }],
        _footerTemplate: [{
          type: ContentChild,
          args: ["footer", {
            descendants: false
          }]
        }],
        _footerGroupedTemplate: [{
          type: ContentChild,
          args: ["footergrouped", {
            descendants: false
          }]
        }],
        _summaryTemplate: [{
          type: ContentChild,
          args: ["summary", {
            descendants: false
          }]
        }],
        _colGroupTemplate: [{
          type: ContentChild,
          args: ["colgroup", {
            descendants: false
          }]
        }],
        _expandedRowTemplate: [{
          type: ContentChild,
          args: ["expandedrow", {
            descendants: false
          }]
        }],
        _groupHeaderTemplate: [{
          type: ContentChild,
          args: ["groupheader", {
            descendants: false
          }]
        }],
        _groupFooterTemplate: [{
          type: ContentChild,
          args: ["groupfooter", {
            descendants: false
          }]
        }],
        _frozenExpandedRowTemplate: [{
          type: ContentChild,
          args: ["frozenexpandedrow", {
            descendants: false
          }]
        }],
        _frozenHeaderTemplate: [{
          type: ContentChild,
          args: ["frozenheader", {
            descendants: false
          }]
        }],
        _frozenBodyTemplate: [{
          type: ContentChild,
          args: ["frozenbody", {
            descendants: false
          }]
        }],
        _frozenFooterTemplate: [{
          type: ContentChild,
          args: ["frozenfooter", {
            descendants: false
          }]
        }],
        _frozenColGroupTemplate: [{
          type: ContentChild,
          args: ["frozencolgroup", {
            descendants: false
          }]
        }],
        _emptyMessageTemplate: [{
          type: ContentChild,
          args: ["emptymessage", {
            descendants: false
          }]
        }],
        _paginatorLeftTemplate: [{
          type: ContentChild,
          args: ["paginatorleft", {
            descendants: false
          }]
        }],
        _paginatorRightTemplate: [{
          type: ContentChild,
          args: ["paginatorright", {
            descendants: false
          }]
        }],
        _paginatorDropdownItemTemplate: [{
          type: ContentChild,
          args: ["paginatordropdownitem", {
            descendants: false
          }]
        }],
        _loadingIconTemplate: [{
          type: ContentChild,
          args: ["loadingicon", {
            descendants: false
          }]
        }],
        _reorderIndicatorUpIconTemplate: [{
          type: ContentChild,
          args: ["reorderindicatorupicon", {
            descendants: false
          }]
        }],
        _reorderIndicatorDownIconTemplate: [{
          type: ContentChild,
          args: ["reorderindicatordownicon", {
            descendants: false
          }]
        }],
        _sortIconTemplate: [{
          type: ContentChild,
          args: ["sorticon", {
            descendants: false
          }]
        }],
        _checkboxIconTemplate: [{
          type: ContentChild,
          args: ["checkboxicon", {
            descendants: false
          }]
        }],
        _headerCheckboxIconTemplate: [{
          type: ContentChild,
          args: ["headercheckboxicon", {
            descendants: false
          }]
        }],
        _paginatorDropdownIconTemplate: [{
          type: ContentChild,
          args: ["paginatordropdownicon", {
            descendants: false
          }]
        }],
        _paginatorFirstPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["paginatorfirstpagelinkicon", {
            descendants: false
          }]
        }],
        _paginatorLastPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["paginatorlastpagelinkicon", {
            descendants: false
          }]
        }],
        _paginatorPreviousPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["paginatorpreviouspagelinkicon", {
            descendants: false
          }]
        }],
        _paginatorNextPageLinkIconTemplate: [{
          type: ContentChild,
          args: ["paginatornextpagelinkicon", {
            descendants: false
          }]
        }]
      }
    });
    TableBody = class _TableBody {
      dt;
      tableService;
      cd;
      el;
      columns;
      template;
      get value() {
        return this._value;
      }
      set value(val) {
        this._value = val;
        if (this.frozenRows) {
          this.updateFrozenRowStickyPosition();
        }
        if (this.dt.scrollable && this.dt.rowGroupMode === "subheader") {
          this.updateFrozenRowGroupHeaderStickyPosition();
        }
      }
      frozen;
      frozenRows;
      scrollerOptions;
      subscription;
      _value;
      ngAfterViewInit() {
        if (this.frozenRows) {
          this.updateFrozenRowStickyPosition();
        }
        if (this.dt.scrollable && this.dt.rowGroupMode === "subheader") {
          this.updateFrozenRowGroupHeaderStickyPosition();
        }
      }
      constructor(dt, tableService, cd, el) {
        this.dt = dt;
        this.tableService = tableService;
        this.cd = cd;
        this.el = el;
        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {
          if (this.dt.virtualScroll) {
            this.cd.detectChanges();
          }
        });
      }
      shouldRenderRowGroupHeader(value, rowData, i) {
        let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);
        let prevRowData = value[i - this.dt._first - 1];
        if (prevRowData) {
          let previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, this.dt.groupRowsBy);
          return currentRowFieldData !== previousRowFieldData;
        } else {
          return true;
        }
      }
      shouldRenderRowGroupFooter(value, rowData, i) {
        let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);
        let nextRowData = value[i - this.dt._first + 1];
        if (nextRowData) {
          let nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, this.dt.groupRowsBy);
          return currentRowFieldData !== nextRowFieldData;
        } else {
          return true;
        }
      }
      shouldRenderRowspan(value, rowData, i) {
        let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);
        let prevRowData = value[i - 1];
        if (prevRowData) {
          let previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, this.dt.groupRowsBy);
          return currentRowFieldData !== previousRowFieldData;
        } else {
          return true;
        }
      }
      calculateRowGroupSize(value, rowData, index) {
        let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);
        let nextRowFieldData = currentRowFieldData;
        let groupRowSpan = 0;
        while (currentRowFieldData === nextRowFieldData) {
          groupRowSpan++;
          let nextRowData = value[++index];
          if (nextRowData) {
            nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, this.dt.groupRowsBy);
          } else {
            break;
          }
        }
        return groupRowSpan === 1 ? null : groupRowSpan;
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      updateFrozenRowStickyPosition() {
        this.el.nativeElement.style.top = DomHandler.getOuterHeight(this.el.nativeElement.previousElementSibling) + "px";
      }
      updateFrozenRowGroupHeaderStickyPosition() {
        if (this.el.nativeElement.previousElementSibling) {
          let tableHeaderHeight = DomHandler.getOuterHeight(this.el.nativeElement.previousElementSibling);
          this.dt.rowGroupHeaderStyleObject.top = tableHeaderHeight + "px";
        }
      }
      getScrollerOption(option, options) {
        if (this.dt.virtualScroll) {
          options = options || this.scrollerOptions;
          return options ? options[option] : null;
        }
        return null;
      }
      getRowIndex(rowIndex) {
        const index = this.dt.paginator ? this.dt.first + rowIndex : rowIndex;
        const getItemOptions = this.getScrollerOption("getItemOptions");
        return getItemOptions ? getItemOptions(index).index : index;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableBody,
        deps: [{
          token: Table
        }, {
          token: TableService
        }, {
          token: ChangeDetectorRef
        }, {
          token: ElementRef
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _TableBody,
        isStandalone: false,
        selector: "[pTableBody]",
        inputs: {
          columns: ["pTableBody", "columns"],
          template: ["pTableBodyTemplate", "template"],
          value: "value",
          frozen: ["frozen", "frozen", booleanAttribute],
          frozenRows: ["frozenRows", "frozenRows", booleanAttribute],
          scrollerOptions: "scrollerOptions"
        },
        ngImport: core_exports,
        template: `
        <ng-container *ngIf="!dt.expandedRowTemplate && !dt._expandedRowTemplate">
            <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="value" [ngForTrackBy]="dt.rowTrackBy">
                <ng-container *ngIf="(dt.groupHeaderTemplate || dt._groupHeaderTemplate) && !dt.virtualScroll && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupHeader(value, rowData, getRowIndex(rowIndex))" role="row">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.groupHeaderTemplate || dt._groupHeaderTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="dt.rowGroupMode !== 'rowspan'">
                    <ng-container
                        *ngTemplateOutlet="
                            rowData ? template : dt.loadingBodyTemplate || dt._loadingBodyTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="dt.rowGroupMode === 'rowspan'">
                    <ng-container
                        *ngTemplateOutlet="
                            rowData ? template : dt.loadingBodyTemplate || dt._loadingBodyTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen,
                                rowgroup: shouldRenderRowspan(value, rowData, rowIndex),
                                rowspan: calculateRowGroupSize(value, rowData, rowIndex)
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="(dt.groupFooterTemplate || dt._groupFooterTemplate) && !dt.virtualScroll && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupFooter(value, rowData, getRowIndex(rowIndex))" role="row">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.groupFooterTemplate || dt._groupFooterTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
            </ng-template>
        </ng-container>
        <ng-container *ngIf="(dt.expandedRowTemplate || dt._expandedRowTemplate) && !(frozen && (dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate))">
            <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="value" [ngForTrackBy]="dt.rowTrackBy">
                <ng-container *ngIf="!(dt.groupHeaderTemplate && dt._groupHeaderTemplate)">
                    <ng-container
                        *ngTemplateOutlet="
                            template;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                expanded: dt.isRowExpanded(rowData),
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="(dt.groupHeaderTemplate || dt._groupHeaderTemplate) && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupHeader(value, rowData, getRowIndex(rowIndex))" role="row">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.groupHeaderTemplate || dt._groupHeaderTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                expanded: dt.isRowExpanded(rowData),
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="dt.isRowExpanded(rowData)">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.expandedRowTemplate || dt._expandedRowTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                    <ng-container *ngIf="(dt.groupFooterTemplate || dt._groupFooterTemplate) && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupFooter(value, rowData, getRowIndex(rowIndex))" role="row">
                        <ng-container
                            *ngTemplateOutlet="
                                dt.groupFooterTemplate || dt._groupFooterTemplate;
                                context: {
                                    $implicit: rowData,
                                    rowIndex: getRowIndex(rowIndex),
                                    columns: columns,
                                    expanded: dt.isRowExpanded(rowData),
                                    editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                    frozen: frozen
                                }
                            "
                        ></ng-container>
                    </ng-container>
                </ng-container>
            </ng-template>
        </ng-container>
        <ng-container *ngIf="(dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate) && frozen">
            <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="value" [ngForTrackBy]="dt.rowTrackBy">
                <ng-container
                    *ngTemplateOutlet="
                        template;
                        context: {
                            $implicit: rowData,
                            rowIndex: getRowIndex(rowIndex),
                            columns: columns,
                            expanded: dt.isRowExpanded(rowData),
                            editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                            frozen: frozen
                        }
                    "
                ></ng-container>
                <ng-container *ngIf="dt.isRowExpanded(rowData)">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
            </ng-template>
        </ng-container>
        <ng-container *ngIf="dt.loading">
            <ng-container *ngTemplateOutlet="dt.loadingBodyTemplate || dt._loadingBodyTemplate; context: { $implicit: columns, frozen: frozen }"></ng-container>
        </ng-container>
        <ng-container *ngIf="dt.isEmpty() && !dt.loading">
            <ng-container *ngTemplateOutlet="dt.emptyMessageTemplate || dt._emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }"></ng-container>
        </ng-container>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: NgForOf,
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }],
        changeDetection: ChangeDetectionStrategy.Default,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TableBody,
      decorators: [{
        type: Component,
        args: [{
          selector: "[pTableBody]",
          standalone: false,
          template: `
        <ng-container *ngIf="!dt.expandedRowTemplate && !dt._expandedRowTemplate">
            <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="value" [ngForTrackBy]="dt.rowTrackBy">
                <ng-container *ngIf="(dt.groupHeaderTemplate || dt._groupHeaderTemplate) && !dt.virtualScroll && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupHeader(value, rowData, getRowIndex(rowIndex))" role="row">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.groupHeaderTemplate || dt._groupHeaderTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="dt.rowGroupMode !== 'rowspan'">
                    <ng-container
                        *ngTemplateOutlet="
                            rowData ? template : dt.loadingBodyTemplate || dt._loadingBodyTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="dt.rowGroupMode === 'rowspan'">
                    <ng-container
                        *ngTemplateOutlet="
                            rowData ? template : dt.loadingBodyTemplate || dt._loadingBodyTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen,
                                rowgroup: shouldRenderRowspan(value, rowData, rowIndex),
                                rowspan: calculateRowGroupSize(value, rowData, rowIndex)
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="(dt.groupFooterTemplate || dt._groupFooterTemplate) && !dt.virtualScroll && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupFooter(value, rowData, getRowIndex(rowIndex))" role="row">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.groupFooterTemplate || dt._groupFooterTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
            </ng-template>
        </ng-container>
        <ng-container *ngIf="(dt.expandedRowTemplate || dt._expandedRowTemplate) && !(frozen && (dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate))">
            <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="value" [ngForTrackBy]="dt.rowTrackBy">
                <ng-container *ngIf="!(dt.groupHeaderTemplate && dt._groupHeaderTemplate)">
                    <ng-container
                        *ngTemplateOutlet="
                            template;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                expanded: dt.isRowExpanded(rowData),
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="(dt.groupHeaderTemplate || dt._groupHeaderTemplate) && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupHeader(value, rowData, getRowIndex(rowIndex))" role="row">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.groupHeaderTemplate || dt._groupHeaderTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                expanded: dt.isRowExpanded(rowData),
                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
                <ng-container *ngIf="dt.isRowExpanded(rowData)">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.expandedRowTemplate || dt._expandedRowTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                    <ng-container *ngIf="(dt.groupFooterTemplate || dt._groupFooterTemplate) && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupFooter(value, rowData, getRowIndex(rowIndex))" role="row">
                        <ng-container
                            *ngTemplateOutlet="
                                dt.groupFooterTemplate || dt._groupFooterTemplate;
                                context: {
                                    $implicit: rowData,
                                    rowIndex: getRowIndex(rowIndex),
                                    columns: columns,
                                    expanded: dt.isRowExpanded(rowData),
                                    editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                                    frozen: frozen
                                }
                            "
                        ></ng-container>
                    </ng-container>
                </ng-container>
            </ng-template>
        </ng-container>
        <ng-container *ngIf="(dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate) && frozen">
            <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="value" [ngForTrackBy]="dt.rowTrackBy">
                <ng-container
                    *ngTemplateOutlet="
                        template;
                        context: {
                            $implicit: rowData,
                            rowIndex: getRowIndex(rowIndex),
                            columns: columns,
                            expanded: dt.isRowExpanded(rowData),
                            editing: dt.editMode === 'row' && dt.isRowEditing(rowData),
                            frozen: frozen
                        }
                    "
                ></ng-container>
                <ng-container *ngIf="dt.isRowExpanded(rowData)">
                    <ng-container
                        *ngTemplateOutlet="
                            dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate;
                            context: {
                                $implicit: rowData,
                                rowIndex: getRowIndex(rowIndex),
                                columns: columns,
                                frozen: frozen
                            }
                        "
                    ></ng-container>
                </ng-container>
            </ng-template>
        </ng-container>
        <ng-container *ngIf="dt.loading">
            <ng-container *ngTemplateOutlet="dt.loadingBodyTemplate || dt._loadingBodyTemplate; context: { $implicit: columns, frozen: frozen }"></ng-container>
        </ng-container>
        <ng-container *ngIf="dt.isEmpty() && !dt.loading">
            <ng-container *ngTemplateOutlet="dt.emptyMessageTemplate || dt._emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }"></ng-container>
        </ng-container>
    `,
          changeDetection: ChangeDetectionStrategy.Default,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: TableService
      }, {
        type: ChangeDetectorRef
      }, {
        type: ElementRef
      }],
      propDecorators: {
        columns: [{
          type: Input,
          args: ["pTableBody"]
        }],
        template: [{
          type: Input,
          args: ["pTableBodyTemplate"]
        }],
        value: [{
          type: Input
        }],
        frozen: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        frozenRows: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        scrollerOptions: [{
          type: Input
        }]
      }
    });
    RowGroupHeader = class _RowGroupHeader {
      dt;
      constructor(dt) {
        this.dt = dt;
      }
      get getFrozenRowGroupHeaderStickyPosition() {
        return this.dt.rowGroupHeaderStyleObject ? this.dt.rowGroupHeaderStyleObject.top : "";
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RowGroupHeader,
        deps: [{
          token: Table
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _RowGroupHeader,
        isStandalone: false,
        selector: "[pRowGroupHeader]",
        host: {
          properties: {
            "style.top": "getFrozenRowGroupHeaderStickyPosition"
          },
          classAttribute: "p-datatable-row-group-header"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RowGroupHeader,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pRowGroupHeader]",
          standalone: false,
          host: {
            class: "p-datatable-row-group-header",
            "[style.top]": "getFrozenRowGroupHeaderStickyPosition"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }]
    });
    FrozenColumn = class _FrozenColumn {
      el;
      zone;
      get frozen() {
        return this._frozen;
      }
      set frozen(val) {
        this._frozen = val;
        Promise.resolve(null).then(() => this.updateStickyPosition());
      }
      alignFrozen = "left";
      constructor(el, zone) {
        this.el = el;
        this.zone = zone;
      }
      ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
          setTimeout(() => {
            this.recalculateColumns();
          }, 1e3);
        });
      }
      recalculateColumns() {
        const siblings = DomHandler.siblings(this.el.nativeElement);
        const index = DomHandler.index(this.el.nativeElement);
        const time = (siblings.length - index + 1) * 50;
        setTimeout(() => {
          this.updateStickyPosition();
        }, time);
      }
      _frozen = true;
      updateStickyPosition() {
        if (this._frozen) {
          if (this.alignFrozen === "right") {
            let right = 0;
            let sibling = this.el.nativeElement.nextElementSibling;
            while (sibling) {
              right += DomHandler.getOuterWidth(sibling);
              sibling = sibling.nextElementSibling;
            }
            this.el.nativeElement.style.right = right + "px";
          } else {
            let left = 0;
            let sibling = this.el.nativeElement.previousElementSibling;
            while (sibling) {
              left += DomHandler.getOuterWidth(sibling);
              sibling = sibling.previousElementSibling;
            }
            this.el.nativeElement.style.left = left + "px";
          }
          const filterRow = this.el.nativeElement?.parentElement?.nextElementSibling;
          if (filterRow) {
            let index = DomHandler.index(this.el.nativeElement);
            if (filterRow.children && filterRow.children[index]) {
              filterRow.children[index].style.left = this.el.nativeElement.style.left;
              filterRow.children[index].style.right = this.el.nativeElement.style.right;
            }
          }
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _FrozenColumn,
        deps: [{
          token: ElementRef
        }, {
          token: NgZone
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _FrozenColumn,
        isStandalone: false,
        selector: "[pFrozenColumn]",
        inputs: {
          frozen: "frozen",
          alignFrozen: "alignFrozen"
        },
        host: {
          listeners: {
            "window:resize": "recalculateColumns($event)"
          },
          properties: {
            "class.p-datatable-frozen-column": "frozen",
            "class.p-datatable-frozen-column-left": 'alignFrozen === "left"'
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: FrozenColumn,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pFrozenColumn]",
          standalone: false,
          host: {
            "[class.p-datatable-frozen-column]": "frozen",
            "[class.p-datatable-frozen-column-left]": 'alignFrozen === "left"'
          }
        }]
      }],
      ctorParameters: () => [{
        type: ElementRef
      }, {
        type: NgZone
      }],
      propDecorators: {
        frozen: [{
          type: Input
        }],
        alignFrozen: [{
          type: Input
        }],
        recalculateColumns: [{
          type: HostListener,
          args: ["window:resize", ["$event"]]
        }]
      }
    });
    SortableColumn = class _SortableColumn {
      dt;
      #elementRef = inject(ElementRef);
      field;
      pSortableColumnDisabled;
      role = this.#elementRef.nativeElement?.tagName !== "TH" ? "columnheader" : null;
      sorted;
      sortOrder;
      subscription;
      constructor(dt) {
        this.dt = dt;
        if (this.isEnabled()) {
          this.subscription = this.dt.tableService.sortSource$.subscribe((sortMeta) => {
            this.updateSortState();
          });
        }
      }
      ngOnInit() {
        if (this.isEnabled()) {
          this.updateSortState();
        }
      }
      updateSortState() {
        let sorted = false;
        let sortOrder = 0;
        if (this.dt.sortMode === "single") {
          sorted = this.dt.isSorted(this.field);
          sortOrder = this.dt.sortOrder;
        } else if (this.dt.sortMode === "multiple") {
          const sortMeta = this.dt.getSortMeta(this.field);
          sorted = !!sortMeta;
          sortOrder = sortMeta ? sortMeta.order : 0;
        }
        this.sorted = sorted;
        this.sortOrder = sorted ? sortOrder === 1 ? "ascending" : "descending" : "none";
      }
      onClick(event2) {
        if (this.isEnabled() && !this.isFilterElement(event2.target)) {
          this.updateSortState();
          this.dt.sort({
            originalEvent: event2,
            field: this.field
          });
          DomHandler.clearSelection();
        }
      }
      onEnterKey(event2) {
        this.onClick(event2);
        event2.preventDefault();
      }
      isEnabled() {
        return this.pSortableColumnDisabled !== true;
      }
      isFilterElement(element) {
        return this.isFilterElementIconOrButton(element) || this.isFilterElementIconOrButton(element?.parentElement?.parentElement);
      }
      isFilterElementIconOrButton(element) {
        return DomHandler.hasClass(element, "pi-filter-icon") || DomHandler.hasClass(element, "p-column-filter-menu-button");
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SortableColumn,
        deps: [{
          token: Table
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _SortableColumn,
        isStandalone: false,
        selector: "[pSortableColumn]",
        inputs: {
          field: ["pSortableColumn", "field"],
          pSortableColumnDisabled: ["pSortableColumnDisabled", "pSortableColumnDisabled", booleanAttribute]
        },
        host: {
          listeners: {
            "click": "onClick($event)",
            "keydown.space": "onEnterKey($event)",
            "keydown.enter": "onEnterKey($event)"
          },
          properties: {
            "class.p-datatable-sortable-column": "isEnabled()",
            "class.p-datatable-column-sorted": "sorted",
            "attr.tabindex": 'isEnabled() ? "0" : null',
            "attr.role": "role",
            "attr.aria-sort": "sortOrder"
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SortableColumn,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pSortableColumn]",
          standalone: false,
          host: {
            "[class.p-datatable-sortable-column]": "isEnabled()",
            "[class.p-datatable-column-sorted]": "sorted",
            "[attr.tabindex]": 'isEnabled() ? "0" : null',
            "[attr.role]": "role",
            "[attr.aria-sort]": "sortOrder"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }],
      propDecorators: {
        field: [{
          type: Input,
          args: ["pSortableColumn"]
        }],
        pSortableColumnDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }],
        onEnterKey: [{
          type: HostListener,
          args: ["keydown.space", ["$event"]]
        }, {
          type: HostListener,
          args: ["keydown.enter", ["$event"]]
        }]
      }
    });
    SortIcon = class _SortIcon {
      dt;
      cd;
      field;
      subscription;
      sortOrder;
      constructor(dt, cd) {
        this.dt = dt;
        this.cd = cd;
        this.subscription = this.dt.tableService.sortSource$.subscribe((sortMeta) => {
          this.updateSortState();
        });
      }
      ngOnInit() {
        this.updateSortState();
      }
      onClick(event2) {
        event2.preventDefault();
      }
      updateSortState() {
        if (this.dt.sortMode === "single") {
          this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;
        } else if (this.dt.sortMode === "multiple") {
          let sortMeta = this.dt.getSortMeta(this.field);
          this.sortOrder = sortMeta ? sortMeta.order : 0;
        }
        this.cd.markForCheck();
      }
      getMultiSortMetaIndex() {
        let multiSortMeta = this.dt._multiSortMeta;
        let index = -1;
        if (multiSortMeta && this.dt.sortMode === "multiple" && this.dt.showInitialSortBadge && multiSortMeta.length > 1) {
          for (let i = 0; i < multiSortMeta.length; i++) {
            let meta = multiSortMeta[i];
            if (meta.field === this.field || meta.field === this.field) {
              index = i;
              break;
            }
          }
        }
        return index;
      }
      getBadgeValue() {
        let index = this.getMultiSortMetaIndex();
        return this.dt.groupRowsBy && index > -1 ? index : index + 1;
      }
      isMultiSorted() {
        return this.dt.sortMode === "multiple" && this.getMultiSortMetaIndex() > -1;
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SortIcon,
        deps: [{
          token: Table
        }, {
          token: ChangeDetectorRef
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _SortIcon,
        isStandalone: false,
        selector: "p-sortIcon",
        inputs: {
          field: "field"
        },
        ngImport: core_exports,
        template: `
        <ng-container *ngIf="!(dt.sortIconTemplate || dt._sortIconTemplate)">
            <SortAltIcon [styleClass]="'p-sortable-column-icon'" *ngIf="sortOrder === 0" />
            <SortAmountUpAltIcon [styleClass]="'p-sortable-column-icon'" *ngIf="sortOrder === 1" />
            <SortAmountDownIcon [styleClass]="'p-sortable-column-icon'" *ngIf="sortOrder === -1" />
        </ng-container>
        <span *ngIf="dt.sortIconTemplate || dt._sortIconTemplate" class="p-sortable-column-icon">
            <ng-template *ngTemplateOutlet="dt.sortIconTemplate || dt._sortIconTemplate; context: { $implicit: sortOrder }"></ng-template>
        </span>
        <span *ngIf="isMultiSorted()" class="p-sortable-column-badge">{{ getBadgeValue() }}</span>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: forwardRef(() => NgIf),
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgTemplateOutlet),
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "component",
          type: forwardRef(() => SortAltIcon),
          selector: "SortAltIcon"
        }, {
          kind: "component",
          type: forwardRef(() => SortAmountUpAltIcon),
          selector: "SortAmountUpAltIcon"
        }, {
          kind: "component",
          type: forwardRef(() => SortAmountDownIcon),
          selector: "SortAmountDownIcon"
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SortIcon,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-sortIcon",
          standalone: false,
          template: `
        <ng-container *ngIf="!(dt.sortIconTemplate || dt._sortIconTemplate)">
            <SortAltIcon [styleClass]="'p-sortable-column-icon'" *ngIf="sortOrder === 0" />
            <SortAmountUpAltIcon [styleClass]="'p-sortable-column-icon'" *ngIf="sortOrder === 1" />
            <SortAmountDownIcon [styleClass]="'p-sortable-column-icon'" *ngIf="sortOrder === -1" />
        </ng-container>
        <span *ngIf="dt.sortIconTemplate || dt._sortIconTemplate" class="p-sortable-column-icon">
            <ng-template *ngTemplateOutlet="dt.sortIconTemplate || dt._sortIconTemplate; context: { $implicit: sortOrder }"></ng-template>
        </span>
        <span *ngIf="isMultiSorted()" class="p-sortable-column-badge">{{ getBadgeValue() }}</span>
    `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: ChangeDetectorRef
      }],
      propDecorators: {
        field: [{
          type: Input
        }]
      }
    });
    SelectableRow = class _SelectableRow {
      dt;
      tableService;
      el;
      data;
      index;
      pSelectableRowDisabled;
      selected;
      subscription;
      constructor(dt, tableService, el) {
        this.dt = dt;
        this.tableService = tableService;
        this.el = el;
        if (this.isEnabled()) {
          this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {
            this.selected = this.dt.isSelected(this.data);
          });
        }
      }
      setRowTabIndex() {
        if (this.dt.selectionMode === "single" || this.dt.selectionMode === "multiple") {
          return !this.dt.selection ? 0 : this.dt.anchorRowIndex === this.index ? 0 : -1;
        }
      }
      ngOnInit() {
        if (this.isEnabled()) {
          this.selected = this.dt.isSelected(this.data);
        }
      }
      onClick(event2) {
        if (this.isEnabled()) {
          this.dt.handleRowClick({
            originalEvent: event2,
            rowData: this.data,
            rowIndex: this.index
          });
        }
      }
      onTouchEnd(event2) {
        if (this.isEnabled()) {
          this.dt.handleRowTouchEnd(event2);
        }
      }
      onKeyDown(event2) {
        switch (event2.code) {
          case "ArrowDown":
            this.onArrowDownKey(event2);
            break;
          case "ArrowUp":
            this.onArrowUpKey(event2);
            break;
          case "Home":
            this.onHomeKey(event2);
            break;
          case "End":
            this.onEndKey(event2);
            break;
          case "Space":
            this.onSpaceKey(event2);
            break;
          case "Enter":
            this.onEnterKey(event2);
            break;
          default:
            if (event2.code === "KeyA" && (event2.metaKey || event2.ctrlKey) && this.dt.selectionMode === "multiple") {
              const data = this.dt.dataToRender(this.dt.processedData);
              this.dt.selection = [...data];
              this.dt.selectRange(event2, data.length - 1, true);
              event2.preventDefault();
            }
            break;
        }
      }
      onArrowDownKey(event2) {
        if (!this.isEnabled()) {
          return;
        }
        const row = event2.currentTarget;
        const nextRow = this.findNextSelectableRow(row);
        if (nextRow) {
          nextRow.focus();
        }
        event2.preventDefault();
      }
      onArrowUpKey(event2) {
        if (!this.isEnabled()) {
          return;
        }
        const row = event2.currentTarget;
        const prevRow = this.findPrevSelectableRow(row);
        if (prevRow) {
          prevRow.focus();
        }
        event2.preventDefault();
      }
      onEnterKey(event2) {
        if (!this.isEnabled()) {
          return;
        }
        this.dt.handleRowClick({
          originalEvent: event2,
          rowData: this.data,
          rowIndex: this.index
        });
      }
      onEndKey(event2) {
        const lastRow = this.findLastSelectableRow();
        lastRow && this.focusRowChange(this.el.nativeElement, lastRow);
        if (event2.ctrlKey && event2.shiftKey) {
          const data = this.dt.dataToRender(this.dt.rows);
          const lastSelectableRowIndex = DomHandler.getAttribute(lastRow, "index");
          this.dt.anchorRowIndex = lastSelectableRowIndex;
          this.dt.selection = data.slice(this.index, data.length);
          this.dt.selectRange(event2, this.index);
        }
        event2.preventDefault();
      }
      onHomeKey(event2) {
        const firstRow = this.findFirstSelectableRow();
        firstRow && this.focusRowChange(this.el.nativeElement, firstRow);
        if (event2.ctrlKey && event2.shiftKey) {
          const data = this.dt.dataToRender(this.dt.rows);
          const firstSelectableRowIndex = DomHandler.getAttribute(firstRow, "index");
          this.dt.anchorRowIndex = this.dt.anchorRowIndex || firstSelectableRowIndex;
          this.dt.selection = data.slice(0, this.index + 1);
          this.dt.selectRange(event2, this.index);
        }
        event2.preventDefault();
      }
      onSpaceKey(event2) {
        const isInput = event2.target instanceof HTMLInputElement || event2.target instanceof HTMLSelectElement || event2.target instanceof HTMLTextAreaElement;
        if (isInput) {
          return;
        } else {
          this.onEnterKey(event2);
          if (event2.shiftKey && this.dt.selection !== null) {
            const data = this.dt.dataToRender(this.dt.rows);
            let index;
            if (ObjectUtils.isNotEmpty(this.dt.selection) && this.dt.selection.length > 0) {
              let firstSelectedRowIndex, lastSelectedRowIndex;
              firstSelectedRowIndex = ObjectUtils.findIndexInList(this.dt.selection[0], data);
              lastSelectedRowIndex = ObjectUtils.findIndexInList(this.dt.selection[this.dt.selection.length - 1], data);
              index = this.index <= firstSelectedRowIndex ? lastSelectedRowIndex : firstSelectedRowIndex;
            } else {
              index = ObjectUtils.findIndexInList(this.dt.selection, data);
            }
            this.dt.anchorRowIndex = index;
            this.dt.selection = index !== this.index ? data.slice(Math.min(index, this.index), Math.max(index, this.index) + 1) : [this.data];
            this.dt.selectRange(event2, this.index);
          }
          event2.preventDefault();
        }
      }
      focusRowChange(firstFocusableRow, currentFocusedRow) {
        firstFocusableRow.tabIndex = "-1";
        currentFocusedRow.tabIndex = "0";
        DomHandler.focus(currentFocusedRow);
      }
      findLastSelectableRow() {
        const rows = DomHandler.find(this.dt.el.nativeElement, ".p-datatable-selectable-row");
        return rows ? rows[rows.length - 1] : null;
      }
      findFirstSelectableRow() {
        const firstRow = DomHandler.findSingle(this.dt.el.nativeElement, ".p-datatable-selectable-row");
        return firstRow;
      }
      findNextSelectableRow(row) {
        let nextRow = row.nextElementSibling;
        if (nextRow) {
          if (DomHandler.hasClass(nextRow, "p-datatable-selectable-row")) return nextRow;
          else return this.findNextSelectableRow(nextRow);
        } else {
          return null;
        }
      }
      findPrevSelectableRow(row) {
        let prevRow = row.previousElementSibling;
        if (prevRow) {
          if (DomHandler.hasClass(prevRow, "p-datatable-selectable-row")) return prevRow;
          else return this.findPrevSelectableRow(prevRow);
        } else {
          return null;
        }
      }
      isEnabled() {
        return this.pSelectableRowDisabled !== true;
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectableRow,
        deps: [{
          token: Table
        }, {
          token: TableService
        }, {
          token: ElementRef
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _SelectableRow,
        isStandalone: false,
        selector: "[pSelectableRow]",
        inputs: {
          data: ["pSelectableRow", "data"],
          index: ["pSelectableRowIndex", "index"],
          pSelectableRowDisabled: ["pSelectableRowDisabled", "pSelectableRowDisabled", booleanAttribute]
        },
        host: {
          listeners: {
            "click": "onClick($event)",
            "touchend": "onTouchEnd($event)",
            "keydown": "onKeyDown($event)"
          },
          properties: {
            "class.p-datatable-selectable-row": "isEnabled()",
            "class.p-datatable-row-selected": "selected",
            "attr.tabindex": "setRowTabIndex()",
            "attr.data-p-selectable-row": "true"
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectableRow,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pSelectableRow]",
          standalone: false,
          host: {
            "[class.p-datatable-selectable-row]": "isEnabled()",
            "[class.p-datatable-row-selected]": "selected",
            "[attr.tabindex]": "setRowTabIndex()",
            "[attr.data-p-selectable-row]": "true"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: TableService
      }, {
        type: ElementRef
      }],
      propDecorators: {
        data: [{
          type: Input,
          args: ["pSelectableRow"]
        }],
        index: [{
          type: Input,
          args: ["pSelectableRowIndex"]
        }],
        pSelectableRowDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }],
        onTouchEnd: [{
          type: HostListener,
          args: ["touchend", ["$event"]]
        }],
        onKeyDown: [{
          type: HostListener,
          args: ["keydown", ["$event"]]
        }]
      }
    });
    SelectableRowDblClick = class _SelectableRowDblClick {
      dt;
      tableService;
      data;
      index;
      pSelectableRowDisabled;
      selected;
      subscription;
      constructor(dt, tableService) {
        this.dt = dt;
        this.tableService = tableService;
        if (this.isEnabled()) {
          this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {
            this.selected = this.dt.isSelected(this.data);
          });
        }
      }
      ngOnInit() {
        if (this.isEnabled()) {
          this.selected = this.dt.isSelected(this.data);
        }
      }
      onClick(event2) {
        if (this.isEnabled()) {
          this.dt.handleRowClick({
            originalEvent: event2,
            rowData: this.data,
            rowIndex: this.index
          });
        }
      }
      isEnabled() {
        return this.pSelectableRowDisabled !== true;
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SelectableRowDblClick,
        deps: [{
          token: Table
        }, {
          token: TableService
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _SelectableRowDblClick,
        isStandalone: false,
        selector: "[pSelectableRowDblClick]",
        inputs: {
          data: ["pSelectableRowDblClick", "data"],
          index: ["pSelectableRowIndex", "index"],
          pSelectableRowDisabled: ["pSelectableRowDisabled", "pSelectableRowDisabled", booleanAttribute]
        },
        host: {
          listeners: {
            "dblclick": "onClick($event)"
          },
          properties: {
            "class.p-selectable-row": "isEnabled()",
            "class.p-highlight": "selected"
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SelectableRowDblClick,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pSelectableRowDblClick]",
          standalone: false,
          host: {
            "[class.p-selectable-row]": "isEnabled()",
            "[class.p-highlight]": "selected"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: TableService
      }],
      propDecorators: {
        data: [{
          type: Input,
          args: ["pSelectableRowDblClick"]
        }],
        index: [{
          type: Input,
          args: ["pSelectableRowIndex"]
        }],
        pSelectableRowDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: HostListener,
          args: ["dblclick", ["$event"]]
        }]
      }
    });
    ContextMenuRow = class _ContextMenuRow {
      dt;
      tableService;
      el;
      data;
      index;
      pContextMenuRowDisabled;
      selected;
      subscription;
      constructor(dt, tableService, el) {
        this.dt = dt;
        this.tableService = tableService;
        this.el = el;
        if (this.isEnabled()) {
          this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {
            this.selected = this.dt.equals(this.data, data);
          });
        }
      }
      onContextMenu(event2) {
        if (this.isEnabled()) {
          this.dt.handleRowRightClick({
            originalEvent: event2,
            rowData: this.data,
            rowIndex: this.index
          });
          this.el.nativeElement.focus();
          event2.preventDefault();
        }
      }
      isEnabled() {
        return this.pContextMenuRowDisabled !== true;
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ContextMenuRow,
        deps: [{
          token: Table
        }, {
          token: TableService
        }, {
          token: ElementRef
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _ContextMenuRow,
        isStandalone: false,
        selector: "[pContextMenuRow]",
        inputs: {
          data: ["pContextMenuRow", "data"],
          index: ["pContextMenuRowIndex", "index"],
          pContextMenuRowDisabled: ["pContextMenuRowDisabled", "pContextMenuRowDisabled", booleanAttribute]
        },
        host: {
          listeners: {
            "contextmenu": "onContextMenu($event)"
          },
          properties: {
            "class.p-highlight-contextmenu": "selected",
            "attr.tabindex": "isEnabled() ? 0 : undefined"
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ContextMenuRow,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pContextMenuRow]",
          standalone: false,
          host: {
            "[class.p-highlight-contextmenu]": "selected",
            "[attr.tabindex]": "isEnabled() ? 0 : undefined"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: TableService
      }, {
        type: ElementRef
      }],
      propDecorators: {
        data: [{
          type: Input,
          args: ["pContextMenuRow"]
        }],
        index: [{
          type: Input,
          args: ["pContextMenuRowIndex"]
        }],
        pContextMenuRowDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onContextMenu: [{
          type: HostListener,
          args: ["contextmenu", ["$event"]]
        }]
      }
    });
    RowToggler = class _RowToggler {
      dt;
      data;
      pRowTogglerDisabled;
      constructor(dt) {
        this.dt = dt;
      }
      onClick(event2) {
        if (this.isEnabled()) {
          this.dt.toggleRow(this.data, event2);
          event2.preventDefault();
        }
      }
      isEnabled() {
        return this.pRowTogglerDisabled !== true;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _RowToggler,
        deps: [{
          token: Table
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _RowToggler,
        isStandalone: false,
        selector: "[pRowToggler]",
        inputs: {
          data: ["pRowToggler", "data"],
          pRowTogglerDisabled: ["pRowTogglerDisabled", "pRowTogglerDisabled", booleanAttribute]
        },
        host: {
          listeners: {
            "click": "onClick($event)"
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: RowToggler,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pRowToggler]",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }],
      propDecorators: {
        data: [{
          type: Input,
          args: ["pRowToggler"]
        }],
        pRowTogglerDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }]
      }
    });
    ResizableColumn = class _ResizableColumn {
      document;
      platformId;
      renderer;
      dt;
      el;
      zone;
      pResizableColumnDisabled;
      resizer;
      resizerMouseDownListener;
      resizerTouchStartListener;
      resizerTouchMoveListener;
      resizerTouchEndListener;
      documentMouseMoveListener;
      documentMouseUpListener;
      constructor(document2, platformId, renderer, dt, el, zone) {
        this.document = document2;
        this.platformId = platformId;
        this.renderer = renderer;
        this.dt = dt;
        this.el = el;
        this.zone = zone;
      }
      ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
          if (this.isEnabled()) {
            DomHandler.addClass(this.el.nativeElement, "p-datatable-resizable-column");
            this.resizer = this.renderer.createElement("span");
            this.renderer.addClass(this.resizer, "p-datatable-column-resizer");
            this.renderer.appendChild(this.el.nativeElement, this.resizer);
            this.zone.runOutsideAngular(() => {
              this.resizerMouseDownListener = this.renderer.listen(this.resizer, "mousedown", this.onMouseDown.bind(this));
              this.resizerTouchStartListener = this.renderer.listen(this.resizer, "touchstart", this.onTouchStart.bind(this));
            });
          }
        }
      }
      bindDocumentEvents() {
        this.zone.runOutsideAngular(() => {
          this.documentMouseMoveListener = this.renderer.listen(this.document, "mousemove", this.onDocumentMouseMove.bind(this));
          this.documentMouseUpListener = this.renderer.listen(this.document, "mouseup", this.onDocumentMouseUp.bind(this));
          this.resizerTouchMoveListener = this.renderer.listen(this.resizer, "touchmove", this.onTouchMove.bind(this));
          this.resizerTouchEndListener = this.renderer.listen(this.resizer, "touchend", this.onTouchEnd.bind(this));
        });
      }
      unbindDocumentEvents() {
        if (this.documentMouseMoveListener) {
          this.documentMouseMoveListener();
          this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
          this.documentMouseUpListener();
          this.documentMouseUpListener = null;
        }
        if (this.resizerTouchMoveListener) {
          this.resizerTouchMoveListener();
          this.resizerTouchMoveListener = null;
        }
        if (this.resizerTouchEndListener) {
          this.resizerTouchEndListener();
          this.resizerTouchEndListener = null;
        }
      }
      onMouseDown(event2) {
        this.dt.onColumnResizeBegin(event2);
        this.bindDocumentEvents();
      }
      onTouchStart(event2) {
        this.dt.onColumnResizeBegin(event2);
        this.bindDocumentEvents();
      }
      onTouchMove(event2) {
        this.dt.onColumnResize(event2);
      }
      onDocumentMouseMove(event2) {
        this.dt.onColumnResize(event2);
      }
      onDocumentMouseUp(event2) {
        this.dt.onColumnResizeEnd();
        this.unbindDocumentEvents();
      }
      onTouchEnd(event2) {
        this.dt.onColumnResizeEnd();
        this.unbindDocumentEvents();
      }
      isEnabled() {
        return this.pResizableColumnDisabled !== true;
      }
      ngOnDestroy() {
        if (this.resizerMouseDownListener) {
          this.resizerMouseDownListener();
          this.resizerMouseDownListener = null;
        }
        this.unbindDocumentEvents();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ResizableColumn,
        deps: [{
          token: DOCUMENT
        }, {
          token: PLATFORM_ID
        }, {
          token: Renderer2
        }, {
          token: Table
        }, {
          token: ElementRef
        }, {
          token: NgZone
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _ResizableColumn,
        isStandalone: false,
        selector: "[pResizableColumn]",
        inputs: {
          pResizableColumnDisabled: ["pResizableColumnDisabled", "pResizableColumnDisabled", booleanAttribute]
        },
        host: {
          classAttribute: "p-datatable-resizable-column"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ResizableColumn,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pResizableColumn]",
          standalone: false,
          host: {
            class: "p-datatable-resizable-column"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Document,
        decorators: [{
          type: Inject,
          args: [DOCUMENT]
        }]
      }, {
        type: void 0,
        decorators: [{
          type: Inject,
          args: [PLATFORM_ID]
        }]
      }, {
        type: Renderer2
      }, {
        type: Table
      }, {
        type: ElementRef
      }, {
        type: NgZone
      }],
      propDecorators: {
        pResizableColumnDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }]
      }
    });
    ReorderableColumn = class _ReorderableColumn {
      platformId;
      renderer;
      dt;
      el;
      zone;
      pReorderableColumnDisabled;
      dragStartListener;
      dragOverListener;
      dragEnterListener;
      dragLeaveListener;
      mouseDownListener;
      constructor(platformId, renderer, dt, el, zone) {
        this.platformId = platformId;
        this.renderer = renderer;
        this.dt = dt;
        this.el = el;
        this.zone = zone;
      }
      ngAfterViewInit() {
        if (this.isEnabled()) {
          this.bindEvents();
        }
      }
      bindEvents() {
        if (isPlatformBrowser(this.platformId)) {
          this.zone.runOutsideAngular(() => {
            this.mouseDownListener = this.renderer.listen(this.el.nativeElement, "mousedown", this.onMouseDown.bind(this));
            this.dragStartListener = this.renderer.listen(this.el.nativeElement, "dragstart", this.onDragStart.bind(this));
            this.dragOverListener = this.renderer.listen(this.el.nativeElement, "dragover", this.onDragOver.bind(this));
            this.dragEnterListener = this.renderer.listen(this.el.nativeElement, "dragenter", this.onDragEnter.bind(this));
            this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, "dragleave", this.onDragLeave.bind(this));
          });
        }
      }
      unbindEvents() {
        if (this.mouseDownListener) {
          this.mouseDownListener();
          this.mouseDownListener = null;
        }
        if (this.dragStartListener) {
          this.dragStartListener();
          this.dragStartListener = null;
        }
        if (this.dragOverListener) {
          this.dragOverListener();
          this.dragOverListener = null;
        }
        if (this.dragEnterListener) {
          this.dragEnterListener();
          this.dragEnterListener = null;
        }
        if (this.dragLeaveListener) {
          this.dragLeaveListener();
          this.dragLeaveListener = null;
        }
      }
      onMouseDown(event2) {
        if (event2.target.nodeName === "INPUT" || event2.target.nodeName === "TEXTAREA" || DomHandler.hasClass(event2.target, "p-datatable-column-resizer")) this.el.nativeElement.draggable = false;
        else this.el.nativeElement.draggable = true;
      }
      onDragStart(event2) {
        this.dt.onColumnDragStart(event2, this.el.nativeElement);
      }
      onDragOver(event2) {
        event2.preventDefault();
      }
      onDragEnter(event2) {
        this.dt.onColumnDragEnter(event2, this.el.nativeElement);
      }
      onDragLeave(event2) {
        this.dt.onColumnDragLeave(event2);
      }
      onDrop(event2) {
        if (this.isEnabled()) {
          this.dt.onColumnDrop(event2, this.el.nativeElement);
        }
      }
      isEnabled() {
        return this.pReorderableColumnDisabled !== true;
      }
      ngOnDestroy() {
        this.unbindEvents();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ReorderableColumn,
        deps: [{
          token: PLATFORM_ID
        }, {
          token: Renderer2
        }, {
          token: Table
        }, {
          token: ElementRef
        }, {
          token: NgZone
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _ReorderableColumn,
        isStandalone: false,
        selector: "[pReorderableColumn]",
        inputs: {
          pReorderableColumnDisabled: ["pReorderableColumnDisabled", "pReorderableColumnDisabled", booleanAttribute]
        },
        host: {
          listeners: {
            "drop": "onDrop($event)"
          },
          classAttribute: "p-datatable-reorderable-column"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ReorderableColumn,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pReorderableColumn]",
          standalone: false,
          host: {
            class: "p-datatable-reorderable-column"
          }
        }]
      }],
      ctorParameters: () => [{
        type: void 0,
        decorators: [{
          type: Inject,
          args: [PLATFORM_ID]
        }]
      }, {
        type: Renderer2
      }, {
        type: Table
      }, {
        type: ElementRef
      }, {
        type: NgZone
      }],
      propDecorators: {
        pReorderableColumnDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onDrop: [{
          type: HostListener,
          args: ["drop", ["$event"]]
        }]
      }
    });
    EditableColumn = class _EditableColumn {
      dt;
      el;
      zone;
      data;
      field;
      rowIndex;
      pEditableColumnDisabled;
      pFocusCellSelector;
      overlayEventListener;
      constructor(dt, el, zone) {
        this.dt = dt;
        this.el = el;
        this.zone = zone;
      }
      ngOnChanges(changes) {
        if (this.el.nativeElement && !changes.data?.firstChange) {
          this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);
        }
      }
      ngAfterViewInit() {
        if (this.isEnabled()) {
          DomHandler.addClass(this.el.nativeElement, "p-editable-column");
        }
      }
      onClick(event2) {
        if (this.isEnabled()) {
          this.dt.selfClick = true;
          if (this.dt.editingCell) {
            if (this.dt.editingCell !== this.el.nativeElement) {
              if (!this.dt.isEditingCellValid()) {
                return;
              }
              this.closeEditingCell(true, event2);
              this.openCell();
            }
          } else {
            this.openCell();
          }
        }
      }
      openCell() {
        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);
        DomHandler.addClass(this.el.nativeElement, "p-cell-editing");
        this.dt.onEditInit.emit({
          field: this.field,
          data: this.data,
          index: this.rowIndex
        });
        this.zone.runOutsideAngular(() => {
          setTimeout(() => {
            let focusCellSelector = this.pFocusCellSelector || "input, textarea, select";
            let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);
            if (focusableElement) {
              focusableElement.focus();
            }
          }, 50);
        });
        this.overlayEventListener = (e) => {
          if (this.el && this.el.nativeElement.contains(e.target)) {
            this.dt.selfClick = true;
          }
        };
        this.dt.overlaySubscription = this.dt.overlayService.clickObservable.subscribe(this.overlayEventListener);
      }
      closeEditingCell(completed, event2) {
        const eventData = {
          field: this.dt.editingCellField,
          data: this.dt.editingCellData,
          originalEvent: event2,
          index: this.dt.editingCellRowIndex
        };
        if (completed) {
          this.dt.onEditComplete.emit(eventData);
        } else {
          this.dt.onEditCancel.emit(eventData);
          this.dt.value.forEach((element) => {
            if (element[this.dt.editingCellField] === this.data) {
              element[this.dt.editingCellField] = this.dt.editingCellData;
            }
          });
        }
        DomHandler.removeClass(this.dt.editingCell, "p-cell-editing");
        this.dt.editingCell = null;
        this.dt.editingCellData = null;
        this.dt.editingCellField = null;
        this.dt.unbindDocumentEditListener();
        if (this.dt.overlaySubscription) {
          this.dt.overlaySubscription.unsubscribe();
        }
      }
      onEnterKeyDown(event2) {
        if (this.isEnabled() && !event2.shiftKey) {
          if (this.dt.isEditingCellValid()) {
            this.closeEditingCell(true, event2);
          }
          event2.preventDefault();
        }
      }
      onTabKeyDown(event2) {
        if (this.isEnabled()) {
          if (this.dt.isEditingCellValid()) {
            this.closeEditingCell(true, event2);
          }
          event2.preventDefault();
        }
      }
      onEscapeKeyDown(event2) {
        if (this.isEnabled()) {
          if (this.dt.isEditingCellValid()) {
            this.closeEditingCell(false, event2);
          }
          event2.preventDefault();
        }
      }
      onShiftKeyDown(event2) {
        if (this.isEnabled()) {
          if (event2.shiftKey) this.moveToPreviousCell(event2);
          else {
            this.moveToNextCell(event2);
          }
        }
      }
      onArrowDown(event2) {
        if (this.isEnabled()) {
          let currentCell = this.findCell(event2.target);
          if (currentCell) {
            let cellIndex = DomHandler.index(currentCell);
            let targetCell = this.findNextEditableColumnByIndex(currentCell, cellIndex);
            if (targetCell) {
              if (this.dt.isEditingCellValid()) {
                this.closeEditingCell(true, event2);
              }
              DomHandler.invokeElementMethod(event2.target, "blur");
              DomHandler.invokeElementMethod(targetCell, "click");
            }
            event2.preventDefault();
          }
        }
      }
      onArrowUp(event2) {
        if (this.isEnabled()) {
          let currentCell = this.findCell(event2.target);
          if (currentCell) {
            let cellIndex = DomHandler.index(currentCell);
            let targetCell = this.findPrevEditableColumnByIndex(currentCell, cellIndex);
            if (targetCell) {
              if (this.dt.isEditingCellValid()) {
                this.closeEditingCell(true, event2);
              }
              DomHandler.invokeElementMethod(event2.target, "blur");
              DomHandler.invokeElementMethod(targetCell, "click");
            }
            event2.preventDefault();
          }
        }
      }
      onArrowLeft(event2) {
        if (this.isEnabled()) {
          this.moveToPreviousCell(event2);
        }
      }
      onArrowRight(event2) {
        if (this.isEnabled()) {
          this.moveToNextCell(event2);
        }
      }
      findCell(element) {
        if (element) {
          let cell = element;
          while (cell && !DomHandler.hasClass(cell, "p-cell-editing")) {
            cell = cell.parentElement;
          }
          return cell;
        } else {
          return null;
        }
      }
      moveToPreviousCell(event2) {
        let currentCell = this.findCell(event2.target);
        if (currentCell) {
          let targetCell = this.findPreviousEditableColumn(currentCell);
          if (targetCell) {
            if (this.dt.isEditingCellValid()) {
              this.closeEditingCell(true, event2);
            }
            DomHandler.invokeElementMethod(event2.target, "blur");
            DomHandler.invokeElementMethod(targetCell, "click");
            event2.preventDefault();
          }
        }
      }
      moveToNextCell(event2) {
        let currentCell = this.findCell(event2.target);
        if (currentCell) {
          let targetCell = this.findNextEditableColumn(currentCell);
          if (targetCell) {
            if (this.dt.isEditingCellValid()) {
              this.closeEditingCell(true, event2);
            }
            DomHandler.invokeElementMethod(event2.target, "blur");
            DomHandler.invokeElementMethod(targetCell, "click");
            event2.preventDefault();
          } else {
            if (this.dt.isEditingCellValid()) {
              this.closeEditingCell(true, event2);
            }
          }
        }
      }
      findPreviousEditableColumn(cell) {
        let prevCell = cell.previousElementSibling;
        if (!prevCell) {
          let previousRow = cell.parentElement?.previousElementSibling;
          if (previousRow) {
            prevCell = previousRow.lastElementChild;
          }
        }
        if (prevCell) {
          if (DomHandler.hasClass(prevCell, "p-editable-column")) return prevCell;
          else return this.findPreviousEditableColumn(prevCell);
        } else {
          return null;
        }
      }
      findNextEditableColumn(cell) {
        let nextCell = cell.nextElementSibling;
        if (!nextCell) {
          let nextRow = cell.parentElement?.nextElementSibling;
          if (nextRow) {
            nextCell = nextRow.firstElementChild;
          }
        }
        if (nextCell) {
          if (DomHandler.hasClass(nextCell, "p-editable-column")) return nextCell;
          else return this.findNextEditableColumn(nextCell);
        } else {
          return null;
        }
      }
      findNextEditableColumnByIndex(cell, index) {
        let nextRow = cell.parentElement?.nextElementSibling;
        if (nextRow) {
          let nextCell = nextRow.children[index];
          if (nextCell && DomHandler.hasClass(nextCell, "p-editable-column")) {
            return nextCell;
          }
          return null;
        } else {
          return null;
        }
      }
      findPrevEditableColumnByIndex(cell, index) {
        let prevRow = cell.parentElement?.previousElementSibling;
        if (prevRow) {
          let prevCell = prevRow.children[index];
          if (prevCell && DomHandler.hasClass(prevCell, "p-editable-column")) {
            return prevCell;
          }
          return null;
        } else {
          return null;
        }
      }
      isEnabled() {
        return this.pEditableColumnDisabled !== true;
      }
      ngOnDestroy() {
        if (this.dt.overlaySubscription) {
          this.dt.overlaySubscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _EditableColumn,
        deps: [{
          token: Table
        }, {
          token: ElementRef
        }, {
          token: NgZone
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _EditableColumn,
        isStandalone: false,
        selector: "[pEditableColumn]",
        inputs: {
          data: ["pEditableColumn", "data"],
          field: ["pEditableColumnField", "field"],
          rowIndex: ["pEditableColumnRowIndex", "rowIndex"],
          pEditableColumnDisabled: ["pEditableColumnDisabled", "pEditableColumnDisabled", booleanAttribute],
          pFocusCellSelector: "pFocusCellSelector"
        },
        host: {
          listeners: {
            "click": "onClick($event)",
            "keydown.enter": "onEnterKeyDown($event)",
            "keydown.tab": "onShiftKeyDown($event)",
            "keydown.escape": "onEscapeKeyDown($event)",
            "keydown.shift.tab": "onShiftKeyDown($event)",
            "keydown.meta.tab": "onShiftKeyDown($event)",
            "keydown.arrowdown": "onArrowDown($event)",
            "keydown.arrowup": "onArrowUp($event)",
            "keydown.arrowleft": "onArrowLeft($event)",
            "keydown.arrowright": "onArrowRight($event)"
          }
        },
        usesOnChanges: true,
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: EditableColumn,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pEditableColumn]",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: ElementRef
      }, {
        type: NgZone
      }],
      propDecorators: {
        data: [{
          type: Input,
          args: ["pEditableColumn"]
        }],
        field: [{
          type: Input,
          args: ["pEditableColumnField"]
        }],
        rowIndex: [{
          type: Input,
          args: ["pEditableColumnRowIndex"]
        }],
        pEditableColumnDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        pFocusCellSelector: [{
          type: Input
        }],
        onClick: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }],
        onEnterKeyDown: [{
          type: HostListener,
          args: ["keydown.enter", ["$event"]]
        }],
        onTabKeyDown: [{
          type: HostListener,
          args: ["keydown.tab", ["$event"]]
        }],
        onEscapeKeyDown: [{
          type: HostListener,
          args: ["keydown.escape", ["$event"]]
        }],
        onShiftKeyDown: [{
          type: HostListener,
          args: ["keydown.tab", ["$event"]]
        }, {
          type: HostListener,
          args: ["keydown.shift.tab", ["$event"]]
        }, {
          type: HostListener,
          args: ["keydown.meta.tab", ["$event"]]
        }],
        onArrowDown: [{
          type: HostListener,
          args: ["keydown.arrowdown", ["$event"]]
        }],
        onArrowUp: [{
          type: HostListener,
          args: ["keydown.arrowup", ["$event"]]
        }],
        onArrowLeft: [{
          type: HostListener,
          args: ["keydown.arrowleft", ["$event"]]
        }],
        onArrowRight: [{
          type: HostListener,
          args: ["keydown.arrowright", ["$event"]]
        }]
      }
    });
    EditableRow = class _EditableRow {
      el;
      data;
      pEditableRowDisabled;
      constructor(el) {
        this.el = el;
      }
      isEnabled() {
        return this.pEditableRowDisabled !== true;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _EditableRow,
        deps: [{
          token: ElementRef
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _EditableRow,
        isStandalone: false,
        selector: "[pEditableRow]",
        inputs: {
          data: ["pEditableRow", "data"],
          pEditableRowDisabled: ["pEditableRowDisabled", "pEditableRowDisabled", booleanAttribute]
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: EditableRow,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pEditableRow]",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: ElementRef
      }],
      propDecorators: {
        data: [{
          type: Input,
          args: ["pEditableRow"]
        }],
        pEditableRowDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }]
      }
    });
    InitEditableRow = class _InitEditableRow {
      dt;
      editableRow;
      constructor(dt, editableRow) {
        this.dt = dt;
        this.editableRow = editableRow;
      }
      onClick(event2) {
        this.dt.initRowEdit(this.editableRow.data);
        event2.preventDefault();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InitEditableRow,
        deps: [{
          token: Table
        }, {
          token: EditableRow
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _InitEditableRow,
        isStandalone: false,
        selector: "[pInitEditableRow]",
        host: {
          listeners: {
            "click": "onClick($event)"
          },
          classAttribute: "p-datatable-row-editor-init"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InitEditableRow,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pInitEditableRow]",
          standalone: false,
          host: {
            class: "p-datatable-row-editor-init"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: EditableRow
      }],
      propDecorators: {
        onClick: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }]
      }
    });
    SaveEditableRow = class _SaveEditableRow {
      dt;
      editableRow;
      constructor(dt, editableRow) {
        this.dt = dt;
        this.editableRow = editableRow;
      }
      onClick(event2) {
        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);
        event2.preventDefault();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _SaveEditableRow,
        deps: [{
          token: Table
        }, {
          token: EditableRow
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _SaveEditableRow,
        isStandalone: false,
        selector: "[pSaveEditableRow]",
        host: {
          listeners: {
            "click": "onClick($event)"
          },
          classAttribute: "p-datatable-row-editor-save"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: SaveEditableRow,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pSaveEditableRow]",
          standalone: false,
          host: {
            class: "p-datatable-row-editor-save"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: EditableRow
      }],
      propDecorators: {
        onClick: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }]
      }
    });
    CancelEditableRow = class _CancelEditableRow {
      dt;
      editableRow;
      constructor(dt, editableRow) {
        this.dt = dt;
        this.editableRow = editableRow;
      }
      onClick(event2) {
        this.dt.cancelRowEdit(this.editableRow.data);
        event2.preventDefault();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _CancelEditableRow,
        deps: [{
          token: Table
        }, {
          token: EditableRow
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _CancelEditableRow,
        isStandalone: false,
        selector: "[pCancelEditableRow]",
        host: {
          listeners: {
            "click": "onClick($event)"
          },
          classAttribute: "p-datatable-row-editor-cancel"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: CancelEditableRow,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pCancelEditableRow]",
          standalone: false,
          host: {
            class: "p-datatable-row-editor-cancel"
          }
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: EditableRow
      }],
      propDecorators: {
        onClick: [{
          type: HostListener,
          args: ["click", ["$event"]]
        }]
      }
    });
    CellEditor = class _CellEditor {
      dt;
      editableColumn;
      editableRow;
      _templates;
      _inputTemplate;
      _outputTemplate;
      inputTemplate;
      outputTemplate;
      constructor(dt, editableColumn, editableRow) {
        this.dt = dt;
        this.editableColumn = editableColumn;
        this.editableRow = editableRow;
      }
      ngAfterContentInit() {
        this._templates.forEach((item) => {
          switch (item.getType()) {
            case "input":
              this.inputTemplate = item.template;
              break;
            case "output":
              this.outputTemplate = item.template;
              break;
          }
        });
      }
      get editing() {
        return this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement || this.editableRow && this.dt.editMode === "row" && this.dt.isRowEditing(this.editableRow.data);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _CellEditor,
        deps: [{
          token: Table
        }, {
          token: EditableColumn,
          optional: true
        }, {
          token: EditableRow,
          optional: true
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _CellEditor,
        isStandalone: false,
        selector: "p-cellEditor",
        queries: [{
          propertyName: "_inputTemplate",
          first: true,
          predicate: ["input"],
          descendants: true
        }, {
          propertyName: "_outputTemplate",
          first: true,
          predicate: ["output"],
          descendants: true
        }, {
          propertyName: "_templates",
          predicate: PrimeTemplate
        }],
        ngImport: core_exports,
        template: `
        <ng-container *ngIf="editing">
            <ng-container *ngTemplateOutlet="inputTemplate || _inputTemplate"></ng-container>
        </ng-container>
        <ng-container *ngIf="!editing">
            <ng-container *ngTemplateOutlet="outputTemplate || _outputTemplate"></ng-container>
        </ng-container>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }],
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: CellEditor,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-cellEditor",
          standalone: false,
          template: `
        <ng-container *ngIf="editing">
            <ng-container *ngTemplateOutlet="inputTemplate || _inputTemplate"></ng-container>
        </ng-container>
        <ng-container *ngIf="!editing">
            <ng-container *ngTemplateOutlet="outputTemplate || _outputTemplate"></ng-container>
        </ng-container>
    `,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: EditableColumn,
        decorators: [{
          type: Optional
        }]
      }, {
        type: EditableRow,
        decorators: [{
          type: Optional
        }]
      }],
      propDecorators: {
        _templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }],
        _inputTemplate: [{
          type: ContentChild,
          args: ["input"]
        }],
        _outputTemplate: [{
          type: ContentChild,
          args: ["output"]
        }]
      }
    });
    TableRadioButton = class _TableRadioButton {
      dt;
      cd;
      value;
      disabled = input(void 0, {
        transform: booleanAttribute
      });
      index = input(void 0, {
        transform: numberAttribute
      });
      inputId = input();
      name = input();
      ariaLabel;
      inputViewChild;
      checked;
      subscription;
      constructor(dt, cd) {
        this.dt = dt;
        this.cd = cd;
        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {
          this.checked = this.dt.isSelected(this.value);
          this.ariaLabel = this.ariaLabel || this.dt.config.translation.aria ? this.checked ? this.dt.config.translation.aria.selectRow : this.dt.config.translation.aria.unselectRow : void 0;
          this.cd.markForCheck();
        });
      }
      ngOnInit() {
        this.checked = this.dt.isSelected(this.value);
      }
      onClick(event2) {
        if (!this.disabled()) {
          this.dt.toggleRowWithRadio({
            originalEvent: event2.originalEvent,
            rowIndex: this.index()
          }, this.value);
          this.inputViewChild?.inputViewChild.nativeElement?.focus();
        }
        DomHandler.clearSelection();
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableRadioButton,
        deps: [{
          token: Table
        }, {
          token: ChangeDetectorRef
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.1.0",
        version: "19.2.10",
        type: _TableRadioButton,
        isStandalone: false,
        selector: "p-tableRadioButton",
        inputs: {
          value: {
            classPropertyName: "value",
            publicName: "value",
            isSignal: false,
            isRequired: false,
            transformFunction: null
          },
          disabled: {
            classPropertyName: "disabled",
            publicName: "disabled",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          index: {
            classPropertyName: "index",
            publicName: "index",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          inputId: {
            classPropertyName: "inputId",
            publicName: "inputId",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          name: {
            classPropertyName: "name",
            publicName: "name",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          ariaLabel: {
            classPropertyName: "ariaLabel",
            publicName: "ariaLabel",
            isSignal: false,
            isRequired: false,
            transformFunction: null
          }
        },
        viewQueries: [{
          propertyName: "inputViewChild",
          first: true,
          predicate: ["rb"],
          descendants: true
        }],
        ngImport: core_exports,
        template: ` <p-radioButton #rb [(ngModel)]="checked" [disabled]="disabled()" [inputId]="inputId()" [name]="name()" [ariaLabel]="ariaLabel" [binary]="true" [value]="value" (onClick)="onClick($event)" /> `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "component",
          type: RadioButton,
          selector: "p-radioButton, p-radiobutton, p-radio-button",
          inputs: ["value", "formControlName", "name", "disabled", "variant", "size", "tabindex", "inputId", "ariaLabelledBy", "ariaLabel", "style", "styleClass", "autofocus", "binary"],
          outputs: ["onClick", "onFocus", "onBlur"]
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TableRadioButton,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-tableRadioButton",
          standalone: false,
          template: ` <p-radioButton #rb [(ngModel)]="checked" [disabled]="disabled()" [inputId]="inputId()" [name]="name()" [ariaLabel]="ariaLabel" [binary]="true" [value]="value" (onClick)="onClick($event)" /> `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: ChangeDetectorRef
      }],
      propDecorators: {
        value: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        inputViewChild: [{
          type: ViewChild,
          args: ["rb"]
        }]
      }
    });
    TableCheckbox = class _TableCheckbox {
      dt;
      tableService;
      cd;
      value;
      disabled = input(void 0, {
        transform: booleanAttribute
      });
      required = input(void 0, {
        transform: booleanAttribute
      });
      index = input(void 0, {
        transform: numberAttribute
      });
      inputId = input();
      name = input();
      ariaLabel;
      checked;
      subscription;
      constructor(dt, tableService, cd) {
        this.dt = dt;
        this.tableService = tableService;
        this.cd = cd;
        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {
          this.checked = this.dt.isSelected(this.value) && !this.disabled();
          this.ariaLabel = this.ariaLabel || this.dt.config.translation.aria ? this.checked ? this.dt.config.translation.aria.selectRow : this.dt.config.translation.aria.unselectRow : void 0;
          this.cd.markForCheck();
        });
      }
      ngOnInit() {
        this.checked = this.dt.isSelected(this.value);
      }
      onClick({
        originalEvent
      }) {
        if (!this.disabled()) {
          this.dt.toggleRowWithCheckbox({
            originalEvent,
            rowIndex: this.index()
          }, this.value);
        }
        DomHandler.clearSelection();
      }
      ngOnDestroy() {
        if (this.subscription) {
          this.subscription.unsubscribe();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableCheckbox,
        deps: [{
          token: Table
        }, {
          token: TableService
        }, {
          token: ChangeDetectorRef
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.0.0",
        version: "19.2.10",
        type: _TableCheckbox,
        isStandalone: false,
        selector: "p-tableCheckbox",
        inputs: {
          value: {
            classPropertyName: "value",
            publicName: "value",
            isSignal: false,
            isRequired: false,
            transformFunction: null
          },
          disabled: {
            classPropertyName: "disabled",
            publicName: "disabled",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          required: {
            classPropertyName: "required",
            publicName: "required",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          index: {
            classPropertyName: "index",
            publicName: "index",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          inputId: {
            classPropertyName: "inputId",
            publicName: "inputId",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          name: {
            classPropertyName: "name",
            publicName: "name",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          ariaLabel: {
            classPropertyName: "ariaLabel",
            publicName: "ariaLabel",
            isSignal: false,
            isRequired: false,
            transformFunction: null
          }
        },
        ngImport: core_exports,
        template: `
        <p-checkbox [(ngModel)]="checked" [binary]="true" (onChange)="onClick($event)" [required]="required()" [disabled]="disabled()" [inputId]="inputId()" [name]="name()" [ariaLabel]="ariaLabel">
            @if (dt.checkboxIconTemplate || dt._checkboxIconTemplate; as template) {
                <ng-template pTemplate="icon">
                    <ng-template *ngTemplateOutlet="template; context: { $implicit: checked }" />
                </ng-template>
            }
        </p-checkbox>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: PrimeTemplate,
          selector: "[pTemplate]",
          inputs: ["type", "pTemplate"]
        }, {
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: RequiredValidator,
          selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",
          inputs: ["required"]
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "component",
          type: Checkbox,
          selector: "p-checkbox, p-checkBox, p-check-box",
          inputs: ["value", "name", "disabled", "binary", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "inputStyle", "styleClass", "inputClass", "indeterminate", "size", "formControl", "checkboxIcon", "readonly", "required", "autofocus", "trueValue", "falseValue", "variant"],
          outputs: ["onChange", "onFocus", "onBlur"]
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TableCheckbox,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-tableCheckbox",
          standalone: false,
          template: `
        <p-checkbox [(ngModel)]="checked" [binary]="true" (onChange)="onClick($event)" [required]="required()" [disabled]="disabled()" [inputId]="inputId()" [name]="name()" [ariaLabel]="ariaLabel">
            @if (dt.checkboxIconTemplate || dt._checkboxIconTemplate; as template) {
                <ng-template pTemplate="icon">
                    <ng-template *ngTemplateOutlet="template; context: { $implicit: checked }" />
                </ng-template>
            }
        </p-checkbox>
    `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: TableService
      }, {
        type: ChangeDetectorRef
      }],
      propDecorators: {
        value: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }]
      }
    });
    TableHeaderCheckbox = class _TableHeaderCheckbox {
      dt;
      tableService;
      cd;
      disabled = input(void 0, {
        transform: booleanAttribute
      });
      inputId = input();
      name = input();
      ariaLabel;
      checked;
      selectionChangeSubscription;
      valueChangeSubscription;
      constructor(dt, tableService, cd) {
        this.dt = dt;
        this.tableService = tableService;
        this.cd = cd;
        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {
          this.checked = this.updateCheckedState();
          this.ariaLabel = this.ariaLabel || this.dt.config.translation.aria ? this.checked ? this.dt.config.translation.aria.selectAll : this.dt.config.translation.aria.unselectAll : void 0;
        });
        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {
          this.checked = this.updateCheckedState();
        });
      }
      ngOnInit() {
        this.checked = this.updateCheckedState();
      }
      onClick(event2) {
        if (!this.disabled()) {
          if (this.dt.value && this.dt.value.length > 0) {
            this.dt.toggleRowsWithCheckbox(event2, this.checked);
          }
        }
        DomHandler.clearSelection();
      }
      isDisabled() {
        return this.disabled() || !this.dt.value || !this.dt.value.length;
      }
      ngOnDestroy() {
        if (this.selectionChangeSubscription) {
          this.selectionChangeSubscription.unsubscribe();
        }
        if (this.valueChangeSubscription) {
          this.valueChangeSubscription.unsubscribe();
        }
      }
      updateCheckedState() {
        this.cd.markForCheck();
        if (this.dt._selectAll !== null) {
          return this.dt._selectAll;
        } else {
          const data = this.dt.selectionPageOnly ? this.dt.dataToRender(this.dt.processedData) : this.dt.processedData;
          const val = this.dt.frozenValue ? [...this.dt.frozenValue, ...data] : data;
          const selectableVal = this.dt.rowSelectable ? val.filter((data2, index) => this.dt.rowSelectable({
            data: data2,
            index
          })) : val;
          return ObjectUtils.isNotEmpty(selectableVal) && ObjectUtils.isNotEmpty(this.dt.selection) && selectableVal.every((v) => this.dt.selection.some((s) => this.dt.equals(v, s)));
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableHeaderCheckbox,
        deps: [{
          token: Table
        }, {
          token: TableService
        }, {
          token: ChangeDetectorRef
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.0.0",
        version: "19.2.10",
        type: _TableHeaderCheckbox,
        isStandalone: false,
        selector: "p-tableHeaderCheckbox",
        inputs: {
          disabled: {
            classPropertyName: "disabled",
            publicName: "disabled",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          inputId: {
            classPropertyName: "inputId",
            publicName: "inputId",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          name: {
            classPropertyName: "name",
            publicName: "name",
            isSignal: true,
            isRequired: false,
            transformFunction: null
          },
          ariaLabel: {
            classPropertyName: "ariaLabel",
            publicName: "ariaLabel",
            isSignal: false,
            isRequired: false,
            transformFunction: null
          }
        },
        ngImport: core_exports,
        template: `
        <p-checkbox [(ngModel)]="checked" (onChange)="onClick($event)" [binary]="true" [disabled]="isDisabled()" [inputId]="inputId()" [name]="name()" [ariaLabel]="ariaLabel">
            @if (dt.headerCheckboxIconTemplate || dt._headerCheckboxIconTemplate; as template) {
                <ng-template pTemplate="icon">
                    <ng-template *ngTemplateOutlet="template; context: { $implicit: checked }" />
                </ng-template>
            }
        </p-checkbox>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: PrimeTemplate,
          selector: "[pTemplate]",
          inputs: ["type", "pTemplate"]
        }, {
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "component",
          type: Checkbox,
          selector: "p-checkbox, p-checkBox, p-check-box",
          inputs: ["value", "name", "disabled", "binary", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "inputStyle", "styleClass", "inputClass", "indeterminate", "size", "formControl", "checkboxIcon", "readonly", "required", "autofocus", "trueValue", "falseValue", "variant"],
          outputs: ["onChange", "onFocus", "onBlur"]
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TableHeaderCheckbox,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-tableHeaderCheckbox",
          standalone: false,
          template: `
        <p-checkbox [(ngModel)]="checked" (onChange)="onClick($event)" [binary]="true" [disabled]="isDisabled()" [inputId]="inputId()" [name]="name()" [ariaLabel]="ariaLabel">
            @if (dt.headerCheckboxIconTemplate || dt._headerCheckboxIconTemplate; as template) {
                <ng-template pTemplate="icon">
                    <ng-template *ngTemplateOutlet="template; context: { $implicit: checked }" />
                </ng-template>
            }
        </p-checkbox>
    `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: TableService
      }, {
        type: ChangeDetectorRef
      }],
      propDecorators: {
        ariaLabel: [{
          type: Input
        }]
      }
    });
    ReorderableRowHandle = class _ReorderableRowHandle {
      el;
      constructor(el) {
        this.el = el;
      }
      ngAfterViewInit() {
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ReorderableRowHandle,
        deps: [{
          token: ElementRef
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "14.0.0",
        version: "19.2.10",
        type: _ReorderableRowHandle,
        isStandalone: false,
        selector: "[pReorderableRowHandle]",
        host: {
          classAttribute: "p-datatable-reorderable-row-handle"
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ReorderableRowHandle,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pReorderableRowHandle]",
          standalone: false,
          host: {
            class: "p-datatable-reorderable-row-handle"
          }
        }]
      }],
      ctorParameters: () => [{
        type: ElementRef
      }]
    });
    ReorderableRow = class _ReorderableRow {
      renderer;
      dt;
      el;
      zone;
      index;
      pReorderableRowDisabled;
      mouseDownListener;
      dragStartListener;
      dragEndListener;
      dragOverListener;
      dragLeaveListener;
      dropListener;
      constructor(renderer, dt, el, zone) {
        this.renderer = renderer;
        this.dt = dt;
        this.el = el;
        this.zone = zone;
      }
      ngAfterViewInit() {
        if (this.isEnabled()) {
          this.el.nativeElement.droppable = true;
          this.bindEvents();
        }
      }
      bindEvents() {
        this.zone.runOutsideAngular(() => {
          this.mouseDownListener = this.renderer.listen(this.el.nativeElement, "mousedown", this.onMouseDown.bind(this));
          this.dragStartListener = this.renderer.listen(this.el.nativeElement, "dragstart", this.onDragStart.bind(this));
          this.dragEndListener = this.renderer.listen(this.el.nativeElement, "dragend", this.onDragEnd.bind(this));
          this.dragOverListener = this.renderer.listen(this.el.nativeElement, "dragover", this.onDragOver.bind(this));
          this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, "dragleave", this.onDragLeave.bind(this));
        });
      }
      unbindEvents() {
        if (this.mouseDownListener) {
          this.mouseDownListener();
          this.mouseDownListener = null;
        }
        if (this.dragStartListener) {
          this.dragStartListener();
          this.dragStartListener = null;
        }
        if (this.dragEndListener) {
          this.dragEndListener();
          this.dragEndListener = null;
        }
        if (this.dragOverListener) {
          this.dragOverListener();
          this.dragOverListener = null;
        }
        if (this.dragLeaveListener) {
          this.dragLeaveListener();
          this.dragLeaveListener = null;
        }
      }
      onMouseDown(event2) {
        const targetElement = event2.target;
        const isHandleClicked = this.isHandleElement(targetElement);
        this.el.nativeElement.draggable = isHandleClicked;
      }
      isHandleElement(element) {
        if (element?.classList.contains("p-datatable-reorderable-row-handle")) {
          return true;
        }
        if (element?.parentElement && !["TD", "TR"].includes(element?.parentElement?.tagName)) {
          return this.isHandleElement(element?.parentElement);
        }
        return false;
      }
      onDragStart(event2) {
        this.dt.onRowDragStart(event2, this.index);
      }
      onDragEnd(event2) {
        this.dt.onRowDragEnd(event2);
        this.el.nativeElement.draggable = false;
      }
      onDragOver(event2) {
        this.dt.onRowDragOver(event2, this.index, this.el.nativeElement);
        event2.preventDefault();
      }
      onDragLeave(event2) {
        this.dt.onRowDragLeave(event2, this.el.nativeElement);
      }
      isEnabled() {
        return this.pReorderableRowDisabled !== true;
      }
      onDrop(event2) {
        if (this.isEnabled() && this.dt.rowDragging) {
          this.dt.onRowDrop(event2, this.el.nativeElement);
        }
        event2.preventDefault();
      }
      ngOnDestroy() {
        this.unbindEvents();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ReorderableRow,
        deps: [{
          token: Renderer2
        }, {
          token: Table
        }, {
          token: ElementRef
        }, {
          token: NgZone
        }],
        target: FactoryTarget.Directive
      });
      static \u0275dir = \u0275\u0275ngDeclareDirective({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _ReorderableRow,
        isStandalone: false,
        selector: "[pReorderableRow]",
        inputs: {
          index: ["pReorderableRow", "index"],
          pReorderableRowDisabled: ["pReorderableRowDisabled", "pReorderableRowDisabled", booleanAttribute]
        },
        host: {
          listeners: {
            "drop": "onDrop($event)"
          }
        },
        ngImport: core_exports
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ReorderableRow,
      decorators: [{
        type: Directive,
        args: [{
          selector: "[pReorderableRow]",
          standalone: false
        }]
      }],
      ctorParameters: () => [{
        type: Renderer2
      }, {
        type: Table
      }, {
        type: ElementRef
      }, {
        type: NgZone
      }],
      propDecorators: {
        index: [{
          type: Input,
          args: ["pReorderableRow"]
        }],
        pReorderableRowDisabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onDrop: [{
          type: HostListener,
          args: ["drop", ["$event"]]
        }]
      }
    });
    ColumnFilter = class _ColumnFilter extends BaseComponent {
      /**
       * Property represented by the column.
       * @group Props
       */
      field;
      /**
       * Type of the input.
       * @group Props
       */
      type = "text";
      /**
       * Filter display.
       * @group Props
       */
      display = "row";
      /**
       * Decides whether to display filter menu popup.
       * @group Props
       */
      showMenu = true;
      /**
       * Filter match mode.
       * @group Props
       */
      matchMode;
      /**
       * Filter operator.
       * @defaultValue 'AND'
       * @group Props
       */
      operator = FilterOperator.AND;
      /**
       * Decides whether to display filter operator.
       * @group Props
       */
      showOperator = true;
      /**
       * Decides whether to display clear filter button.
       * @group Props
       */
      showClearButton = true;
      /**
       * Decides whether to display apply filter button.
       * @group Props
       */
      showApplyButton = true;
      /**
       * Decides whether to display filter match modes.
       * @group Props
       */
      showMatchModes = true;
      /**
       * Decides whether to display add filter button.
       * @group Props
       */
      showAddButton = true;
      /**
       * Decides whether to close popup on clear button click.
       * @group Props
       */
      hideOnClear = false;
      /**
       * Filter placeholder.
       * @group Props
       */
      placeholder;
      /**
       * Filter match mode options.
       * @group Props
       */
      matchModeOptions;
      /**
       * Defines maximum amount of constraints.
       * @group Props
       */
      maxConstraints = 2;
      /**
       * Defines minimum fraction of digits.
       * @group Props
       */
      minFractionDigits;
      /**
       * Defines maximum fraction of digits.
       * @group Props
       */
      maxFractionDigits;
      /**
       * Defines prefix of the filter.
       * @group Props
       */
      prefix;
      /**
       * Defines suffix of the filter.
       * @group Props
       */
      suffix;
      /**
       * Defines filter locale.
       * @group Props
       */
      locale;
      /**
       * Defines filter locale matcher.
       * @group Props
       */
      localeMatcher;
      /**
       * Enables currency input.
       * @group Props
       */
      currency;
      /**
       * Defines the display of the currency input.
       * @group Props
       */
      currencyDisplay;
      /**
       * Defines if filter grouping will be enabled.
       * @group Props
       */
      useGrouping = true;
      /**
       * Defines the visibility of buttons.
       * @group Props
       */
      showButtons = true;
      /**
       * Defines the aria-label of the form element.
       * @group Props
       */
      ariaLabel;
      /**
       * Used to pass all filter button property object
       * @defaultValue {
       filter: { severity: 'secondary', text: true, rounded: true },
       inline: {
       clear: { severity: 'secondary', text: true, rounded: true }
       },
       popover: {
       addRule: { severity: 'info', text: true, size: 'small' },
       removeRule: { severity: 'danger', text: true, size: 'small' },
       apply: { size: 'small' },
       clear: { outlined: true, size: 'small' }
       }
       }
       */
      filterButtonProps = {
        filter: {
          severity: "secondary",
          text: true,
          rounded: true
        },
        inline: {
          clear: {
            severity: "secondary",
            text: true,
            rounded: true
          }
        },
        popover: {
          addRule: {
            severity: "info",
            text: true,
            size: "small"
          },
          removeRule: {
            severity: "danger",
            text: true,
            size: "small"
          },
          apply: {
            size: "small"
          },
          clear: {
            outlined: true,
            size: "small"
          }
        }
      };
      /**
       * Callback to invoke on overlay is shown.
       * @param {AnimationEvent} originalEvent - animation event.
       * @group Emits
       */
      onShow = new EventEmitter();
      /**
       * Callback to invoke on overlay is hidden.
       * @param {AnimationEvent} originalEvent - animation event.
       * @group Emits
       */
      onHide = new EventEmitter();
      icon;
      clearButtonViewChild;
      _templates;
      overlaySubscription;
      _headerTemplate;
      headerTemplate;
      _filterTemplate;
      filterTemplate;
      _footerTemplate;
      footerTemplate;
      _filterIconTemplate;
      filterIconTemplate;
      _removeRuleIconTemplate;
      removeRuleIconTemplate;
      _addRuleIconTemplate;
      addRuleIconTemplate;
      _clearFilterIconTemplate;
      clearFilterIconTemplate;
      operatorOptions;
      overlayVisible;
      overlay;
      scrollHandler;
      documentClickListener;
      documentResizeListener;
      matchModes;
      translationSubscription;
      resetSubscription;
      selfClick;
      overlayEventListener;
      overlayId;
      get fieldConstraints() {
        return this.dt.filters ? this.dt.filters[this.field] : null;
      }
      get showRemoveIcon() {
        return this.fieldConstraints ? this.fieldConstraints.length > 1 : false;
      }
      get showMenuButton() {
        return this.showMenu && (this.display === "row" ? this.type !== "boolean" : true);
      }
      get isShowOperator() {
        return this.showOperator && this.type !== "boolean";
      }
      get isShowAddConstraint() {
        return this.showAddButton && this.type !== "boolean" && this.fieldConstraints && this.fieldConstraints.length < this.maxConstraints;
      }
      get showMenuButtonLabel() {
        return this.config.getTranslation(TranslationKeys.SHOW_FILTER_MENU);
      }
      get applyButtonLabel() {
        return this.config.getTranslation(TranslationKeys.APPLY);
      }
      get clearButtonLabel() {
        return this.config.getTranslation(TranslationKeys.CLEAR);
      }
      get addRuleButtonLabel() {
        return this.config.getTranslation(TranslationKeys.ADD_RULE);
      }
      get removeRuleButtonLabel() {
        return this.config.getTranslation(TranslationKeys.REMOVE_RULE);
      }
      get noFilterLabel() {
        return this.config.getTranslation(TranslationKeys.NO_FILTER);
      }
      get filterMenuButtonAriaLabel() {
        return this.config.translation ? this.overlayVisible ? this.config.translation.aria.hideFilterMenu : this.config.translation.aria.showFilterMenu : void 0;
      }
      get removeRuleButtonAriaLabel() {
        return this.config.translation ? this.config.translation.removeRule : void 0;
      }
      get filterOperatorAriaLabel() {
        return this.config.translation ? this.config.translation.aria.filterOperator : void 0;
      }
      get filterConstraintAriaLabel() {
        return this.config.translation ? this.config.translation.aria.filterConstraint : void 0;
      }
      dt = inject(Table);
      overlayService = inject(OverlayService);
      hostName = "Table";
      parentInstance = inject(forwardRef(() => Table));
      ngOnInit() {
        super.ngOnInit();
        this.overlayId = UniqueComponentId();
        if (!this.dt.filters[this.field]) {
          this.initFieldFilterConstraint();
        }
        this.translationSubscription = this.config.translationObserver.subscribe(() => {
          this.generateMatchModeOptions();
          this.generateOperatorOptions();
        });
        this.generateMatchModeOptions();
        this.generateOperatorOptions();
      }
      generateMatchModeOptions() {
        this.matchModes = this.matchModeOptions || this.config.filterMatchModeOptions[this.type]?.map((key) => {
          return {
            label: this.config.getTranslation(key),
            value: key
          };
        });
      }
      generateOperatorOptions() {
        this.operatorOptions = [{
          label: this.config.getTranslation(TranslationKeys.MATCH_ALL),
          value: FilterOperator.AND
        }, {
          label: this.config.getTranslation(TranslationKeys.MATCH_ANY),
          value: FilterOperator.OR
        }];
      }
      ngAfterContentInit() {
        this._templates.forEach((item) => {
          switch (item.getType()) {
            case "header":
              this.headerTemplate = item.template;
              break;
            case "filter":
              this.filterTemplate = item.template;
              break;
            case "footer":
              this.footerTemplate = item.template;
              break;
            case "filtericon":
              this.filterIconTemplate = item.template;
              break;
            case "clearfiltericon":
              this.clearFilterIconTemplate = item.template;
              break;
            case "removeruleicon":
              this.removeRuleIconTemplate = item.template;
              break;
            case "addruleicon":
              this.addRuleIconTemplate = item.template;
              break;
            default:
              this.filterTemplate = item.template;
              break;
          }
        });
      }
      initFieldFilterConstraint() {
        let defaultMatchMode = this.getDefaultMatchMode();
        this.dt.filters[this.field] = this.display == "row" ? {
          value: null,
          matchMode: defaultMatchMode
        } : [{
          value: null,
          matchMode: defaultMatchMode,
          operator: this.operator
        }];
      }
      onMenuMatchModeChange(value, filterMeta) {
        filterMeta.matchMode = value;
        if (!this.showApplyButton) {
          this.dt._filter();
        }
      }
      onRowMatchModeChange(matchMode) {
        const fieldFilter = this.dt.filters[this.field];
        fieldFilter.matchMode = matchMode;
        if (fieldFilter.value) {
          this.dt._filter();
        }
        this.hide();
      }
      onRowMatchModeKeyDown(event2) {
        let item = event2.target;
        switch (event2.key) {
          case "ArrowDown":
            var nextItem = this.findNextItem(item);
            if (nextItem) {
              item.removeAttribute("tabindex");
              nextItem.tabIndex = "0";
              nextItem.focus();
            }
            event2.preventDefault();
            break;
          case "ArrowUp":
            var prevItem = this.findPrevItem(item);
            if (prevItem) {
              item.removeAttribute("tabindex");
              prevItem.tabIndex = "0";
              prevItem.focus();
            }
            event2.preventDefault();
            break;
        }
      }
      onRowClearItemClick() {
        this.clearFilter();
        this.hide();
      }
      isRowMatchModeSelected(matchMode) {
        return this.dt.filters[this.field].matchMode === matchMode;
      }
      addConstraint() {
        this.dt.filters[this.field].push({
          value: null,
          matchMode: this.getDefaultMatchMode(),
          operator: this.getDefaultOperator()
        });
        DomHandler.focus(this.clearButtonViewChild.nativeElement);
      }
      removeConstraint(filterMeta) {
        this.dt.filters[this.field] = this.dt.filters[this.field].filter((meta) => meta !== filterMeta);
        if (!this.showApplyButton) {
          this.dt._filter();
        }
        DomHandler.focus(this.clearButtonViewChild.nativeElement);
      }
      onOperatorChange(value) {
        this.dt.filters[this.field].forEach((filterMeta) => {
          filterMeta.operator = value;
          this.operator = value;
        });
        if (!this.showApplyButton) {
          this.dt._filter();
        }
      }
      toggleMenu(event2) {
        this.overlayVisible = !this.overlayVisible;
        event2.stopPropagation();
      }
      onToggleButtonKeyDown(event2) {
        switch (event2.key) {
          case "Escape":
          case "Tab":
            this.overlayVisible = false;
            break;
          case "ArrowDown":
            if (this.overlayVisible) {
              let focusable = DomHandler.getFocusableElements(this.overlay);
              if (focusable) {
                focusable[0].focus();
              }
              event2.preventDefault();
            } else if (event2.altKey) {
              this.overlayVisible = true;
              event2.preventDefault();
            }
            break;
          case "Enter":
            this.toggleMenu(event2);
            event2.preventDefault();
            break;
        }
      }
      onEscape() {
        this.overlayVisible = false;
        this.icon?.nativeElement.focus();
      }
      findNextItem(item) {
        let nextItem = item.nextElementSibling;
        if (nextItem) return DomHandler.hasClass(nextItem, "p-datatable-filter-constraint-separator") ? this.findNextItem(nextItem) : nextItem;
        else return item.parentElement?.firstElementChild;
      }
      findPrevItem(item) {
        let prevItem = item.previousElementSibling;
        if (prevItem) return DomHandler.hasClass(prevItem, "p-datatable-filter-constraint-separator") ? this.findPrevItem(prevItem) : prevItem;
        else return item.parentElement?.lastElementChild;
      }
      onContentClick() {
        this.selfClick = true;
      }
      onOverlayAnimationStart(event2) {
        switch (event2.toState) {
          case "visible":
            this.overlay = event2.element;
            this.renderer.appendChild(this.document.body, this.overlay);
            zindexutils.set("overlay", this.overlay, this.config.zIndex.overlay);
            DomHandler.absolutePosition(this.overlay, this.icon?.nativeElement);
            this.bindDocumentClickListener();
            this.bindDocumentResizeListener();
            this.bindScrollListener();
            this.overlayEventListener = (e) => {
              if (this.overlay && this.overlay.contains(e.target)) {
                this.selfClick = true;
              }
            };
            this.overlaySubscription = this.overlayService.clickObservable.subscribe(this.overlayEventListener);
            this.onShow.emit({
              originalEvent: event2
            });
            break;
          case "void":
            this.onOverlayHide();
            if (this.overlaySubscription) {
              this.overlaySubscription.unsubscribe();
            }
            break;
        }
      }
      onOverlayAnimationEnd(event2) {
        switch (event2.toState) {
          case "visible":
            this.focusOnFirstElement();
            break;
          case "void":
            zindexutils.clear(event2.element);
            this.onHide.emit({
              originalEvent: event2
            });
            break;
        }
      }
      focusOnFirstElement() {
        if (this.overlay) {
          DomHandler.focus(DomHandler.getFirstFocusableElement(this.overlay, ""));
        }
      }
      getDefaultMatchMode() {
        if (this.matchMode) {
          return this.matchMode;
        } else {
          if (this.type === "text") return FilterMatchMode.STARTS_WITH;
          else if (this.type === "numeric") return FilterMatchMode.EQUALS;
          else if (this.type === "date") return FilterMatchMode.DATE_IS;
          else return FilterMatchMode.CONTAINS;
        }
      }
      getDefaultOperator() {
        return this.dt.filters ? this.dt.filters[this.field][0].operator : this.operator;
      }
      hasRowFilter() {
        return this.dt.filters[this.field] && !this.dt.isFilterBlank(this.dt.filters[this.field].value);
      }
      get hasFilter() {
        let fieldFilter = this.dt.filters[this.field];
        if (fieldFilter) {
          if (Array.isArray(fieldFilter)) return !this.dt.isFilterBlank(fieldFilter[0].value);
          else return !this.dt.isFilterBlank(fieldFilter.value);
        }
        return false;
      }
      isOutsideClicked(event2) {
        return !(DomHandler.hasClass(this.overlay?.nextElementSibling, "p-overlay") || DomHandler.hasClass(this.overlay?.nextElementSibling, "p-popover") || this.overlay?.isSameNode(event2.target) || this.overlay?.contains(event2.target) || this.icon?.nativeElement.isSameNode(event2.target) || this.icon?.nativeElement.contains(event2.target) || DomHandler.hasClass(event2.target, "p-datatable-filter-add-rule-button") || DomHandler.hasClass(event2.target.parentElement, "p-datatable-filter-add-rule-button") || DomHandler.hasClass(event2.target, "p-datatable-filter-remove-rule-button") || DomHandler.hasClass(event2.target.parentElement, "p-datatable-filter-remove-rule-button"));
      }
      bindDocumentClickListener() {
        if (!this.documentClickListener) {
          const documentTarget = this.el ? this.el.nativeElement.ownerDocument : "document";
          this.documentClickListener = this.renderer.listen(documentTarget, "mousedown", (event2) => {
            const dialogElements = document.querySelectorAll('[role="dialog"]');
            const targetIsColumnFilterMenuButton = event2.target.closest(".p-datatable-column-filter-button");
            if (this.overlayVisible && this.isOutsideClicked(event2) && (targetIsColumnFilterMenuButton || dialogElements?.length <= 1)) {
              this.hide();
            }
            this.selfClick = false;
          });
        }
      }
      unbindDocumentClickListener() {
        if (this.documentClickListener) {
          this.documentClickListener();
          this.documentClickListener = null;
          this.selfClick = false;
        }
      }
      bindDocumentResizeListener() {
        if (!this.documentResizeListener) {
          this.documentResizeListener = this.renderer.listen(this.document.defaultView, "resize", (event2) => {
            if (this.overlayVisible && !DomHandler.isTouchDevice()) {
              this.hide();
            }
          });
        }
      }
      unbindDocumentResizeListener() {
        if (this.documentResizeListener) {
          this.documentResizeListener();
          this.documentResizeListener = null;
        }
      }
      bindScrollListener() {
        if (!this.scrollHandler) {
          this.scrollHandler = new ConnectedOverlayScrollHandler(this.icon?.nativeElement, () => {
            if (this.overlayVisible) {
              this.hide();
            }
          });
        }
        this.scrollHandler.bindScrollListener();
      }
      unbindScrollListener() {
        if (this.scrollHandler) {
          this.scrollHandler.unbindScrollListener();
        }
      }
      hide() {
        this.overlayVisible = false;
        this.cd.markForCheck();
      }
      onOverlayHide() {
        this.unbindDocumentClickListener();
        this.unbindDocumentResizeListener();
        this.unbindScrollListener();
        this.overlay = null;
      }
      clearFilter() {
        this.initFieldFilterConstraint();
        this.dt._filter();
        if (this.hideOnClear) this.hide();
      }
      applyFilter() {
        this.dt._filter();
        this.hide();
      }
      ngOnDestroy() {
        if (this.overlay) {
          this.renderer.appendChild(this.el.nativeElement, this.overlay);
          zindexutils.clear(this.overlay);
          this.onOverlayHide();
        }
        if (this.translationSubscription) {
          this.translationSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
          this.resetSubscription.unsubscribe();
        }
        if (this.overlaySubscription) {
          this.overlaySubscription.unsubscribe();
        }
        super.ngOnDestroy();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ColumnFilter,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _ColumnFilter,
        isStandalone: false,
        selector: "p-columnFilter",
        inputs: {
          field: "field",
          type: "type",
          display: "display",
          showMenu: ["showMenu", "showMenu", booleanAttribute],
          matchMode: "matchMode",
          operator: "operator",
          showOperator: ["showOperator", "showOperator", booleanAttribute],
          showClearButton: ["showClearButton", "showClearButton", booleanAttribute],
          showApplyButton: ["showApplyButton", "showApplyButton", booleanAttribute],
          showMatchModes: ["showMatchModes", "showMatchModes", booleanAttribute],
          showAddButton: ["showAddButton", "showAddButton", booleanAttribute],
          hideOnClear: ["hideOnClear", "hideOnClear", booleanAttribute],
          placeholder: "placeholder",
          matchModeOptions: "matchModeOptions",
          maxConstraints: ["maxConstraints", "maxConstraints", numberAttribute],
          minFractionDigits: ["minFractionDigits", "minFractionDigits", (value) => numberAttribute(value, null)],
          maxFractionDigits: ["maxFractionDigits", "maxFractionDigits", (value) => numberAttribute(value, null)],
          prefix: "prefix",
          suffix: "suffix",
          locale: "locale",
          localeMatcher: "localeMatcher",
          currency: "currency",
          currencyDisplay: "currencyDisplay",
          useGrouping: ["useGrouping", "useGrouping", booleanAttribute],
          showButtons: ["showButtons", "showButtons", booleanAttribute],
          ariaLabel: "ariaLabel",
          filterButtonProps: "filterButtonProps"
        },
        outputs: {
          onShow: "onShow",
          onHide: "onHide"
        },
        queries: [{
          propertyName: "_headerTemplate",
          first: true,
          predicate: ["header"]
        }, {
          propertyName: "_filterTemplate",
          first: true,
          predicate: ["filter"]
        }, {
          propertyName: "_footerTemplate",
          first: true,
          predicate: ["footer"]
        }, {
          propertyName: "_filterIconTemplate",
          first: true,
          predicate: ["filtericon"]
        }, {
          propertyName: "_removeRuleIconTemplate",
          first: true,
          predicate: ["removeruleicon"]
        }, {
          propertyName: "_addRuleIconTemplate",
          first: true,
          predicate: ["addruleicon"]
        }, {
          propertyName: "_clearFilterIconTemplate",
          first: true,
          predicate: ["clearfiltericon"]
        }, {
          propertyName: "_templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "icon",
          first: true,
          predicate: Button,
          descendants: true,
          read: ElementRef
        }, {
          propertyName: "clearButtonViewChild",
          first: true,
          predicate: ["clearBtn"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <div [ngClass]="cx('filter')">
            <p-columnFilterFormElement
                *ngIf="display === 'row'"
                class="p-fluid"
                [type]="type"
                [field]="field"
                [ariaLabel]="ariaLabel"
                [filterConstraint]="dt.filters[field]"
                [filterTemplate]="filterTemplate || _filterTemplate"
                [placeholder]="placeholder"
                [minFractionDigits]="minFractionDigits"
                [maxFractionDigits]="maxFractionDigits"
                [prefix]="prefix"
                [suffix]="suffix"
                [locale]="locale"
                [localeMatcher]="localeMatcher"
                [currency]="currency"
                [currencyDisplay]="currencyDisplay"
                [useGrouping]="useGrouping"
                [showButtons]="showButtons"
            ></p-columnFilterFormElement>
            <p-button
                *ngIf="showMenuButton"
                [styleClass]="cx('pcColumnFilterButton')"
                [attr.aria-haspopup]="true"
                [ariaLabel]="filterMenuButtonAriaLabel"
                [attr.aria-controls]="overlayVisible ? overlayId : null"
                [attr.aria-expanded]="overlayVisible ?? false"
                (click)="toggleMenu($event)"
                (keydown)="onToggleButtonKeyDown($event)"
                [buttonProps]="filterButtonProps?.filter"
            >
                <ng-template #icon>
                    <FilterIcon *ngIf="!filterIconTemplate && !_filterIconTemplate" />
                    <span class="pi-filter-icon" *ngIf="filterIconTemplate || _filterIconTemplate">
                        <ng-template *ngTemplateOutlet="filterIconTemplate || _filterIconTemplate; context: { hasFilter: hasFilter }"></ng-template>
                    </span>
                </ng-template>
            </p-button>
            <p-button *ngIf="showClearButton && display === 'row' && hasFilter" [styleClass]="cx('pcColumnfilterClearButton')" (onClick)="clearFilter()" [ariaLabel]="clearButtonLabel" [buttonProps]="filterButtonProps?.inline?.clear">
                <ng-template #icon>
                    <FilterSlashIcon *ngIf="!clearFilterIconTemplate && !_clearFilterIconTemplate" />
                    <ng-template *ngTemplateOutlet="clearFilterIconTemplate || _clearFilterIconTemplate"></ng-template>
                </ng-template>
            </p-button>
            <div
                *ngIf="showMenu && overlayVisible"
                [ngClass]="cx('filterOverlay')"
                [id]="overlayId"
                [attr.aria-modal]="true"
                role="dialog"
                (click)="onContentClick()"
                [@overlayAnimation]="'visible'"
                (@overlayAnimation.start)="onOverlayAnimationStart($event)"
                (@overlayAnimation.done)="onOverlayAnimationEnd($event)"
                (keydown.escape)="onEscape()"
            >
                <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate; context: { $implicit: field }"></ng-container>
                <ul *ngIf="display === 'row'; else menu" [ngClass]="cx('filterConstraintList')">
                    <li
                        *ngFor="let matchMode of matchModes; let i = index"
                        (click)="onRowMatchModeChange(matchMode.value)"
                        (keydown)="onRowMatchModeKeyDown($event)"
                        (keydown.enter)="onRowMatchModeChange(matchMode.value)"
                        [ngClass]="cx('filterConstraint')"
                        [class.p-datatable-filter-constraint-selected]="isRowMatchModeSelected(matchMode.value)"
                        [attr.tabindex]="i === 0 ? '0' : null"
                    >
                        {{ matchMode.label }}
                    </li>
                    <li [ngClass]="cx('filterConstraintSeparator')"></li>
                    <li [ngClass]="cx('filterConstraint')" (click)="onRowClearItemClick()" (keydown)="onRowMatchModeKeyDown($event)" (keydown.enter)="onRowClearItemClick()">
                        {{ noFilterLabel }}
                    </li>
                </ul>
                <ng-template #menu>
                    <div [ngClass]="cx('filterOperator')" *ngIf="isShowOperator">
                        <p-select [options]="operatorOptions" [ngModel]="operator" (ngModelChange)="onOperatorChange($event)" [styleClass]="cx('pcFilterOperatorDropdown')"></p-select>
                    </div>
                    <div [ngClass]="cx('filterRuleList')">
                        <div *ngFor="let fieldConstraint of fieldConstraints; let i = index" [ngClass]="cx('filterRule')">
                            <p-select
                                *ngIf="showMatchModes && matchModes"
                                [options]="matchModes"
                                [ngModel]="fieldConstraint.matchMode"
                                (ngModelChange)="onMenuMatchModeChange($event, fieldConstraint)"
                                [styleClass]="cx('pcFilterConstraintDropdown')"
                            ></p-select>
                            <p-columnFilterFormElement
                                [type]="type"
                                [field]="field"
                                [filterConstraint]="fieldConstraint"
                                [filterTemplate]="filterTemplate || _filterTemplate"
                                [placeholder]="placeholder"
                                [minFractionDigits]="minFractionDigits"
                                [maxFractionDigits]="maxFractionDigits"
                                [prefix]="prefix"
                                [suffix]="suffix"
                                [locale]="locale"
                                [localeMatcher]="localeMatcher"
                                [currency]="currency"
                                [currencyDisplay]="currencyDisplay"
                                [useGrouping]="useGrouping"
                            ></p-columnFilterFormElement>
                            <div>
                                <p-button
                                    *ngIf="showRemoveIcon"
                                    [styleClass]="cx('pcFilterRemoveRuleButton')"
                                    [text]="true"
                                    severity="danger"
                                    size="small"
                                    (onClick)="removeConstraint(fieldConstraint)"
                                    [ariaLabel]="removeRuleButtonLabel"
                                    [label]="removeRuleButtonLabel"
                                    [buttonProps]="filterButtonProps?.popover?.removeRule"
                                >
                                    <TrashIcon *ngIf="!removeRuleIconTemplate && !_removeRuleIconTemplate" />
                                    <ng-template *ngTemplateOutlet="removeRuleIconTemplate || _removeRuleIconTemplate"></ng-template>
                                </p-button>
                            </div>
                        </div>
                    </div>
                    <div *ngIf="isShowAddConstraint">
                        <p-button
                            type="button"
                            [label]="addRuleButtonLabel"
                            [attr.aria-label]="addRuleButtonLabel"
                            [styleClass]="cx('pcFilterAddRuleButton')"
                            [text]="true"
                            size="small"
                            (onClick)="addConstraint()"
                            [buttonProps]="filterButtonProps?.popover?.addRule"
                        >
                            <PlusIcon *ngIf="!addRuleIconTemplate && !_addRuleIconTemplate" />
                            <ng-template *ngTemplateOutlet="addRuleIconTemplate || _addRuleIconTemplate"></ng-template>
                        </p-button>
                    </div>
                    <div [ngClass]="cx('filterButtonbar')">
                        <p-button #clearBtn *ngIf="showClearButton" [outlined]="true" (onClick)="clearFilter()" [attr.aria-label]="clearButtonLabel" [label]="clearButtonLabel" [buttonProps]="filterButtonProps?.popover?.clear" />
                        <p-button *ngIf="showApplyButton" (onClick)="applyFilter()" size="small" [label]="applyButtonLabel" [attr.aria-label]="applyButtonLabel" [buttonProps]="filterButtonProps?.popover?.apply" />
                    </div>
                </ng-template>
                <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate; context: { $implicit: field }"></ng-container>
            </div>
        </div>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: forwardRef(() => NgClass),
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgForOf),
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgIf),
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgTemplateOutlet),
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "component",
          type: forwardRef(() => Select),
          selector: "p-select",
          inputs: ["id", "scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "loadingIcon", "filterPlaceholder", "filterLocale", "variant", "inputId", "dataKey", "filterBy", "filterFields", "autofocus", "resetFilterOnHide", "checkmark", "dropdownIcon", "loading", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "size", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "focusOnHover", "selectOnFocus", "autoOptionFocus", "autofocusFilter", "fluid", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"],
          outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgControlStatus),
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: forwardRef(() => NgModel),
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "component",
          type: forwardRef(() => Button),
          selector: "p-button",
          inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "raised", "rounded", "text", "plain", "severity", "outlined", "link", "tabindex", "size", "variant", "style", "styleClass", "badgeClass", "badgeSeverity", "ariaLabel", "autofocus", "fluid", "buttonProps"],
          outputs: ["onClick", "onFocus", "onBlur"]
        }, {
          kind: "component",
          type: forwardRef(() => FilterIcon),
          selector: "FilterIcon"
        }, {
          kind: "component",
          type: forwardRef(() => FilterSlashIcon),
          selector: "FilterSlashIcon"
        }, {
          kind: "component",
          type: forwardRef(() => PlusIcon),
          selector: "PlusIcon"
        }, {
          kind: "component",
          type: forwardRef(() => TrashIcon),
          selector: "TrashIcon"
        }, {
          kind: "component",
          type: forwardRef(() => ColumnFilterFormElement),
          selector: "p-columnFilterFormElement",
          inputs: ["field", "type", "filterConstraint", "filterTemplate", "placeholder", "minFractionDigits", "maxFractionDigits", "prefix", "suffix", "locale", "localeMatcher", "currency", "currencyDisplay", "useGrouping", "ariaLabel"]
        }],
        animations: [trigger("overlayAnimation", [transition(":enter", [style({
          opacity: 0,
          transform: "scaleY(0.8)"
        }), animate(".12s cubic-bezier(0, 0, 0.2, 1)")]), transition(":leave", [animate(".1s linear", style({
          opacity: 0
        }))])])],
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ColumnFilter,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-columnFilter",
          standalone: false,
          template: `
        <div [ngClass]="cx('filter')">
            <p-columnFilterFormElement
                *ngIf="display === 'row'"
                class="p-fluid"
                [type]="type"
                [field]="field"
                [ariaLabel]="ariaLabel"
                [filterConstraint]="dt.filters[field]"
                [filterTemplate]="filterTemplate || _filterTemplate"
                [placeholder]="placeholder"
                [minFractionDigits]="minFractionDigits"
                [maxFractionDigits]="maxFractionDigits"
                [prefix]="prefix"
                [suffix]="suffix"
                [locale]="locale"
                [localeMatcher]="localeMatcher"
                [currency]="currency"
                [currencyDisplay]="currencyDisplay"
                [useGrouping]="useGrouping"
                [showButtons]="showButtons"
            ></p-columnFilterFormElement>
            <p-button
                *ngIf="showMenuButton"
                [styleClass]="cx('pcColumnFilterButton')"
                [attr.aria-haspopup]="true"
                [ariaLabel]="filterMenuButtonAriaLabel"
                [attr.aria-controls]="overlayVisible ? overlayId : null"
                [attr.aria-expanded]="overlayVisible ?? false"
                (click)="toggleMenu($event)"
                (keydown)="onToggleButtonKeyDown($event)"
                [buttonProps]="filterButtonProps?.filter"
            >
                <ng-template #icon>
                    <FilterIcon *ngIf="!filterIconTemplate && !_filterIconTemplate" />
                    <span class="pi-filter-icon" *ngIf="filterIconTemplate || _filterIconTemplate">
                        <ng-template *ngTemplateOutlet="filterIconTemplate || _filterIconTemplate; context: { hasFilter: hasFilter }"></ng-template>
                    </span>
                </ng-template>
            </p-button>
            <p-button *ngIf="showClearButton && display === 'row' && hasFilter" [styleClass]="cx('pcColumnfilterClearButton')" (onClick)="clearFilter()" [ariaLabel]="clearButtonLabel" [buttonProps]="filterButtonProps?.inline?.clear">
                <ng-template #icon>
                    <FilterSlashIcon *ngIf="!clearFilterIconTemplate && !_clearFilterIconTemplate" />
                    <ng-template *ngTemplateOutlet="clearFilterIconTemplate || _clearFilterIconTemplate"></ng-template>
                </ng-template>
            </p-button>
            <div
                *ngIf="showMenu && overlayVisible"
                [ngClass]="cx('filterOverlay')"
                [id]="overlayId"
                [attr.aria-modal]="true"
                role="dialog"
                (click)="onContentClick()"
                [@overlayAnimation]="'visible'"
                (@overlayAnimation.start)="onOverlayAnimationStart($event)"
                (@overlayAnimation.done)="onOverlayAnimationEnd($event)"
                (keydown.escape)="onEscape()"
            >
                <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate; context: { $implicit: field }"></ng-container>
                <ul *ngIf="display === 'row'; else menu" [ngClass]="cx('filterConstraintList')">
                    <li
                        *ngFor="let matchMode of matchModes; let i = index"
                        (click)="onRowMatchModeChange(matchMode.value)"
                        (keydown)="onRowMatchModeKeyDown($event)"
                        (keydown.enter)="onRowMatchModeChange(matchMode.value)"
                        [ngClass]="cx('filterConstraint')"
                        [class.p-datatable-filter-constraint-selected]="isRowMatchModeSelected(matchMode.value)"
                        [attr.tabindex]="i === 0 ? '0' : null"
                    >
                        {{ matchMode.label }}
                    </li>
                    <li [ngClass]="cx('filterConstraintSeparator')"></li>
                    <li [ngClass]="cx('filterConstraint')" (click)="onRowClearItemClick()" (keydown)="onRowMatchModeKeyDown($event)" (keydown.enter)="onRowClearItemClick()">
                        {{ noFilterLabel }}
                    </li>
                </ul>
                <ng-template #menu>
                    <div [ngClass]="cx('filterOperator')" *ngIf="isShowOperator">
                        <p-select [options]="operatorOptions" [ngModel]="operator" (ngModelChange)="onOperatorChange($event)" [styleClass]="cx('pcFilterOperatorDropdown')"></p-select>
                    </div>
                    <div [ngClass]="cx('filterRuleList')">
                        <div *ngFor="let fieldConstraint of fieldConstraints; let i = index" [ngClass]="cx('filterRule')">
                            <p-select
                                *ngIf="showMatchModes && matchModes"
                                [options]="matchModes"
                                [ngModel]="fieldConstraint.matchMode"
                                (ngModelChange)="onMenuMatchModeChange($event, fieldConstraint)"
                                [styleClass]="cx('pcFilterConstraintDropdown')"
                            ></p-select>
                            <p-columnFilterFormElement
                                [type]="type"
                                [field]="field"
                                [filterConstraint]="fieldConstraint"
                                [filterTemplate]="filterTemplate || _filterTemplate"
                                [placeholder]="placeholder"
                                [minFractionDigits]="minFractionDigits"
                                [maxFractionDigits]="maxFractionDigits"
                                [prefix]="prefix"
                                [suffix]="suffix"
                                [locale]="locale"
                                [localeMatcher]="localeMatcher"
                                [currency]="currency"
                                [currencyDisplay]="currencyDisplay"
                                [useGrouping]="useGrouping"
                            ></p-columnFilterFormElement>
                            <div>
                                <p-button
                                    *ngIf="showRemoveIcon"
                                    [styleClass]="cx('pcFilterRemoveRuleButton')"
                                    [text]="true"
                                    severity="danger"
                                    size="small"
                                    (onClick)="removeConstraint(fieldConstraint)"
                                    [ariaLabel]="removeRuleButtonLabel"
                                    [label]="removeRuleButtonLabel"
                                    [buttonProps]="filterButtonProps?.popover?.removeRule"
                                >
                                    <TrashIcon *ngIf="!removeRuleIconTemplate && !_removeRuleIconTemplate" />
                                    <ng-template *ngTemplateOutlet="removeRuleIconTemplate || _removeRuleIconTemplate"></ng-template>
                                </p-button>
                            </div>
                        </div>
                    </div>
                    <div *ngIf="isShowAddConstraint">
                        <p-button
                            type="button"
                            [label]="addRuleButtonLabel"
                            [attr.aria-label]="addRuleButtonLabel"
                            [styleClass]="cx('pcFilterAddRuleButton')"
                            [text]="true"
                            size="small"
                            (onClick)="addConstraint()"
                            [buttonProps]="filterButtonProps?.popover?.addRule"
                        >
                            <PlusIcon *ngIf="!addRuleIconTemplate && !_addRuleIconTemplate" />
                            <ng-template *ngTemplateOutlet="addRuleIconTemplate || _addRuleIconTemplate"></ng-template>
                        </p-button>
                    </div>
                    <div [ngClass]="cx('filterButtonbar')">
                        <p-button #clearBtn *ngIf="showClearButton" [outlined]="true" (onClick)="clearFilter()" [attr.aria-label]="clearButtonLabel" [label]="clearButtonLabel" [buttonProps]="filterButtonProps?.popover?.clear" />
                        <p-button *ngIf="showApplyButton" (onClick)="applyFilter()" size="small" [label]="applyButtonLabel" [attr.aria-label]="applyButtonLabel" [buttonProps]="filterButtonProps?.popover?.apply" />
                    </div>
                </ng-template>
                <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate; context: { $implicit: field }"></ng-container>
            </div>
        </div>
    `,
          animations: [trigger("overlayAnimation", [transition(":enter", [style({
            opacity: 0,
            transform: "scaleY(0.8)"
          }), animate(".12s cubic-bezier(0, 0, 0.2, 1)")]), transition(":leave", [animate(".1s linear", style({
            opacity: 0
          }))])])],
          encapsulation: ViewEncapsulation.None
        }]
      }],
      propDecorators: {
        field: [{
          type: Input
        }],
        type: [{
          type: Input
        }],
        display: [{
          type: Input
        }],
        showMenu: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        matchMode: [{
          type: Input
        }],
        operator: [{
          type: Input
        }],
        showOperator: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showClearButton: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showApplyButton: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showMatchModes: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showAddButton: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        hideOnClear: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        placeholder: [{
          type: Input
        }],
        matchModeOptions: [{
          type: Input
        }],
        maxConstraints: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        minFractionDigits: [{
          type: Input,
          args: [{
            transform: (value) => numberAttribute(value, null)
          }]
        }],
        maxFractionDigits: [{
          type: Input,
          args: [{
            transform: (value) => numberAttribute(value, null)
          }]
        }],
        prefix: [{
          type: Input
        }],
        suffix: [{
          type: Input
        }],
        locale: [{
          type: Input
        }],
        localeMatcher: [{
          type: Input
        }],
        currency: [{
          type: Input
        }],
        currencyDisplay: [{
          type: Input
        }],
        useGrouping: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showButtons: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        ariaLabel: [{
          type: Input
        }],
        filterButtonProps: [{
          type: Input
        }],
        onShow: [{
          type: Output
        }],
        onHide: [{
          type: Output
        }],
        icon: [{
          type: ViewChild,
          args: [Button, {
            static: false,
            read: ElementRef
          }]
        }],
        clearButtonViewChild: [{
          type: ViewChild,
          args: ["clearBtn"]
        }],
        _templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }],
        _headerTemplate: [{
          type: ContentChild,
          args: ["header", {
            descendants: false
          }]
        }],
        _filterTemplate: [{
          type: ContentChild,
          args: ["filter", {
            descendants: false
          }]
        }],
        _footerTemplate: [{
          type: ContentChild,
          args: ["footer", {
            descendants: false
          }]
        }],
        _filterIconTemplate: [{
          type: ContentChild,
          args: ["filtericon", {
            descendants: false
          }]
        }],
        _removeRuleIconTemplate: [{
          type: ContentChild,
          args: ["removeruleicon", {
            descendants: false
          }]
        }],
        _addRuleIconTemplate: [{
          type: ContentChild,
          args: ["addruleicon", {
            descendants: false
          }]
        }],
        _clearFilterIconTemplate: [{
          type: ContentChild,
          args: ["clearfiltericon", {
            descendants: false
          }]
        }]
      }
    });
    ColumnFilterFormElement = class _ColumnFilterFormElement {
      dt;
      colFilter;
      field;
      type;
      filterConstraint;
      filterTemplate;
      placeholder;
      minFractionDigits;
      maxFractionDigits;
      prefix;
      suffix;
      locale;
      localeMatcher;
      currency;
      currencyDisplay;
      useGrouping = true;
      ariaLabel;
      get showButtons() {
        return this.colFilter.showButtons;
      }
      filterCallback;
      constructor(dt, colFilter) {
        this.dt = dt;
        this.colFilter = colFilter;
      }
      ngOnInit() {
        this.filterCallback = (value) => {
          this.filterConstraint.value = value;
          this.dt._filter();
        };
      }
      onModelChange(value) {
        this.filterConstraint.value = value;
        if (this.type === "date" || this.type === "boolean" || value === "") {
          this.dt._filter();
        }
      }
      onTextInputEnterKeyDown(event2) {
        this.dt._filter();
        event2.preventDefault();
      }
      onNumericInputKeyDown(event2) {
        if (event2.key === "Enter") {
          this.dt._filter();
          event2.preventDefault();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ColumnFilterFormElement,
        deps: [{
          token: Table
        }, {
          token: ColumnFilter
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _ColumnFilterFormElement,
        isStandalone: false,
        selector: "p-columnFilterFormElement",
        inputs: {
          field: "field",
          type: "type",
          filterConstraint: "filterConstraint",
          filterTemplate: "filterTemplate",
          placeholder: "placeholder",
          minFractionDigits: ["minFractionDigits", "minFractionDigits", (value) => numberAttribute(value, null)],
          maxFractionDigits: ["maxFractionDigits", "maxFractionDigits", (value) => numberAttribute(value, null)],
          prefix: "prefix",
          suffix: "suffix",
          locale: "locale",
          localeMatcher: "localeMatcher",
          currency: "currency",
          currencyDisplay: "currencyDisplay",
          useGrouping: ["useGrouping", "useGrouping", booleanAttribute],
          ariaLabel: "ariaLabel"
        },
        ngImport: core_exports,
        template: `
        <ng-container *ngIf="filterTemplate; else builtInElement">
            <ng-container
                *ngTemplateOutlet="
                    filterTemplate;
                    context: {
                        $implicit: filterConstraint.value,
                        filterCallback: filterCallback,
                        type: type,
                        field: field,
                        filterConstraint: filterConstraint,
                        placeholder: placeholder,
                        minFractionDigits: minFractionDigits,
                        maxFractionDigits: maxFractionDigits,
                        prefix: prefix,
                        suffix: suffix,
                        locale: locale,
                        localeMatcher: localeMatcher,
                        currency: currency,
                        currencyDisplay: currencyDisplay,
                        useGrouping: useGrouping,
                        showButtons: showButtons
                    }
                "
            ></ng-container>
        </ng-container>
        <ng-template #builtInElement>
            <ng-container [ngSwitch]="type">
                <input
                    *ngSwitchCase="'text'"
                    type="text"
                    [ariaLabel]="ariaLabel"
                    pInputText
                    [value]="filterConstraint?.value"
                    (input)="onModelChange($event.target.value)"
                    (keydown.enter)="onTextInputEnterKeyDown($event)"
                    [attr.placeholder]="placeholder"
                />
                <p-inputNumber
                    *ngSwitchCase="'numeric'"
                    [ngModel]="filterConstraint?.value"
                    (ngModelChange)="onModelChange($event)"
                    (onKeyDown)="onNumericInputKeyDown($event)"
                    [showButtons]="showButtons"
                    [minFractionDigits]="minFractionDigits"
                    [maxFractionDigits]="maxFractionDigits"
                    [ariaLabel]="ariaLabel"
                    [prefix]="prefix"
                    [suffix]="suffix"
                    [placeholder]="placeholder"
                    [mode]="currency ? 'currency' : 'decimal'"
                    [locale]="locale"
                    [localeMatcher]="localeMatcher"
                    [currency]="currency"
                    [currencyDisplay]="currencyDisplay"
                    [useGrouping]="useGrouping"
                ></p-inputNumber>
                <p-checkbox [indeterminate]="filterConstraint?.value === null" [binary]="true" *ngSwitchCase="'boolean'" [ngModel]="filterConstraint?.value" (ngModelChange)="onModelChange($event)" />

                <p-datepicker [ariaLabel]="ariaLabel" *ngSwitchCase="'date'" [placeholder]="placeholder" [ngModel]="filterConstraint?.value" (ngModelChange)="onModelChange($event)" appendTo="body"></p-datepicker>
            </ng-container>
        </ng-template>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgSwitch,
          selector: "[ngSwitch]",
          inputs: ["ngSwitch"]
        }, {
          kind: "directive",
          type: NgSwitchCase,
          selector: "[ngSwitchCase]",
          inputs: ["ngSwitchCase"]
        }, {
          kind: "directive",
          type: InputText,
          selector: "[pInputText]",
          inputs: ["variant", "fluid", "pSize"]
        }, {
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "component",
          type: DatePicker,
          selector: "p-datePicker, p-datepicker, p-date-picker",
          inputs: ["iconDisplay", "style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "ariaLabel", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "fluid", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "startWeekFromFirstDayOfYear", "showClear", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autofocus", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "touchUI", "timeSeparator", "focusTrap", "showTransitionOptions", "hideTransitionOptions", "tabindex", "variant", "size", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "responsiveOptions", "numberOfMonths", "firstDayOfWeek", "locale", "view", "defaultDate"],
          outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onClear", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"]
        }, {
          kind: "component",
          type: InputNumber,
          selector: "p-inputNumber, p-inputnumber, p-input-number",
          inputs: ["showButtons", "format", "buttonLayout", "inputId", "styleClass", "style", "placeholder", "size", "maxlength", "tabindex", "title", "ariaLabelledBy", "ariaDescribedBy", "ariaLabel", "ariaRequired", "name", "required", "autocomplete", "min", "max", "incrementButtonClass", "decrementButtonClass", "incrementButtonIcon", "decrementButtonIcon", "readonly", "step", "allowEmpty", "locale", "localeMatcher", "mode", "currency", "currencyDisplay", "useGrouping", "variant", "minFractionDigits", "maxFractionDigits", "prefix", "suffix", "inputStyle", "inputStyleClass", "showClear", "autofocus", "disabled", "fluid"],
          outputs: ["onInput", "onFocus", "onBlur", "onKeyDown", "onClear"]
        }, {
          kind: "component",
          type: Checkbox,
          selector: "p-checkbox, p-checkBox, p-check-box",
          inputs: ["value", "name", "disabled", "binary", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "inputStyle", "styleClass", "inputClass", "indeterminate", "size", "formControl", "checkboxIcon", "readonly", "required", "autofocus", "trueValue", "falseValue", "variant"],
          outputs: ["onChange", "onFocus", "onBlur"]
        }],
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ColumnFilterFormElement,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-columnFilterFormElement",
          standalone: false,
          template: `
        <ng-container *ngIf="filterTemplate; else builtInElement">
            <ng-container
                *ngTemplateOutlet="
                    filterTemplate;
                    context: {
                        $implicit: filterConstraint.value,
                        filterCallback: filterCallback,
                        type: type,
                        field: field,
                        filterConstraint: filterConstraint,
                        placeholder: placeholder,
                        minFractionDigits: minFractionDigits,
                        maxFractionDigits: maxFractionDigits,
                        prefix: prefix,
                        suffix: suffix,
                        locale: locale,
                        localeMatcher: localeMatcher,
                        currency: currency,
                        currencyDisplay: currencyDisplay,
                        useGrouping: useGrouping,
                        showButtons: showButtons
                    }
                "
            ></ng-container>
        </ng-container>
        <ng-template #builtInElement>
            <ng-container [ngSwitch]="type">
                <input
                    *ngSwitchCase="'text'"
                    type="text"
                    [ariaLabel]="ariaLabel"
                    pInputText
                    [value]="filterConstraint?.value"
                    (input)="onModelChange($event.target.value)"
                    (keydown.enter)="onTextInputEnterKeyDown($event)"
                    [attr.placeholder]="placeholder"
                />
                <p-inputNumber
                    *ngSwitchCase="'numeric'"
                    [ngModel]="filterConstraint?.value"
                    (ngModelChange)="onModelChange($event)"
                    (onKeyDown)="onNumericInputKeyDown($event)"
                    [showButtons]="showButtons"
                    [minFractionDigits]="minFractionDigits"
                    [maxFractionDigits]="maxFractionDigits"
                    [ariaLabel]="ariaLabel"
                    [prefix]="prefix"
                    [suffix]="suffix"
                    [placeholder]="placeholder"
                    [mode]="currency ? 'currency' : 'decimal'"
                    [locale]="locale"
                    [localeMatcher]="localeMatcher"
                    [currency]="currency"
                    [currencyDisplay]="currencyDisplay"
                    [useGrouping]="useGrouping"
                ></p-inputNumber>
                <p-checkbox [indeterminate]="filterConstraint?.value === null" [binary]="true" *ngSwitchCase="'boolean'" [ngModel]="filterConstraint?.value" (ngModelChange)="onModelChange($event)" />

                <p-datepicker [ariaLabel]="ariaLabel" *ngSwitchCase="'date'" [placeholder]="placeholder" [ngModel]="filterConstraint?.value" (ngModelChange)="onModelChange($event)" appendTo="body"></p-datepicker>
            </ng-container>
        </ng-template>
    `,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: Table
      }, {
        type: ColumnFilter
      }],
      propDecorators: {
        field: [{
          type: Input
        }],
        type: [{
          type: Input
        }],
        filterConstraint: [{
          type: Input
        }],
        filterTemplate: [{
          type: Input
        }],
        placeholder: [{
          type: Input
        }],
        minFractionDigits: [{
          type: Input,
          args: [{
            transform: (value) => numberAttribute(value, null)
          }]
        }],
        maxFractionDigits: [{
          type: Input,
          args: [{
            transform: (value) => numberAttribute(value, null)
          }]
        }],
        prefix: [{
          type: Input
        }],
        suffix: [{
          type: Input
        }],
        locale: [{
          type: Input
        }],
        localeMatcher: [{
          type: Input
        }],
        currency: [{
          type: Input
        }],
        currencyDisplay: [{
          type: Input
        }],
        useGrouping: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        ariaLabel: [{
          type: Input
        }]
      }
    });
    TableModule = class _TableModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableModule,
        declarations: [Table, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, TableBody, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement],
        imports: [CommonModule, PaginatorModule, InputTextModule, SelectModule, FormsModule, ButtonModule, SelectButtonModule, DatePickerModule, InputNumberModule, CheckboxModule, ScrollerModule, ArrowDownIcon, ArrowUpIcon, SpinnerIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, FilterIcon, FilterSlashIcon, PlusIcon, TrashIcon, RadioButtonModule],
        exports: [Table, SharedModule, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement, ScrollerModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _TableModule,
        providers: [TableStyle],
        imports: [CommonModule, PaginatorModule, InputTextModule, SelectModule, FormsModule, ButtonModule, SelectButtonModule, DatePickerModule, InputNumberModule, CheckboxModule, ScrollerModule, ArrowDownIcon, ArrowUpIcon, SpinnerIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, FilterIcon, FilterSlashIcon, PlusIcon, TrashIcon, RadioButtonModule, SharedModule, ScrollerModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: TableModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [CommonModule, PaginatorModule, InputTextModule, SelectModule, FormsModule, ButtonModule, SelectButtonModule, DatePickerModule, InputNumberModule, CheckboxModule, ScrollerModule, ArrowDownIcon, ArrowUpIcon, SpinnerIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, FilterIcon, FilterSlashIcon, PlusIcon, TrashIcon, RadioButtonModule],
          exports: [Table, SharedModule, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement, ScrollerModule],
          declarations: [Table, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, TableBody, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement],
          providers: [TableStyle]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-dropdown.mjs
var theme18, classes17, DropdownStyle, DropdownClasses, DROPDOWN_VALUE_ACCESSOR, DropdownItem, Dropdown, DropdownModule;
var init_primeng_dropdown = __esm({
  "node_modules/primeng/fesm2022/primeng-dropdown.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_utils();
    init_primeng_api();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_autofocus();
    init_primeng_basecomponent();
    init_primeng_iconfield();
    init_primeng_icons();
    init_primeng_inputicon();
    init_primeng_inputtext();
    init_primeng_inputtext();
    init_primeng_overlay();
    init_primeng_overlay();
    init_primeng_ripple();
    init_primeng_scroller();
    init_primeng_tooltip();
    init_primeng_tooltip();
    init_primeng_base();
    theme18 = ({
      dt
    }) => `
.p-select {
    display: inline-flex;
    cursor: pointer;
    position: relative;
    user-select: none;
    background: ${dt("select.background")};
    border: 1px solid ${dt("select.border.color")};
    transition: background ${dt("select.transition.duration")}, color ${dt("select.transition.duration")}, border-color ${dt("select.transition.duration")},
        outline-color ${dt("select.transition.duration")}, box-shadow ${dt("select.transition.duration")};
    border-radius: ${dt("select.border.radius")};
    outline-color: transparent;
    box-shadow: ${dt("select.shadow")};
}

.p-select:not(.p-disabled):hover {
    border-color: ${dt("select.hover.border.color")};
}

.p-select:not(.p-disabled).p-focus {
    border-color: ${dt("select.focus.border.color")};
    box-shadow: ${dt("select.focus.ring.shadow")};
    outline: ${dt("select.focus.ring.width")} ${dt("select.focus.ring.style")} ${dt("select.focus.ring.color")};
    outline-offset: ${dt("select.focus.ring.offset")};
}

.p-select.p-variant-filled {
    background: ${dt("select.filled.background")};
}

.p-select.p-variant-filled.p-focus {
    background: ${dt("select.filled.focus.background")};
}

.p-select.p-disabled {
    opacity: 1;
    background: ${dt("select.disabled.background")};
}

.p-select-clear-icon {
    position: absolute;
    top: 50%;
    margin-top: -0.5rem;
    color: ${dt("select.clear.icon.color")};
    right: ${dt("select.dropdown.width")};
}

.p-select-dropdown {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    background: transparent;
    color: ${dt("select.dropdown.color")};
    width: ${dt("select.dropdown.width")};
    border-start-end-radius: ${dt("select.border.radius")};
    border-end-end-radius: ${dt("select.border.radius")};
}

.p-select-label {
    display: block;
    white-space: nowrap;
    overflow: hidden;
    flex: 1 1 auto;
    width: 1%;
    padding: ${dt("select.padding.y")} ${dt("select.padding.x")};
    text-overflow: ellipsis;
    cursor: pointer;
    color: ${dt("select.color")};
    background: transparent;
    border: 0 none;
    outline: 0 none;
}

.p-select-label.p-placeholder {
    color: ${dt("select.placeholder.color")};
}

.p-select:has(.p-select-clear-icon) .p-select-label {
    padding-right: calc(1rem + ${dt("select.padding.x")});
}

.p-select.p-disabled .p-select-label {
    color: ${dt("select.disabled.color")};
}

.p-select-label-empty {
    overflow: hidden;
    opacity: 0;
}

input.p-select-label {
    cursor: default;
}

.p-select .p-select-overlay {
    min-width: 100%;
}

.p-select-overlay {
    position: absolute;
    top: 0;
    left: 0;
    background: ${dt("select.overlay.background")};
    color: ${dt("select.overlay.color")};
    border: 1px solid ${dt("select.overlay.border.color")};
    border-radius: ${dt("select.overlay.border.radius")};
    box-shadow: ${dt("select.overlay.shadow")};
}

.p-select-header {
    padding: ${dt("select.list.header.padding")};
}

.p-select-filter {
    width: 100%;
}

.p-select-list-container {
    overflow: auto;
}

.p-select-option-group {
    cursor: auto;
    margin: 0;
    padding: ${dt("select.option.group.padding")};
    background: ${dt("select.option.group.background")};
    color: ${dt("select.option.group.color")};
    font-weight: ${dt("select.option.group.font.weight")};
}

.p-select-list {
    margin: 0;
    padding: 0;
    list-style-type: none;
    padding: ${dt("select.list.padding")};
    gap: ${dt("select.list.gap")};
    display: flex;
    flex-direction: column;
}

.p-select-option {
    cursor: pointer;
    font-weight: normal;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    padding: ${dt("select.option.padding")};
    border: 0 none;
    color: ${dt("select.option.color")};
    background: transparent;
    transition: background ${dt("select.transition.duration")}, color ${dt("select.transition.duration")}, border-color ${dt("select.transition.duration")},
    box-shadow ${dt("select.transition.duration")}, outline-color ${dt("select.transition.duration")};
    border-radius: ${dt("select.option.border.radius")};
}

.p-select-option:not(.p-select-option-selected):not(.p-disabled).p-focus {
    background: ${dt("select.option.focus.background")};
    color: ${dt("select.option.focus.color")};
}

.p-select-option.p-select-option-selected {
    background: ${dt("select.option.selected.background")};
    color: ${dt("select.option.selected.color")};
}

.p-select-option.p-select-option-selected.p-focus {
    background: ${dt("select.option.selected.focus.background")};
    color: ${dt("select.option.selected.focus.color")};
}

.p-select-option-check-icon {
    position: relative;
    margin-inline-start: ${dt("select.checkmark.gutter.start")};
    margin-inline-end: ${dt("select.checkmark.gutter.end")};
    color: ${dt("select.checkmark.color")};
}

.p-select-empty-message {
    padding: ${dt("select.empty.message.padding")};
}

.p-select-fluid {
    display: flex;
}

/*For PrimeNG*/

.p-dropdown.ng-invalid.ng-dirty,
.p-select.ng-invalid.ng-dirty {
    outline: 1px solid ${dt("select.invalid.border.color")};
    outline-offset: 0;
}

.p-dropdown.ng-invalid.ng-dirty .p-dropdown-label.p-placeholder,
.p-select.ng-invalid.ng-dirty .p-select-label.p-placeholder {
    color: ${dt("select.invalid.placeholder.color")};
}
`;
    classes17 = {
      root: ({
        instance
      }) => ["p-dropdown p-select p-component p-inputwrapper", {
        "p-disabled": instance.disabled,
        "p-variant-filled": instance.variant === "filled" || instance.config.inputVariant() === "filled" || instance.config.inputStyle() === "filled",
        "p-focus": instance.focused,
        "p-inputwrapper-filled": instance.modelValue() !== void 0 && instance.modelValue() !== null && !instance.modelValue().length,
        "p-inputwrapper-focus": instance.focused || instance.overlayVisible,
        "p-select-open": instance.overlayVisible,
        "p-select-fluid": instance.hasFluid,
        "p-select-sm p-inputfield-sm": instance.size === "small",
        "p-select-lg p-inputfield-lg": instance.size === "large"
      }],
      label: ({
        instance,
        props
      }) => ["p-select-label", {
        "p-placeholder": !props.editable && instance.label === props.placeholder,
        "p-select-label-empty": !props.editable && !instance.$slots["value"] && (instance.label === "p-emptylabel" || instance.label.length === 0)
      }],
      clearIcon: "p-select-clear-icon",
      dropdown: "p-select-dropdown",
      loadingicon: "p-select-loading-icon",
      dropdownIcon: "p-select-dropdown-icon",
      overlay: "p-select-overlay p-component",
      header: "p-select-header",
      pcFilter: "p-select-filter",
      listContainer: "p-select-list-container",
      list: "p-select-list",
      optionGroup: "p-select-option-group",
      optionGroupLabel: "p-select-option-group-label",
      option: ({
        instance,
        props,
        state: state2,
        option,
        focusedOption
      }) => ["p-select-option", {
        "p-select-option-selected": instance.isSelected(option) && props.highlightOnSelect,
        "p-focus": state2.focusedOptionIndex === focusedOption,
        "p-disabled": instance.isOptionDisabled(option)
      }],
      optionLabel: "p-select-option-label",
      optionCheckIcon: "p-select-option-check-icon",
      optionBlankIcon: "p-select-option-blank-icon",
      emptyMessage: "p-select-empty-message"
    };
    DropdownStyle = class _DropdownStyle extends BaseStyle {
      name = "select";
      theme = theme18;
      classes = classes17;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DropdownStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DropdownStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: DropdownStyle,
      decorators: [{
        type: Injectable
      }]
    });
    /* @__PURE__ */ (function(DropdownClasses2) {
    })(DropdownClasses || (DropdownClasses = {}));
    DROPDOWN_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => Dropdown),
      multi: true
    };
    DropdownItem = class _DropdownItem extends BaseComponent {
      id;
      option;
      selected;
      focused;
      label;
      disabled;
      visible;
      itemSize;
      ariaPosInset;
      ariaSetSize;
      template;
      checkmark;
      onClick = new EventEmitter();
      onMouseEnter = new EventEmitter();
      onOptionClick(event2) {
        this.onClick.emit(event2);
      }
      onOptionMouseEnter(event2) {
        this.onMouseEnter.emit(event2);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DropdownItem,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _DropdownItem,
        isStandalone: false,
        selector: "p-dropdownItem",
        inputs: {
          id: "id",
          option: "option",
          selected: ["selected", "selected", booleanAttribute],
          focused: ["focused", "focused", booleanAttribute],
          label: "label",
          disabled: ["disabled", "disabled", booleanAttribute],
          visible: ["visible", "visible", booleanAttribute],
          itemSize: ["itemSize", "itemSize", numberAttribute],
          ariaPosInset: "ariaPosInset",
          ariaSetSize: "ariaSetSize",
          template: "template",
          checkmark: ["checkmark", "checkmark", booleanAttribute]
        },
        outputs: {
          onClick: "onClick",
          onMouseEnter: "onMouseEnter"
        },
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <li
            [id]="id"
            (click)="onOptionClick($event)"
            (mouseenter)="onOptionMouseEnter($event)"
            role="option"
            pRipple
            [attr.aria-label]="label"
            [attr.aria-setsize]="ariaSetSize"
            [attr.aria-posinset]="ariaPosInset"
            [attr.aria-selected]="selected"
            [attr.data-p-focused]="focused"
            [attr.data-p-highlight]="selected"
            [attr.data-p-disabled]="disabled"
            [ngStyle]="{ height: itemSize + 'px' }"
            [ngClass]="{
                'p-select-option': true,
                'p-select-option-selected': selected,
                'p-disabled': disabled,
                'p-focus': focused
            }"
        >
            <ng-container *ngIf="checkmark">
                <CheckIcon *ngIf="selected" [styleClass]="'p-select-option-check-icon'" />
                <BlankIcon *ngIf="!selected" [styleClass]="'p-select-option-blank-icon'" />
            </ng-container>
            <span *ngIf="!template">{{ label ?? 'empty' }}</span>
            <ng-container *ngTemplateOutlet="template; context: { $implicit: option }"></ng-container>
        </li>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: forwardRef(() => NgClass),
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgIf),
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgTemplateOutlet),
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgStyle),
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "directive",
          type: forwardRef(() => Ripple),
          selector: "[pRipple]"
        }, {
          kind: "component",
          type: forwardRef(() => BlankIcon),
          selector: "BlankIcon"
        }, {
          kind: "component",
          type: forwardRef(() => CheckIcon),
          selector: "CheckIcon"
        }]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: DropdownItem,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-dropdownItem",
          standalone: false,
          template: `
        <li
            [id]="id"
            (click)="onOptionClick($event)"
            (mouseenter)="onOptionMouseEnter($event)"
            role="option"
            pRipple
            [attr.aria-label]="label"
            [attr.aria-setsize]="ariaSetSize"
            [attr.aria-posinset]="ariaPosInset"
            [attr.aria-selected]="selected"
            [attr.data-p-focused]="focused"
            [attr.data-p-highlight]="selected"
            [attr.data-p-disabled]="disabled"
            [ngStyle]="{ height: itemSize + 'px' }"
            [ngClass]="{
                'p-select-option': true,
                'p-select-option-selected': selected,
                'p-disabled': disabled,
                'p-focus': focused
            }"
        >
            <ng-container *ngIf="checkmark">
                <CheckIcon *ngIf="selected" [styleClass]="'p-select-option-check-icon'" />
                <BlankIcon *ngIf="!selected" [styleClass]="'p-select-option-blank-icon'" />
            </ng-container>
            <span *ngIf="!template">{{ label ?? 'empty' }}</span>
            <ng-container *ngTemplateOutlet="template; context: { $implicit: option }"></ng-container>
        </li>
    `
        }]
      }],
      propDecorators: {
        id: [{
          type: Input
        }],
        option: [{
          type: Input
        }],
        selected: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        focused: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        label: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        visible: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        itemSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        ariaPosInset: [{
          type: Input
        }],
        ariaSetSize: [{
          type: Input
        }],
        template: [{
          type: Input
        }],
        checkmark: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: Output
        }],
        onMouseEnter: [{
          type: Output
        }]
      }
    });
    Dropdown = class _Dropdown extends BaseComponent {
      zone;
      filterService;
      /**
       * Unique identifier of the component
       * @group Props
       */
      id;
      /**
       * Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.
       * @group Props
       */
      scrollHeight = "200px";
      /**
       * When specified, displays an input field to filter the items on keyup.
       * @group Props
       */
      filter;
      /**
       * Name of the input element.
       * @group Props
       */
      name;
      /**
       * Inline style of the element.
       * @group Props
       */
      style;
      /**
       * Inline style of the overlay panel element.
       * @group Props
       */
      panelStyle;
      /**
       * Style class of the element.
       * @group Props
       */
      styleClass;
      /**
       * Style class of the overlay panel element.
       * @group Props
       */
      panelStyleClass;
      /**
       * When present, it specifies that the component cannot be edited.
       * @group Props
       */
      readonly;
      /**
       * When present, it specifies that an input field must be filled out before submitting the form.
       * @group Props
       */
      required;
      /**
       * When present, custom value instead of predefined options can be entered using the editable input field.
       * @group Props
       */
      editable;
      /**
       * Target element to attach the overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
       * @group Props
       */
      appendTo;
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex = 0;
      /**
       * Default text to display when no option is selected.
       * @group Props
       */
      set placeholder(val) {
        this._placeholder.set(val);
      }
      get placeholder() {
        return this._placeholder.asReadonly();
      }
      /**
       * Icon to display in loading state.
       * @group Props
       */
      loadingIcon;
      /**
       * Placeholder text to show when filter input is empty.
       * @group Props
       */
      filterPlaceholder;
      /**
       * Locale to use in filtering. The default locale is the host environment's current locale.
       * @group Props
       */
      filterLocale;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * Identifier of the accessible input element.
       * @group Props
       */
      inputId;
      /**
       * A property to uniquely identify a value in options.
       * @group Props
       */
      dataKey;
      /**
       * When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
       * @group Props
       */
      filterBy;
      /**
       * Fields used when filtering the options, defaults to optionLabel.
       * @group Props
       */
      filterFields;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Clears the filter value when hiding the dropdown.
       * @group Props
       */
      resetFilterOnHide = false;
      /**
       * Whether the selected option will be shown with a check mark.
       * @group Props
       */
      checkmark = false;
      /**
       * Icon class of the dropdown icon.
       * @group Props
       */
      dropdownIcon;
      /**
       * Whether the dropdown is in loading state.
       * @group Props
       */
      loading = false;
      /**
       * Name of the label field of an option.
       * @group Props
       */
      optionLabel;
      /**
       * Name of the value field of an option.
       * @group Props
       */
      optionValue;
      /**
       * Name of the disabled field of an option.
       * @group Props
       */
      optionDisabled;
      /**
       * Name of the label field of an option group.
       * @group Props
       */
      optionGroupLabel = "label";
      /**
       * Name of the options field of an option group.
       * @group Props
       */
      optionGroupChildren = "items";
      /**
       * Whether to display the first item as the label if no placeholder is defined and value is null.
       * @deprecated since v17.3.0, set initial value by model instead.
       * @group Props
       */
      autoDisplayFirst = true;
      /**
       * Whether to display options as grouped when nested options are provided.
       * @group Props
       */
      group;
      /**
       * When enabled, a clear icon is displayed to clear the value.
       * @group Props
       */
      showClear;
      /**
       * Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration.
       * @group Props
       */
      emptyFilterMessage = "";
      /**
       * Text to display when there is no data. Defaults to global value in i18n translation configuration.
       * @group Props
       */
      emptyMessage = "";
      /**
       * Defines if data is loaded and interacted with in lazy manner.
       * @group Props
       */
      lazy = false;
      /**
       * Whether the data should be loaded on demand during scroll.
       * @group Props
       */
      virtualScroll;
      /**
       * Height of an item in the list for VirtualScrolling.
       * @group Props
       */
      virtualScrollItemSize;
      /**
       * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.
       * @group Props
       */
      virtualScrollOptions;
      /**
       * Whether to use overlay API feature. The properties of overlay API can be used like an object in it.
       * @group Props
       */
      overlayOptions;
      /**
       * Defines a string that labels the filter input.
       * @group Props
       */
      ariaFilterLabel;
      /**
       * Used to define a aria label attribute the current element.
       * @group Props
       */
      ariaLabel;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Defines how the items are filtered.
       * @group Props
       */
      filterMatchMode = "contains";
      /**
       * Maximum number of character allows in the editable input field.
       * @group Props
       */
      maxlength;
      /**
       * Advisory information to display in a tooltip on hover.
       * @group Props
       */
      tooltip = "";
      /**
       * Position of the tooltip.
       * @group Props
       */
      tooltipPosition = "right";
      /**
       * Type of CSS position.
       * @group Props
       */
      tooltipPositionStyle = "absolute";
      /**
       * Style class of the tooltip.
       * @group Props
       */
      tooltipStyleClass;
      /**
       * Fields used when filtering the options, defaults to optionLabel.
       * @group Props
       */
      focusOnHover = false;
      /**
       * Determines if the option will be selected on focus.
       * @group Props
       */
      selectOnFocus = false;
      /**
       * Whether to focus on the first visible or selected element when the overlay panel is shown.
       * @group Props
       */
      autoOptionFocus = true;
      /**
       * Applies focus to the filter element when the overlay is shown.
       * @group Props
       */
      autofocusFilter = true;
      /**
       * Whether the component should span the full width of its parent.
       * @group Props
       */
      fluid;
      /**
       * When present, it specifies that the component should be disabled.
       * @group Props
       */
      get disabled() {
        return this._disabled;
      }
      set disabled(_disabled) {
        if (_disabled) {
          this.focused = false;
          if (this.overlayVisible) this.hide();
        }
        this._disabled = _disabled;
        if (!this.cd.destroyed) {
          this.cd.detectChanges();
        }
      }
      /**
       * Item size of item to be virtual scrolled.
       * @group Props
       * @deprecated use virtualScrollItemSize property instead.
       */
      get itemSize() {
        return this._itemSize;
      }
      set itemSize(val) {
        this._itemSize = val;
        console.log("The itemSize property is deprecated, use virtualScrollItemSize property instead.");
      }
      _itemSize;
      /**
       * Whether to automatically manage layering.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get autoZIndex() {
        return this._autoZIndex;
      }
      set autoZIndex(val) {
        this._autoZIndex = val;
        console.log("The autoZIndex property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _autoZIndex;
      /**
       * Base zIndex value to use in layering.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get baseZIndex() {
        return this._baseZIndex;
      }
      set baseZIndex(val) {
        this._baseZIndex = val;
        console.log("The baseZIndex property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _baseZIndex;
      /**
       * Transition options of the show animation.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get showTransitionOptions() {
        return this._showTransitionOptions;
      }
      set showTransitionOptions(val) {
        this._showTransitionOptions = val;
        console.log("The showTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _showTransitionOptions;
      /**
       * Transition options of the hide animation.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get hideTransitionOptions() {
        return this._hideTransitionOptions;
      }
      set hideTransitionOptions(val) {
        this._hideTransitionOptions = val;
        console.log("The hideTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      _hideTransitionOptions;
      /**
       * When specified, filter displays with this value.
       * @group Props
       */
      get filterValue() {
        return this._filterValue();
      }
      set filterValue(val) {
        setTimeout(() => {
          this._filterValue.set(val);
        });
      }
      /**
       * An array of objects to display as the available options.
       * @group Props
       */
      get options() {
        const options = this._options();
        return options;
      }
      set options(val) {
        if (!deepEquals(val, this._options())) {
          this._options.set(val);
        }
      }
      /**
       * Callback to invoke when value of dropdown changes.
       * @param {DropdownChangeEvent} event - custom change event.
       * @group Emits
       */
      onChange = new EventEmitter();
      /**
       * Callback to invoke when data is filtered.
       * @param {DropdownFilterEvent} event - custom filter event.
       * @group Emits
       */
      onFilter = new EventEmitter();
      /**
       * Callback to invoke when dropdown gets focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to invoke when dropdown loses focus.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      /**
       * Callback to invoke when component is clicked.
       * @param {MouseEvent} event - Mouse event.
       * @group Emits
       */
      onClick = new EventEmitter();
      /**
       * Callback to invoke when dropdown overlay gets visible.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onShow = new EventEmitter();
      /**
       * Callback to invoke when dropdown overlay gets hidden.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onHide = new EventEmitter();
      /**
       * Callback to invoke when dropdown clears the value.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onClear = new EventEmitter();
      /**
       * Callback to invoke in lazy mode to load new data.
       * @param {DropdownLazyLoadEvent} event - Lazy load event.
       * @group Emits
       */
      onLazyLoad = new EventEmitter();
      _componentStyle = inject(DropdownStyle);
      containerViewChild;
      filterViewChild;
      focusInputViewChild;
      editableInputViewChild;
      itemsViewChild;
      scroller;
      overlayViewChild;
      firstHiddenFocusableElementOnOverlay;
      lastHiddenFocusableElementOnOverlay;
      // @todo to be refactored
      get hostClass() {
        const classes21 = this._componentStyle.classes.root({
          instance: this
        }).map((cls) => {
          if (typeof cls === "string") {
            return cls;
          } else {
            return Object.keys(cls).filter((key) => cls[key]).join(" ");
          }
        }).join(" ");
        return classes21 + " " + this.styleClass;
      }
      get hostStyle() {
        return this.style;
      }
      _disabled;
      itemsWrapper;
      itemTemplate;
      groupTemplate;
      loaderTemplate;
      selectedItemTemplate;
      headerTemplate;
      filterTemplate;
      footerTemplate;
      emptyFilterTemplate;
      emptyTemplate;
      dropdownIconTemplate;
      loadingIconTemplate;
      clearIconTemplate;
      filterIconTemplate;
      filterOptions;
      _options = signal(null);
      _placeholder = signal(void 0);
      modelValue = signal(null);
      value;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      hover;
      focused;
      overlayVisible;
      optionsChanged;
      panel;
      selectedOptionUpdated;
      _filterValue = signal(null);
      searchValue;
      searchTimeout;
      preventModelTouched;
      focusedOptionIndex = signal(-1);
      clicked = signal(false);
      get emptyMessageLabel() {
        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);
      }
      get emptyFilterMessageLabel() {
        return this.emptyFilterMessage || this.config.getTranslation(TranslationKeys.EMPTY_FILTER_MESSAGE);
      }
      get isVisibleClearIcon() {
        return this.modelValue() != null && this.hasSelectedOption() && this.showClear && !this.disabled;
      }
      get listLabel() {
        return this.config.getTranslation(TranslationKeys.ARIA)["listLabel"];
      }
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return this.fluid || !!fluidComponent;
      }
      get inputClass() {
        const label = this.label();
        return {
          "p-select-label": true,
          "p-placeholder": this.placeholder() && label === this.placeholder(),
          "p-select-label-empty": !this.editable && !this.selectedItemTemplate && (label === void 0 || label === null || label === "p-emptylabel" || label.length === 0)
        };
      }
      get focusedOptionId() {
        return this.focusedOptionIndex() !== -1 ? `${this.id}_${this.focusedOptionIndex()}` : null;
      }
      visibleOptions = computed(() => {
        const options = this.getAllVisibleAndNonVisibleOptions();
        if (this._filterValue()) {
          const _filterBy = this.filterBy || this.optionLabel;
          const filteredOptions = !_filterBy && !this.filterFields && !this.optionValue ? this.options.filter((option) => {
            if (option.label) {
              return option.label.toString().toLowerCase().indexOf(this._filterValue().toLowerCase().trim()) !== -1;
            }
            return option.toString().toLowerCase().indexOf(this._filterValue().toLowerCase().trim()) !== -1;
          }) : this.filterService.filter(options, this.searchFields(), this._filterValue().trim(), this.filterMatchMode, this.filterLocale);
          if (this.group) {
            const optionGroups = this.options || [];
            const filtered = [];
            optionGroups.forEach((group) => {
              const groupChildren = this.getOptionGroupChildren(group);
              const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));
              if (filteredItems.length > 0) filtered.push(__spreadProps(__spreadValues({}, group), {
                [typeof this.optionGroupChildren === "string" ? this.optionGroupChildren : "items"]: [...filteredItems]
              }));
            });
            return this.flatOptions(filtered);
          }
          return filteredOptions;
        }
        return options;
      });
      label = computed(() => {
        const options = this.getAllVisibleAndNonVisibleOptions();
        const selectedOptionIndex = options.findIndex((option) => this.isOptionValueEqualsModelValue(option));
        return selectedOptionIndex !== -1 ? this.getOptionLabel(options[selectedOptionIndex]) : this.placeholder() || "p-emptylabel";
      });
      filled = computed(() => {
        if (typeof this.modelValue() === "string") return !!this.modelValue();
        return this.label() !== "p-emptylabel" && this.modelValue() !== void 0 && this.modelValue() !== null;
      });
      selectedOption;
      editableInputValue = computed(() => this.getOptionLabel(this.selectedOption) || this.modelValue() || "");
      constructor(zone, filterService) {
        super();
        this.zone = zone;
        this.filterService = filterService;
        effect(() => {
          const modelValue = this.modelValue();
          const visibleOptions = this.visibleOptions();
          if (visibleOptions && isNotEmpty(visibleOptions)) {
            const selectedOptionIndex = this.findSelectedOptionIndex();
            if (selectedOptionIndex !== -1 || modelValue === void 0 || typeof modelValue === "string" && modelValue.length === 0 || this.isModelValueNotSet() || this.editable) {
              this.selectedOption = visibleOptions[selectedOptionIndex];
            }
          }
          if (isEmpty(visibleOptions) && (modelValue === void 0 || this.isModelValueNotSet()) && isNotEmpty(this.selectedOption)) {
            this.selectedOption = null;
          }
          if (modelValue !== void 0 && this.editable) {
            this.updateEditableLabel();
          }
          this.cd.markForCheck();
        });
      }
      isModelValueNotSet() {
        return this.modelValue() === null && !this.isOptionValueEqualsModelValue(this.selectedOption);
      }
      getAllVisibleAndNonVisibleOptions() {
        return this.group ? this.flatOptions(this.options) : this.options || [];
      }
      ngOnInit() {
        super.ngOnInit();
        console.log("Dropdown component is deprecated as of v18, use Select component instead.");
        this.id = this.id || uuid("pn_id_");
        this.autoUpdateModel();
        if (this.filterBy) {
          this.filterOptions = {
            filter: (value) => this.onFilterInputChange(value),
            reset: () => this.resetFilter()
          };
        }
      }
      ngAfterViewChecked() {
        if (this.optionsChanged && this.overlayVisible) {
          this.optionsChanged = false;
          this.zone.runOutsideAngular(() => {
            setTimeout(() => {
              if (this.overlayViewChild) {
                this.overlayViewChild.alignOverlay();
              }
            }, 1);
          });
        }
        if (this.selectedOptionUpdated && this.itemsWrapper) {
          let selectedItem = findSingle(this.overlayViewChild?.overlayViewChild?.nativeElement, "li.p-highlight");
          if (selectedItem) {
            scrollInView(this.itemsWrapper, selectedItem);
          }
          this.selectedOptionUpdated = false;
        }
      }
      templates;
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "item":
              this.itemTemplate = item.template;
              break;
            case "selectedItem":
              this.selectedItemTemplate = item.template;
              break;
            case "header":
              this.headerTemplate = item.template;
              break;
            case "filter":
              this.filterTemplate = item.template;
              break;
            case "footer":
              this.footerTemplate = item.template;
              break;
            case "emptyfilter":
              this.emptyFilterTemplate = item.template;
              break;
            case "empty":
              this.emptyTemplate = item.template;
              break;
            case "group":
              this.groupTemplate = item.template;
              break;
            case "loader":
              this.loaderTemplate = item.template;
              break;
            case "dropdownicon":
              this.dropdownIconTemplate = item.template;
              break;
            case "loadingicon":
              this.loadingIconTemplate = item.template;
              break;
            case "clearicon":
              this.clearIconTemplate = item.template;
              break;
            case "filtericon":
              this.filterIconTemplate = item.template;
              break;
            default:
              this.itemTemplate = item.template;
              break;
          }
        });
      }
      flatOptions(options) {
        return (options || []).reduce((result, option, index) => {
          result.push({
            optionGroup: option,
            group: true,
            index
          });
          const optionGroupChildren = this.getOptionGroupChildren(option);
          optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));
          return result;
        }, []);
      }
      autoUpdateModel() {
        if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption()) {
          this.focusedOptionIndex.set(this.findFirstFocusedOptionIndex());
          this.onOptionSelect(null, this.visibleOptions()[this.focusedOptionIndex()], false);
        }
        if (this.autoDisplayFirst && (this.modelValue() === null || this.modelValue() === void 0)) {
          if (!this.placeholder()) {
            const ind = this.findFirstOptionIndex();
            this.onOptionSelect(null, this.visibleOptions()[ind], false, true);
          }
        }
      }
      onOptionSelect(event2, option, isHide = true, preventChange = false) {
        if (!this.isSelected(option)) {
          const value = this.getOptionValue(option);
          this.updateModel(value, event2);
          this.focusedOptionIndex.set(this.findSelectedOptionIndex());
          preventChange === false && this.onChange.emit({
            originalEvent: event2,
            value
          });
        }
        if (isHide) {
          this.hide(true);
        }
      }
      onOptionMouseEnter(event2, index) {
        if (this.focusOnHover) {
          this.changeFocusedOptionIndex(event2, index);
        }
      }
      updateModel(value, event2) {
        this.value = value;
        this.onModelChange(value);
        this.modelValue.set(value);
        this.selectedOptionUpdated = true;
      }
      writeValue(value) {
        if (this.filter) {
          this.resetFilter();
        }
        this.value = value;
        this.allowModelChange() && this.onModelChange(value);
        this.modelValue.set(this.value);
        this.updateEditableLabel();
        this.cd.markForCheck();
      }
      allowModelChange() {
        return this.autoDisplayFirst && !this.placeholder() && (this.modelValue() === void 0 || this.modelValue() === null) && !this.editable && this.options && this.options.length;
      }
      isSelected(option) {
        return this.isValidOption(option) && this.isOptionValueEqualsModelValue(option);
      }
      isOptionValueEqualsModelValue(option) {
        return equals(this.modelValue(), this.getOptionValue(option), this.equalityKey());
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.editable) {
          this.updateEditableLabel();
        }
        this.updatePlaceHolderForFloatingLabel();
      }
      updatePlaceHolderForFloatingLabel() {
        const parentElement = this.el.nativeElement.parentElement;
        const isInFloatingLabel = parentElement?.classList.contains("p-float-label");
        if (parentElement && isInFloatingLabel && !this.selectedOption) {
          const label = parentElement.querySelector("label");
          if (label) {
            this._placeholder.set(label.textContent);
          }
        }
      }
      updateEditableLabel() {
        if (this.editableInputViewChild) {
          this.editableInputViewChild.nativeElement.value = this.getOptionLabel(this.selectedOption) || this.modelValue() || "";
        }
      }
      clearEditableLabel() {
        if (this.editableInputViewChild) {
          this.editableInputViewChild.nativeElement.value = "";
        }
      }
      getOptionIndex(index, scrollerOptions) {
        return this.virtualScrollerDisabled ? index : scrollerOptions && scrollerOptions.getItemOptions(index)["index"];
      }
      getOptionLabel(option) {
        return this.optionLabel !== void 0 && this.optionLabel !== null ? resolveFieldData(option, this.optionLabel) : option && option.label !== void 0 ? option.label : option;
      }
      getOptionValue(option) {
        return this.optionValue && this.optionValue !== null ? resolveFieldData(option, this.optionValue) : !this.optionLabel && option && option.value !== void 0 ? option.value : option;
      }
      isOptionDisabled(option) {
        if (this.getOptionValue(this.modelValue()) === this.getOptionValue(option) || this.getOptionLabel(this.modelValue() === this.getOptionLabel(option)) && option.disabled === false) {
          return false;
        } else {
          return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : option && option.disabled !== void 0 ? option.disabled : false;
        }
      }
      getOptionGroupLabel(optionGroup) {
        return this.optionGroupLabel !== void 0 && this.optionGroupLabel !== null ? resolveFieldData(optionGroup, this.optionGroupLabel) : optionGroup && optionGroup.label !== void 0 ? optionGroup.label : optionGroup;
      }
      getOptionGroupChildren(optionGroup) {
        return this.optionGroupChildren !== void 0 && this.optionGroupChildren !== null ? resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;
      }
      getAriaPosInset(index) {
        return (this.optionGroupLabel ? index - this.visibleOptions().slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;
      }
      get ariaSetSize() {
        return this.visibleOptions().filter((option) => !this.isOptionGroup(option)).length;
      }
      /**
       * Callback to invoke on filter reset.
       * @group Method
       */
      resetFilter() {
        this._filterValue.set(null);
        if (this.filterViewChild && this.filterViewChild.nativeElement) {
          this.filterViewChild.nativeElement.value = "";
        }
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      onContainerClick(event2) {
        if (this.disabled || this.readonly || this.loading) {
          return;
        }
        this.focusInputViewChild?.nativeElement.focus({
          preventScroll: true
        });
        if (event2.target.tagName === "INPUT" || event2.target.getAttribute("data-pc-section") === "clearicon" || event2.target.closest('[data-pc-section="clearicon"]')) {
          return;
        } else if (!this.overlayViewChild || !this.overlayViewChild.el.nativeElement.contains(event2.target)) {
          this.overlayVisible ? this.hide(true) : this.show(true);
        }
        this.onClick.emit(event2);
        this.clicked.set(true);
        this.cd.detectChanges();
      }
      isEmpty() {
        return !this._options() || this.visibleOptions() && this.visibleOptions().length === 0;
      }
      onEditableInput(event2) {
        const value = event2.target.value;
        this.searchValue = "";
        const matched = this.searchOptions(event2, value);
        !matched && this.focusedOptionIndex.set(-1);
        this.onModelChange(value);
        this.updateModel(value, event2);
        setTimeout(() => {
          this.onChange.emit({
            originalEvent: event2,
            value
          });
        }, 1);
        !this.overlayVisible && isNotEmpty(value) && this.show();
      }
      /**
       * Displays the panel.
       * @group Method
       */
      show(isFocus) {
        this.overlayVisible = true;
        const focusedOptionIndex = this.focusedOptionIndex() !== -1 ? this.focusedOptionIndex() : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();
        this.focusedOptionIndex.set(focusedOptionIndex);
        if (isFocus) {
          focus(this.focusInputViewChild?.nativeElement);
        }
        this.cd.markForCheck();
      }
      onOverlayAnimationStart(event2) {
        if (event2.toState === "visible") {
          this.itemsWrapper = findSingle(this.overlayViewChild?.overlayViewChild?.nativeElement, this.virtualScroll ? ".p-scroller" : ".p-dropdown-items-wrapper");
          this.virtualScroll && this.scroller?.setContentEl(this.itemsViewChild?.nativeElement);
          if (this.options && this.options.length) {
            if (this.virtualScroll) {
              const selectedIndex = this.modelValue() ? this.focusedOptionIndex() : -1;
              if (selectedIndex !== -1) {
                this.scroller?.scrollToIndex(selectedIndex);
              }
            } else {
              let selectedListItem = findSingle(this.itemsWrapper, ".p-dropdown-item.p-highlight");
              if (selectedListItem) {
                selectedListItem.scrollIntoView({
                  block: "nearest",
                  inline: "nearest"
                });
              }
            }
          }
          if (this.filterViewChild && this.filterViewChild.nativeElement) {
            this.preventModelTouched = true;
            if (this.autofocusFilter && !this.editable) {
              this.filterViewChild.nativeElement.focus();
            }
          }
          this.onShow.emit(event2);
        }
        if (event2.toState === "void") {
          this.itemsWrapper = null;
          this.onModelTouched();
          this.onHide.emit(event2);
        }
      }
      /**
       * Hides the panel.
       * @group Method
       */
      hide(isFocus) {
        this.overlayVisible = false;
        this.focusedOptionIndex.set(-1);
        this.clicked.set(false);
        this.searchValue = "";
        if (this.overlayOptions?.mode === "modal") {
          unblockBodyScroll();
        }
        if (this.filter && this.resetFilterOnHide) {
          this.resetFilter();
        }
        if (isFocus) {
          if (this.focusInputViewChild) {
            focus(this.focusInputViewChild?.nativeElement);
          }
          if (this.editable && this.editableInputViewChild) {
            focus(this.editableInputViewChild?.nativeElement);
          }
        }
        this.cd.markForCheck();
      }
      onInputFocus(event2) {
        if (this.disabled) {
          return;
        }
        this.focused = true;
        const focusedOptionIndex = this.focusedOptionIndex() !== -1 ? this.focusedOptionIndex() : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;
        this.focusedOptionIndex.set(focusedOptionIndex);
        this.overlayVisible && this.scrollInView(this.focusedOptionIndex());
        this.onFocus.emit(event2);
      }
      onInputBlur(event2) {
        this.focused = false;
        this.onBlur.emit(event2);
        if (!this.preventModelTouched) {
          this.onModelTouched();
        }
        this.preventModelTouched = false;
      }
      onKeyDown(event2, search) {
        if (this.disabled || this.readonly || this.loading) {
          return;
        }
        switch (event2.code) {
          //down
          case "ArrowDown":
            this.onArrowDownKey(event2);
            break;
          //up
          case "ArrowUp":
            this.onArrowUpKey(event2, this.editable);
            break;
          case "ArrowLeft":
          case "ArrowRight":
            this.onArrowLeftKey(event2, this.editable);
            break;
          case "Delete":
            this.onDeleteKey(event2);
            break;
          case "Home":
            this.onHomeKey(event2, this.editable);
            break;
          case "End":
            this.onEndKey(event2, this.editable);
            break;
          case "PageDown":
            this.onPageDownKey(event2);
            break;
          case "PageUp":
            this.onPageUpKey(event2);
            break;
          //space
          case "Space":
            this.onSpaceKey(event2, search);
            break;
          //enter
          case "Enter":
          case "NumpadEnter":
            this.onEnterKey(event2);
            break;
          //escape and tab
          case "Escape":
            this.onEscapeKey(event2);
            break;
          case "Tab":
            this.onTabKey(event2);
            break;
          case "Backspace":
            this.onBackspaceKey(event2, this.editable);
            break;
          case "ShiftLeft":
          case "ShiftRight":
            break;
          default:
            if (!event2.metaKey && isPrintableCharacter(event2.key)) {
              !this.overlayVisible && this.show();
              !this.editable && this.searchOptions(event2, event2.key);
            }
            break;
        }
        this.clicked.set(false);
      }
      onFilterKeyDown(event2) {
        switch (event2.code) {
          case "ArrowDown":
            this.onArrowDownKey(event2);
            break;
          case "ArrowUp":
            this.onArrowUpKey(event2, true);
            break;
          case "ArrowLeft":
          case "ArrowRight":
            this.onArrowLeftKey(event2, true);
            break;
          case "Home":
            this.onHomeKey(event2, true);
            break;
          case "End":
            this.onEndKey(event2, true);
            break;
          case "Enter":
          case "NumpadEnter":
            this.onEnterKey(event2, true);
            break;
          case "Escape":
            this.onEscapeKey(event2);
            break;
          case "Tab":
            this.onTabKey(event2, true);
            break;
          default:
            break;
        }
      }
      onFilterBlur(event2) {
        this.focusedOptionIndex.set(-1);
      }
      onArrowDownKey(event2) {
        if (!this.overlayVisible) {
          this.show();
          this.editable && this.changeFocusedOptionIndex(event2, this.findSelectedOptionIndex());
        } else {
          const optionIndex = this.focusedOptionIndex() !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex()) : this.clicked() ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();
          this.changeFocusedOptionIndex(event2, optionIndex);
        }
        event2.preventDefault();
        event2.stopPropagation();
      }
      changeFocusedOptionIndex(event2, index) {
        if (this.focusedOptionIndex() !== index) {
          this.focusedOptionIndex.set(index);
          this.scrollInView();
          if (this.selectOnFocus) {
            const option = this.visibleOptions()[index];
            this.onOptionSelect(event2, option, false);
          }
        }
      }
      get virtualScrollerDisabled() {
        return !this.virtualScroll;
      }
      scrollInView(index = -1) {
        const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;
        if (this.itemsViewChild && this.itemsViewChild.nativeElement) {
          const element = findSingle(this.itemsViewChild.nativeElement, `li[id="${id}"]`);
          if (element) {
            element.scrollIntoView && element.scrollIntoView({
              block: "nearest",
              inline: "nearest"
            });
          } else if (!this.virtualScrollerDisabled) {
            setTimeout(() => {
              this.virtualScroll && this.scroller?.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex());
            }, 0);
          }
        }
      }
      hasSelectedOption() {
        return this.modelValue() !== void 0;
      }
      isValidSelectedOption(option) {
        return this.isValidOption(option) && this.isSelected(option);
      }
      equalityKey() {
        return this.optionValue ? null : this.dataKey;
      }
      findFirstFocusedOptionIndex() {
        const selectedIndex = this.findSelectedOptionIndex();
        return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;
      }
      findFirstOptionIndex() {
        return this.visibleOptions().findIndex((option) => this.isValidOption(option));
      }
      findSelectedOptionIndex() {
        return this.hasSelectedOption() ? this.visibleOptions().findIndex((option) => this.isValidSelectedOption(option)) : -1;
      }
      findNextOptionIndex(index) {
        const matchedOptionIndex = index < this.visibleOptions().length - 1 ? this.visibleOptions().slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;
      }
      findPrevOptionIndex(index) {
        const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions().slice(0, index), (option) => this.isValidOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex : index;
      }
      findLastOptionIndex() {
        return findLastIndex(this.visibleOptions(), (option) => this.isValidOption(option));
      }
      findLastFocusedOptionIndex() {
        const selectedIndex = this.findSelectedOptionIndex();
        return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;
      }
      isValidOption(option) {
        return option !== void 0 && option !== null && !(this.isOptionDisabled(option) || this.isOptionGroup(option));
      }
      isOptionGroup(option) {
        return this.optionGroupLabel !== void 0 && this.optionGroupLabel !== null && option.optionGroup !== void 0 && option.optionGroup !== null && option.group;
      }
      onArrowUpKey(event2, pressedInInputText = false) {
        if (event2.altKey && !pressedInInputText) {
          if (this.focusedOptionIndex() !== -1) {
            const option = this.visibleOptions()[this.focusedOptionIndex()];
            this.onOptionSelect(event2, option);
          }
          this.overlayVisible && this.hide();
        } else {
          const optionIndex = this.focusedOptionIndex() !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex()) : this.clicked() ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();
          this.changeFocusedOptionIndex(event2, optionIndex);
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
        event2.stopPropagation();
      }
      onArrowLeftKey(event2, pressedInInputText = false) {
        pressedInInputText && this.focusedOptionIndex.set(-1);
      }
      onDeleteKey(event2) {
        if (this.showClear) {
          this.clear(event2);
          event2.preventDefault();
        }
      }
      onHomeKey(event2, pressedInInputText = false) {
        if (pressedInInputText) {
          const target = event2.currentTarget;
          if (event2.shiftKey) {
            target.setSelectionRange(0, target.value.length);
          } else {
            target.setSelectionRange(0, 0);
            this.focusedOptionIndex.set(-1);
          }
        } else {
          this.changeFocusedOptionIndex(event2, this.findFirstOptionIndex());
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
      }
      onEndKey(event2, pressedInInputText = false) {
        if (pressedInInputText) {
          const target = event2.currentTarget;
          if (event2.shiftKey) {
            target.setSelectionRange(0, target.value.length);
          } else {
            const len = target.value.length;
            target.setSelectionRange(len, len);
            this.focusedOptionIndex.set(-1);
          }
        } else {
          this.changeFocusedOptionIndex(event2, this.findLastOptionIndex());
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
      }
      onPageDownKey(event2) {
        this.scrollInView(this.visibleOptions().length - 1);
        event2.preventDefault();
      }
      onPageUpKey(event2) {
        this.scrollInView(0);
        event2.preventDefault();
      }
      onSpaceKey(event2, pressedInInputText = false) {
        !this.editable && !pressedInInputText && this.onEnterKey(event2);
      }
      onEnterKey(event2, pressedInInput = false) {
        if (!this.overlayVisible) {
          this.focusedOptionIndex.set(-1);
          this.onArrowDownKey(event2);
        } else {
          if (this.focusedOptionIndex() !== -1) {
            const option = this.visibleOptions()[this.focusedOptionIndex()];
            this.onOptionSelect(event2, option);
          }
          !pressedInInput && this.hide();
        }
        event2.preventDefault();
      }
      onEscapeKey(event2) {
        this.overlayVisible && this.hide(true);
        event2.preventDefault();
      }
      onTabKey(event2, pressedInInputText = false) {
        if (!pressedInInputText) {
          if (this.overlayVisible && this.hasFocusableElements()) {
            focus(event2.shiftKey ? this.lastHiddenFocusableElementOnOverlay.nativeElement : this.firstHiddenFocusableElementOnOverlay.nativeElement);
            event2.preventDefault();
          } else {
            if (this.focusedOptionIndex() !== -1 && this.overlayVisible) {
              const option = this.visibleOptions()[this.focusedOptionIndex()];
              this.onOptionSelect(event2, option);
            }
            this.overlayVisible && this.hide(this.filter);
          }
        }
        event2.stopPropagation();
      }
      onFirstHiddenFocus(event2) {
        const focusableEl = event2.relatedTarget === this.focusInputViewChild?.nativeElement ? getFirstFocusableElement(this.overlayViewChild.el?.nativeElement, ":not(.p-hidden-focusable)") : this.focusInputViewChild?.nativeElement;
        focus(focusableEl);
      }
      onLastHiddenFocus(event2) {
        const focusableEl = event2.relatedTarget === this.focusInputViewChild?.nativeElement ? getLastFocusableElement(this.overlayViewChild?.overlayViewChild?.nativeElement, ':not([data-p-hidden-focusable="true"])') : this.focusInputViewChild?.nativeElement;
        focus(focusableEl);
      }
      hasFocusableElements() {
        return getFocusableElements(this.overlayViewChild.overlayViewChild.nativeElement, ':not([data-p-hidden-focusable="true"])').length > 0;
      }
      onBackspaceKey(event2, pressedInInputText = false) {
        if (pressedInInputText) {
          !this.overlayVisible && this.show();
        }
      }
      searchFields() {
        return this.filterBy?.split(",") || this.filterFields || [this.optionLabel];
      }
      searchOptions(event2, char) {
        this.searchValue = (this.searchValue || "") + char;
        let optionIndex = -1;
        let matched = false;
        optionIndex = this.visibleOptions().findIndex((option) => this.isOptionExactMatched(option));
        if (optionIndex === -1) {
          optionIndex = this.visibleOptions().findIndex((option) => this.isOptionStartsWith(option));
        }
        if (optionIndex !== -1) {
          matched = true;
        }
        if (optionIndex === -1 && this.focusedOptionIndex() === -1) {
          optionIndex = this.findFirstFocusedOptionIndex();
        }
        if (optionIndex !== -1) {
          this.changeFocusedOptionIndex(event2, optionIndex);
        }
        if (this.searchTimeout) {
          clearTimeout(this.searchTimeout);
        }
        this.searchTimeout = setTimeout(() => {
          this.searchValue = "";
          this.searchTimeout = null;
        }, 500);
        return matched;
      }
      isOptionStartsWith(option) {
        return this.isValidOption(option) && this.getOptionLabel(option).toString().toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));
      }
      isOptionExactMatched(option) {
        return this.isValidOption(option) && this.getOptionLabel(option).toString().toLocaleLowerCase(this.filterLocale) === this.searchValue.toLocaleLowerCase(this.filterLocale);
      }
      onFilterInputChange(event2) {
        let value = event2.target.value;
        this._filterValue.set(value);
        this.focusedOptionIndex.set(-1);
        this.onFilter.emit({
          originalEvent: event2,
          filter: this._filterValue()
        });
        !this.virtualScrollerDisabled && this.scroller.scrollToIndex(0);
        setTimeout(() => {
          this.overlayViewChild.alignOverlay();
        });
        this.cd.markForCheck();
      }
      applyFocus() {
        if (this.editable) findSingle(this.el.nativeElement, ".p-dropdown-label.p-inputtext").focus();
        else focus(this.focusInputViewChild?.nativeElement);
      }
      /**
       * Applies focus.
       * @group Method
       */
      focus() {
        this.applyFocus();
      }
      /**
       * Clears the model.
       * @group Method
       */
      clear(event2) {
        this.updateModel(null, event2);
        this.clearEditableLabel();
        this.onModelTouched();
        this.onChange.emit({
          originalEvent: event2,
          value: this.value
        });
        this.onClear.emit(event2);
        this.resetFilter();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Dropdown,
        deps: [{
          token: NgZone
        }, {
          token: FilterService
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.0.0",
        version: "19.2.10",
        type: _Dropdown,
        isStandalone: false,
        selector: "p-dropdown",
        inputs: {
          id: "id",
          scrollHeight: "scrollHeight",
          filter: ["filter", "filter", booleanAttribute],
          name: "name",
          style: "style",
          panelStyle: "panelStyle",
          styleClass: "styleClass",
          panelStyleClass: "panelStyleClass",
          readonly: ["readonly", "readonly", booleanAttribute],
          required: ["required", "required", booleanAttribute],
          editable: ["editable", "editable", booleanAttribute],
          appendTo: "appendTo",
          tabindex: ["tabindex", "tabindex", numberAttribute],
          placeholder: "placeholder",
          loadingIcon: "loadingIcon",
          filterPlaceholder: "filterPlaceholder",
          filterLocale: "filterLocale",
          variant: "variant",
          inputId: "inputId",
          dataKey: "dataKey",
          filterBy: "filterBy",
          filterFields: "filterFields",
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          resetFilterOnHide: ["resetFilterOnHide", "resetFilterOnHide", booleanAttribute],
          checkmark: ["checkmark", "checkmark", booleanAttribute],
          dropdownIcon: "dropdownIcon",
          loading: ["loading", "loading", booleanAttribute],
          optionLabel: "optionLabel",
          optionValue: "optionValue",
          optionDisabled: "optionDisabled",
          optionGroupLabel: "optionGroupLabel",
          optionGroupChildren: "optionGroupChildren",
          autoDisplayFirst: ["autoDisplayFirst", "autoDisplayFirst", booleanAttribute],
          group: ["group", "group", booleanAttribute],
          showClear: ["showClear", "showClear", booleanAttribute],
          emptyFilterMessage: "emptyFilterMessage",
          emptyMessage: "emptyMessage",
          lazy: ["lazy", "lazy", booleanAttribute],
          virtualScroll: ["virtualScroll", "virtualScroll", booleanAttribute],
          virtualScrollItemSize: ["virtualScrollItemSize", "virtualScrollItemSize", numberAttribute],
          virtualScrollOptions: "virtualScrollOptions",
          overlayOptions: "overlayOptions",
          ariaFilterLabel: "ariaFilterLabel",
          ariaLabel: "ariaLabel",
          ariaLabelledBy: "ariaLabelledBy",
          filterMatchMode: "filterMatchMode",
          maxlength: ["maxlength", "maxlength", numberAttribute],
          tooltip: "tooltip",
          tooltipPosition: "tooltipPosition",
          tooltipPositionStyle: "tooltipPositionStyle",
          tooltipStyleClass: "tooltipStyleClass",
          focusOnHover: ["focusOnHover", "focusOnHover", booleanAttribute],
          selectOnFocus: ["selectOnFocus", "selectOnFocus", booleanAttribute],
          autoOptionFocus: ["autoOptionFocus", "autoOptionFocus", booleanAttribute],
          autofocusFilter: ["autofocusFilter", "autofocusFilter", booleanAttribute],
          fluid: ["fluid", "fluid", booleanAttribute],
          disabled: "disabled",
          itemSize: "itemSize",
          autoZIndex: "autoZIndex",
          baseZIndex: "baseZIndex",
          showTransitionOptions: "showTransitionOptions",
          hideTransitionOptions: "hideTransitionOptions",
          filterValue: "filterValue",
          options: "options"
        },
        outputs: {
          onChange: "onChange",
          onFilter: "onFilter",
          onFocus: "onFocus",
          onBlur: "onBlur",
          onClick: "onClick",
          onShow: "onShow",
          onHide: "onHide",
          onClear: "onClear",
          onLazyLoad: "onLazyLoad"
        },
        host: {
          listeners: {
            "click": "onContainerClick($event)"
          },
          properties: {
            "attr.id": "id",
            "class": "this.hostClass",
            "style": "this.hostStyle"
          }
        },
        providers: [DROPDOWN_VALUE_ACCESSOR, DropdownStyle],
        queries: [{
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "containerViewChild",
          first: true,
          predicate: ["container"],
          descendants: true
        }, {
          propertyName: "filterViewChild",
          first: true,
          predicate: ["filter"],
          descendants: true
        }, {
          propertyName: "focusInputViewChild",
          first: true,
          predicate: ["focusInput"],
          descendants: true
        }, {
          propertyName: "editableInputViewChild",
          first: true,
          predicate: ["editableInput"],
          descendants: true
        }, {
          propertyName: "itemsViewChild",
          first: true,
          predicate: ["items"],
          descendants: true
        }, {
          propertyName: "scroller",
          first: true,
          predicate: ["scroller"],
          descendants: true
        }, {
          propertyName: "overlayViewChild",
          first: true,
          predicate: ["overlay"],
          descendants: true
        }, {
          propertyName: "firstHiddenFocusableElementOnOverlay",
          first: true,
          predicate: ["firstHiddenFocusableEl"],
          descendants: true
        }, {
          propertyName: "lastHiddenFocusableElementOnOverlay",
          first: true,
          predicate: ["lastHiddenFocusableEl"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <span
            #focusInput
            [ngClass]="inputClass"
            *ngIf="!editable"
            [pTooltip]="tooltip"
            [tooltipPosition]="tooltipPosition"
            [positionStyle]="tooltipPositionStyle"
            [tooltipStyleClass]="tooltipStyleClass"
            [attr.aria-disabled]="disabled"
            [attr.id]="inputId"
            role="combobox"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            [attr.aria-labelledby]="ariaLabelledBy"
            [attr.aria-haspopup]="'listbox'"
            [attr.aria-expanded]="overlayVisible ?? false"
            [attr.aria-controls]="overlayVisible ? id + '_list' : null"
            [attr.tabindex]="!disabled ? tabindex : -1"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
            (keydown)="onKeyDown($event)"
            [attr.aria-required]="required"
            [attr.required]="required"
        >
            <ng-container *ngIf="!selectedItemTemplate; else defaultPlaceholder">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</ng-container>
            <ng-container *ngIf="selectedItemTemplate && selectedOption" [ngTemplateOutlet]="selectedItemTemplate" [ngTemplateOutletContext]="{ $implicit: selectedOption }"></ng-container>
            <ng-template #defaultPlaceholder>
                <span *ngIf="!selectedOption">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</span>
            </ng-template>
        </span>
        <input
            *ngIf="editable"
            #editableInput
            type="text"
            [attr.id]="inputId"
            [attr.maxlength]="maxlength"
            [ngClass]="inputClass"
            [disabled]="disabled"
            aria-haspopup="listbox"
            [attr.placeholder]="modelValue() === undefined || modelValue() === null ? placeholder() : undefined"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            (input)="onEditableInput($event)"
            (keydown)="onKeyDown($event)"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
        />
        <ng-container *ngIf="isVisibleClearIcon">
            <TimesIcon class="p-select-clear-icon" (click)="clear($event)" *ngIf="!clearIconTemplate" [attr.data-pc-section]="'clearicon'" />
            <span class="p-select-clear-icon" (click)="clear($event)" *ngIf="clearIconTemplate" [attr.data-pc-section]="'clearicon'">
                <ng-template *ngTemplateOutlet="clearIconTemplate; context: { class: 'p-select-clear-icon' }"></ng-template>
            </span>
        </ng-container>

        <div class="p-select-dropdown" role="button" aria-label="dropdown trigger" aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible ?? false" [attr.data-pc-section]="'trigger'">
            <ng-container *ngIf="loading; else elseBlock">
                <ng-container *ngIf="loadingIconTemplate">
                    <ng-container *ngTemplateOutlet="loadingIconTemplate"></ng-container>
                </ng-container>
                <ng-container *ngIf="!loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="'p-select-loading-icon pi-spin ' + loadingIcon" aria-hidden="true"></span>
                    <span *ngIf="!loadingIcon" [class]="'p-select-loading-icon pi pi-spinner pi-spin'" aria-hidden="true"></span>
                </ng-container>
            </ng-container>

            <ng-template #elseBlock>
                <ng-container *ngIf="!dropdownIconTemplate">
                    <span class="p-select-dropdown-icon" *ngIf="dropdownIcon" [ngClass]="dropdownIcon"></span>
                    <ChevronDownIcon *ngIf="!dropdownIcon" [styleClass]="'p-select-dropdown-icon'" />
                </ng-container>
                <span *ngIf="dropdownIconTemplate" class="p-select-dropdown-icon">
                    <ng-template *ngTemplateOutlet="dropdownIconTemplate; context: { class: 'p-select-dropdown-icon' }"></ng-template>
                </span>
            </ng-template>
        </div>

        <p-overlay
            #overlay
            [(visible)]="overlayVisible"
            [options]="overlayOptions"
            [target]="'@parent'"
            [appendTo]="appendTo"
            [autoZIndex]="autoZIndex"
            [baseZIndex]="baseZIndex"
            [showTransitionOptions]="showTransitionOptions"
            [hideTransitionOptions]="hideTransitionOptions"
            (onAnimationStart)="onOverlayAnimationStart($event)"
            (onHide)="hide()"
        >
            <ng-template #content>
                <div [ngClass]="'p-select-overlay p-component'" [ngStyle]="panelStyle" [class]="panelStyleClass">
                    <span
                        #firstHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onFirstHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    >
                    </span>
                    <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>
                    <div class="p-select-header" *ngIf="filter" (click)="$event.stopPropagation()">
                        <ng-container *ngIf="filterTemplate; else builtInFilterElement">
                            <ng-container *ngTemplateOutlet="filterTemplate; context: { options: filterOptions }"></ng-container>
                        </ng-container>
                        <ng-template #builtInFilterElement>
                            <p-iconfield>
                                <input
                                    #filter
                                    pInputText
                                    type="text"
                                    role="searchbox"
                                    autocomplete="off"
                                    [value]="_filterValue() || ''"
                                    class="p-select-filter"
                                    [variant]="variant"
                                    [attr.placeholder]="filterPlaceholder"
                                    [attr.aria-owns]="id + '_list'"
                                    (input)="onFilterInputChange($event)"
                                    [attr.aria-label]="ariaFilterLabel"
                                    [attr.aria-activedescendant]="focusedOptionId"
                                    (keydown)="onFilterKeyDown($event)"
                                    (blur)="onFilterBlur($event)"
                                />
                                <p-inputicon>
                                    <SearchIcon *ngIf="!filterIconTemplate" />
                                    <span *ngIf="filterIconTemplate">
                                        <ng-template *ngTemplateOutlet="filterIconTemplate"></ng-template>
                                    </span>
                                </p-inputicon>
                            </p-iconfield>
                        </ng-template>
                    </div>
                    <div class="p-select-list-container" [style.max-height]="virtualScroll ? 'auto' : scrollHeight || 'auto'">
                        <p-scroller
                            *ngIf="virtualScroll"
                            #scroller
                            [items]="visibleOptions()"
                            [style]="{ height: scrollHeight }"
                            [itemSize]="virtualScrollItemSize || _itemSize"
                            [autoSize]="true"
                            [lazy]="lazy"
                            (onLazyLoad)="onLazyLoad.emit($event)"
                            [options]="virtualScrollOptions"
                        >
                            <ng-template #content let-items let-scrollerOptions="options">
                                <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: items, options: scrollerOptions }"></ng-container>
                            </ng-template>
                            <ng-container *ngIf="loaderTemplate">
                                <ng-template #loader let-scrollerOptions="options">
                                    <ng-container *ngTemplateOutlet="loaderTemplate; context: { options: scrollerOptions }"></ng-container>
                                </ng-template>
                            </ng-container>
                        </p-scroller>
                        <ng-container *ngIf="!virtualScroll">
                            <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: visibleOptions(), options: {} }"></ng-container>
                        </ng-container>

                        <ng-template #buildInItems let-items let-scrollerOptions="options">
                            <ul #items [attr.id]="id + '_list'" [attr.aria-label]="listLabel" class="p-select-list" [ngClass]="scrollerOptions.contentStyleClass" [style]="scrollerOptions.contentStyle" role="listbox">
                                <ng-template ngFor let-option [ngForOf]="items" let-i="index">
                                    <ng-container *ngIf="isOptionGroup(option)">
                                        <li class="p-select-option-group" [attr.id]="id + '_' + getOptionIndex(i, scrollerOptions)" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                            <span *ngIf="!groupTemplate">{{ getOptionGroupLabel(option.optionGroup) }}</span>
                                            <ng-container *ngTemplateOutlet="groupTemplate; context: { $implicit: option.optionGroup }"></ng-container>
                                        </li>
                                    </ng-container>
                                    <ng-container *ngIf="!isOptionGroup(option)">
                                        <p-dropdownItem
                                            [id]="id + '_' + getOptionIndex(i, scrollerOptions)"
                                            [option]="option"
                                            [checkmark]="checkmark"
                                            [selected]="isSelected(option)"
                                            [label]="getOptionLabel(option)"
                                            [disabled]="isOptionDisabled(option)"
                                            [template]="itemTemplate"
                                            [focused]="focusedOptionIndex() === getOptionIndex(i, scrollerOptions)"
                                            [ariaPosInset]="getAriaPosInset(getOptionIndex(i, scrollerOptions))"
                                            [ariaSetSize]="ariaSetSize"
                                            (onClick)="onOptionSelect($event, option)"
                                            (onMouseEnter)="onOptionMouseEnter($event, getOptionIndex(i, scrollerOptions))"
                                        ></p-dropdownItem>
                                    </ng-container>
                                </ng-template>
                                <li *ngIf="filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyFilterTemplate && !emptyTemplate) {
                                        {{ emptyFilterMessageLabel }}
                                    } @else {
                                        <ng-container #emptyFilter *ngTemplateOutlet="emptyFilterTemplate || emptyTemplate"></ng-container>
                                    }
                                </li>
                                <li *ngIf="!filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyTemplate) {
                                        {{ emptyMessageLabel }}
                                    } @else {
                                        <ng-container *ngTemplateOutlet="emptyTemplate"></ng-container>
                                    }
                                </li>
                            </ul>
                        </ng-template>
                    </div>
                    <ng-container *ngTemplateOutlet="footerTemplate"></ng-container>
                    <span
                        #lastHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onLastHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    ></span>
                </div>
            </ng-template>
        </p-overlay>
    `,
        isInline: true,
        dependencies: [{
          kind: "directive",
          type: forwardRef(() => NgClass),
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgForOf),
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgIf),
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgTemplateOutlet),
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: forwardRef(() => NgStyle),
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: forwardRef(() => Overlay),
          selector: "p-overlay",
          inputs: ["visible", "mode", "style", "styleClass", "contentStyle", "contentStyleClass", "target", "appendTo", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "listener", "responsive", "options"],
          outputs: ["visibleChange", "onBeforeShow", "onShow", "onBeforeHide", "onHide", "onAnimationStart", "onAnimationDone"]
        }, {
          kind: "directive",
          type: forwardRef(() => Tooltip),
          selector: "[pTooltip]",
          inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"]
        }, {
          kind: "component",
          type: forwardRef(() => Scroller),
          selector: "p-scroller, p-virtualscroller, p-virtual-scroller, p-virtualScroller",
          inputs: ["id", "style", "styleClass", "tabindex", "items", "itemSize", "scrollHeight", "scrollWidth", "orientation", "step", "delay", "resizeDelay", "appendOnly", "inline", "lazy", "disabled", "loaderDisabled", "columns", "showSpacer", "showLoader", "numToleratedItems", "loading", "autoSize", "trackBy", "options"],
          outputs: ["onLazyLoad", "onScroll", "onScrollIndexChange"]
        }, {
          kind: "directive",
          type: forwardRef(() => AutoFocus),
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "component",
          type: forwardRef(() => TimesIcon),
          selector: "TimesIcon"
        }, {
          kind: "component",
          type: forwardRef(() => ChevronDownIcon),
          selector: "ChevronDownIcon"
        }, {
          kind: "component",
          type: forwardRef(() => SearchIcon),
          selector: "SearchIcon"
        }, {
          kind: "directive",
          type: forwardRef(() => InputText),
          selector: "[pInputText]",
          inputs: ["variant", "fluid", "pSize"]
        }, {
          kind: "component",
          type: forwardRef(() => IconField),
          selector: "p-iconfield, p-iconField, p-icon-field",
          inputs: ["iconPosition", "styleClass"]
        }, {
          kind: "component",
          type: forwardRef(() => InputIcon),
          selector: "p-inputicon, p-inputIcon",
          inputs: ["styleClass"]
        }, {
          kind: "component",
          type: forwardRef(() => DropdownItem),
          selector: "p-dropdownItem",
          inputs: ["id", "option", "selected", "focused", "label", "disabled", "visible", "itemSize", "ariaPosInset", "ariaSetSize", "template", "checkmark"],
          outputs: ["onClick", "onMouseEnter"]
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Dropdown,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-dropdown",
          standalone: false,
          template: `
        <span
            #focusInput
            [ngClass]="inputClass"
            *ngIf="!editable"
            [pTooltip]="tooltip"
            [tooltipPosition]="tooltipPosition"
            [positionStyle]="tooltipPositionStyle"
            [tooltipStyleClass]="tooltipStyleClass"
            [attr.aria-disabled]="disabled"
            [attr.id]="inputId"
            role="combobox"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            [attr.aria-labelledby]="ariaLabelledBy"
            [attr.aria-haspopup]="'listbox'"
            [attr.aria-expanded]="overlayVisible ?? false"
            [attr.aria-controls]="overlayVisible ? id + '_list' : null"
            [attr.tabindex]="!disabled ? tabindex : -1"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
            (keydown)="onKeyDown($event)"
            [attr.aria-required]="required"
            [attr.required]="required"
        >
            <ng-container *ngIf="!selectedItemTemplate; else defaultPlaceholder">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</ng-container>
            <ng-container *ngIf="selectedItemTemplate && selectedOption" [ngTemplateOutlet]="selectedItemTemplate" [ngTemplateOutletContext]="{ $implicit: selectedOption }"></ng-container>
            <ng-template #defaultPlaceholder>
                <span *ngIf="!selectedOption">{{ label() === 'p-emptylabel' ? '&nbsp;' : label() }}</span>
            </ng-template>
        </span>
        <input
            *ngIf="editable"
            #editableInput
            type="text"
            [attr.id]="inputId"
            [attr.maxlength]="maxlength"
            [ngClass]="inputClass"
            [disabled]="disabled"
            aria-haspopup="listbox"
            [attr.placeholder]="modelValue() === undefined || modelValue() === null ? placeholder() : undefined"
            [attr.aria-label]="ariaLabel || (label() === 'p-emptylabel' ? undefined : label())"
            (input)="onEditableInput($event)"
            (keydown)="onKeyDown($event)"
            [pAutoFocus]="autofocus"
            [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
            (focus)="onInputFocus($event)"
            (blur)="onInputBlur($event)"
        />
        <ng-container *ngIf="isVisibleClearIcon">
            <TimesIcon class="p-select-clear-icon" (click)="clear($event)" *ngIf="!clearIconTemplate" [attr.data-pc-section]="'clearicon'" />
            <span class="p-select-clear-icon" (click)="clear($event)" *ngIf="clearIconTemplate" [attr.data-pc-section]="'clearicon'">
                <ng-template *ngTemplateOutlet="clearIconTemplate; context: { class: 'p-select-clear-icon' }"></ng-template>
            </span>
        </ng-container>

        <div class="p-select-dropdown" role="button" aria-label="dropdown trigger" aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible ?? false" [attr.data-pc-section]="'trigger'">
            <ng-container *ngIf="loading; else elseBlock">
                <ng-container *ngIf="loadingIconTemplate">
                    <ng-container *ngTemplateOutlet="loadingIconTemplate"></ng-container>
                </ng-container>
                <ng-container *ngIf="!loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="'p-select-loading-icon pi-spin ' + loadingIcon" aria-hidden="true"></span>
                    <span *ngIf="!loadingIcon" [class]="'p-select-loading-icon pi pi-spinner pi-spin'" aria-hidden="true"></span>
                </ng-container>
            </ng-container>

            <ng-template #elseBlock>
                <ng-container *ngIf="!dropdownIconTemplate">
                    <span class="p-select-dropdown-icon" *ngIf="dropdownIcon" [ngClass]="dropdownIcon"></span>
                    <ChevronDownIcon *ngIf="!dropdownIcon" [styleClass]="'p-select-dropdown-icon'" />
                </ng-container>
                <span *ngIf="dropdownIconTemplate" class="p-select-dropdown-icon">
                    <ng-template *ngTemplateOutlet="dropdownIconTemplate; context: { class: 'p-select-dropdown-icon' }"></ng-template>
                </span>
            </ng-template>
        </div>

        <p-overlay
            #overlay
            [(visible)]="overlayVisible"
            [options]="overlayOptions"
            [target]="'@parent'"
            [appendTo]="appendTo"
            [autoZIndex]="autoZIndex"
            [baseZIndex]="baseZIndex"
            [showTransitionOptions]="showTransitionOptions"
            [hideTransitionOptions]="hideTransitionOptions"
            (onAnimationStart)="onOverlayAnimationStart($event)"
            (onHide)="hide()"
        >
            <ng-template #content>
                <div [ngClass]="'p-select-overlay p-component'" [ngStyle]="panelStyle" [class]="panelStyleClass">
                    <span
                        #firstHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onFirstHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    >
                    </span>
                    <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>
                    <div class="p-select-header" *ngIf="filter" (click)="$event.stopPropagation()">
                        <ng-container *ngIf="filterTemplate; else builtInFilterElement">
                            <ng-container *ngTemplateOutlet="filterTemplate; context: { options: filterOptions }"></ng-container>
                        </ng-container>
                        <ng-template #builtInFilterElement>
                            <p-iconfield>
                                <input
                                    #filter
                                    pInputText
                                    type="text"
                                    role="searchbox"
                                    autocomplete="off"
                                    [value]="_filterValue() || ''"
                                    class="p-select-filter"
                                    [variant]="variant"
                                    [attr.placeholder]="filterPlaceholder"
                                    [attr.aria-owns]="id + '_list'"
                                    (input)="onFilterInputChange($event)"
                                    [attr.aria-label]="ariaFilterLabel"
                                    [attr.aria-activedescendant]="focusedOptionId"
                                    (keydown)="onFilterKeyDown($event)"
                                    (blur)="onFilterBlur($event)"
                                />
                                <p-inputicon>
                                    <SearchIcon *ngIf="!filterIconTemplate" />
                                    <span *ngIf="filterIconTemplate">
                                        <ng-template *ngTemplateOutlet="filterIconTemplate"></ng-template>
                                    </span>
                                </p-inputicon>
                            </p-iconfield>
                        </ng-template>
                    </div>
                    <div class="p-select-list-container" [style.max-height]="virtualScroll ? 'auto' : scrollHeight || 'auto'">
                        <p-scroller
                            *ngIf="virtualScroll"
                            #scroller
                            [items]="visibleOptions()"
                            [style]="{ height: scrollHeight }"
                            [itemSize]="virtualScrollItemSize || _itemSize"
                            [autoSize]="true"
                            [lazy]="lazy"
                            (onLazyLoad)="onLazyLoad.emit($event)"
                            [options]="virtualScrollOptions"
                        >
                            <ng-template #content let-items let-scrollerOptions="options">
                                <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: items, options: scrollerOptions }"></ng-container>
                            </ng-template>
                            <ng-container *ngIf="loaderTemplate">
                                <ng-template #loader let-scrollerOptions="options">
                                    <ng-container *ngTemplateOutlet="loaderTemplate; context: { options: scrollerOptions }"></ng-container>
                                </ng-template>
                            </ng-container>
                        </p-scroller>
                        <ng-container *ngIf="!virtualScroll">
                            <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: visibleOptions(), options: {} }"></ng-container>
                        </ng-container>

                        <ng-template #buildInItems let-items let-scrollerOptions="options">
                            <ul #items [attr.id]="id + '_list'" [attr.aria-label]="listLabel" class="p-select-list" [ngClass]="scrollerOptions.contentStyleClass" [style]="scrollerOptions.contentStyle" role="listbox">
                                <ng-template ngFor let-option [ngForOf]="items" let-i="index">
                                    <ng-container *ngIf="isOptionGroup(option)">
                                        <li class="p-select-option-group" [attr.id]="id + '_' + getOptionIndex(i, scrollerOptions)" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                            <span *ngIf="!groupTemplate">{{ getOptionGroupLabel(option.optionGroup) }}</span>
                                            <ng-container *ngTemplateOutlet="groupTemplate; context: { $implicit: option.optionGroup }"></ng-container>
                                        </li>
                                    </ng-container>
                                    <ng-container *ngIf="!isOptionGroup(option)">
                                        <p-dropdownItem
                                            [id]="id + '_' + getOptionIndex(i, scrollerOptions)"
                                            [option]="option"
                                            [checkmark]="checkmark"
                                            [selected]="isSelected(option)"
                                            [label]="getOptionLabel(option)"
                                            [disabled]="isOptionDisabled(option)"
                                            [template]="itemTemplate"
                                            [focused]="focusedOptionIndex() === getOptionIndex(i, scrollerOptions)"
                                            [ariaPosInset]="getAriaPosInset(getOptionIndex(i, scrollerOptions))"
                                            [ariaSetSize]="ariaSetSize"
                                            (onClick)="onOptionSelect($event, option)"
                                            (onMouseEnter)="onOptionMouseEnter($event, getOptionIndex(i, scrollerOptions))"
                                        ></p-dropdownItem>
                                    </ng-container>
                                </ng-template>
                                <li *ngIf="filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyFilterTemplate && !emptyTemplate) {
                                        {{ emptyFilterMessageLabel }}
                                    } @else {
                                        <ng-container #emptyFilter *ngTemplateOutlet="emptyFilterTemplate || emptyTemplate"></ng-container>
                                    }
                                </li>
                                <li *ngIf="!filterValue && isEmpty()" class="p-select-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyTemplate) {
                                        {{ emptyMessageLabel }}
                                    } @else {
                                        <ng-container *ngTemplateOutlet="emptyTemplate"></ng-container>
                                    }
                                </li>
                            </ul>
                        </ng-template>
                    </div>
                    <ng-container *ngTemplateOutlet="footerTemplate"></ng-container>
                    <span
                        #lastHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onLastHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    ></span>
                </div>
            </ng-template>
        </p-overlay>
    `,
          host: {
            "[attr.id]": "id",
            "(click)": "onContainerClick($event)"
          },
          providers: [DROPDOWN_VALUE_ACCESSOR, DropdownStyle],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      ctorParameters: () => [{
        type: NgZone
      }, {
        type: FilterService
      }],
      propDecorators: {
        id: [{
          type: Input
        }],
        scrollHeight: [{
          type: Input
        }],
        filter: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        name: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        panelStyle: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        panelStyleClass: [{
          type: Input
        }],
        readonly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        required: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        editable: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        appendTo: [{
          type: Input
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        placeholder: [{
          type: Input
        }],
        loadingIcon: [{
          type: Input
        }],
        filterPlaceholder: [{
          type: Input
        }],
        filterLocale: [{
          type: Input
        }],
        variant: [{
          type: Input
        }],
        inputId: [{
          type: Input
        }],
        dataKey: [{
          type: Input
        }],
        filterBy: [{
          type: Input
        }],
        filterFields: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        resetFilterOnHide: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        checkmark: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        dropdownIcon: [{
          type: Input
        }],
        loading: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        optionLabel: [{
          type: Input
        }],
        optionValue: [{
          type: Input
        }],
        optionDisabled: [{
          type: Input
        }],
        optionGroupLabel: [{
          type: Input
        }],
        optionGroupChildren: [{
          type: Input
        }],
        autoDisplayFirst: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        group: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        showClear: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        emptyFilterMessage: [{
          type: Input
        }],
        emptyMessage: [{
          type: Input
        }],
        lazy: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        virtualScroll: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        virtualScrollItemSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        virtualScrollOptions: [{
          type: Input
        }],
        overlayOptions: [{
          type: Input
        }],
        ariaFilterLabel: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        filterMatchMode: [{
          type: Input
        }],
        maxlength: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        tooltip: [{
          type: Input
        }],
        tooltipPosition: [{
          type: Input
        }],
        tooltipPositionStyle: [{
          type: Input
        }],
        tooltipStyleClass: [{
          type: Input
        }],
        focusOnHover: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        selectOnFocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autoOptionFocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autofocusFilter: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        disabled: [{
          type: Input
        }],
        itemSize: [{
          type: Input
        }],
        autoZIndex: [{
          type: Input
        }],
        baseZIndex: [{
          type: Input
        }],
        showTransitionOptions: [{
          type: Input
        }],
        hideTransitionOptions: [{
          type: Input
        }],
        filterValue: [{
          type: Input
        }],
        options: [{
          type: Input
        }],
        onChange: [{
          type: Output
        }],
        onFilter: [{
          type: Output
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        onClick: [{
          type: Output
        }],
        onShow: [{
          type: Output
        }],
        onHide: [{
          type: Output
        }],
        onClear: [{
          type: Output
        }],
        onLazyLoad: [{
          type: Output
        }],
        containerViewChild: [{
          type: ViewChild,
          args: ["container"]
        }],
        filterViewChild: [{
          type: ViewChild,
          args: ["filter"]
        }],
        focusInputViewChild: [{
          type: ViewChild,
          args: ["focusInput"]
        }],
        editableInputViewChild: [{
          type: ViewChild,
          args: ["editableInput"]
        }],
        itemsViewChild: [{
          type: ViewChild,
          args: ["items"]
        }],
        scroller: [{
          type: ViewChild,
          args: ["scroller"]
        }],
        overlayViewChild: [{
          type: ViewChild,
          args: ["overlay"]
        }],
        firstHiddenFocusableElementOnOverlay: [{
          type: ViewChild,
          args: ["firstHiddenFocusableEl"]
        }],
        lastHiddenFocusableElementOnOverlay: [{
          type: ViewChild,
          args: ["lastHiddenFocusableEl"]
        }],
        hostClass: [{
          type: HostBinding,
          args: ["class"]
        }],
        hostStyle: [{
          type: HostBinding,
          args: ["style"]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    DropdownModule = class _DropdownModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DropdownModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DropdownModule,
        declarations: [Dropdown, DropdownItem],
        imports: [CommonModule, OverlayModule, SharedModule, TooltipModule, Ripple, Scroller, AutoFocusModule, TimesIcon, ChevronDownIcon, SearchIcon, BlankIcon, CheckIcon, InputTextModule, IconField, InputIcon],
        exports: [Dropdown, OverlayModule, SharedModule, Scroller]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _DropdownModule,
        imports: [CommonModule, OverlayModule, SharedModule, TooltipModule, Scroller, AutoFocusModule, TimesIcon, ChevronDownIcon, SearchIcon, BlankIcon, CheckIcon, InputTextModule, IconField, InputIcon, OverlayModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: DropdownModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [CommonModule, OverlayModule, SharedModule, TooltipModule, Ripple, Scroller, AutoFocusModule, TimesIcon, ChevronDownIcon, SearchIcon, BlankIcon, CheckIcon, InputTextModule, IconField, InputIcon],
          exports: [Dropdown, OverlayModule, SharedModule, Scroller],
          declarations: [Dropdown, DropdownItem]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-chip.mjs
var theme19, classes18, ChipStyle, ChipClasses, Chip, ChipModule;
var init_primeng_chip = __esm({
  "node_modules/primeng/fesm2022/primeng-chip.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_primeng_api();
    init_primeng_basecomponent();
    init_primeng_icons();
    init_primeng_base();
    theme19 = ({
      dt
    }) => `
.p-chip {
    display: inline-flex;
    align-items: center;
    background: ${dt("chip.background")};
    color: ${dt("chip.color")};
    border-radius: ${dt("chip.border.radius")};
    padding: ${dt("chip.padding.y")} ${dt("chip.padding.x")};
    gap: ${dt("chip.gap")};
}

.p-chip-icon {
    color: ${dt("chip.icon.color")};
    font-size: ${dt("chip.icon.font.size")};
    width: ${dt("chip.icon.size")};
    height: ${dt("chip.icon.size")};
}

.p-chip-image {
    border-radius: 50%;
    width: ${dt("chip.image.width")};
    height: ${dt("chip.image.height")};
    margin-left: calc(-1 * ${dt("chip.padding.y")});
}

.p-chip:has(.p-chip-remove-icon) {
    padding-inline-end: ${dt("chip.padding.y")};
}

.p-chip:has(.p-chip-image) {
    padding-top: calc(${dt("chip.padding.y")} / 2);
    padding-bottom: calc(${dt("chip.padding.y")} / 2);
}

.p-chip-remove-icon {
    cursor: pointer;
    font-size: ${dt("chip.remove.icon.font.size")};
    width: ${dt("chip.remove.icon.size")};
    height: ${dt("chip.remove.icon.size")};
    color: ${dt("chip.remove.icon.color")};
    border-radius: 50%;
    transition: outline-color ${dt("chip.transition.duration")}, box-shadow ${dt("chip.transition.duration")};
    outline-color: transparent;
}

.p-chip-remove-icon:focus-visible {
    box-shadow: ${dt("chip.remove.icon.focus.ring.shadow")};
    outline: ${dt("chip.remove.icon.focus.ring.width")} ${dt("chip.remove.icon.focus.ring.style")} ${dt("chip.remove.icon.focus.ring.color")};
    outline-offset: ${dt("chip.remove.icon.focus.ring.offset")};
}
`;
    classes18 = {
      root: "p-chip p-component",
      image: "p-chip-image",
      icon: "p-chip-icon",
      label: "p-chip-label",
      removeIcon: "p-chip-remove-icon"
    };
    ChipStyle = class _ChipStyle extends BaseStyle {
      name = "chip";
      theme = theme19;
      classes = classes18;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ChipStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ChipStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ChipStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(ChipClasses2) {
      ChipClasses2["root"] = "p-chip";
      ChipClasses2["image"] = "p-chip-image";
      ChipClasses2["icon"] = "p-chip-icon";
      ChipClasses2["label"] = "p-chip-label";
      ChipClasses2["removeIcon"] = "p-chip-remove-icon";
    })(ChipClasses || (ChipClasses = {}));
    Chip = class _Chip extends BaseComponent {
      /**
       * Defines the text to display.
       * @group Props
       */
      label;
      /**
       * Defines the icon to display.
       * @group Props
       */
      icon;
      /**
       * Defines the image to display.
       * @group Props
       */
      image;
      /**
       * Alt attribute of the image.
       * @group Props
       */
      alt;
      /**
       * Inline style of the element.
       * @group Props
       */
      style;
      /**
       * Class of the element.
       * @group Props
       */
      styleClass;
      /**
       * Whether to display a remove icon.
       * @group Props
       */
      removable = false;
      /**
       * Icon of the remove element.
       * @group Props
       */
      removeIcon;
      /**
       * Callback to invoke when a chip is removed.
       * @param {MouseEvent} event - Mouse event.
       * @group Emits
       */
      onRemove = new EventEmitter();
      /**
       * This event is triggered if an error occurs while loading an image file.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onImageError = new EventEmitter();
      visible = true;
      get removeAriaLabel() {
        return this.config.getTranslation(TranslationKeys.ARIA)["removeLabel"];
      }
      /**
       * Used to pass all properties of the chipProps to the Chip component.
       * @group Props
       */
      get chipProps() {
        return this._chipProps;
      }
      set chipProps(val) {
        this._chipProps = val;
        if (val && typeof val === "object") {
          Object.entries(val).forEach(([k, v]) => this[`_${k}`] !== v && (this[`_${k}`] = v));
        }
      }
      _chipProps;
      _componentStyle = inject(ChipStyle);
      removeIconTemplate;
      templates;
      _removeIconTemplate;
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "removeicon":
              this._removeIconTemplate = item.template;
              break;
            default:
              this._removeIconTemplate = item.template;
              break;
          }
        });
      }
      ngOnChanges(simpleChanges) {
        super.ngOnChanges(simpleChanges);
        if (simpleChanges.chipProps && simpleChanges.chipProps.currentValue) {
          const {
            currentValue
          } = simpleChanges.chipProps;
          if (currentValue.label !== void 0) {
            this.label = currentValue.label;
          }
          if (currentValue.icon !== void 0) {
            this.icon = currentValue.icon;
          }
          if (currentValue.image !== void 0) {
            this.image = currentValue.image;
          }
          if (currentValue.alt !== void 0) {
            this.alt = currentValue.alt;
          }
          if (currentValue.style !== void 0) {
            this.style = currentValue.style;
          }
          if (currentValue.styleClass !== void 0) {
            this.styleClass = currentValue.styleClass;
          }
          if (currentValue.removable !== void 0) {
            this.removable = currentValue.removable;
          }
          if (currentValue.removeIcon !== void 0) {
            this.removeIcon = currentValue.removeIcon;
          }
        }
      }
      containerClass() {
        let classes21 = "p-chip p-component";
        if (this.styleClass) {
          classes21 += ` ${this.styleClass}`;
        }
        return classes21;
      }
      close(event2) {
        this.visible = false;
        this.onRemove.emit(event2);
      }
      onKeydown(event2) {
        if (event2.key === "Enter" || event2.key === "Backspace") {
          this.close(event2);
        }
      }
      imageError(event2) {
        this.onImageError.emit(event2);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _Chip,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _Chip,
        isStandalone: true,
        selector: "p-chip",
        inputs: {
          label: "label",
          icon: "icon",
          image: "image",
          alt: "alt",
          style: "style",
          styleClass: "styleClass",
          removable: ["removable", "removable", booleanAttribute],
          removeIcon: "removeIcon",
          chipProps: "chipProps"
        },
        outputs: {
          onRemove: "onRemove",
          onImageError: "onImageError"
        },
        host: {
          properties: {
            "class": "containerClass()",
            "style": "style",
            "style.display": '!visible && "none"',
            "attr.data-pc-name": "'chip'",
            "attr.aria-label": "label",
            "attr.data-pc-section": "'root'"
          }
        },
        providers: [ChipStyle],
        queries: [{
          propertyName: "removeIconTemplate",
          first: true,
          predicate: ["removeicon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        usesInheritance: true,
        usesOnChanges: true,
        ngImport: core_exports,
        template: `
        <ng-content></ng-content>
        <img class="p-chip-image" [src]="image" *ngIf="image; else iconTemplate" (error)="imageError($event)" [alt]="alt" />
        <ng-template #iconTemplate><span *ngIf="icon" [class]="icon" [ngClass]="'p-chip-icon'" [attr.data-pc-section]="'icon'"></span></ng-template>
        <div class="p-chip-label" *ngIf="label" [attr.data-pc-section]="'label'">{{ label }}</div>
        <ng-container *ngIf="removable">
            <ng-container *ngIf="!removeIconTemplate && !_removeIconTemplate">
                <span
                    tabindex="0"
                    *ngIf="removeIcon"
                    [class]="removeIcon"
                    [ngClass]="'p-chip-remove-icon'"
                    [attr.data-pc-section]="'removeicon'"
                    (click)="close($event)"
                    (keydown)="onKeydown($event)"
                    [attr.aria-label]="removeAriaLabel"
                    role="button"
                ></span>
                <TimesCircleIcon tabindex="0" *ngIf="!removeIcon" [class]="'p-chip-remove-icon'" [attr.data-pc-section]="'removeicon'" (click)="close($event)" (keydown)="onKeydown($event)" [attr.aria-label]="removeAriaLabel" role="button" />
            </ng-container>
            <span *ngIf="removeIconTemplate || _removeIconTemplate" tabindex="0" [attr.data-pc-section]="'removeicon'" class="p-chip-remove-icon" (click)="close($event)" (keydown)="onKeydown($event)" [attr.aria-label]="removeAriaLabel" role="button">
                <ng-template *ngTemplateOutlet="removeIconTemplate || _removeIconTemplate"></ng-template>
            </span>
        </ng-container>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "component",
          type: TimesCircleIcon,
          selector: "TimesCircleIcon"
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: Chip,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-chip",
          standalone: true,
          imports: [CommonModule, TimesCircleIcon, SharedModule],
          template: `
        <ng-content></ng-content>
        <img class="p-chip-image" [src]="image" *ngIf="image; else iconTemplate" (error)="imageError($event)" [alt]="alt" />
        <ng-template #iconTemplate><span *ngIf="icon" [class]="icon" [ngClass]="'p-chip-icon'" [attr.data-pc-section]="'icon'"></span></ng-template>
        <div class="p-chip-label" *ngIf="label" [attr.data-pc-section]="'label'">{{ label }}</div>
        <ng-container *ngIf="removable">
            <ng-container *ngIf="!removeIconTemplate && !_removeIconTemplate">
                <span
                    tabindex="0"
                    *ngIf="removeIcon"
                    [class]="removeIcon"
                    [ngClass]="'p-chip-remove-icon'"
                    [attr.data-pc-section]="'removeicon'"
                    (click)="close($event)"
                    (keydown)="onKeydown($event)"
                    [attr.aria-label]="removeAriaLabel"
                    role="button"
                ></span>
                <TimesCircleIcon tabindex="0" *ngIf="!removeIcon" [class]="'p-chip-remove-icon'" [attr.data-pc-section]="'removeicon'" (click)="close($event)" (keydown)="onKeydown($event)" [attr.aria-label]="removeAriaLabel" role="button" />
            </ng-container>
            <span *ngIf="removeIconTemplate || _removeIconTemplate" tabindex="0" [attr.data-pc-section]="'removeicon'" class="p-chip-remove-icon" (click)="close($event)" (keydown)="onKeydown($event)" [attr.aria-label]="removeAriaLabel" role="button">
                <ng-template *ngTemplateOutlet="removeIconTemplate || _removeIconTemplate"></ng-template>
            </span>
        </ng-container>
    `,
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None,
          providers: [ChipStyle],
          host: {
            "[class]": "containerClass()",
            "[style]": "style",
            "[style.display]": '!visible && "none"',
            "[attr.data-pc-name]": "'chip'",
            "[attr.aria-label]": "label",
            "[attr.data-pc-section]": "'root'"
          }
        }]
      }],
      propDecorators: {
        label: [{
          type: Input
        }],
        icon: [{
          type: Input
        }],
        image: [{
          type: Input
        }],
        alt: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        removable: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        removeIcon: [{
          type: Input
        }],
        onRemove: [{
          type: Output
        }],
        onImageError: [{
          type: Output
        }],
        chipProps: [{
          type: Input
        }],
        removeIconTemplate: [{
          type: ContentChild,
          args: ["removeicon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }]
      }
    });
    ChipModule = class _ChipModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ChipModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ChipModule,
        imports: [Chip, SharedModule],
        exports: [Chip, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _ChipModule,
        imports: [Chip, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: ChipModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [Chip, SharedModule],
          exports: [Chip, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-multiselect.mjs
var theme20, inlineStyles3, classes19, MultiSelectStyle, MultiSelectClasses, MULTISELECT_VALUE_ACCESSOR, MultiSelectItem, MultiSelect, MultiSelectModule;
var init_primeng_multiselect = __esm({
  "node_modules/primeng/fesm2022/primeng-multiselect.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_forms();
    init_utils();
    init_primeng_api();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_basecomponent();
    init_primeng_checkbox();
    init_primeng_chip();
    init_primeng_dom();
    init_primeng_iconfield();
    init_primeng_icons();
    init_primeng_inputicon();
    init_primeng_inputtext();
    init_primeng_overlay();
    init_primeng_ripple();
    init_primeng_scroller();
    init_primeng_tooltip();
    init_primeng_utils();
    init_primeng_base();
    theme20 = ({
      dt
    }) => `
.p-multiselect {
    display: inline-flex;
    cursor: pointer;
    position: relative;
    user-select: none;
    background: ${dt("multiselect.background")};
    border: 1px solid ${dt("multiselect.border.color")};
    transition: background ${dt("multiselect.transition.duration")}, color ${dt("multiselect.transition.duration")}, border-color ${dt("multiselect.transition.duration")}, outline-color ${dt("multiselect.transition.duration")}, box-shadow ${dt("multiselect.transition.duration")};
    border-radius: ${dt("multiselect.border.radius")};
    outline-color: transparent;
    box-shadow: ${dt("multiselect.shadow")};
}

.p-multiselect.ng-invalid.ng-dirty {
    border-color: ${dt("multiselect.invalid.border.color")};
}

.p-multiselect:not(.p-disabled):hover {
    border-color: ${dt("multiselect.hover.border.color")};
}

.p-multiselect:not(.p-disabled).p-focus {
    border-color: ${dt("multiselect.focus.border.color")};
    box-shadow: ${dt("multiselect.focus.ring.shadow")};
    outline: ${dt("multiselect.focus.ring.width")} ${dt("multiselect.focus.ring.style")} ${dt("multiselect.focus.ring.color")};
    outline-offset: ${dt("multiselect.focus.ring.offset")};
}

.p-multiselect.p-variant-filled {
    background: ${dt("multiselect.filled.background")};
}

.p-multiselect.p-variant-filled:not(.p-disabled):hover {
    background: ${dt("multiselect.filled.hover.background")};
}

.p-multiselect.p-variant-filled.p-focus {
    background: ${dt("multiselect.filled.focus.background")};
}

.p-multiselect.p-disabled {
    opacity: 1;
    background: ${dt("multiselect.disabled.background")};
}

.p-multiselect-dropdown {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    background: transparent;
    color: ${dt("multiselect.dropdown.color")};
    width: ${dt("multiselect.dropdown.width")};
    border-start-end-radius: ${dt("multiselect.border.radius")};
    border-end-end-radius: ${dt("multiselect.border.radius")};
}

.p-multiselect-label-container {
    overflow: hidden;
    flex: 1 1 auto;
    cursor: pointer;
}

.p-multiselect-label {
    display: flex;
    align-items-center;
    gap: calc(${dt("multiselect.padding.y")} / 2);
    white-space: nowrap;
    cursor: pointer;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: ${dt("multiselect.padding.y")} ${dt("multiselect.padding.x")};
    color: ${dt("multiselect.color")};
}

.p-multiselect-label.p-placeholder {
    color: ${dt("multiselect.placeholder.color")};
}

p-multiSelect.ng-invalid.ng-dirty .p-multiselect-label.p-placeholder,
p-multi-select.ng-invalid.ng-dirty .p-multiselect-label.p-placeholder,
p-multiselect.ng-invalid.ng-dirty .p-multiselect-label.p-placeholder {
    color: ${dt("multiselect.invalid.placeholder.color")};
}

.p-multiselect.p-disabled .p-multiselect-label {
    color: ${dt("multiselect.disabled.color")};
}

.p-multiselect-label-empty {
    overflow: hidden;
    visibility: hidden;
}

.p-multiselect .p-multiselect-overlay {
    min-width: 100%;
}

.p-multiselect-overlay {
    background: ${dt("multiselect.overlay.background")};
    color: ${dt("multiselect.overlay.color")};
    border: 1px solid ${dt("multiselect.overlay.border.color")};
    border-radius: ${dt("multiselect.overlay.border.radius")};
    box-shadow: ${dt("multiselect.overlay.shadow")};
}

.p-multiselect-header {
    display: flex;
    align-items: center;
    padding: ${dt("multiselect.list.header.padding")};
}

.p-multiselect-header .p-checkbox {
    margin-inline-end: ${dt("multiselect.option.gap")};
}

.p-multiselect-filter-container {
    flex: 1 1 auto;
}

.p-multiselect-filter {
    width: 100%;
}

.p-multiselect-list-container {
    overflow: auto;
}

.p-multiselect-list {
    margin: 0;
    padding: 0;
    list-style-type: none;
    padding: ${dt("multiselect.list.padding")};
    display: flex;
    flex-direction: column;
    gap: ${dt("multiselect.list.gap")}
}

.p-multiselect-option {
    cursor: pointer;
    font-weight: normal;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    gap: ${dt("multiselect.option.gap")};
    padding: ${dt("multiselect.option.padding")};
    border: 0 none;
    color: ${dt("multiselect.option.color")};
    background: transparent;
    transition: background ${dt("multiselect.transition.duration")}, color ${dt("multiselect.transition.duration")}, border-color ${dt("multiselect.transition.duration")}, box-shadow ${dt("multiselect.transition.duration")}, outline-color ${dt("multiselect.transition.duration")};
    border-radius: ${dt("multiselect.option.border.radius")}
}

.p-multiselect-option:not(.p-multiselect-option-selected):not(.p-disabled).p-focus {
    background: ${dt("multiselect.option.focus.background")};
    color: ${dt("multiselect.option.focus.color")};
}

.p-multiselect-option.p-multiselect-option-selected {
    background: ${dt("multiselect.option.selected.background")};
    color: ${dt("multiselect.option.selected.color")};
}

.p-multiselect-option.p-multiselect-option-selected.p-focus {
    background: ${dt("multiselect.option.selected.focus.background")};
    color: ${dt("multiselect.option.selected.focus.color")};
}

.p-multiselect-option-group {
    cursor: auto;
    margin: 0;
    padding: ${dt("multiselect.option.group.padding")};
    background: ${dt("multiselect.option.group.background")};
    color: ${dt("multiselect.option.group.color")};
    font-weight: ${dt("multiselect.option.group.font.weight")};
}

.p-multiselect-empty-message {
    padding: ${dt("multiselect.empty.message.padding")};
}

.p-multiselect-label .p-chip {
    padding-top: calc(${dt("multiselect.padding.y")} / 2);
    padding-bottom: calc(${dt("multiselect.padding.y")} / 2);
    border-radius: ${dt("multiselect.chip.border.radius")};
}

.p-multiselect-label:has(.p-chip) {
    padding: calc(${dt("multiselect.padding.y")} / 2) calc(${dt("multiselect.padding.x")} / 2);
}

.p-multiselect-fluid {
    display: flex;
}

.p-multiselect-sm .p-multiselect-label {
    font-size: ${dt("multiselect.sm.font.size")};
    padding-block: ${dt("multiselect.sm.padding.y")};
    padding-inline: ${dt("multiselect.sm.padding.x")};
}

.p-multiselect-sm .p-multiselect-dropdown .p-icon {
    font-size: ${dt("multiselect.sm.font.size")};
    width: ${dt("multiselect.sm.font.size")};
    height: ${dt("multiselect.sm.font.size")};
}

.p-multiselect-lg .p-multiselect-label {
    font-size: ${dt("multiselect.lg.font.size")};
    padding-block: ${dt("multiselect.lg.padding.y")};
    padding-inline: ${dt("multiselect.lg.padding.x")};
}

.p-multiselect-lg .p-multiselect-dropdown .p-icon {
    font-size: ${dt("multiselect.lg.font.size")};
    width: ${dt("multiselect.lg.font.size")};
    height: ${dt("multiselect.lg.font.size")};
}

.p-multiselect-clear-icon {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    background: transparent;
    color: ${dt("multiselect.clear.icon.color")};
}`;
    inlineStyles3 = {
      root: ({
        props
      }) => ({
        position: props.appendTo === "self" ? "relative" : void 0
      })
    };
    classes19 = {
      root: ({
        instance
      }) => ({
        "p-multiselect p-component p-inputwrapper": true,
        "p-multiselect-display-chip": instance.display === "chip",
        "p-disabled": instance.disabled,
        "p-invalid": instance.invalid,
        "p-variant-filled": instance.variant ? instance.variant === "filled" : instance.config.inputStyle === "filled",
        "p-focus": instance.focused,
        "p-inputwrapper-filled": instance.filled,
        "p-inputwrapper-focus": instance.focused || instance.overlayVisible,
        "p-multiselect-open": instance.overlayVisible,
        "p-multiselect-fluid": instance.hasFluid,
        "p-multiselect-sm p-inputfield-sm": instance.size === "small",
        "p-multiselect-lg p-inputfield-lg": instance.size === "large"
      }),
      labelContainer: "p-multiselect-label-container",
      label: ({
        instance
      }) => ({
        "p-multiselect-label": true,
        "p-placeholder": instance.label() === instance.placeholder(),
        "p-multiselect-label-empty": !instance.placeholder() && !instance.defaultLabel && (!instance.modelValue() || instance.modelValue().length === 0)
      }),
      chipItem: "p-multiselect-chip-item",
      pcChip: "p-multiselect-chip",
      chipIcon: "p-multiselect-chip-icon",
      dropdown: "p-multiselect-dropdown",
      loadingIcon: "p-multiselect-loading-icon",
      dropdownIcon: "p-multiselect-dropdown-icon",
      overlay: "p-multiselect-overlay p-component",
      header: "p-multiselect-header",
      pcFilterContainer: "p-multiselect-filter-container",
      pcFilter: "p-multiselect-filter",
      listContainer: "p-multiselect-list-container",
      list: "p-multiselect-list",
      optionGroup: "p-multiselect-option-group",
      option: ({
        instance,
        option,
        index,
        getItemOptions
      }) => ({
        "p-multiselect-option": true,
        "p-multiselect-option-selected": instance.isSelected(option) && instance.highlightOnSelect,
        "p-focus": instance.focusedOptionIndex === instance.getOptionIndex(index, getItemOptions),
        "p-disabled": instance.isOptionDisabled(option)
      }),
      emptyMessage: "p-multiselect-empty-message"
    };
    MultiSelectStyle = class _MultiSelectStyle extends BaseStyle {
      name = "multiselect";
      theme = theme20;
      classes = classes19;
      inlineStyles = inlineStyles3;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _MultiSelectStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _MultiSelectStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: MultiSelectStyle,
      decorators: [{
        type: Injectable
      }]
    });
    (function(MultiSelectClasses2) {
      MultiSelectClasses2["root"] = "p-multiselect";
      MultiSelectClasses2["labelContainer"] = "p-multiselect-label-container";
      MultiSelectClasses2["label"] = "p-multiselect-label";
      MultiSelectClasses2["chipItem"] = "p-multiselect-chip-item";
      MultiSelectClasses2["pcChip"] = "p-multiselect-chip";
      MultiSelectClasses2["chipIcon"] = "p-multiselect-chip-icon";
      MultiSelectClasses2["dropdown"] = "p-multiselect-dropdown";
      MultiSelectClasses2["loadingIcon"] = "p-multiselect-loading-icon";
      MultiSelectClasses2["dropdownIcon"] = "p-multiselect-dropdown-icon";
      MultiSelectClasses2["overlay"] = "p-multiselect-overlay";
      MultiSelectClasses2["header"] = "p-multiselect-header";
      MultiSelectClasses2["pcFilterContainer"] = "p-multiselect-filter-container";
      MultiSelectClasses2["pcFilter"] = "p-multiselect-filter";
      MultiSelectClasses2["listContainer"] = "p-multiselect-list-container";
      MultiSelectClasses2["list"] = "p-multiselect-list";
      MultiSelectClasses2["optionGroup"] = "p-multiselect-option-group";
      MultiSelectClasses2["option"] = "p-multiselect-option";
      MultiSelectClasses2["emptyMessage"] = "p-multiselect-empty-message";
    })(MultiSelectClasses || (MultiSelectClasses = {}));
    MULTISELECT_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => MultiSelect),
      multi: true
    };
    MultiSelectItem = class _MultiSelectItem extends BaseComponent {
      id;
      option;
      selected;
      label;
      disabled;
      itemSize;
      focused;
      ariaPosInset;
      ariaSetSize;
      variant;
      template;
      checkIconTemplate;
      itemCheckboxIconTemplate;
      highlightOnSelect;
      onClick = new EventEmitter();
      onMouseEnter = new EventEmitter();
      onOptionClick(event2) {
        this.onClick.emit({
          originalEvent: event2,
          option: this.option,
          selected: this.selected
        });
        event2.stopPropagation();
        event2.preventDefault();
      }
      onOptionMouseEnter(event2) {
        this.onMouseEnter.emit({
          originalEvent: event2,
          option: this.option,
          selected: this.selected
        });
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _MultiSelectItem,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _MultiSelectItem,
        isStandalone: true,
        selector: "p-multiSelectItem, p-multiselect-item",
        inputs: {
          id: "id",
          option: "option",
          selected: ["selected", "selected", booleanAttribute],
          label: "label",
          disabled: ["disabled", "disabled", booleanAttribute],
          itemSize: ["itemSize", "itemSize", numberAttribute],
          focused: ["focused", "focused", booleanAttribute],
          ariaPosInset: "ariaPosInset",
          ariaSetSize: "ariaSetSize",
          variant: "variant",
          template: "template",
          checkIconTemplate: "checkIconTemplate",
          itemCheckboxIconTemplate: "itemCheckboxIconTemplate",
          highlightOnSelect: ["highlightOnSelect", "highlightOnSelect", booleanAttribute]
        },
        outputs: {
          onClick: "onClick",
          onMouseEnter: "onMouseEnter"
        },
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <li
            pRipple
            class="p-multiselect-option"
            role="option"
            [ngStyle]="{ height: itemSize + 'px' }"
            [ngClass]="{
                'p-multiselect-option-selected': selected && highlightOnSelect,
                'p-disabled': disabled,
                'p-focus': focused
            }"
            [id]="id"
            [attr.aria-label]="label"
            [attr.aria-setsize]="ariaSetSize"
            [attr.aria-posinset]="ariaPosInset"
            [attr.aria-selected]="selected"
            [attr.data-p-focused]="focused"
            [attr.data-p-highlight]="selected"
            [attr.data-p-disabled]="disabled"
            [attr.aria-checked]="selected"
            (click)="onOptionClick($event)"
            (mouseenter)="onOptionMouseEnter($event)"
        >
            <p-checkbox [ngModel]="selected" [binary]="true" [tabindex]="-1" [variant]="variant" [ariaLabel]="label">
                <ng-container *ngIf="itemCheckboxIconTemplate">
                    <ng-template #checkboxicon let-klass="class">
                        <ng-template *ngTemplateOutlet="itemCheckboxIconTemplate; context: { checked: selected, class: klass }"></ng-template>
                    </ng-template>
                </ng-container>
            </p-checkbox>
            <span *ngIf="!template">{{ label ?? 'empty' }}</span>
            <ng-container *ngTemplateOutlet="template; context: { $implicit: option }"></ng-container>
        </li>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: Checkbox,
          selector: "p-checkbox, p-checkBox, p-check-box",
          inputs: ["value", "name", "disabled", "binary", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "inputStyle", "styleClass", "inputClass", "indeterminate", "size", "formControl", "checkboxIcon", "readonly", "required", "autofocus", "trueValue", "falseValue", "variant"],
          outputs: ["onChange", "onFocus", "onBlur"]
        }, {
          kind: "ngmodule",
          type: FormsModule
        }, {
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }, {
          kind: "directive",
          type: Ripple,
          selector: "[pRipple]"
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: MultiSelectItem,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-multiSelectItem, p-multiselect-item",
          standalone: true,
          imports: [CommonModule, Checkbox, FormsModule, Ripple, SharedModule],
          template: `
        <li
            pRipple
            class="p-multiselect-option"
            role="option"
            [ngStyle]="{ height: itemSize + 'px' }"
            [ngClass]="{
                'p-multiselect-option-selected': selected && highlightOnSelect,
                'p-disabled': disabled,
                'p-focus': focused
            }"
            [id]="id"
            [attr.aria-label]="label"
            [attr.aria-setsize]="ariaSetSize"
            [attr.aria-posinset]="ariaPosInset"
            [attr.aria-selected]="selected"
            [attr.data-p-focused]="focused"
            [attr.data-p-highlight]="selected"
            [attr.data-p-disabled]="disabled"
            [attr.aria-checked]="selected"
            (click)="onOptionClick($event)"
            (mouseenter)="onOptionMouseEnter($event)"
        >
            <p-checkbox [ngModel]="selected" [binary]="true" [tabindex]="-1" [variant]="variant" [ariaLabel]="label">
                <ng-container *ngIf="itemCheckboxIconTemplate">
                    <ng-template #checkboxicon let-klass="class">
                        <ng-template *ngTemplateOutlet="itemCheckboxIconTemplate; context: { checked: selected, class: klass }"></ng-template>
                    </ng-template>
                </ng-container>
            </p-checkbox>
            <span *ngIf="!template">{{ label ?? 'empty' }}</span>
            <ng-container *ngTemplateOutlet="template; context: { $implicit: option }"></ng-container>
        </li>
    `,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      propDecorators: {
        id: [{
          type: Input
        }],
        option: [{
          type: Input
        }],
        selected: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        label: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        itemSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        focused: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        ariaPosInset: [{
          type: Input
        }],
        ariaSetSize: [{
          type: Input
        }],
        variant: [{
          type: Input
        }],
        template: [{
          type: Input
        }],
        checkIconTemplate: [{
          type: Input
        }],
        itemCheckboxIconTemplate: [{
          type: Input
        }],
        highlightOnSelect: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onClick: [{
          type: Output
        }],
        onMouseEnter: [{
          type: Output
        }]
      }
    });
    MultiSelect = class _MultiSelect extends BaseComponent {
      zone;
      filterService;
      overlayService;
      /**
       * Unique identifier of the component
       * @group Props
       */
      id;
      /**
       * Defines a string that labels the input for accessibility.
       * @group Props
       */
      ariaLabel;
      /**
       * Inline style of the element.
       * @group Props
       */
      style;
      /**
       * Style class of the element.
       * @group Props
       */
      styleClass;
      /**
       * Inline style of the overlay panel.
       * @group Props
       */
      panelStyle;
      /**
       * Style class of the overlay panel element.
       * @group Props
       */
      panelStyleClass;
      /**
       * Identifier of the focus input to match a label defined for the component.
       * @group Props
       */
      inputId;
      /**
       * When present, it specifies that the element should be disabled.
       * @group Props
       */
      disabled;
      /**
       * Spans 100% width of the container when enabled.
       * @group Props
       */
      fluid;
      /**
       * When present, it specifies that the component cannot be edited.
       * @group Props
       */
      readonly;
      /**
       * Whether to display options as grouped when nested options are provided.
       * @group Props
       */
      group;
      /**
       * When specified, displays an input field to filter the items on keyup.
       * @group Props
       */
      filter = true;
      /**
       * Defines placeholder of the filter input.
       * @group Props
       */
      filterPlaceHolder;
      /**
       * Locale to use in filtering. The default locale is the host environment's current locale.
       * @group Props
       */
      filterLocale;
      /**
       * Specifies the visibility of the options panel.
       * @group Props
       */
      overlayVisible;
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex = 0;
      /**
       * Specifies the input variant of the component.
       * @group Props
       */
      variant;
      /**
       * Target element to attach the overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
       * @group Props
       */
      appendTo;
      /**
       * A property to uniquely identify a value in options.
       * @group Props
       */
      dataKey;
      /**
       * Name of the input element.
       * @group Props
       */
      name;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * Whether to show labels of selected item labels or use default label.
       * @group Props
       * @defaultValue true
       */
      set displaySelectedLabel(val) {
        this._displaySelectedLabel = val;
      }
      get displaySelectedLabel() {
        return this._displaySelectedLabel;
      }
      /**
       * Decides how many selected item labels to show at most.
       * @group Props
       * @defaultValue 3
       */
      set maxSelectedLabels(val) {
        this._maxSelectedLabels = val;
      }
      get maxSelectedLabels() {
        return this._maxSelectedLabels;
      }
      /**
       * Maximum number of selectable items.
       * @group Props
       */
      selectionLimit;
      /**
       * Label to display after exceeding max selected labels e.g. ({0} items selected), defaults "ellipsis" keyword to indicate a text-overflow.
       * @group Props
       */
      selectedItemsLabel;
      /**
       * Whether to show the checkbox at header to toggle all items at once.
       * @group Props
       */
      showToggleAll = true;
      /**
       * Text to display when filtering does not return any results.
       * @group Props
       */
      emptyFilterMessage = "";
      /**
       * Text to display when there is no data. Defaults to global value in i18n translation configuration.
       * @group Props
       */
      emptyMessage = "";
      /**
       * Clears the filter value when hiding the dropdown.
       * @group Props
       */
      resetFilterOnHide = false;
      /**
       * Icon class of the dropdown icon.
       * @group Props
       */
      dropdownIcon;
      /**
       * Icon class of the chip icon.
       * @group Props
       */
      chipIcon;
      /**
       * Name of the label field of an option.
       * @group Props
       */
      optionLabel;
      /**
       * Name of the value field of an option.
       * @group Props
       */
      optionValue;
      /**
       * Name of the disabled field of an option.
       * @group Props
       */
      optionDisabled;
      /**
       * Name of the label field of an option group.
       * @group Props
       */
      optionGroupLabel = "label";
      /**
       * Name of the options field of an option group.
       * @group Props
       */
      optionGroupChildren = "items";
      /**
       * Whether to show the header.
       * @group Props
       */
      showHeader = true;
      /**
       * When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
       * @group Props
       */
      filterBy;
      /**
       * Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.
       * @group Props
       */
      scrollHeight = "200px";
      /**
       * Defines if data is loaded and interacted with in lazy manner.
       * @group Props
       */
      lazy = false;
      /**
       * Whether the data should be loaded on demand during scroll.
       * @group Props
       */
      virtualScroll;
      /**
       * Whether the multiselect is in loading state.
       * @group Props
       */
      loading = false;
      /**
       * Height of an item in the list for VirtualScrolling.
       * @group Props
       */
      virtualScrollItemSize;
      /**
       * Icon to display in loading state.
       * @group Props
       */
      loadingIcon;
      /**
       * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.
       * @group Props
       */
      virtualScrollOptions;
      /**
       * Whether to use overlay API feature. The properties of overlay API can be used like an object in it.
       * @group Props
       */
      overlayOptions;
      /**
       * Defines a string that labels the filter input.
       * @group Props
       */
      ariaFilterLabel;
      /**
       * Defines how the items are filtered.
       * @group Props
       */
      filterMatchMode = "contains";
      /**
       * Advisory information to display in a tooltip on hover.
       * @group Props
       */
      tooltip = "";
      /**
       * Position of the tooltip.
       * @group Props
       */
      tooltipPosition = "right";
      /**
       * Type of CSS position.
       * @group Props
       */
      tooltipPositionStyle = "absolute";
      /**
       * Style class of the tooltip.
       * @group Props
       */
      tooltipStyleClass;
      /**
       * Applies focus to the filter element when the overlay is shown.
       * @group Props
       */
      autofocusFilter = false;
      /**
       * Defines how the selected items are displayed.
       * @group Props
       */
      display = "comma";
      /**
       * Defines the autocomplete is active.
       * @group Props
       */
      autocomplete = "off";
      /**
       * Defines the size of the component.
       * @group Props
       */
      size;
      /**
       * When enabled, a clear icon is displayed to clear the value.
       * @group Props
       */
      showClear = false;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * @deprecated since v14.2.0, use overlayOptions property instead.
       * Whether to automatically manage layering.
       * @group Props
       */
      get autoZIndex() {
        return this._autoZIndex;
      }
      set autoZIndex(val) {
        this._autoZIndex = val;
        console.log("The autoZIndex property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      /**
       * @deprecated since v14.2.0, use overlayOptions property instead.
       * Base zIndex value to use in layering.
       * @group Props
       */
      get baseZIndex() {
        return this._baseZIndex;
      }
      set baseZIndex(val) {
        this._baseZIndex = val;
        console.log("The baseZIndex property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      /**
       * Transition options of the show animation.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get showTransitionOptions() {
        return this._showTransitionOptions;
      }
      set showTransitionOptions(val) {
        this._showTransitionOptions = val;
        console.log("The showTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      /**
       * Transition options of the hide animation.
       * @group Props
       * @deprecated since v14.2.0, use overlayOptions property instead.
       */
      get hideTransitionOptions() {
        return this._hideTransitionOptions;
      }
      set hideTransitionOptions(val) {
        this._hideTransitionOptions = val;
        console.log("The hideTransitionOptions property is deprecated since v14.2.0, use overlayOptions property instead.");
      }
      /**
       * Label to display when there are no selections.
       * @group Props
       * @deprecated Use placeholder instead.
       */
      set defaultLabel(val) {
        this._defaultLabel = val;
        console.log("defaultLabel property is deprecated since 16.6.0, use placeholder instead");
      }
      get defaultLabel() {
        return this._defaultLabel;
      }
      /**
       * Label to display when there are no selections.
       * @group Props
       */
      set placeholder(val) {
        this._placeholder.set(val);
      }
      get placeholder() {
        return this._placeholder.asReadonly();
      }
      /**
       * An array of objects to display as the available options.
       * @group Props
       */
      get options() {
        return this._options();
      }
      set options(val) {
        if (!deepEquals(this._options(), val)) {
          this._options.set(val);
        }
      }
      /**
       * When specified, filter displays with this value.
       * @group Props
       */
      get filterValue() {
        return this._filterValue();
      }
      set filterValue(val) {
        this._filterValue.set(val);
      }
      /**
       * Item size of item to be virtual scrolled.
       * @group Props
       * @deprecated use virtualScrollItemSize property instead.
       */
      get itemSize() {
        return this._itemSize;
      }
      set itemSize(val) {
        this._itemSize = val;
        console.log("The itemSize property is deprecated, use virtualScrollItemSize property instead.");
      }
      /**
       * Whether all data is selected.
       * @group Props
       */
      get selectAll() {
        return this._selectAll;
      }
      set selectAll(value) {
        this._selectAll = value;
      }
      /**
       * Indicates whether to focus on options when hovering over them, defaults to optionLabel.
       * @group Props
       */
      focusOnHover = true;
      /**
       * Fields used when filtering the options, defaults to optionLabel.
       * @group Props
       */
      filterFields;
      /**
       * Determines if the option will be selected on focus.
       * @group Props
       */
      selectOnFocus = false;
      /**
       * Whether to focus on the first visible or selected element when the overlay panel is shown.
       * @group Props
       */
      autoOptionFocus = false;
      /**
       * Whether the selected option will be add highlight class.
       * @group Props
       */
      highlightOnSelect = true;
      /**
       * Callback to invoke when value changes.
       * @param {MultiSelectChangeEvent} event - Custom change event.
       * @group Emits
       */
      onChange = new EventEmitter();
      /**
       * Callback to invoke when data is filtered.
       * @param {MultiSelectFilterEvent} event - Custom filter event.
       * @group Emits
       */
      onFilter = new EventEmitter();
      /**
       * Callback to invoke when multiselect receives focus.
       * @param {MultiSelectFocusEvent} event - Custom focus event.
       * @group Emits
       */
      onFocus = new EventEmitter();
      /**
       * Callback to invoke when multiselect loses focus.
       * @param {MultiSelectBlurEvent} event - Custom blur event.
       * @group Emits
       */
      onBlur = new EventEmitter();
      /**
       * Callback to invoke when component is clicked.
       * @param {Event} event - Browser event.
       * @group Emits
       */
      onClick = new EventEmitter();
      /**
       * Callback to invoke when input field is cleared.
       * @group Emits
       */
      onClear = new EventEmitter();
      /**
       * Callback to invoke when overlay panel becomes visible.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onPanelShow = new EventEmitter();
      /**
       * Callback to invoke when overlay panel becomes hidden.
       * @param {AnimationEvent} event - Animation event.
       * @group Emits
       */
      onPanelHide = new EventEmitter();
      /**
       * Callback to invoke in lazy mode to load new data.
       * @param {MultiSelectLazyLoadEvent} event - Lazy load event.
       * @group Emits
       */
      onLazyLoad = new EventEmitter();
      /**
       * Callback to invoke in lazy mode to load new data.
       * @param {MultiSelectRemoveEvent} event - Remove event.
       * @group Emits
       */
      onRemove = new EventEmitter();
      /**
       * Callback to invoke when all data is selected.
       * @param {MultiSelectSelectAllChangeEvent} event - Custom select event.
       * @group Emits
       */
      onSelectAllChange = new EventEmitter();
      overlayViewChild;
      filterInputChild;
      focusInputViewChild;
      itemsViewChild;
      scroller;
      lastHiddenFocusableElementOnOverlay;
      firstHiddenFocusableElementOnOverlay;
      headerCheckboxViewChild;
      footerFacet;
      headerFacet;
      _componentStyle = inject(MultiSelectStyle);
      searchValue;
      searchTimeout;
      _selectAll = null;
      _autoZIndex;
      _baseZIndex;
      _showTransitionOptions;
      _hideTransitionOptions;
      _defaultLabel;
      _placeholder = signal(void 0);
      _itemSize;
      _selectionLimit;
      _disableTooltip = false;
      value;
      _filteredOptions;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      valuesAsString;
      focus;
      filtered;
      itemTemplate;
      groupTemplate;
      loaderTemplate;
      headerTemplate;
      filterTemplate;
      footerTemplate;
      emptyFilterTemplate;
      emptyTemplate;
      selectedItemsTemplate;
      checkIconTemplate;
      loadingIconTemplate;
      filterIconTemplate;
      removeTokenIconTemplate;
      chipIconTemplate;
      clearIconTemplate;
      dropdownIconTemplate;
      itemCheckboxIconTemplate;
      headerCheckboxIconTemplate;
      templates;
      _itemTemplate;
      _groupTemplate;
      _loaderTemplate;
      _headerTemplate;
      _filterTemplate;
      _footerTemplate;
      _emptyFilterTemplate;
      _emptyTemplate;
      _selectedItemsTemplate;
      _checkIconTemplate;
      _loadingIconTemplate;
      _filterIconTemplate;
      _removeTokenIconTemplate;
      _chipIconTemplate;
      _clearIconTemplate;
      _dropdownIconTemplate;
      _itemCheckboxIconTemplate;
      _headerCheckboxIconTemplate;
      ngAfterContentInit() {
        this.templates.forEach((item) => {
          switch (item.getType()) {
            case "item":
              this._itemTemplate = item.template;
              break;
            case "group":
              this._groupTemplate = item.template;
              break;
            case "selectedItems":
            case "selecteditems":
              this._selectedItemsTemplate = item.template;
              break;
            case "header":
              this._headerTemplate = item.template;
              break;
            case "filter":
              this._filterTemplate = item.template;
              break;
            case "emptyfilter":
              this._emptyFilterTemplate = item.template;
              break;
            case "empty":
              this._emptyTemplate = item.template;
              break;
            case "footer":
              this._footerTemplate = item.template;
              break;
            case "loader":
              this._loaderTemplate = item.template;
              break;
            case "checkicon":
              this._checkIconTemplate = item.template;
              console.warn("checkicon is deprecated and will removed in future. Use itemcheckboxicon or headercheckboxicon templates instead.");
              break;
            case "headercheckboxicon":
              this._headerCheckboxIconTemplate = item.template;
              break;
            case "loadingicon":
              this._loadingIconTemplate = item.template;
              break;
            case "filtericon":
              this._filterIconTemplate = item.template;
              break;
            case "removetokenicon":
              this._removeTokenIconTemplate = item.template;
              break;
            case "clearicon":
              this._clearIconTemplate = item.template;
              break;
            case "dropdownicon":
              this._dropdownIconTemplate = item.template;
              break;
            case "itemcheckboxicon":
              this._itemCheckboxIconTemplate = item.template;
              break;
            case "chipicon":
              this._chipIconTemplate = item.template;
              break;
            default:
              this._itemTemplate = item.template;
              break;
          }
        });
      }
      headerCheckboxFocus;
      filterOptions;
      preventModelTouched;
      preventDocumentDefault;
      focused = false;
      itemsWrapper;
      _displaySelectedLabel = true;
      _maxSelectedLabels = 3;
      modelValue = signal(null);
      _filterValue = signal(null);
      _options = signal(null);
      startRangeIndex = signal(-1);
      focusedOptionIndex = signal(-1);
      selectedOptions;
      clickInProgress = false;
      get hostClasses() {
        const classes21 = [];
        if (typeof this.rootClass === "string") {
          classes21.push(this.rootClass);
        } else if (Array.isArray(this.rootClass)) {
          classes21.push(...this.rootClass);
        } else if (typeof this.rootClass === "object") {
          Object.keys(this.rootClass).filter((key) => this.rootClass[key]).forEach((key) => classes21.push(key));
        }
        if (this.styleClass) {
          classes21.push(this.styleClass);
        }
        return classes21.join(" ");
      }
      get rootClass() {
        return this._componentStyle.classes.root({
          instance: this
        });
      }
      get labelClass() {
        return this._componentStyle.classes.label({
          instance: this
        });
      }
      get emptyMessageLabel() {
        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);
      }
      get emptyFilterMessageLabel() {
        return this.emptyFilterMessage || this.config.getTranslation(TranslationKeys.EMPTY_FILTER_MESSAGE);
      }
      get filled() {
        if (typeof this.modelValue() === "string") return !!this.modelValue();
        return isNotEmpty(this.modelValue());
      }
      get isVisibleClearIcon() {
        return this.modelValue() != null && this.modelValue() !== "" && isNotEmpty(this.modelValue()) && this.showClear && !this.disabled && !this.readonly && this.filled;
      }
      get toggleAllAriaLabel() {
        return this.config.translation.aria ? this.config.translation.aria[this.allSelected() ? "selectAll" : "unselectAll"] : void 0;
      }
      get closeAriaLabel() {
        return this.config.translation.aria ? this.config.translation.aria.close : void 0;
      }
      get listLabel() {
        return this.config.getTranslation(TranslationKeys.ARIA)["listLabel"];
      }
      get hasFluid() {
        const nativeElement = this.el.nativeElement;
        const fluidComponent = nativeElement.closest("p-fluid");
        return this.fluid || !!fluidComponent;
      }
      getAllVisibleAndNonVisibleOptions() {
        return this.group ? this.flatOptions(this.options) : this.options || [];
      }
      visibleOptions = computed(() => {
        const options = this.getAllVisibleAndNonVisibleOptions();
        const isArrayOfObjects = isArray(options) && ObjectUtils.isObject(options[0]);
        if (this._filterValue()) {
          let filteredOptions;
          if (isArrayOfObjects) {
            filteredOptions = this.filterService.filter(options, this.searchFields(), this._filterValue(), this.filterMatchMode, this.filterLocale);
          } else {
            filteredOptions = options.filter((option) => option.toString().toLocaleLowerCase().includes(this._filterValue().toLocaleLowerCase()));
          }
          if (this.group) {
            const optionGroups = this.options || [];
            const filtered = [];
            optionGroups.forEach((group) => {
              const groupChildren = this.getOptionGroupChildren(group);
              const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));
              if (filteredItems.length > 0) filtered.push(__spreadProps(__spreadValues({}, group), {
                [typeof this.optionGroupChildren === "string" ? this.optionGroupChildren : "items"]: [...filteredItems]
              }));
            });
            return this.flatOptions(filtered);
          }
          return filteredOptions;
        }
        return options;
      });
      label = computed(() => {
        let label;
        const modelValue = this.modelValue();
        if (modelValue && modelValue.length && this.displaySelectedLabel) {
          if (isNotEmpty(this.maxSelectedLabels) && modelValue.length > this.maxSelectedLabels) {
            return this.getSelectedItemsLabel();
          } else {
            label = "";
            for (let i = 0; i < modelValue.length; i++) {
              if (i !== 0) {
                label += ", ";
              }
              label += this.getLabelByValue(modelValue[i]);
            }
          }
        } else {
          label = this.placeholder() || this.defaultLabel || "";
        }
        return label;
      });
      chipSelectedItems = computed(() => {
        return isNotEmpty(this.maxSelectedLabels) && this.modelValue() && this.modelValue().length > this.maxSelectedLabels ? this.modelValue().slice(0, this.maxSelectedLabels) : this.modelValue();
      });
      constructor(zone, filterService, overlayService) {
        super();
        this.zone = zone;
        this.filterService = filterService;
        this.overlayService = overlayService;
        effect(() => {
          const modelValue = this.modelValue();
          const allVisibleAndNonVisibleOptions = this.getAllVisibleAndNonVisibleOptions();
          if (allVisibleAndNonVisibleOptions && isNotEmpty(allVisibleAndNonVisibleOptions)) {
            if (this.optionValue && this.optionLabel && modelValue) {
              this.selectedOptions = allVisibleAndNonVisibleOptions.filter((option) => modelValue.includes(option[this.optionLabel]) || modelValue.includes(option[this.optionValue]));
            } else {
              this.selectedOptions = modelValue;
            }
            this.cd.markForCheck();
          }
        });
      }
      ngOnInit() {
        super.ngOnInit();
        this.id = this.id || uuid("pn_id_");
        this.autoUpdateModel();
        if (this.filterBy) {
          this.filterOptions = {
            filter: (value) => this.onFilterInputChange(value),
            reset: () => this.resetFilter()
          };
        }
      }
      maxSelectionLimitReached() {
        return this.selectionLimit && this.modelValue() && this.modelValue().length === this.selectionLimit;
      }
      ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.overlayVisible) {
          this.show();
        }
      }
      ngAfterViewChecked() {
        if (this.filtered) {
          this.zone.runOutsideAngular(() => {
            setTimeout(() => {
              this.overlayViewChild?.alignOverlay();
            }, 1);
          });
          this.filtered = false;
        }
      }
      flatOptions(options) {
        return (options || []).reduce((result, option, index) => {
          result.push({
            optionGroup: option,
            group: true,
            index
          });
          const optionGroupChildren = this.getOptionGroupChildren(option);
          optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));
          return result;
        }, []);
      }
      autoUpdateModel() {
        if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption()) {
          this.focusedOptionIndex.set(this.findFirstFocusedOptionIndex());
          const value = this.getOptionValue(this.visibleOptions()[this.focusedOptionIndex()]);
          this.onOptionSelect({
            originalEvent: null,
            option: [value]
          });
        }
      }
      /**
       * Updates the model value.
       * @group Method
       */
      updateModel(value, event2) {
        this.value = value;
        this.onModelChange(value);
        this.modelValue.set(value);
      }
      onInputClick(event2) {
        event2.stopPropagation();
        event2.preventDefault();
        this.focusedOptionIndex.set(-1);
      }
      onOptionSelect(event2, isFocus = false, index = -1) {
        const {
          originalEvent,
          option
        } = event2;
        if (this.disabled || this.isOptionDisabled(option)) {
          return;
        }
        let selected = this.isSelected(option);
        let value = null;
        if (selected) {
          value = this.modelValue().filter((val) => !equals(val, this.getOptionValue(option), this.equalityKey()));
        } else {
          value = [...this.modelValue() || [], this.getOptionValue(option)];
        }
        this.updateModel(value, originalEvent);
        index !== -1 && this.focusedOptionIndex.set(index);
        isFocus && focus(this.focusInputViewChild?.nativeElement);
        this.onChange.emit({
          originalEvent: event2,
          value,
          itemValue: option
        });
      }
      findSelectedOptionIndex() {
        return this.hasSelectedOption() ? this.visibleOptions().findIndex((option) => this.isValidSelectedOption(option)) : -1;
      }
      onOptionSelectRange(event2, start = -1, end = -1) {
        start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));
        end === -1 && (end = this.findNearestSelectedOptionIndex(start));
        if (start !== -1 && end !== -1) {
          const rangeStart = Math.min(start, end);
          const rangeEnd = Math.max(start, end);
          const value = this.visibleOptions().slice(rangeStart, rangeEnd + 1).filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));
          this.updateModel(value, event2);
        }
      }
      searchFields() {
        return (this.filterBy || this.optionLabel || "label").split(",");
      }
      findNearestSelectedOptionIndex(index, firstCheckUp = false) {
        let matchedOptionIndex = -1;
        if (this.hasSelectedOption()) {
          if (firstCheckUp) {
            matchedOptionIndex = this.findPrevSelectedOptionIndex(index);
            matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;
          } else {
            matchedOptionIndex = this.findNextSelectedOptionIndex(index);
            matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;
          }
        }
        return matchedOptionIndex > -1 ? matchedOptionIndex : index;
      }
      findPrevSelectedOptionIndex(index) {
        const matchedOptionIndex = this.hasSelectedOption() && index > 0 ? findLastIndex(this.visibleOptions().slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex : -1;
      }
      findFirstFocusedOptionIndex() {
        const selectedIndex = this.findFirstSelectedOptionIndex();
        return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;
      }
      findFirstOptionIndex() {
        return this.visibleOptions().findIndex((option) => this.isValidOption(option));
      }
      findFirstSelectedOptionIndex() {
        return this.hasSelectedOption() ? this.visibleOptions().findIndex((option) => this.isValidSelectedOption(option)) : -1;
      }
      findNextSelectedOptionIndex(index) {
        const matchedOptionIndex = this.hasSelectedOption() && index < this.visibleOptions().length - 1 ? this.visibleOptions().slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;
      }
      equalityKey() {
        return this.optionValue ? null : this.dataKey;
      }
      hasSelectedOption() {
        return isNotEmpty(this.modelValue());
      }
      isValidSelectedOption(option) {
        return this.isValidOption(option) && this.isSelected(option);
      }
      isOptionGroup(option) {
        return (this.group || this.optionGroupLabel) && option.optionGroup && option.group;
      }
      isValidOption(option) {
        return option && !(this.isOptionDisabled(option) || this.isOptionGroup(option));
      }
      isOptionDisabled(option) {
        if (this.maxSelectionLimitReached() && !this.isSelected(option)) {
          return true;
        }
        return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : option && option.disabled !== void 0 ? option.disabled : false;
      }
      isSelected(option) {
        const optionValue = this.getOptionValue(option);
        return (this.modelValue() || []).some((value) => equals(value, optionValue, this.equalityKey()));
      }
      isOptionMatched(option) {
        return this.isValidOption(option) && this.getOptionLabel(option).toString().toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));
      }
      isEmpty() {
        return !this._options() || this.visibleOptions() && this.visibleOptions().length === 0;
      }
      getOptionIndex(index, scrollerOptions) {
        return this.virtualScrollerDisabled ? index : scrollerOptions && scrollerOptions.getItemOptions(index)["index"];
      }
      getAriaPosInset(index) {
        return (this.optionGroupLabel ? index - this.visibleOptions().slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;
      }
      get ariaSetSize() {
        return this.visibleOptions().filter((option) => !this.isOptionGroup(option)).length;
      }
      getLabelByValue(value) {
        const options = this.group ? this.flatOptions(this._options()) : this._options() || [];
        const matchedOption = options.find((option) => !this.isOptionGroup(option) && equals(this.getOptionValue(option), value, this.equalityKey()));
        return matchedOption ? this.getOptionLabel(matchedOption) : null;
      }
      getSelectedItemsLabel() {
        let pattern = /{(.*?)}/;
        let message = this.selectedItemsLabel ? this.selectedItemsLabel : this.config.getTranslation(TranslationKeys.SELECTION_MESSAGE);
        if (pattern.test(message)) {
          return message.replace(message.match(pattern)[0], this.modelValue().length + "");
        }
        return message;
      }
      getOptionLabel(option) {
        return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option && option.label != void 0 ? option.label : option;
      }
      getOptionValue(option) {
        return this.optionValue ? resolveFieldData(option, this.optionValue) : !this.optionLabel && option && option.value !== void 0 ? option.value : option;
      }
      getOptionGroupLabel(optionGroup) {
        return this.optionGroupLabel ? resolveFieldData(optionGroup, this.optionGroupLabel) : optionGroup && optionGroup.label != void 0 ? optionGroup.label : optionGroup;
      }
      getOptionGroupChildren(optionGroup) {
        return this.optionGroupChildren ? resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;
      }
      onKeyDown(event2) {
        if (this.disabled) {
          event2.preventDefault();
          return;
        }
        const metaKey = event2.metaKey || event2.ctrlKey;
        switch (event2.code) {
          case "ArrowDown":
            this.onArrowDownKey(event2);
            break;
          case "ArrowUp":
            this.onArrowUpKey(event2);
            break;
          case "Home":
            this.onHomeKey(event2);
            break;
          case "End":
            this.onEndKey(event2);
            break;
          case "PageDown":
            this.onPageDownKey(event2);
            break;
          case "PageUp":
            this.onPageUpKey(event2);
            break;
          case "Enter":
          case "Space":
            this.onEnterKey(event2);
            break;
          case "Escape":
            this.onEscapeKey(event2);
            break;
          case "Tab":
            this.onTabKey(event2);
            break;
          case "ShiftLeft":
          case "ShiftRight":
            this.onShiftKey();
            break;
          default:
            if (event2.code === "KeyA" && metaKey) {
              const value = this.visibleOptions().filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));
              this.updateModel(value, event2);
              event2.preventDefault();
              break;
            }
            if (!metaKey && isPrintableCharacter(event2.key)) {
              !this.overlayVisible && this.show();
              this.searchOptions(event2, event2.key);
              event2.preventDefault();
            }
            break;
        }
      }
      onFilterKeyDown(event2) {
        switch (event2.code) {
          case "ArrowDown":
            this.onArrowDownKey(event2);
            break;
          case "ArrowUp":
            this.onArrowUpKey(event2, true);
            break;
          case "ArrowLeft":
          case "ArrowRight":
            this.onArrowLeftKey(event2, true);
            break;
          case "Home":
            this.onHomeKey(event2, true);
            break;
          case "End":
            this.onEndKey(event2, true);
            break;
          case "Enter":
          case "NumpadEnter":
            this.onEnterKey(event2);
            break;
          case "Escape":
            this.onEscapeKey(event2);
            break;
          case "Tab":
            this.onTabKey(event2, true);
            break;
          default:
            break;
        }
      }
      onArrowLeftKey(event2, pressedInInputText = false) {
        pressedInInputText && this.focusedOptionIndex.set(-1);
      }
      onArrowDownKey(event2) {
        const optionIndex = this.focusedOptionIndex() !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex()) : this.findFirstFocusedOptionIndex();
        if (event2.shiftKey) {
          this.onOptionSelectRange(event2, this.startRangeIndex(), optionIndex);
        }
        this.changeFocusedOptionIndex(event2, optionIndex);
        !this.overlayVisible && this.show();
        event2.preventDefault();
        event2.stopPropagation();
      }
      onArrowUpKey(event2, pressedInInputText = false) {
        if (event2.altKey && !pressedInInputText) {
          if (this.focusedOptionIndex() !== -1) {
            this.onOptionSelect(event2, this.visibleOptions()[this.focusedOptionIndex()]);
          }
          this.overlayVisible && this.hide();
          event2.preventDefault();
        } else {
          const optionIndex = this.focusedOptionIndex() !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex()) : this.findLastFocusedOptionIndex();
          if (event2.shiftKey) {
            this.onOptionSelectRange(event2, optionIndex, this.startRangeIndex());
          }
          this.changeFocusedOptionIndex(event2, optionIndex);
          !this.overlayVisible && this.show();
          event2.preventDefault();
        }
        event2.stopPropagation();
      }
      onHomeKey(event2, pressedInInputText = false) {
        const {
          currentTarget
        } = event2;
        if (pressedInInputText) {
          const len = currentTarget.value.length;
          currentTarget.setSelectionRange(0, event2.shiftKey ? len : 0);
          this.focusedOptionIndex.set(-1);
        } else {
          let metaKey = event2.metaKey || event2.ctrlKey;
          let optionIndex = this.findFirstOptionIndex();
          if (event2.shiftKey && metaKey) {
            this.onOptionSelectRange(event2, optionIndex, this.startRangeIndex());
          }
          this.changeFocusedOptionIndex(event2, optionIndex);
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
      }
      onEndKey(event2, pressedInInputText = false) {
        const {
          currentTarget
        } = event2;
        if (pressedInInputText) {
          const len = currentTarget.value.length;
          currentTarget.setSelectionRange(event2.shiftKey ? 0 : len, len);
          this.focusedOptionIndex.set(-1);
        } else {
          let metaKey = event2.metaKey || event2.ctrlKey;
          let optionIndex = this.findLastFocusedOptionIndex();
          if (event2.shiftKey && metaKey) {
            this.onOptionSelectRange(event2, this.startRangeIndex(), optionIndex);
          }
          this.changeFocusedOptionIndex(event2, optionIndex);
          !this.overlayVisible && this.show();
        }
        event2.preventDefault();
      }
      onPageDownKey(event2) {
        this.scrollInView(this.visibleOptions().length - 1);
        event2.preventDefault();
      }
      onPageUpKey(event2) {
        this.scrollInView(0);
        event2.preventDefault();
      }
      onEnterKey(event2) {
        if (!this.overlayVisible) {
          this.onArrowDownKey(event2);
        } else {
          if (this.focusedOptionIndex() !== -1) {
            if (event2.shiftKey) {
              this.onOptionSelectRange(event2, this.focusedOptionIndex());
            } else {
              this.onOptionSelect({
                originalEvent: event2,
                option: this.visibleOptions()[this.focusedOptionIndex()]
              });
            }
          }
        }
        event2.preventDefault();
      }
      onEscapeKey(event2) {
        this.overlayVisible && this.hide(true);
        event2.stopPropagation();
        event2.preventDefault();
      }
      onDeleteKey(event2) {
        if (this.showClear) {
          this.clear(event2);
          event2.preventDefault();
        }
      }
      onTabKey(event2, pressedInInputText = false) {
        if (!pressedInInputText) {
          if (this.overlayVisible && this.hasFocusableElements()) {
            focus(event2.shiftKey ? this.lastHiddenFocusableElementOnOverlay.nativeElement : this.firstHiddenFocusableElementOnOverlay.nativeElement);
            event2.preventDefault();
          } else {
            if (this.focusedOptionIndex() !== -1) {
              this.onOptionSelect({
                originalEvent: event2,
                option: this.visibleOptions()[this.focusedOptionIndex()]
              });
            }
            this.overlayVisible && this.hide(this.filter);
          }
        }
      }
      onShiftKey() {
        this.startRangeIndex.set(this.focusedOptionIndex());
      }
      onContainerClick(event2) {
        if (this.disabled || this.loading || this.readonly || event2.target.isSameNode(this.focusInputViewChild?.nativeElement)) {
          return;
        }
        if (!this.overlayViewChild || !this.overlayViewChild.el.nativeElement.contains(event2.target)) {
          if (this.clickInProgress) {
            return;
          }
          this.clickInProgress = true;
          setTimeout(() => {
            this.clickInProgress = false;
          }, 150);
          this.overlayVisible ? this.hide(true) : this.show(true);
        }
        this.focusInputViewChild?.nativeElement.focus({
          preventScroll: true
        });
        this.onClick.emit(event2);
        this.cd.detectChanges();
      }
      onFirstHiddenFocus(event2) {
        const focusableEl = event2.relatedTarget === this.focusInputViewChild?.nativeElement ? getFirstFocusableElement(this.overlayViewChild?.overlayViewChild?.nativeElement, ':not([data-p-hidden-focusable="true"])') : this.focusInputViewChild?.nativeElement;
        focus(focusableEl);
      }
      onInputFocus(event2) {
        this.focused = true;
        const focusedOptionIndex = this.focusedOptionIndex() !== -1 ? this.focusedOptionIndex() : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;
        this.focusedOptionIndex.set(focusedOptionIndex);
        this.overlayVisible && this.scrollInView(this.focusedOptionIndex());
        this.onFocus.emit({
          originalEvent: event2
        });
      }
      onInputBlur(event2) {
        this.focused = false;
        this.onBlur.emit({
          originalEvent: event2
        });
        if (!this.preventModelTouched) {
          this.onModelTouched();
        }
        this.preventModelTouched = false;
      }
      onFilterInputChange(event2) {
        let value = event2.target.value;
        this._filterValue.set(value);
        this.focusedOptionIndex.set(-1);
        this.onFilter.emit({
          originalEvent: event2,
          filter: this._filterValue()
        });
        !this.virtualScrollerDisabled && this.scroller.scrollToIndex(0);
        setTimeout(() => {
          this.overlayViewChild.alignOverlay();
        });
      }
      onLastHiddenFocus(event2) {
        const focusableEl = event2.relatedTarget === this.focusInputViewChild?.nativeElement ? getLastFocusableElement(this.overlayViewChild?.overlayViewChild?.nativeElement, ':not([data-p-hidden-focusable="true"])') : this.focusInputViewChild?.nativeElement;
        focus(focusableEl);
      }
      onOptionMouseEnter(event2, index) {
        if (this.focusOnHover) {
          this.changeFocusedOptionIndex(event2, index);
        }
      }
      onHeaderCheckboxKeyDown(event2) {
        if (this.disabled) {
          event2.preventDefault();
          return;
        }
        switch (event2.code) {
          case "Space":
            this.onToggleAll(event2);
            break;
          case "Enter":
            this.onToggleAll(event2);
            break;
          default:
            break;
        }
      }
      onFilterBlur(event2) {
        this.focusedOptionIndex.set(-1);
      }
      onHeaderCheckboxFocus() {
        this.headerCheckboxFocus = true;
      }
      onHeaderCheckboxBlur() {
        this.headerCheckboxFocus = false;
      }
      onToggleAll(event2) {
        if (this.disabled || this.readonly) {
          return;
        }
        if (this.selectAll != null) {
          this.onSelectAllChange.emit({
            originalEvent: event2,
            checked: !this.allSelected()
          });
        } else {
          const selectedDisabledOptions = this.getAllVisibleAndNonVisibleOptions().filter((option) => this.isSelected(option) && (this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : option && option.disabled !== void 0 ? option.disabled : false));
          const visibleOptions = this.allSelected() ? this.visibleOptions().filter((option) => !this.isValidOption(option) && this.isSelected(option)) : this.visibleOptions().filter((option) => this.isSelected(option) || this.isValidOption(option));
          const selectedOptionsBeforeSearch = this.filter && !this.allSelected() ? this.getAllVisibleAndNonVisibleOptions().filter((option) => this.isSelected(option) && this.isValidOption(option)) : [];
          const optionValues = [...selectedOptionsBeforeSearch, ...selectedDisabledOptions, ...visibleOptions].map((option) => this.getOptionValue(option));
          const value = [...new Set(optionValues)];
          this.updateModel(value, event2);
          if (!value.length || value.length === this.getAllVisibleAndNonVisibleOptions().length) {
            this.onSelectAllChange.emit({
              originalEvent: event2,
              checked: !!value.length
            });
          }
        }
        if (this.partialSelected()) {
          this.selectedOptions = null;
          this.cd.markForCheck();
        }
        this.onChange.emit({
          originalEvent: event2,
          value: this.value
        });
        DomHandler.focus(this.headerCheckboxViewChild?.inputViewChild?.nativeElement);
        this.headerCheckboxFocus = true;
        event2.originalEvent.preventDefault();
        event2.originalEvent.stopPropagation();
      }
      changeFocusedOptionIndex(event2, index) {
        if (this.focusedOptionIndex() !== index) {
          this.focusedOptionIndex.set(index);
          this.scrollInView();
        }
      }
      get virtualScrollerDisabled() {
        return !this.virtualScroll;
      }
      scrollInView(index = -1) {
        const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;
        if (this.itemsViewChild && this.itemsViewChild.nativeElement) {
          const element = findSingle(this.itemsViewChild.nativeElement, `li[id="${id}"]`);
          if (element) {
            element.scrollIntoView && element.scrollIntoView({
              block: "nearest",
              inline: "nearest"
            });
          } else if (!this.virtualScrollerDisabled) {
            setTimeout(() => {
              this.virtualScroll && this.scroller?.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex());
            }, 0);
          }
        }
      }
      get focusedOptionId() {
        return this.focusedOptionIndex() !== -1 ? `${this.id}_${this.focusedOptionIndex()}` : null;
      }
      writeValue(value) {
        this.value = value;
        this.modelValue.set(this.value);
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      allSelected() {
        return this.selectAll !== null ? this.selectAll : isNotEmpty(this.visibleOptions()) && this.visibleOptions().every((option) => this.isOptionGroup(option) || this.isOptionDisabled(option) || this.isSelected(option));
      }
      partialSelected() {
        return this.selectedOptions && this.selectedOptions.length > 0 && this.selectedOptions.length < this.options.length;
      }
      /**
       * Displays the panel.
       * @group Method
       */
      show(isFocus) {
        this.overlayVisible = true;
        const focusedOptionIndex = this.focusedOptionIndex() !== -1 ? this.focusedOptionIndex() : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();
        this.focusedOptionIndex.set(focusedOptionIndex);
        if (isFocus) {
          focus(this.focusInputViewChild?.nativeElement);
        }
        this.cd.markForCheck();
      }
      /**
       * Hides the panel.
       * @group Method
       */
      hide(isFocus) {
        this.overlayVisible = false;
        this.focusedOptionIndex.set(-1);
        if (this.filter && this.resetFilterOnHide) {
          this.resetFilter();
        }
        if (this.overlayOptions?.mode === "modal") {
          unblockBodyScroll();
        }
        isFocus && focus(this.focusInputViewChild?.nativeElement);
        this.cd.markForCheck();
      }
      onOverlayAnimationStart(event2) {
        if (event2.toState === "visible") {
          this.itemsWrapper = findSingle(this.overlayViewChild?.overlayViewChild?.nativeElement, this.virtualScroll ? ".p-scroller" : ".p-multiselect-list-container");
          this.virtualScroll && this.scroller?.setContentEl(this.itemsViewChild?.nativeElement);
          if (this.options && this.options.length) {
            if (this.virtualScroll) {
              const selectedIndex = this.modelValue() ? this.focusedOptionIndex() : -1;
              if (selectedIndex !== -1) {
                this.scroller?.scrollToIndex(selectedIndex);
              }
            } else {
              let selectedListItem = findSingle(this.itemsWrapper, '[data-p-highlight="true"]');
              if (selectedListItem) {
                selectedListItem.scrollIntoView({
                  block: "nearest",
                  inline: "nearest"
                });
              }
            }
          }
          if (this.filterInputChild && this.filterInputChild.nativeElement) {
            this.preventModelTouched = true;
            if (this.autofocusFilter) {
              this.filterInputChild.nativeElement.focus();
            }
          }
          this.onPanelShow.emit(event2);
        }
        if (event2.toState === "void") {
          this.itemsWrapper = null;
          this.onModelTouched();
          this.onPanelHide.emit(event2);
        }
      }
      resetFilter() {
        if (this.filterInputChild && this.filterInputChild.nativeElement) {
          this.filterInputChild.nativeElement.value = "";
        }
        this._filterValue.set(null);
        this._filteredOptions = null;
      }
      close(event2) {
        this.hide();
        event2.preventDefault();
        event2.stopPropagation();
      }
      clear(event2) {
        this.value = null;
        this.updateModel(null, event2);
        this.selectedOptions = null;
        this.onClear.emit();
        this._disableTooltip = true;
        event2.stopPropagation();
      }
      labelContainerMouseLeave() {
        if (this._disableTooltip) this._disableTooltip = false;
      }
      removeOption(optionValue, event2) {
        let value = this.modelValue().filter((val) => !equals(val, optionValue, this.equalityKey()));
        this.updateModel(value, event2);
        this.onChange.emit({
          originalEvent: event2,
          value,
          itemValue: optionValue
        });
        this.onRemove.emit({
          newValue: value,
          removed: optionValue
        });
        event2 && event2.stopPropagation();
      }
      findNextItem(item) {
        let nextItem = item.nextElementSibling;
        if (nextItem) return hasClass(nextItem.children[0], "p-disabled") || isHidden(nextItem.children[0]) || hasClass(nextItem, "p-multiselect-item-group") ? this.findNextItem(nextItem) : nextItem.children[0];
        else return null;
      }
      findPrevItem(item) {
        let prevItem = item.previousElementSibling;
        if (prevItem) return hasClass(prevItem.children[0], "p-disabled") || isHidden(prevItem.children[0]) || hasClass(prevItem, "p-multiselect-item-group") ? this.findPrevItem(prevItem) : prevItem.children[0];
        else return null;
      }
      findNextOptionIndex(index) {
        const matchedOptionIndex = index < this.visibleOptions().length - 1 ? this.visibleOptions().slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;
      }
      findPrevOptionIndex(index) {
        const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions().slice(0, index), (option) => this.isValidOption(option)) : -1;
        return matchedOptionIndex > -1 ? matchedOptionIndex : index;
      }
      findLastSelectedOptionIndex() {
        return this.hasSelectedOption() ? findLastIndex(this.visibleOptions(), (option) => this.isValidSelectedOption(option)) : -1;
      }
      findLastFocusedOptionIndex() {
        const selectedIndex = this.findLastSelectedOptionIndex();
        return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;
      }
      findLastOptionIndex() {
        return findLastIndex(this.visibleOptions(), (option) => this.isValidOption(option));
      }
      searchOptions(event2, char) {
        this.searchValue = (this.searchValue || "") + char;
        let optionIndex = -1;
        let matched = false;
        if (this.focusedOptionIndex() !== -1) {
          optionIndex = this.visibleOptions().slice(this.focusedOptionIndex()).findIndex((option) => this.isOptionMatched(option));
          optionIndex = optionIndex === -1 ? this.visibleOptions().slice(0, this.focusedOptionIndex()).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex();
        } else {
          optionIndex = this.visibleOptions().findIndex((option) => this.isOptionMatched(option));
        }
        if (optionIndex !== -1) {
          matched = true;
        }
        if (optionIndex === -1 && this.focusedOptionIndex() === -1) {
          optionIndex = this.findFirstFocusedOptionIndex();
        }
        if (optionIndex !== -1) {
          this.changeFocusedOptionIndex(event2, optionIndex);
        }
        if (this.searchTimeout) {
          clearTimeout(this.searchTimeout);
        }
        this.searchTimeout = setTimeout(() => {
          this.searchValue = "";
          this.searchTimeout = null;
        }, 500);
        return matched;
      }
      activateFilter() {
        if (this.hasFilter() && this._options) {
          if (this.group) {
            let filteredGroups = [];
            for (let optgroup of this.options) {
              let filteredSubOptions = this.filterService.filter(this.getOptionGroupChildren(optgroup), this.searchFields(), this.filterValue, this.filterMatchMode, this.filterLocale);
              if (filteredSubOptions && filteredSubOptions.length) {
                filteredGroups.push(__spreadValues(__spreadValues({}, optgroup), {
                  [this.optionGroupChildren]: filteredSubOptions
                }));
              }
            }
            this._filteredOptions = filteredGroups;
          } else {
            this._filteredOptions = this.filterService.filter(this.options, this.searchFields(), this.filterValue, this.filterMatchMode, this.filterLocale);
          }
        } else {
          this._filteredOptions = null;
        }
      }
      hasFocusableElements() {
        return getFocusableElements(this.overlayViewChild.overlayViewChild.nativeElement, ':not([data-p-hidden-focusable="true"])').length > 0;
      }
      hasFilter() {
        return this._filterValue() && this._filterValue().trim().length > 0;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _MultiSelect,
        deps: [{
          token: NgZone
        }, {
          token: FilterService
        }, {
          token: OverlayService
        }],
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "17.0.0",
        version: "19.2.10",
        type: _MultiSelect,
        isStandalone: true,
        selector: "p-multiSelect, p-multiselect, p-multi-select",
        inputs: {
          id: "id",
          ariaLabel: "ariaLabel",
          style: "style",
          styleClass: "styleClass",
          panelStyle: "panelStyle",
          panelStyleClass: "panelStyleClass",
          inputId: "inputId",
          disabled: ["disabled", "disabled", booleanAttribute],
          fluid: ["fluid", "fluid", booleanAttribute],
          readonly: ["readonly", "readonly", booleanAttribute],
          group: ["group", "group", booleanAttribute],
          filter: ["filter", "filter", booleanAttribute],
          filterPlaceHolder: "filterPlaceHolder",
          filterLocale: "filterLocale",
          overlayVisible: ["overlayVisible", "overlayVisible", booleanAttribute],
          tabindex: ["tabindex", "tabindex", numberAttribute],
          variant: "variant",
          appendTo: "appendTo",
          dataKey: "dataKey",
          name: "name",
          ariaLabelledBy: "ariaLabelledBy",
          displaySelectedLabel: "displaySelectedLabel",
          maxSelectedLabels: "maxSelectedLabels",
          selectionLimit: ["selectionLimit", "selectionLimit", numberAttribute],
          selectedItemsLabel: "selectedItemsLabel",
          showToggleAll: ["showToggleAll", "showToggleAll", booleanAttribute],
          emptyFilterMessage: "emptyFilterMessage",
          emptyMessage: "emptyMessage",
          resetFilterOnHide: ["resetFilterOnHide", "resetFilterOnHide", booleanAttribute],
          dropdownIcon: "dropdownIcon",
          chipIcon: "chipIcon",
          optionLabel: "optionLabel",
          optionValue: "optionValue",
          optionDisabled: "optionDisabled",
          optionGroupLabel: "optionGroupLabel",
          optionGroupChildren: "optionGroupChildren",
          showHeader: ["showHeader", "showHeader", booleanAttribute],
          filterBy: "filterBy",
          scrollHeight: "scrollHeight",
          lazy: ["lazy", "lazy", booleanAttribute],
          virtualScroll: ["virtualScroll", "virtualScroll", booleanAttribute],
          loading: ["loading", "loading", booleanAttribute],
          virtualScrollItemSize: ["virtualScrollItemSize", "virtualScrollItemSize", numberAttribute],
          loadingIcon: "loadingIcon",
          virtualScrollOptions: "virtualScrollOptions",
          overlayOptions: "overlayOptions",
          ariaFilterLabel: "ariaFilterLabel",
          filterMatchMode: "filterMatchMode",
          tooltip: "tooltip",
          tooltipPosition: "tooltipPosition",
          tooltipPositionStyle: "tooltipPositionStyle",
          tooltipStyleClass: "tooltipStyleClass",
          autofocusFilter: ["autofocusFilter", "autofocusFilter", booleanAttribute],
          display: "display",
          autocomplete: "autocomplete",
          size: "size",
          showClear: ["showClear", "showClear", booleanAttribute],
          autofocus: ["autofocus", "autofocus", booleanAttribute],
          autoZIndex: "autoZIndex",
          baseZIndex: "baseZIndex",
          showTransitionOptions: "showTransitionOptions",
          hideTransitionOptions: "hideTransitionOptions",
          defaultLabel: "defaultLabel",
          placeholder: "placeholder",
          options: "options",
          filterValue: "filterValue",
          itemSize: "itemSize",
          selectAll: "selectAll",
          focusOnHover: ["focusOnHover", "focusOnHover", booleanAttribute],
          filterFields: "filterFields",
          selectOnFocus: ["selectOnFocus", "selectOnFocus", booleanAttribute],
          autoOptionFocus: ["autoOptionFocus", "autoOptionFocus", booleanAttribute],
          highlightOnSelect: ["highlightOnSelect", "highlightOnSelect", booleanAttribute]
        },
        outputs: {
          onChange: "onChange",
          onFilter: "onFilter",
          onFocus: "onFocus",
          onBlur: "onBlur",
          onClick: "onClick",
          onClear: "onClear",
          onPanelShow: "onPanelShow",
          onPanelHide: "onPanelHide",
          onLazyLoad: "onLazyLoad",
          onRemove: "onRemove",
          onSelectAllChange: "onSelectAllChange"
        },
        host: {
          listeners: {
            "click": "onContainerClick($event)"
          },
          properties: {
            "attr.id": "id",
            "style": "style",
            "class.p-variant-filled": 'variant === "filled" || config.inputVariant() === "filled" || config.inputStyle() === "filled" ',
            "class": "this.hostClasses"
          }
        },
        providers: [MULTISELECT_VALUE_ACCESSOR, MultiSelectStyle],
        queries: [{
          propertyName: "footerFacet",
          first: true,
          predicate: Footer,
          descendants: true
        }, {
          propertyName: "headerFacet",
          first: true,
          predicate: Header,
          descendants: true
        }, {
          propertyName: "itemTemplate",
          first: true,
          predicate: ["item"]
        }, {
          propertyName: "groupTemplate",
          first: true,
          predicate: ["group"]
        }, {
          propertyName: "loaderTemplate",
          first: true,
          predicate: ["loader"]
        }, {
          propertyName: "headerTemplate",
          first: true,
          predicate: ["header"]
        }, {
          propertyName: "filterTemplate",
          first: true,
          predicate: ["filter"]
        }, {
          propertyName: "footerTemplate",
          first: true,
          predicate: ["footer"]
        }, {
          propertyName: "emptyFilterTemplate",
          first: true,
          predicate: ["emptyfilter"]
        }, {
          propertyName: "emptyTemplate",
          first: true,
          predicate: ["empty"]
        }, {
          propertyName: "selectedItemsTemplate",
          first: true,
          predicate: ["selecteditems"]
        }, {
          propertyName: "checkIconTemplate",
          first: true,
          predicate: ["checkicon"]
        }, {
          propertyName: "loadingIconTemplate",
          first: true,
          predicate: ["loadingicon"]
        }, {
          propertyName: "filterIconTemplate",
          first: true,
          predicate: ["filtericon"]
        }, {
          propertyName: "removeTokenIconTemplate",
          first: true,
          predicate: ["removetokenicon"]
        }, {
          propertyName: "chipIconTemplate",
          first: true,
          predicate: ["chipicon"]
        }, {
          propertyName: "clearIconTemplate",
          first: true,
          predicate: ["clearicon"]
        }, {
          propertyName: "dropdownIconTemplate",
          first: true,
          predicate: ["dropdownicon"]
        }, {
          propertyName: "itemCheckboxIconTemplate",
          first: true,
          predicate: ["itemcheckboxicon"]
        }, {
          propertyName: "headerCheckboxIconTemplate",
          first: true,
          predicate: ["headercheckboxicon"]
        }, {
          propertyName: "templates",
          predicate: PrimeTemplate
        }],
        viewQueries: [{
          propertyName: "overlayViewChild",
          first: true,
          predicate: ["overlay"],
          descendants: true
        }, {
          propertyName: "filterInputChild",
          first: true,
          predicate: ["filterInput"],
          descendants: true
        }, {
          propertyName: "focusInputViewChild",
          first: true,
          predicate: ["focusInput"],
          descendants: true
        }, {
          propertyName: "itemsViewChild",
          first: true,
          predicate: ["items"],
          descendants: true
        }, {
          propertyName: "scroller",
          first: true,
          predicate: ["scroller"],
          descendants: true
        }, {
          propertyName: "lastHiddenFocusableElementOnOverlay",
          first: true,
          predicate: ["lastHiddenFocusableEl"],
          descendants: true
        }, {
          propertyName: "firstHiddenFocusableElementOnOverlay",
          first: true,
          predicate: ["firstHiddenFocusableEl"],
          descendants: true
        }, {
          propertyName: "headerCheckboxViewChild",
          first: true,
          predicate: ["headerCheckbox"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <div class="p-hidden-accessible" [attr.data-p-hidden-accessible]="true">
            <input
                #focusInput
                [pTooltip]="tooltip"
                [tooltipPosition]="tooltipPosition"
                [positionStyle]="tooltipPositionStyle"
                [tooltipStyleClass]="tooltipStyleClass"
                [attr.aria-disabled]="disabled"
                [attr.id]="inputId"
                role="combobox"
                [attr.aria-label]="ariaLabel"
                [attr.aria-labelledby]="ariaLabelledBy"
                [attr.aria-haspopup]="'listbox'"
                [attr.aria-expanded]="overlayVisible ?? false"
                [attr.aria-controls]="overlayVisible ? id + '_list' : null"
                [attr.tabindex]="!disabled ? tabindex : -1"
                [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
                (focus)="onInputFocus($event)"
                (blur)="onInputBlur($event)"
                (keydown)="onKeyDown($event)"
                [pAutoFocus]="autofocus"
                [attr.value]="label() || 'empty'"
            />
        </div>
        <div
            class="p-multiselect-label-container"
            [pTooltip]="tooltip"
            (mouseleave)="labelContainerMouseLeave()"
            [tooltipDisabled]="_disableTooltip"
            [tooltipPosition]="tooltipPosition"
            [positionStyle]="tooltipPositionStyle"
            [tooltipStyleClass]="tooltipStyleClass"
        >
            <div [ngClass]="labelClass">
                <ng-container *ngIf="!selectedItemsTemplate && !_selectedItemsTemplate">
                    <ng-container *ngIf="display === 'comma'">{{ label() || 'empty' }}</ng-container>
                    <ng-container *ngIf="display === 'chip'">
                        @if (chipSelectedItems() && chipSelectedItems().length === maxSelectedLabels) {
                            {{ getSelectedItemsLabel() }}
                        } @else {
                            <div #token *ngFor="let item of chipSelectedItems(); let i = index" class="p-multiselect-chip-item">
                                <p-chip styleClass="p-multiselect-chip" [label]="getLabelByValue(item)" [removable]="!disabled && !readonly" (onRemove)="removeOption(item, $event)" [removeIcon]="chipIcon">
                                    <ng-container *ngIf="chipIconTemplate || _chipIconTemplate || removeTokenIconTemplate || _removeTokenIconTemplate">
                                        <ng-template #removeicon>
                                            <ng-container *ngIf="!disabled && !readonly">
                                                <span
                                                    class="p-multiselect-chip-icon"
                                                    *ngIf="chipIconTemplate || _chipIconTemplate || removeTokenIconTemplate || _removeTokenIconTemplate"
                                                    (click)="removeOption(item, $event)"
                                                    [attr.data-pc-section]="'clearicon'"
                                                    [attr.aria-hidden]="true"
                                                >
                                                    <ng-container *ngTemplateOutlet="chipIconTemplate || _chipIconTemplate || removeTokenIconTemplate || _removeTokenIconTemplate; context: { class: 'p-multiselect-chip-icon' }"></ng-container>
                                                </span>
                                            </ng-container>
                                        </ng-template>
                                    </ng-container>
                                </p-chip>
                            </div>
                        }
                        <ng-container *ngIf="!modelValue() || modelValue().length === 0">{{ placeholder() || defaultLabel || 'empty' }}</ng-container>
                    </ng-container>
                </ng-container>
                <ng-container *ngIf="selectedItemsTemplate || _selectedItemsTemplate">
                    <ng-container *ngTemplateOutlet="selectedItemsTemplate || _selectedItemsTemplate; context: { $implicit: selectedOptions, removeChip: removeOption.bind(this) }"></ng-container>
                    <ng-container *ngIf="!modelValue() || modelValue().length === 0">{{ placeholder() || defaultLabel || 'empty' }}</ng-container>
                </ng-container>
            </div>
        </div>
        <ng-container *ngIf="isVisibleClearIcon">
            <TimesIcon *ngIf="!clearIconTemplate && !_clearIconTemplate" class="p-multiselect-clear-icon" (click)="clear($event)" [attr.data-pc-section]="'clearicon'" [attr.aria-hidden]="true" />
            <span *ngIf="clearIconTemplate || _clearIconTemplate" class="p-multiselect-clear-icon" (click)="clear($event)" [attr.data-pc-section]="'clearicon'" [attr.aria-hidden]="true">
                <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate"></ng-template>
            </span>
        </ng-container>
        <div class="p-multiselect-dropdown">
            <ng-container *ngIf="loading; else elseBlock">
                <ng-container *ngIf="loadingIconTemplate || _loadingIconTemplate">
                    <ng-container *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate"></ng-container>
                </ng-container>
                <ng-container *ngIf="!loadingIconTemplate && !_loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="'p-multiselect-loading-icon pi-spin ' + loadingIcon" aria-hidden="true"></span>
                    <span *ngIf="!loadingIcon" [class]="'p-multiselect-loading-icon pi pi-spinner pi-spin'" aria-hidden="true"></span>
                </ng-container>
            </ng-container>
            <ng-template #elseBlock>
                <ng-container *ngIf="!dropdownIconTemplate && !_dropdownIconTemplate">
                    <span *ngIf="dropdownIcon" class="p-multiselect-dropdown-icon" [ngClass]="dropdownIcon" [attr.data-pc-section]="'triggericon'" [attr.aria-hidden]="true"></span>
                    <ChevronDownIcon *ngIf="!dropdownIcon" [styleClass]="'p-multiselect-dropdown-icon'" [attr.data-pc-section]="'triggericon'" [attr.aria-hidden]="true" />
                </ng-container>
                <span *ngIf="dropdownIconTemplate || _dropdownIconTemplate" class="p-multiselect-dropdown-icon" [attr.data-pc-section]="'triggericon'" [attr.aria-hidden]="true">
                    <ng-template *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate"></ng-template>
                </span>
            </ng-template>
        </div>
        <p-overlay
            #overlay
            [(visible)]="overlayVisible"
            [options]="overlayOptions"
            [target]="'@parent'"
            [appendTo]="appendTo"
            [autoZIndex]="autoZIndex"
            [baseZIndex]="baseZIndex"
            [showTransitionOptions]="showTransitionOptions"
            [hideTransitionOptions]="hideTransitionOptions"
            (onAnimationStart)="onOverlayAnimationStart($event)"
            (onHide)="hide()"
        >
            <ng-template #content>
                <div [attr.id]="id + '_list'" [ngClass]="'p-multiselect-overlay p-component'" [ngStyle]="panelStyle" [class]="panelStyleClass">
                    <span
                        #firstHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onFirstHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    >
                    </span>
                    <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate"></ng-container>
                    <div class="p-multiselect-header" *ngIf="showHeader">
                        <ng-content select="p-header"></ng-content>
                        <ng-container *ngIf="filterTemplate || _filterTemplate; else builtInFilterElement">
                            <ng-container *ngTemplateOutlet="filterTemplate || _filterTemplate; context: { options: filterOptions }"></ng-container>
                        </ng-container>
                        <ng-template #builtInFilterElement>
                            <p-checkbox [ngModel]="allSelected()" [ariaLabel]="toggleAllAriaLabel" [binary]="true" (onChange)="onToggleAll($event)" *ngIf="showToggleAll && !selectionLimit" [variant]="variant" [disabled]="disabled" #headerCheckbox>
                                <ng-template #checkboxicon let-klass="class">
                                    <CheckIcon *ngIf="!headerCheckboxIconTemplate && !_headerCheckboxIconTemplate && allSelected()" [styleClass]="klass" [attr.data-pc-section]="'icon'" />
                                    <ng-template
                                        *ngTemplateOutlet="
                                            headerCheckboxIconTemplate || _headerCheckboxIconTemplate;
                                            context: {
                                                checked: allSelected(),
                                                partialSelected: partialSelected(),
                                                class: klass
                                            }
                                        "
                                    ></ng-template>
                                </ng-template>
                            </p-checkbox>

                            <div class="p-multiselect-filter-container" *ngIf="filter">
                                <p-iconfield>
                                    <input
                                        #filterInput
                                        pInputText
                                        [variant]="variant"
                                        type="text"
                                        [attr.autocomplete]="autocomplete"
                                        role="searchbox"
                                        [attr.aria-owns]="id + '_list'"
                                        [attr.aria-activedescendant]="focusedOptionId"
                                        [value]="_filterValue() || ''"
                                        (input)="onFilterInputChange($event)"
                                        (keydown)="onFilterKeyDown($event)"
                                        (click)="onInputClick($event)"
                                        (blur)="onFilterBlur($event)"
                                        class="p-multiselect-filter"
                                        [disabled]="disabled"
                                        [attr.placeholder]="filterPlaceHolder"
                                        [attr.aria-label]="ariaFilterLabel"
                                    />
                                    <p-inputicon>
                                        <SearchIcon [styleClass]="'p-multiselect-filter-icon'" *ngIf="!filterIconTemplate && !_filterIconTemplate" />
                                        <span *ngIf="filterIconTemplate || _filterIconTemplate" class="p-multiselect-filter-icon">
                                            <ng-template *ngTemplateOutlet="filterIconTemplate || _filterIconTemplate"></ng-template>
                                        </span>
                                    </p-inputicon>
                                </p-iconfield>
                            </div>
                        </ng-template>
                    </div>
                    <div class="p-multiselect-list-container" [style.max-height]="virtualScroll ? 'auto' : scrollHeight || 'auto'">
                        <p-scroller
                            *ngIf="virtualScroll"
                            #scroller
                            [items]="visibleOptions()"
                            [style]="{ height: scrollHeight }"
                            [itemSize]="virtualScrollItemSize || _itemSize"
                            [autoSize]="true"
                            [tabindex]="-1"
                            [lazy]="lazy"
                            (onLazyLoad)="onLazyLoad.emit($event)"
                            [options]="virtualScrollOptions"
                        >
                            <ng-template #content let-items let-scrollerOptions="options">
                                <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: items, options: scrollerOptions }"></ng-container>
                            </ng-template>
                            <ng-container *ngIf="loaderTemplate || _loaderTemplate">
                                <ng-template #loader let-scrollerOptions="options">
                                    <ng-container *ngTemplateOutlet="loaderTemplate || _loaderTemplate; context: { options: scrollerOptions }"></ng-container>
                                </ng-template>
                            </ng-container>
                        </p-scroller>
                        <ng-container *ngIf="!virtualScroll">
                            <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: visibleOptions(), options: {} }"></ng-container>
                        </ng-container>

                        <ng-template #buildInItems let-items let-scrollerOptions="options">
                            <ul #items class="p-multiselect-list" [ngClass]="scrollerOptions.contentStyleClass" [style]="scrollerOptions.contentStyle" role="listbox" aria-multiselectable="true" [attr.aria-label]="listLabel">
                                <ng-template ngFor let-option [ngForOf]="items" let-i="index">
                                    <ng-container *ngIf="isOptionGroup(option)">
                                        <li [attr.id]="id + '_' + getOptionIndex(i, scrollerOptions)" class="p-multiselect-option-group" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                            <span *ngIf="!groupTemplate">{{ getOptionGroupLabel(option.optionGroup) }}</span>
                                            <ng-container *ngTemplateOutlet="groupTemplate; context: { $implicit: option.optionGroup }"></ng-container>
                                        </li>
                                    </ng-container>
                                    <ng-container *ngIf="!isOptionGroup(option)">
                                        <p-multiselect-item
                                            [id]="id + '_' + getOptionIndex(i, scrollerOptions)"
                                            [option]="option"
                                            [selected]="isSelected(option)"
                                            [label]="getOptionLabel(option)"
                                            [disabled]="isOptionDisabled(option)"
                                            [template]="itemTemplate || _itemTemplate"
                                            [checkIconTemplate]="checkIconTemplate || _checkIconTemplate"
                                            [itemCheckboxIconTemplate]="itemCheckboxIconTemplate || _itemCheckboxIconTemplate"
                                            [itemSize]="scrollerOptions.itemSize"
                                            [focused]="focusedOptionIndex() === getOptionIndex(i, scrollerOptions)"
                                            [ariaPosInset]="getAriaPosInset(getOptionIndex(i, scrollerOptions))"
                                            [ariaSetSize]="ariaSetSize"
                                            [variant]="variant"
                                            [highlightOnSelect]="highlightOnSelect"
                                            (onClick)="onOptionSelect($event, false, getOptionIndex(i, scrollerOptions))"
                                            (onMouseEnter)="onOptionMouseEnter($event, getOptionIndex(i, scrollerOptions))"
                                        ></p-multiselect-item>
                                    </ng-container>
                                </ng-template>

                                <li *ngIf="hasFilter() && isEmpty()" class="p-multiselect-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyFilterTemplate && !_emptyFilterTemplate && !emptyTemplate && !_emptyTemplate) {
                                        {{ emptyFilterMessageLabel }}
                                    } @else {
                                        <ng-container *ngTemplateOutlet="emptyFilterTemplate || _emptyFilterTemplate || emptyTemplate || _emptyFilterTemplate"></ng-container>
                                    }
                                </li>
                                <li *ngIf="!hasFilter() && isEmpty()" class="p-multiselect-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyTemplate && !_emptyTemplate) {
                                        {{ emptyMessageLabel }}
                                    } @else {
                                        <ng-container *ngTemplateOutlet="emptyTemplate || _emptyTemplate"></ng-container>
                                    }
                                </li>
                            </ul>
                        </ng-template>
                    </div>
                    <div *ngIf="footerFacet || footerTemplate || _footerTemplate">
                        <ng-content select="p-footer"></ng-content>
                        <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate"></ng-container>
                    </div>

                    <span
                        #lastHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onLastHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    ></span>
                </div>
            </ng-template>
        </p-overlay>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgForOf,
          selector: "[ngFor][ngForOf]",
          inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
        }, {
          kind: "directive",
          type: NgIf,
          selector: "[ngIf]",
          inputs: ["ngIf", "ngIfThen", "ngIfElse"]
        }, {
          kind: "directive",
          type: NgTemplateOutlet,
          selector: "[ngTemplateOutlet]",
          inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "component",
          type: MultiSelectItem,
          selector: "p-multiSelectItem, p-multiselect-item",
          inputs: ["id", "option", "selected", "label", "disabled", "itemSize", "focused", "ariaPosInset", "ariaSetSize", "variant", "template", "checkIconTemplate", "itemCheckboxIconTemplate", "highlightOnSelect"],
          outputs: ["onClick", "onMouseEnter"]
        }, {
          kind: "component",
          type: Overlay,
          selector: "p-overlay",
          inputs: ["visible", "mode", "style", "styleClass", "contentStyle", "contentStyleClass", "target", "appendTo", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "listener", "responsive", "options"],
          outputs: ["visibleChange", "onBeforeShow", "onShow", "onBeforeHide", "onHide", "onAnimationStart", "onAnimationDone"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }, {
          kind: "directive",
          type: Tooltip,
          selector: "[pTooltip]",
          inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"]
        }, {
          kind: "component",
          type: Scroller,
          selector: "p-scroller, p-virtualscroller, p-virtual-scroller, p-virtualScroller",
          inputs: ["id", "style", "styleClass", "tabindex", "items", "itemSize", "scrollHeight", "scrollWidth", "orientation", "step", "delay", "resizeDelay", "appendOnly", "inline", "lazy", "disabled", "loaderDisabled", "columns", "showSpacer", "showLoader", "numToleratedItems", "loading", "autoSize", "trackBy", "options"],
          outputs: ["onLazyLoad", "onScroll", "onScrollIndexChange"]
        }, {
          kind: "directive",
          type: AutoFocus,
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "component",
          type: CheckIcon,
          selector: "CheckIcon"
        }, {
          kind: "component",
          type: SearchIcon,
          selector: "SearchIcon"
        }, {
          kind: "component",
          type: TimesIcon,
          selector: "TimesIcon"
        }, {
          kind: "component",
          type: ChevronDownIcon,
          selector: "ChevronDownIcon"
        }, {
          kind: "component",
          type: IconField,
          selector: "p-iconfield, p-iconField, p-icon-field",
          inputs: ["iconPosition", "styleClass"]
        }, {
          kind: "component",
          type: InputIcon,
          selector: "p-inputicon, p-inputIcon",
          inputs: ["styleClass"]
        }, {
          kind: "directive",
          type: InputText,
          selector: "[pInputText]",
          inputs: ["variant", "fluid", "pSize"]
        }, {
          kind: "component",
          type: Chip,
          selector: "p-chip",
          inputs: ["label", "icon", "image", "alt", "style", "styleClass", "removable", "removeIcon", "chipProps"],
          outputs: ["onRemove", "onImageError"]
        }, {
          kind: "component",
          type: Checkbox,
          selector: "p-checkbox, p-checkBox, p-check-box",
          inputs: ["value", "name", "disabled", "binary", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "inputStyle", "styleClass", "inputClass", "indeterminate", "size", "formControl", "checkboxIcon", "readonly", "required", "autofocus", "trueValue", "falseValue", "variant"],
          outputs: ["onChange", "onFocus", "onBlur"]
        }, {
          kind: "ngmodule",
          type: FormsModule
        }, {
          kind: "directive",
          type: NgControlStatus,
          selector: "[formControlName],[ngModel],[formControl]"
        }, {
          kind: "directive",
          type: NgModel,
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          inputs: ["name", "disabled", "ngModel", "ngModelOptions"],
          outputs: ["ngModelChange"],
          exportAs: ["ngModel"]
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: MultiSelect,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-multiSelect, p-multiselect, p-multi-select",
          standalone: true,
          imports: [CommonModule, MultiSelectItem, Overlay, SharedModule, Tooltip, Scroller, AutoFocus, CheckIcon, SearchIcon, TimesIcon, ChevronDownIcon, IconField, InputIcon, InputText, Chip, Checkbox, FormsModule],
          template: `
        <div class="p-hidden-accessible" [attr.data-p-hidden-accessible]="true">
            <input
                #focusInput
                [pTooltip]="tooltip"
                [tooltipPosition]="tooltipPosition"
                [positionStyle]="tooltipPositionStyle"
                [tooltipStyleClass]="tooltipStyleClass"
                [attr.aria-disabled]="disabled"
                [attr.id]="inputId"
                role="combobox"
                [attr.aria-label]="ariaLabel"
                [attr.aria-labelledby]="ariaLabelledBy"
                [attr.aria-haspopup]="'listbox'"
                [attr.aria-expanded]="overlayVisible ?? false"
                [attr.aria-controls]="overlayVisible ? id + '_list' : null"
                [attr.tabindex]="!disabled ? tabindex : -1"
                [attr.aria-activedescendant]="focused ? focusedOptionId : undefined"
                (focus)="onInputFocus($event)"
                (blur)="onInputBlur($event)"
                (keydown)="onKeyDown($event)"
                [pAutoFocus]="autofocus"
                [attr.value]="label() || 'empty'"
            />
        </div>
        <div
            class="p-multiselect-label-container"
            [pTooltip]="tooltip"
            (mouseleave)="labelContainerMouseLeave()"
            [tooltipDisabled]="_disableTooltip"
            [tooltipPosition]="tooltipPosition"
            [positionStyle]="tooltipPositionStyle"
            [tooltipStyleClass]="tooltipStyleClass"
        >
            <div [ngClass]="labelClass">
                <ng-container *ngIf="!selectedItemsTemplate && !_selectedItemsTemplate">
                    <ng-container *ngIf="display === 'comma'">{{ label() || 'empty' }}</ng-container>
                    <ng-container *ngIf="display === 'chip'">
                        @if (chipSelectedItems() && chipSelectedItems().length === maxSelectedLabels) {
                            {{ getSelectedItemsLabel() }}
                        } @else {
                            <div #token *ngFor="let item of chipSelectedItems(); let i = index" class="p-multiselect-chip-item">
                                <p-chip styleClass="p-multiselect-chip" [label]="getLabelByValue(item)" [removable]="!disabled && !readonly" (onRemove)="removeOption(item, $event)" [removeIcon]="chipIcon">
                                    <ng-container *ngIf="chipIconTemplate || _chipIconTemplate || removeTokenIconTemplate || _removeTokenIconTemplate">
                                        <ng-template #removeicon>
                                            <ng-container *ngIf="!disabled && !readonly">
                                                <span
                                                    class="p-multiselect-chip-icon"
                                                    *ngIf="chipIconTemplate || _chipIconTemplate || removeTokenIconTemplate || _removeTokenIconTemplate"
                                                    (click)="removeOption(item, $event)"
                                                    [attr.data-pc-section]="'clearicon'"
                                                    [attr.aria-hidden]="true"
                                                >
                                                    <ng-container *ngTemplateOutlet="chipIconTemplate || _chipIconTemplate || removeTokenIconTemplate || _removeTokenIconTemplate; context: { class: 'p-multiselect-chip-icon' }"></ng-container>
                                                </span>
                                            </ng-container>
                                        </ng-template>
                                    </ng-container>
                                </p-chip>
                            </div>
                        }
                        <ng-container *ngIf="!modelValue() || modelValue().length === 0">{{ placeholder() || defaultLabel || 'empty' }}</ng-container>
                    </ng-container>
                </ng-container>
                <ng-container *ngIf="selectedItemsTemplate || _selectedItemsTemplate">
                    <ng-container *ngTemplateOutlet="selectedItemsTemplate || _selectedItemsTemplate; context: { $implicit: selectedOptions, removeChip: removeOption.bind(this) }"></ng-container>
                    <ng-container *ngIf="!modelValue() || modelValue().length === 0">{{ placeholder() || defaultLabel || 'empty' }}</ng-container>
                </ng-container>
            </div>
        </div>
        <ng-container *ngIf="isVisibleClearIcon">
            <TimesIcon *ngIf="!clearIconTemplate && !_clearIconTemplate" class="p-multiselect-clear-icon" (click)="clear($event)" [attr.data-pc-section]="'clearicon'" [attr.aria-hidden]="true" />
            <span *ngIf="clearIconTemplate || _clearIconTemplate" class="p-multiselect-clear-icon" (click)="clear($event)" [attr.data-pc-section]="'clearicon'" [attr.aria-hidden]="true">
                <ng-template *ngTemplateOutlet="clearIconTemplate || _clearIconTemplate"></ng-template>
            </span>
        </ng-container>
        <div class="p-multiselect-dropdown">
            <ng-container *ngIf="loading; else elseBlock">
                <ng-container *ngIf="loadingIconTemplate || _loadingIconTemplate">
                    <ng-container *ngTemplateOutlet="loadingIconTemplate || _loadingIconTemplate"></ng-container>
                </ng-container>
                <ng-container *ngIf="!loadingIconTemplate && !_loadingIconTemplate">
                    <span *ngIf="loadingIcon" [ngClass]="'p-multiselect-loading-icon pi-spin ' + loadingIcon" aria-hidden="true"></span>
                    <span *ngIf="!loadingIcon" [class]="'p-multiselect-loading-icon pi pi-spinner pi-spin'" aria-hidden="true"></span>
                </ng-container>
            </ng-container>
            <ng-template #elseBlock>
                <ng-container *ngIf="!dropdownIconTemplate && !_dropdownIconTemplate">
                    <span *ngIf="dropdownIcon" class="p-multiselect-dropdown-icon" [ngClass]="dropdownIcon" [attr.data-pc-section]="'triggericon'" [attr.aria-hidden]="true"></span>
                    <ChevronDownIcon *ngIf="!dropdownIcon" [styleClass]="'p-multiselect-dropdown-icon'" [attr.data-pc-section]="'triggericon'" [attr.aria-hidden]="true" />
                </ng-container>
                <span *ngIf="dropdownIconTemplate || _dropdownIconTemplate" class="p-multiselect-dropdown-icon" [attr.data-pc-section]="'triggericon'" [attr.aria-hidden]="true">
                    <ng-template *ngTemplateOutlet="dropdownIconTemplate || _dropdownIconTemplate"></ng-template>
                </span>
            </ng-template>
        </div>
        <p-overlay
            #overlay
            [(visible)]="overlayVisible"
            [options]="overlayOptions"
            [target]="'@parent'"
            [appendTo]="appendTo"
            [autoZIndex]="autoZIndex"
            [baseZIndex]="baseZIndex"
            [showTransitionOptions]="showTransitionOptions"
            [hideTransitionOptions]="hideTransitionOptions"
            (onAnimationStart)="onOverlayAnimationStart($event)"
            (onHide)="hide()"
        >
            <ng-template #content>
                <div [attr.id]="id + '_list'" [ngClass]="'p-multiselect-overlay p-component'" [ngStyle]="panelStyle" [class]="panelStyleClass">
                    <span
                        #firstHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onFirstHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    >
                    </span>
                    <ng-container *ngTemplateOutlet="headerTemplate || _headerTemplate"></ng-container>
                    <div class="p-multiselect-header" *ngIf="showHeader">
                        <ng-content select="p-header"></ng-content>
                        <ng-container *ngIf="filterTemplate || _filterTemplate; else builtInFilterElement">
                            <ng-container *ngTemplateOutlet="filterTemplate || _filterTemplate; context: { options: filterOptions }"></ng-container>
                        </ng-container>
                        <ng-template #builtInFilterElement>
                            <p-checkbox [ngModel]="allSelected()" [ariaLabel]="toggleAllAriaLabel" [binary]="true" (onChange)="onToggleAll($event)" *ngIf="showToggleAll && !selectionLimit" [variant]="variant" [disabled]="disabled" #headerCheckbox>
                                <ng-template #checkboxicon let-klass="class">
                                    <CheckIcon *ngIf="!headerCheckboxIconTemplate && !_headerCheckboxIconTemplate && allSelected()" [styleClass]="klass" [attr.data-pc-section]="'icon'" />
                                    <ng-template
                                        *ngTemplateOutlet="
                                            headerCheckboxIconTemplate || _headerCheckboxIconTemplate;
                                            context: {
                                                checked: allSelected(),
                                                partialSelected: partialSelected(),
                                                class: klass
                                            }
                                        "
                                    ></ng-template>
                                </ng-template>
                            </p-checkbox>

                            <div class="p-multiselect-filter-container" *ngIf="filter">
                                <p-iconfield>
                                    <input
                                        #filterInput
                                        pInputText
                                        [variant]="variant"
                                        type="text"
                                        [attr.autocomplete]="autocomplete"
                                        role="searchbox"
                                        [attr.aria-owns]="id + '_list'"
                                        [attr.aria-activedescendant]="focusedOptionId"
                                        [value]="_filterValue() || ''"
                                        (input)="onFilterInputChange($event)"
                                        (keydown)="onFilterKeyDown($event)"
                                        (click)="onInputClick($event)"
                                        (blur)="onFilterBlur($event)"
                                        class="p-multiselect-filter"
                                        [disabled]="disabled"
                                        [attr.placeholder]="filterPlaceHolder"
                                        [attr.aria-label]="ariaFilterLabel"
                                    />
                                    <p-inputicon>
                                        <SearchIcon [styleClass]="'p-multiselect-filter-icon'" *ngIf="!filterIconTemplate && !_filterIconTemplate" />
                                        <span *ngIf="filterIconTemplate || _filterIconTemplate" class="p-multiselect-filter-icon">
                                            <ng-template *ngTemplateOutlet="filterIconTemplate || _filterIconTemplate"></ng-template>
                                        </span>
                                    </p-inputicon>
                                </p-iconfield>
                            </div>
                        </ng-template>
                    </div>
                    <div class="p-multiselect-list-container" [style.max-height]="virtualScroll ? 'auto' : scrollHeight || 'auto'">
                        <p-scroller
                            *ngIf="virtualScroll"
                            #scroller
                            [items]="visibleOptions()"
                            [style]="{ height: scrollHeight }"
                            [itemSize]="virtualScrollItemSize || _itemSize"
                            [autoSize]="true"
                            [tabindex]="-1"
                            [lazy]="lazy"
                            (onLazyLoad)="onLazyLoad.emit($event)"
                            [options]="virtualScrollOptions"
                        >
                            <ng-template #content let-items let-scrollerOptions="options">
                                <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: items, options: scrollerOptions }"></ng-container>
                            </ng-template>
                            <ng-container *ngIf="loaderTemplate || _loaderTemplate">
                                <ng-template #loader let-scrollerOptions="options">
                                    <ng-container *ngTemplateOutlet="loaderTemplate || _loaderTemplate; context: { options: scrollerOptions }"></ng-container>
                                </ng-template>
                            </ng-container>
                        </p-scroller>
                        <ng-container *ngIf="!virtualScroll">
                            <ng-container *ngTemplateOutlet="buildInItems; context: { $implicit: visibleOptions(), options: {} }"></ng-container>
                        </ng-container>

                        <ng-template #buildInItems let-items let-scrollerOptions="options">
                            <ul #items class="p-multiselect-list" [ngClass]="scrollerOptions.contentStyleClass" [style]="scrollerOptions.contentStyle" role="listbox" aria-multiselectable="true" [attr.aria-label]="listLabel">
                                <ng-template ngFor let-option [ngForOf]="items" let-i="index">
                                    <ng-container *ngIf="isOptionGroup(option)">
                                        <li [attr.id]="id + '_' + getOptionIndex(i, scrollerOptions)" class="p-multiselect-option-group" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                            <span *ngIf="!groupTemplate">{{ getOptionGroupLabel(option.optionGroup) }}</span>
                                            <ng-container *ngTemplateOutlet="groupTemplate; context: { $implicit: option.optionGroup }"></ng-container>
                                        </li>
                                    </ng-container>
                                    <ng-container *ngIf="!isOptionGroup(option)">
                                        <p-multiselect-item
                                            [id]="id + '_' + getOptionIndex(i, scrollerOptions)"
                                            [option]="option"
                                            [selected]="isSelected(option)"
                                            [label]="getOptionLabel(option)"
                                            [disabled]="isOptionDisabled(option)"
                                            [template]="itemTemplate || _itemTemplate"
                                            [checkIconTemplate]="checkIconTemplate || _checkIconTemplate"
                                            [itemCheckboxIconTemplate]="itemCheckboxIconTemplate || _itemCheckboxIconTemplate"
                                            [itemSize]="scrollerOptions.itemSize"
                                            [focused]="focusedOptionIndex() === getOptionIndex(i, scrollerOptions)"
                                            [ariaPosInset]="getAriaPosInset(getOptionIndex(i, scrollerOptions))"
                                            [ariaSetSize]="ariaSetSize"
                                            [variant]="variant"
                                            [highlightOnSelect]="highlightOnSelect"
                                            (onClick)="onOptionSelect($event, false, getOptionIndex(i, scrollerOptions))"
                                            (onMouseEnter)="onOptionMouseEnter($event, getOptionIndex(i, scrollerOptions))"
                                        ></p-multiselect-item>
                                    </ng-container>
                                </ng-template>

                                <li *ngIf="hasFilter() && isEmpty()" class="p-multiselect-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyFilterTemplate && !_emptyFilterTemplate && !emptyTemplate && !_emptyTemplate) {
                                        {{ emptyFilterMessageLabel }}
                                    } @else {
                                        <ng-container *ngTemplateOutlet="emptyFilterTemplate || _emptyFilterTemplate || emptyTemplate || _emptyFilterTemplate"></ng-container>
                                    }
                                </li>
                                <li *ngIf="!hasFilter() && isEmpty()" class="p-multiselect-empty-message" [ngStyle]="{ height: scrollerOptions.itemSize + 'px' }" role="option">
                                    @if (!emptyTemplate && !_emptyTemplate) {
                                        {{ emptyMessageLabel }}
                                    } @else {
                                        <ng-container *ngTemplateOutlet="emptyTemplate || _emptyTemplate"></ng-container>
                                    }
                                </li>
                            </ul>
                        </ng-template>
                    </div>
                    <div *ngIf="footerFacet || footerTemplate || _footerTemplate">
                        <ng-content select="p-footer"></ng-content>
                        <ng-container *ngTemplateOutlet="footerTemplate || _footerTemplate"></ng-container>
                    </div>

                    <span
                        #lastHiddenFocusableEl
                        role="presentation"
                        class="p-hidden-accessible p-hidden-focusable"
                        [attr.tabindex]="0"
                        (focus)="onLastHiddenFocus($event)"
                        [attr.data-p-hidden-accessible]="true"
                        [attr.data-p-hidden-focusable]="true"
                    ></span>
                </div>
            </ng-template>
        </p-overlay>
    `,
          providers: [MULTISELECT_VALUE_ACCESSOR, MultiSelectStyle],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None,
          host: {
            "[attr.id]": "id",
            "[style]": "style",
            "(click)": "onContainerClick($event)",
            "[class.p-variant-filled]": 'variant === "filled" || config.inputVariant() === "filled" || config.inputStyle() === "filled" '
          }
        }]
      }],
      ctorParameters: () => [{
        type: NgZone
      }, {
        type: FilterService
      }, {
        type: OverlayService
      }],
      propDecorators: {
        id: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        panelStyle: [{
          type: Input
        }],
        panelStyleClass: [{
          type: Input
        }],
        inputId: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        fluid: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        readonly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        group: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        filter: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        filterPlaceHolder: [{
          type: Input
        }],
        filterLocale: [{
          type: Input
        }],
        overlayVisible: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        variant: [{
          type: Input
        }],
        appendTo: [{
          type: Input
        }],
        dataKey: [{
          type: Input
        }],
        name: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        displaySelectedLabel: [{
          type: Input
        }],
        maxSelectedLabels: [{
          type: Input
        }],
        selectionLimit: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        selectedItemsLabel: [{
          type: Input
        }],
        showToggleAll: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        emptyFilterMessage: [{
          type: Input
        }],
        emptyMessage: [{
          type: Input
        }],
        resetFilterOnHide: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        dropdownIcon: [{
          type: Input
        }],
        chipIcon: [{
          type: Input
        }],
        optionLabel: [{
          type: Input
        }],
        optionValue: [{
          type: Input
        }],
        optionDisabled: [{
          type: Input
        }],
        optionGroupLabel: [{
          type: Input
        }],
        optionGroupChildren: [{
          type: Input
        }],
        showHeader: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        filterBy: [{
          type: Input
        }],
        scrollHeight: [{
          type: Input
        }],
        lazy: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        virtualScroll: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        loading: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        virtualScrollItemSize: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        loadingIcon: [{
          type: Input
        }],
        virtualScrollOptions: [{
          type: Input
        }],
        overlayOptions: [{
          type: Input
        }],
        ariaFilterLabel: [{
          type: Input
        }],
        filterMatchMode: [{
          type: Input
        }],
        tooltip: [{
          type: Input
        }],
        tooltipPosition: [{
          type: Input
        }],
        tooltipPositionStyle: [{
          type: Input
        }],
        tooltipStyleClass: [{
          type: Input
        }],
        autofocusFilter: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        display: [{
          type: Input
        }],
        autocomplete: [{
          type: Input
        }],
        size: [{
          type: Input
        }],
        showClear: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autoZIndex: [{
          type: Input
        }],
        baseZIndex: [{
          type: Input
        }],
        showTransitionOptions: [{
          type: Input
        }],
        hideTransitionOptions: [{
          type: Input
        }],
        defaultLabel: [{
          type: Input
        }],
        placeholder: [{
          type: Input
        }],
        options: [{
          type: Input
        }],
        filterValue: [{
          type: Input
        }],
        itemSize: [{
          type: Input
        }],
        selectAll: [{
          type: Input
        }],
        focusOnHover: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        filterFields: [{
          type: Input
        }],
        selectOnFocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        autoOptionFocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        highlightOnSelect: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onChange: [{
          type: Output
        }],
        onFilter: [{
          type: Output
        }],
        onFocus: [{
          type: Output
        }],
        onBlur: [{
          type: Output
        }],
        onClick: [{
          type: Output
        }],
        onClear: [{
          type: Output
        }],
        onPanelShow: [{
          type: Output
        }],
        onPanelHide: [{
          type: Output
        }],
        onLazyLoad: [{
          type: Output
        }],
        onRemove: [{
          type: Output
        }],
        onSelectAllChange: [{
          type: Output
        }],
        overlayViewChild: [{
          type: ViewChild,
          args: ["overlay"]
        }],
        filterInputChild: [{
          type: ViewChild,
          args: ["filterInput"]
        }],
        focusInputViewChild: [{
          type: ViewChild,
          args: ["focusInput"]
        }],
        itemsViewChild: [{
          type: ViewChild,
          args: ["items"]
        }],
        scroller: [{
          type: ViewChild,
          args: ["scroller"]
        }],
        lastHiddenFocusableElementOnOverlay: [{
          type: ViewChild,
          args: ["lastHiddenFocusableEl"]
        }],
        firstHiddenFocusableElementOnOverlay: [{
          type: ViewChild,
          args: ["firstHiddenFocusableEl"]
        }],
        headerCheckboxViewChild: [{
          type: ViewChild,
          args: ["headerCheckbox"]
        }],
        footerFacet: [{
          type: ContentChild,
          args: [Footer]
        }],
        headerFacet: [{
          type: ContentChild,
          args: [Header]
        }],
        itemTemplate: [{
          type: ContentChild,
          args: ["item", {
            descendants: false
          }]
        }],
        groupTemplate: [{
          type: ContentChild,
          args: ["group", {
            descendants: false
          }]
        }],
        loaderTemplate: [{
          type: ContentChild,
          args: ["loader", {
            descendants: false
          }]
        }],
        headerTemplate: [{
          type: ContentChild,
          args: ["header", {
            descendants: false
          }]
        }],
        filterTemplate: [{
          type: ContentChild,
          args: ["filter", {
            descendants: false
          }]
        }],
        footerTemplate: [{
          type: ContentChild,
          args: ["footer", {
            descendants: false
          }]
        }],
        emptyFilterTemplate: [{
          type: ContentChild,
          args: ["emptyfilter", {
            descendants: false
          }]
        }],
        emptyTemplate: [{
          type: ContentChild,
          args: ["empty", {
            descendants: false
          }]
        }],
        selectedItemsTemplate: [{
          type: ContentChild,
          args: ["selecteditems", {
            descendants: false
          }]
        }],
        checkIconTemplate: [{
          type: ContentChild,
          args: ["checkicon", {
            descendants: false
          }]
        }],
        loadingIconTemplate: [{
          type: ContentChild,
          args: ["loadingicon", {
            descendants: false
          }]
        }],
        filterIconTemplate: [{
          type: ContentChild,
          args: ["filtericon", {
            descendants: false
          }]
        }],
        removeTokenIconTemplate: [{
          type: ContentChild,
          args: ["removetokenicon", {
            descendants: false
          }]
        }],
        chipIconTemplate: [{
          type: ContentChild,
          args: ["chipicon", {
            descendants: false
          }]
        }],
        clearIconTemplate: [{
          type: ContentChild,
          args: ["clearicon", {
            descendants: false
          }]
        }],
        dropdownIconTemplate: [{
          type: ContentChild,
          args: ["dropdownicon", {
            descendants: false
          }]
        }],
        itemCheckboxIconTemplate: [{
          type: ContentChild,
          args: ["itemcheckboxicon", {
            descendants: false
          }]
        }],
        headerCheckboxIconTemplate: [{
          type: ContentChild,
          args: ["headercheckboxicon", {
            descendants: false
          }]
        }],
        templates: [{
          type: ContentChildren,
          args: [PrimeTemplate]
        }],
        hostClasses: [{
          type: HostBinding,
          args: ["class"]
        }]
      }
    });
    MultiSelectModule = class _MultiSelectModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _MultiSelectModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _MultiSelectModule,
        imports: [MultiSelect, SharedModule],
        exports: [MultiSelect, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _MultiSelectModule,
        imports: [MultiSelect, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: MultiSelectModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [MultiSelect, SharedModule],
          exports: [MultiSelect, SharedModule]
        }]
      }]
    });
  }
});

// node_modules/primeng/fesm2022/primeng-inputswitch.mjs
var theme21, inlineStyles4, classes20, InputSwitchStyle, INPUTSWITCH_VALUE_ACCESSOR, InputSwitch, InputSwitchModule;
var init_primeng_inputswitch = __esm({
  "node_modules/primeng/fesm2022/primeng-inputswitch.mjs"() {
    "use strict";
    init_common();
    init_common();
    init_core();
    init_core();
    init_forms();
    init_primeng_api();
    init_primeng_autofocus();
    init_primeng_autofocus();
    init_primeng_basecomponent();
    init_primeng_base();
    theme21 = ({
      dt
    }) => `
.p-toggleswitch {
    display: inline-block;
    width: ${dt("toggleswitch.width")};
    height: ${dt("toggleswitch.height")};

}

.p-toggleswitch-input {
    cursor: pointer;
    appearance: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    opacity: 0;
    z-index: 1;
    outline: 0 none;
    border-radius: ${dt("toggleswitch.border.radius")};
}

.p-toggleswitch-slider {
    display: inline-block;
    cursor: pointer;
    width: 100%;
    height: 100%;
    border-width: ${dt("toggleswitch.border.width")};
    border-style: solid;
    border-color: ${dt("toggleswitch.border.color")};
    background: ${dt("toggleswitch.background")};
    transition: background ${dt("toggleswitch.transition.duration")}, color ${dt("toggleswitch.transition.duration")}, border-color ${dt("toggleswitch.transition.duration")}, outline-color ${dt("toggleswitch.transition.duration")}, box-shadow ${dt("toggleswitch.transition.duration")};
    border-radius: ${dt("toggleswitch.border.radius")};
    outline-color: transparent;
    box-shadow: ${dt("toggleswitch.shadow")};
}

.p-toggleswitch-slider:before {
    position: absolute;
    content: "";
    top: 50%;
    background: ${dt("toggleswitch.handle.background")};
    width: ${dt("toggleswitch.handle.size")};
    height: ${dt("toggleswitch.handle.size")};
    left: ${dt("toggleswitch.gap")};
    margin-top: calc(-1 * calc(${dt("toggleswitch.handle.size")} / 2));
    border-radius: ${dt("toggleswitch.handle.border.radius")};
    transition: background ${dt("toggleswitch.transition.duration")}, left ${dt("toggleswitch.slide.duration")};
}

.p-toggleswitch.p-toggleswitch-checked .p-toggleswitch-slider {
    background: ${dt("toggleswitch.checked.background")};
    border-color: ${dt("toggleswitch.checked.border.color")};
}

.p-toggleswitch.p-toggleswitch-checked .p-toggleswitch-slider:before {
    background: ${dt("toggleswitch.handle.checked.background")};
    left: calc(${dt("toggleswitch.width")} - calc(${dt("toggleswitch.handle.size")} + ${dt("toggleswitch.gap")}));
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover) .p-toggleswitch-slider {
    background: ${dt("toggleswitch.hover.background")};
    border-color: ${dt("toggleswitch.hover.border.color")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover) .p-toggleswitch-slider:before {
    background: ${dt("toggleswitch.handle.hover.background")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover).p-toggleswitch-checked .p-toggleswitch-slider {
    background: ${dt("toggleswitch.checked.hover.background")};
    border-color: ${dt("toggleswitch.checked.hover.border.color")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover).p-toggleswitch-checked .p-toggleswitch-slider:before {
    background: ${dt("toggleswitch.handle.checked.hover.background")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:focus-visible) .p-toggleswitch-slider {
    box-shadow: ${dt("toggleswitch.focus.ring.shadow")};
    outline: ${dt("toggleswitch.focus.ring.width")} ${dt("toggleswitch.focus.ring.style")} ${dt("toggleswitch.focus.ring.color")};
    outline-offset: ${dt("toggleswitch.focus.ring.offset")};
}

.p-toggleswitch.p-invalid > .p-toggleswitch-slider {
    border-color: ${dt("toggleswitch.invalid.border.color")};
}

.p-toggleswitch.p-disabled {
    opacity: 1;
}

.p-toggleswitch.p-disabled .p-toggleswitch-slider {
    background: ${dt("toggleswitch.disabled.background")};
}

.p-toggleswitch.p-disabled .p-toggleswitch-slider:before {
    background: ${dt("toggleswitch.handle.disabled.background")};
}
`;
    inlineStyles4 = {
      root: {
        position: "relative"
      }
    };
    classes20 = {
      root: ({
        instance
      }) => ({
        "p-toggleswitch p-component": true,
        "p-toggleswitch-checked": instance.checked(),
        "p-disabled": instance.disabled,
        "p-invalid": instance.invalid
      }),
      input: "p-toggleswitch-input",
      slider: "p-toggleswitch-slider"
    };
    InputSwitchStyle = class _InputSwitchStyle extends BaseStyle {
      name = "toggleswitch";
      theme = theme21;
      classes = classes20;
      inlineStyles = inlineStyles4;
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputSwitchStyle,
        deps: null,
        target: FactoryTarget.Injectable
      });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputSwitchStyle
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputSwitchStyle,
      decorators: [{
        type: Injectable
      }]
    });
    INPUTSWITCH_VALUE_ACCESSOR = {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => InputSwitch),
      multi: true
    };
    InputSwitch = class _InputSwitch extends BaseComponent {
      /**
       * Inline style of the component.
       * @group Props
       */
      style;
      /**
       * Style class of the component.
       * @group Props
       */
      styleClass;
      /**
       * Index of the element in tabbing order.
       * @group Props
       */
      tabindex;
      /**
       * Identifier of the input element.
       * @group Props
       */
      inputId;
      /**
       * Name of the input element.
       * @group Props
       */
      name;
      /**
       * When present, it specifies that the element should be disabled.
       * @group Props
       */
      disabled;
      /**
       * When present, it specifies that the component cannot be edited.
       * @group Props
       */
      readonly;
      /**
       * Value in checked state.
       * @group Props
       */
      trueValue = true;
      /**
       * Value in unchecked state.
       * @group Props
       */
      falseValue = false;
      /**
       * Used to define a string that autocomplete attribute the current element.
       * @group Props
       */
      ariaLabel;
      /**
       * Establishes relationships between the component and label(s) where its value should be one or more element IDs.
       * @group Props
       */
      ariaLabelledBy;
      /**
       * When present, it specifies that the component should automatically get focus on load.
       * @group Props
       */
      autofocus;
      /**
       * Callback to invoke when the on value change.
       * @param {InputSwitchChangeEvent} event - Custom change event.
       * @group Emits
       */
      onChange = new EventEmitter();
      input;
      modelValue = false;
      focused = false;
      onModelChange = () => {
      };
      onModelTouched = () => {
      };
      _componentStyle = inject(InputSwitchStyle);
      onClick(event2) {
        if (!this.disabled && !this.readonly) {
          this.modelValue = this.checked() ? this.falseValue : this.trueValue;
          this.onModelChange(this.modelValue);
          this.onChange.emit({
            originalEvent: event2,
            checked: this.modelValue
          });
          this.input.nativeElement.focus();
        }
      }
      onFocus() {
        this.focused = true;
      }
      onBlur() {
        this.focused = false;
        this.onModelTouched();
      }
      writeValue(value) {
        this.modelValue = value;
        this.cd.markForCheck();
      }
      registerOnChange(fn) {
        this.onModelChange = fn;
      }
      registerOnTouched(fn) {
        this.onModelTouched = fn;
      }
      setDisabledState(val) {
        this.disabled = val;
        this.cd.markForCheck();
      }
      checked() {
        return this.modelValue === this.trueValue;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputSwitch,
        deps: null,
        target: FactoryTarget.Component
      });
      static \u0275cmp = \u0275\u0275ngDeclareComponent({
        minVersion: "16.1.0",
        version: "19.2.10",
        type: _InputSwitch,
        isStandalone: true,
        selector: "p-inputSwitch, p-inputswitch",
        inputs: {
          style: "style",
          styleClass: "styleClass",
          tabindex: ["tabindex", "tabindex", numberAttribute],
          inputId: "inputId",
          name: "name",
          disabled: ["disabled", "disabled", booleanAttribute],
          readonly: ["readonly", "readonly", booleanAttribute],
          trueValue: "trueValue",
          falseValue: "falseValue",
          ariaLabel: "ariaLabel",
          ariaLabelledBy: "ariaLabelledBy",
          autofocus: ["autofocus", "autofocus", booleanAttribute]
        },
        outputs: {
          onChange: "onChange"
        },
        providers: [INPUTSWITCH_VALUE_ACCESSOR, InputSwitchStyle],
        viewQueries: [{
          propertyName: "input",
          first: true,
          predicate: ["input"],
          descendants: true
        }],
        usesInheritance: true,
        ngImport: core_exports,
        template: `
        <div [ngClass]="cx('root')" [ngStyle]="sx('root')" [ngStyle]="style" [class]="styleClass" (click)="onClick($event)" [attr.data-pc-name]="'inputswitch'" [attr.data-pc-section]="'root'">
            <div class="p-hidden-accessible" [attr.data-pc-section]="'hiddenInputWrapper'" [attr.data-p-hidden-accessible]="true">
                <input
                    #input
                    [attr.id]="inputId"
                    type="checkbox"
                    role="switch"
                    [ngClass]="cx('input')"
                    [checked]="checked()"
                    [disabled]="disabled"
                    [attr.aria-checked]="checked()"
                    [attr.aria-labelledby]="ariaLabelledBy"
                    [attr.aria-label]="ariaLabel"
                    [attr.name]="name"
                    [attr.tabindex]="tabindex"
                    (focus)="onFocus()"
                    (blur)="onBlur()"
                    [attr.data-pc-section]="'hiddenInput'"
                    [pAutoFocus]="autofocus"
                />
            </div>
            <span [ngClass]="cx('slider')" [attr.data-pc-section]="'slider'"></span>
        </div>
    `,
        isInline: true,
        dependencies: [{
          kind: "ngmodule",
          type: CommonModule
        }, {
          kind: "directive",
          type: NgClass,
          selector: "[ngClass]",
          inputs: ["class", "ngClass"]
        }, {
          kind: "directive",
          type: NgStyle,
          selector: "[ngStyle]",
          inputs: ["ngStyle"]
        }, {
          kind: "ngmodule",
          type: AutoFocusModule
        }, {
          kind: "directive",
          type: AutoFocus,
          selector: "[pAutoFocus]",
          inputs: ["autofocus", "pAutoFocus"]
        }, {
          kind: "ngmodule",
          type: SharedModule
        }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputSwitch,
      decorators: [{
        type: Component,
        args: [{
          selector: "p-inputSwitch, p-inputswitch",
          standalone: true,
          imports: [CommonModule, AutoFocusModule, SharedModule],
          template: `
        <div [ngClass]="cx('root')" [ngStyle]="sx('root')" [ngStyle]="style" [class]="styleClass" (click)="onClick($event)" [attr.data-pc-name]="'inputswitch'" [attr.data-pc-section]="'root'">
            <div class="p-hidden-accessible" [attr.data-pc-section]="'hiddenInputWrapper'" [attr.data-p-hidden-accessible]="true">
                <input
                    #input
                    [attr.id]="inputId"
                    type="checkbox"
                    role="switch"
                    [ngClass]="cx('input')"
                    [checked]="checked()"
                    [disabled]="disabled"
                    [attr.aria-checked]="checked()"
                    [attr.aria-labelledby]="ariaLabelledBy"
                    [attr.aria-label]="ariaLabel"
                    [attr.name]="name"
                    [attr.tabindex]="tabindex"
                    (focus)="onFocus()"
                    (blur)="onBlur()"
                    [attr.data-pc-section]="'hiddenInput'"
                    [pAutoFocus]="autofocus"
                />
            </div>
            <span [ngClass]="cx('slider')" [attr.data-pc-section]="'slider'"></span>
        </div>
    `,
          providers: [INPUTSWITCH_VALUE_ACCESSOR, InputSwitchStyle],
          changeDetection: ChangeDetectionStrategy.OnPush,
          encapsulation: ViewEncapsulation.None
        }]
      }],
      propDecorators: {
        style: [{
          type: Input
        }],
        styleClass: [{
          type: Input
        }],
        tabindex: [{
          type: Input,
          args: [{
            transform: numberAttribute
          }]
        }],
        inputId: [{
          type: Input
        }],
        name: [{
          type: Input
        }],
        disabled: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        readonly: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        trueValue: [{
          type: Input
        }],
        falseValue: [{
          type: Input
        }],
        ariaLabel: [{
          type: Input
        }],
        ariaLabelledBy: [{
          type: Input
        }],
        autofocus: [{
          type: Input,
          args: [{
            transform: booleanAttribute
          }]
        }],
        onChange: [{
          type: Output
        }],
        input: [{
          type: ViewChild,
          args: ["input"]
        }]
      }
    });
    InputSwitchModule = class _InputSwitchModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputSwitchModule,
        deps: [],
        target: FactoryTarget.NgModule
      });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({
        minVersion: "14.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputSwitchModule,
        imports: [InputSwitch, SharedModule],
        exports: [InputSwitch, SharedModule]
      });
      static \u0275inj = \u0275\u0275ngDeclareInjector({
        minVersion: "12.0.0",
        version: "19.2.10",
        ngImport: core_exports,
        type: _InputSwitchModule,
        imports: [InputSwitch, SharedModule, SharedModule]
      });
    };
    \u0275\u0275ngDeclareClassMetadata({
      minVersion: "12.0.0",
      version: "19.2.10",
      ngImport: core_exports,
      type: InputSwitchModule,
      decorators: [{
        type: NgModule,
        args: [{
          imports: [InputSwitch, SharedModule],
          exports: [InputSwitch, SharedModule]
        }]
      }]
    });
  }
});

// src/environments/environment.ts
var environment;
var init_environment = __esm({
  "src/environments/environment.ts"() {
    "use strict";
    environment = {
      production: false,
      apiUrl: "http://localhost:3001",
      frontendPort: 4200,
      frontendHost: "http://localhost:4200"
    };
  }
});

// src/app/services/mastercode.service.ts
var MasterCodeService;
var init_mastercode_service = __esm({
  "src/app/services/mastercode.service.ts"() {
    "use strict";
    init_tslib_es6();
    init_core();
    init_http();
    init_environment();
    MasterCodeService = class MasterCodeService2 {
      http;
      apiUrl = `${environment.apiUrl}/api/master_code`;
      constructor(http) {
        this.http = http;
      }
      // 🔄 Get all master records
      getMasters() {
        return this.http.get(this.apiUrl);
      }
      // ✅ Update status (Active/Inactive)
      updateMasterStatus(code, status) {
        return this.http.patch(`${this.apiUrl}/${code}/status`, { status });
      }
      // ✏️ Get a single master record by ID (for edit)
      getMasterById(code) {
        return this.http.get(`${this.apiUrl}/${code}`);
      }
      // 💾 Create a new master entry
      createMaster(data) {
        return this.http.post(this.apiUrl, data);
      }
      // 🔁 Update existing master entry
      updateMaster(code, data) {
        return this.http.put(`${this.apiUrl}/${code}`, data);
      }
      // ❌ Delete master entry
      deleteMaster(code) {
        return this.http.delete(`${this.apiUrl}/${code}`);
      }
      static ctorParameters = () => [
        { type: HttpClient }
      ];
    };
    MasterCodeService = __decorate([
      Injectable({ providedIn: "root" })
    ], MasterCodeService);
  }
});

// src/app/pages/masters/mastercode.ts
var MasterCodeComponent;
var init_mastercode = __esm({
  "src/app/pages/masters/mastercode.ts"() {
    "use strict";
    init_tslib_es6();
    init_core();
    init_forms();
    init_common();
    init_primeng_table();
    init_primeng_inputtext();
    init_primeng_button();
    init_primeng_dropdown();
    init_primeng_multiselect();
    init_primeng_inputswitch();
    init_primeng_toast();
    init_primeng_api();
    init_router();
    init_mastercode_service();
    init_primeng_iconfield();
    init_primeng_inputicon();
    MasterCodeComponent = class MasterCodeComponent2 {
      router;
      masterService;
      messageService;
      masters = [];
      activeCodes = [];
      statuses = [
        { label: "Active", value: "Active" },
        { label: "Inactive", value: "Inactive" }
      ];
      referenceTreeOptions = [
        { label: "User / Status", value: "User / Status" },
        { label: "User / Role", value: "User / Role" },
        { label: "User / Designation", value: "User / Designation" }
      ];
      constructor(router, masterService, messageService) {
        this.router = router;
        this.masterService = masterService;
        this.messageService = messageService;
      }
      ngOnInit() {
        this.refreshList();
      }
      refreshList() {
        this.masterService.getMasters().subscribe((res) => {
          this.masters = (res || []).map((item) => __spreadProps(__spreadValues({}, item), {
            isEditing: false,
            isNew: false
          }));
          this.activeCodes = this.masters.filter((c) => c.status === "Active");
        });
      }
      getActiveCodes() {
        return this.activeCodes;
      }
      addRow() {
        const newRow = {
          id: null,
          code: "",
          description: "",
          reference: "",
          status: "Active",
          isEditing: true,
          isNew: true
        };
        this.masters = [newRow, ...this.masters];
      }
      saveRow(master) {
        if (master.isNew) {
          const referenceValue = master.reference;
          const existingActive = this.masters.find((item) => item !== master && // Exclude the current new row from the check
          item.reference && item.status && item.status.trim().toLowerCase() === "active" && item.reference.trim().toLowerCase() === (referenceValue || "").trim().toLowerCase());
          if (existingActive) {
            this.messageService.add({ severity: "warn", summary: "Not Allowed", detail: "An active code for this reference already exists. Please deactivate it before creating a new one." });
            return;
          }
          this.masterService.createMaster({
            code: master.code,
            description: master.description,
            reference: referenceValue,
            status: master.status
          }).subscribe({
            next: (res) => {
              Object.assign(master, res, { isEditing: false, isNew: false });
              this.messageService.add({ severity: "success", summary: "Saved", detail: "Master saved successfully" });
              this.refreshList();
            },
            error: (err) => {
              console.error("Failed to save master", err);
              this.messageService.add({ severity: "error", summary: "Error", detail: "Save failed" });
            }
          });
        } else {
          const referenceValue = master.reference;
          this.masterService.updateMaster(master.code, {
            description: master.description,
            reference: referenceValue,
            status: master.status
          }).subscribe({
            next: () => {
              master.isEditing = false;
              this.messageService.add({ severity: "success", summary: "Updated", detail: "Master updated successfully" });
              this.refreshList();
            },
            error: (err) => {
              console.error("Failed to update master", err);
              this.messageService.add({ severity: "error", summary: "Error", detail: "Update failed" });
            }
          });
        }
      }
      editRow(master) {
        this.masters.forEach((m) => m.isEditing = false);
        master.isEditing = true;
        master.isNew = false;
      }
      deleteRow(master) {
        if (master.code && !master.isNew) {
          this.masterService.deleteMaster(master.code).subscribe({
            next: () => {
              this.masters = this.masters.filter((m) => m !== master);
              this.messageService.add({ severity: "success", summary: "Deleted", detail: "Master deleted" });
              this.refreshList();
            },
            error: (err) => {
              console.error("Failed to delete master", err);
              this.messageService.add({ severity: "error", summary: "Error", detail: "Delete failed" });
            }
          });
        } else {
          this.masters = this.masters.filter((m) => m !== master);
          this.refreshList();
        }
      }
      clear(table) {
        table.clear();
      }
      onGlobalFilter(table, event2) {
        const value = event2.target.value;
        table.filterGlobal(value, "contains");
      }
      static ctorParameters = () => [
        { type: Router },
        { type: MasterCodeService },
        { type: MessageService }
      ];
    };
    MasterCodeComponent = __decorate([
      Component({
        selector: "master-code",
        standalone: true,
        providers: [MessageService],
        imports: [
          CommonModule,
          FormsModule,
          TableModule,
          InputTextModule,
          ButtonModule,
          DropdownModule,
          MultiSelectModule,
          InputSwitchModule,
          ToastModule,
          IconFieldModule,
          InputIconModule
        ],
        template: `
    <p-toast></p-toast>
    <div class="card">
      <div class="font-semibold text-xl mb-4">Master Code</div>
      <p-table
        #dt
        [value]="masters"
        dataKey="code"
        [paginator]="true"
        [rows]="10"
        [rowsPerPageOptions]="[5, 10, 20, 50]"
        [showGridlines]="true"
        [rowHover]="true"
        [globalFilterFields]="['code', 'description', 'reference', 'status']"
        responsiveLayout="scroll"
      >
        <!-- \u{1F50D} Global Filter + Clear -->
        <ng-template pTemplate="caption">
          <div class="flex justify-between items-center flex-col sm:flex-row gap-2">
            <button pButton type="button" label="Add Master" icon="pi pi-plus" class="p-button" (click)="addRow()"></button>
            <button pButton label="Clear" class="p-button-outlined" icon="pi pi-filter-slash" (click)="clear(dt)"></button>
            <p-iconfield iconPosition="left" class="ml-auto">
              <p-inputicon>
                <i class="pi pi-search"></i>
              </p-inputicon>
              <input pInputText type="text" (input)="onGlobalFilter(dt, $event)" placeholder="Search keyword" />
            </p-iconfield>
          </div>
        </ng-template>
        <!-- \u{1F9FE} Table Headers with Filters -->
        <ng-template pTemplate="header">
          <tr>
            <th>
              <div class="flex justify-between items-center">
                Code
                <p-columnFilter type="text" field="code" display="menu" placeholder="Search by code"></p-columnFilter>
              </div>
            </th>
            <th>
              <div class="flex justify-between items-center">
                Description
                <p-columnFilter type="text" field="description" display="menu" placeholder="Search by description"></p-columnFilter>
              </div>
            </th>
            <th>
              <div class="flex justify-between items-center">
                Reference
                <p-columnFilter type="text" field="reference" display="menu" placeholder="Search by reference"></p-columnFilter>
              </div>
            </th>
            <th>
              <div class="flex justify-between items-center">
                Status
                <p-columnFilter field="status" matchMode="equals" display="menu">
                  <ng-template #filter let-value let-filter="filterCallback">
                    <p-dropdown
                      [ngModel]="value"
                      [options]="statuses"
                      (onChange)="filter($event.value)"
                      placeholder="Any"
                      styleClass="w-full"
                      optionLabel="label"
                    >
                      <ng-template let-option pTemplate="item">
                        <span class="font-semibold text-sm">{{ option.label }}</span>
                      </ng-template>
                    </p-dropdown>
                  </ng-template>
                </p-columnFilter>
              </div>
            </th>
            <th style="min-width: 80px;">Action</th>
          </tr>
        </ng-template>
        <!-- \u{1F464} Table Body -->
        <ng-template pTemplate="body" let-master let-rowIndex="rowIndex">
          <tr>
            <td>
              <ng-container *ngIf="master.isNew; else codeText">
                <input pInputText [(ngModel)]="master.code" />
              </ng-container>
              <ng-template #codeText>{{ master.code }}</ng-template>
            </td>
            <td>
              <ng-container *ngIf="master.isNew || master.isEditing; else descText">
                <input pInputText [(ngModel)]="master.description" />
              </ng-container>
              <ng-template #descText>{{ master.description }}</ng-template>
            </td>
            <td>
              <ng-container *ngIf="master.isNew || master.isEditing; else refText">
                <p-multiselect
                  [options]="referenceTreeOptions"
                  [(ngModel)]="master.reference"
                  placeholder="Select Reference"
                  optionLabel="label"
                  optionValue="value"
                  filter
                  [style]="{ width: '100%' }"
                  appendTo="body"
                ></p-multiselect>
              </ng-container>
              <ng-template #refText>{{ master.reference }}</ng-template>
            </td>
            <td>
              <ng-container *ngIf="master.isEditing || master.isNew; else statusText">
                <p-dropdown
                  [options]="statuses"
                  [(ngModel)]="master.status"
                  optionLabel="label"
                  optionValue="value"
                  placeholder="Select Status"
                  appendTo="body"
                ></p-dropdown>
              </ng-container>
              <ng-template #statusText>
                <span
                    class="text-sm font-semibold px-3 py-1 rounded-full"
                    [ngClass]="{
                      'text-green-700 bg-green-100': master.status === 'Active',
                      'text-red-700 bg-red-100': master.status === 'Inactive',
                    }"
                  >
                    {{ master.status }}
                  </span>

              </ng-template>
            </td>
            <td>
              <div class="flex items-center space-x-[8px]">
                <button
                  pButton
                  icon="pi pi-pencil"
                  class="p-button-sm"
                  (click)="editRow(master)"
                  title="Edit"
                  *ngIf="!master.isEditing && !master.isNew"
                ></button>
                <button
                  pButton
                  icon="pi pi-check"
                  class="p-button-sm"
                  (click)="saveRow(master)"
                  title="Save"
                  *ngIf="master.isEditing || master.isNew"
                ></button>
                <button
                *ngIf="master.isNew"
                  pButton
                  icon="pi pi-trash"
                  class="p-button-sm"
                  severity="danger"
                  (click)="deleteRow(master)"
                  title="Delete"
                ></button>
              </div>
            </td>
          </tr>
        </ng-template>
        <!-- \u{1F4CA} Total Masters Count -->
        <ng-template pTemplate="paginatorleft" let-state>
          <div class="text-sm text-gray-600">
            Total Masters: {{ state.totalRecords }}
          </div>
        </ng-template>
      </p-table>
    </div>
  `
      })
    ], MasterCodeComponent);
  }
});

// src/app/test/mastercode.component.spec.ts
var require_mastercode_component_spec = __commonJS({
  "src/app/test/mastercode.component.spec.ts"(exports) {
    init_testing();
    init_mastercode();
    init_mastercode_service();
    init_primeng_api();
    init_esm();
    init_router();
    init_primeng_toast();
    describe("MasterCodeComponent", () => {
      let component;
      let fixture;
      let mockService;
      const mockMasters = [
        { code: "A1", description: "Test A1", reference: "User / Role", status: "Active" },
        { code: "B1", description: "Test B1", reference: "User / Designation", status: "Inactive" }
      ];
      beforeEach(() => __async(null, null, function* () {
        mockService = jasmine.createSpyObj("MasterCodeService", [
          "getMasters",
          "createMaster",
          "updateMaster",
          "deleteMaster"
        ]);
        yield TestBed.configureTestingModule({
          imports: [MasterCodeComponent, ToastModule],
          providers: [
            { provide: MasterCodeService, useValue: mockService },
            MessageService,
            { provide: Router, useValue: {} }
          ]
        }).compileComponents();
        fixture = TestBed.createComponent(MasterCodeComponent);
        component = fixture.componentInstance;
      }));
      it("should create component", () => {
        expect(component).toBeTruthy();
      });
      it("should load masters on init", fakeAsync(() => {
        mockService.getMasters.and.returnValue(of(mockMasters));
        fixture.detectChanges();
        tick();
        expect(component.masters.length).toBe(2);
        expect(component.activeCodes.length).toBe(1);
      }));
      it("should add a new row", () => {
        component.addRow();
        expect(component.masters[0].isNew).toBeTrue();
        expect(component.masters[0].isEditing).toBeTrue();
      });
      it("should save a new master", fakeAsync(() => {
        const newMaster = {
          code: "C1",
          description: "New Entry",
          reference: "User / Role",
          status: "Active",
          isNew: true,
          isEditing: true
        };
        component.masters = [newMaster];
        mockService.createMaster.and.returnValue(of(__spreadProps(__spreadValues({}, newMaster), { isNew: false, isEditing: false })));
        component.saveRow(newMaster);
        tick();
        expect(mockService.createMaster).toHaveBeenCalledWith({
          code: "C1",
          description: "New Entry",
          reference: "User / Role",
          status: "Active"
        });
        expect(newMaster.isNew).toBeFalse();
      }));
      it("should warn if active code for same reference already exists", () => {
        component.masters = [
          { code: "X", reference: "User / Status", status: "Active", isNew: false },
          {
            code: "Y",
            reference: "User / Status",
            status: "Active",
            isNew: true,
            isEditing: true
          }
        ];
        const addSpy = spyOn(component["messageService"], "add");
        component.saveRow(component.masters[1]);
        expect(addSpy).toHaveBeenCalledWith(jasmine.objectContaining({
          severity: "warn",
          summary: "Not Allowed"
        }));
      });
      it("should update an existing master", fakeAsync(() => {
        const existing = {
          code: "A1",
          description: "Updated Desc",
          reference: "User / Role",
          status: "Inactive",
          isEditing: true,
          isNew: false
        };
        mockService.updateMaster.and.returnValue(of(existing));
        component.saveRow(existing);
        tick();
        expect(mockService.updateMaster).toHaveBeenCalledWith("A1", {
          description: "Updated Desc",
          reference: "User / Role",
          status: "Inactive"
        });
        expect(existing.isEditing).toBeFalse();
      }));
      it("should delete a master", fakeAsync(() => {
        const toDelete = { code: "A1", isNew: false };
        component.masters = [toDelete];
        mockService.deleteMaster.and.returnValue(of({}));
        component.deleteRow(toDelete);
        tick();
        expect(mockService.deleteMaster).toHaveBeenCalledWith("A1");
      }));
      it("should remove unsaved row on delete", () => {
        const newRow = { code: "", isNew: true };
        component.masters = [newRow];
        component.deleteRow(newRow);
        expect(component.masters.length).toBe(0);
      });
    });
  }
});
export default require_mastercode_component_spec();
/*! Bundled license information:

@angular/forms/fesm2022/forms.mjs:
  (**
   * @license Angular v19.2.14
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)
*/
//# sourceMappingURL=spec-mastercode.component.spec.js.map
